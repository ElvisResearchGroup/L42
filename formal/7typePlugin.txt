In this file we define the typing constrants for some of the plugins.
Summary:
Typing is ok if the required native kinds are there OR they are fully abstract
 - full consistency requires the required native kinds to be there
 - It is not required for well formedness consistency checks; 
     the ones happenings for private nesteds and closed classes.
 - J inside Close does not require it either
 - when generating java, it checks, but not on the AnyKind/AnyNativeKind
_______
#define typePluginK(p;MWT)
  checks if the method is ok as a native constructor for p.top
_______
#define typePlugin(typed?;p;MWT)    typePlugin(typed?;p;MWT;balCurly)
* typePlugin(typed?;p;MWT)=typePlugin(typed?;p;MWT;MWT.nativeUrl)

* typePlugin(typed?;p;MWT;balCurly)
    balcurly in {.. some native trusted operation..}
    forall T in MWT.MH, either:
      T may be constrained to be of another trusted nativeKind.
      T is all abstract and typed?=typed 
    
* typePlugin(typed?;p;MWT;balCurly)//the implemented version is more relaxed. CacheLazy can be applied on read in some cases
    balCurly in {cacheLazy,cacheEager}
    MWT.mdf in {imm,class}
    MWT.T.mdf in {imm,class}
    MWT.pars=empty
    //Note: we allow exceptions
    MWT.s not of form #$_(_)//is sufficient since bridges must be mut/lent

* typePlugin(typed?;p;MWT;cacheNow)
    MHs={MWT.MH| MWT in p(This0).MWTs, MWT.e?=empty}
    MWT.mdf=read
    MWT.T.mdf in {imm,class}
    MWT.pars=empty
    MWT.exceptions=empty
    //exceptions empty, otherwise when called after clearCache could be try-catched
    MWT.s not of form #$_(_)//is sufficient since bridges must be mut/lent
    forall ctx such that MWT.e=ctx[this],exists ctx' such that
      ctx=ctx'[[].m::0()] and immOrCapsule(MHs,m::0)
    clearCacheGood(p(This0),MHs)
//Note:we can not just use a read invariant method with no constraints, because we could have
//this.beer().see(this); return !this.isEmpty() and now beer see a possibly broken this. 

* typePlugin(typed?;p;MWT;forkJoin) = forkJoin(p(This0), MWT)    
_______
#define immOrCapsule(MHs,m)    clearCacheGood(L,MHs)
* immOrCapsule(MHs,#sx::0)
    fieldTs(MHs, x, mut).mdfs={imm} //Note: here using mut or read is the same
* immOrCapsule(p,#sx::0)
    fieldTs(MHs, x, mut).mdfs={capsule}

* clearCacheGood(L,MHs)  
    L.Info is closed state, with zero
    forall MWT in L.MWTs:
      if isCapsuleMutator(MWT,MHs) then validCapsuleMutator(MWT,MHs)
_______
#define isCapsuleMutator(MWT,MHs)    validCapsuleMutator(MWT,MHs)
* isCapsuleMutator(MWT,MHs)
    MWT.mdf in {mut,lent}
    this.#sx::0() inside MWT.e
    fieldTs(MHs,x,mut).mdfs={capsule}
    either mdf method mut P #sx::0() in MHs
      or  mdf method lent P #sx::0() in MHs

* validCapsuleMutator(MWT,MHs)
    MWT.exceptions=empty
    MWT.T.mdf notin {mut,lent,fwd mut}
    MWT.pars.mdfs notin {read,lent,mut}
    MWT.e=ctx[this]
    not this inside ctx[void]//only one occurence of this
    //NOTE: if the capsule exposers was to return lent 
    //then it would be MWT.T.mdf !=lent, but
    //now capsule exposers only return mut.
    
_______
#define forkJoin(L, MWT)    okE(G,e,L)    okEMut(G,e)    clearOn(L,s)= x::0
* forkJoin(L, MWT) holds iff:
    MWT.e =(D1..Dn e)
    MWT.exceptions=empty
    either forall i in 1..n okE(MWT.G,Di.e)
    or forall i in 1..n\i okEMut(MWT.G,Di.e)
    forall i in 1..n, FV(Di.e) disjoint dom(D1..Dn)
    forall ij in 1..n where
        i!=j,
        Di.e=ctx[this.m(x1=e1..xn=en)],
        Dj.e=ctx'[this.m'(x'1=e'1..x'k=e'n)]
        s=clearOn(L,m(x1..xn))
        s'=clearOn(L,m'(x'1..x'k))
      we have s!=s'

* okE(G,e,L)
    recursively propagates on the structure of 'e', but
* okE(G,x,L) holds iff 
    either G(x) undefined
    or G(x).mdf in {imm,capsule,class}
    or G(x).mdf=read and G(this).mdf in {imm,capsule,class,read}
* okE(G,this.m(x1=e1..xn=en),L) holds iff
    okE(G,e1,L)..okE(G,en,L) holds
    either G(this).mdf in {imm,capsule,class,read}
    or G(this).mdf in {mut,lent} 
      and clearOn(L,m(x1..xn)) is defined

* okEMut(G,e)
    recursively propagates on the structure of 'e', but
* okEMut(G,x) holds iff 
    either G(x) undefined
    or G(x).mdf in {imm,capsule,class}

* clearOn(L,s)= x::0
    L(s)= MH=native{...clear..} ctx[this.#?x::0()]
    //the field name, if any, that selector s is a clear method for.