Motivation for the current design: since A.B,A.C may still be in need of being resolved,
Consider the  following:
  Res={method A.B foo()} + {method A.C foo()}
  A=Something.foo()
What should Res be?  {method A.B foo()} or {method A.C foo()}?
Both solution are ok w.r.t. meta level soundness.
But if we swap the line, then we would have either A.B>A.C or vice versa (or error)
thus swapping the line may change the result of the sum, and I do not like that.
Thus,we do not even look in A.B or A.C; and if a method is already beating another type, then it is
ok to chose the more refined version. But only using this local reasoning inside the bubble.

Note: interfaces can watch if they have private nested classes that are watching.
Note: interfaces can be watched if they have private nested classes that are watched.

PLUS::=PLUS[p;C;topLeft;topRight;Cs;Cs1->Pz1..Czn->Pzn]
iMWT::=interface?MWT
_______
#define p;C|- CORE.L1 + CORE.L2 = CORE.L3    extraPz(L,Csz) = Pz
* p;C|- L1 + L2 = L  //note: implicitly requires well formedness of the resulting L
    Cs1->Csz1 .. Csn->Cszn =transitiveMap(L1,L2)
    forall Cs in allHiddenSupertypes(L1): L2(Cs)>L1(Cs) does not hold
    forall Cs in allHiddenSupertypes(L2): L1(Cs)>L2(Cs) does not hold
    Pzi = extraPz(L1,Cszi),extraPz(L2,Cszi) //a set, thus avoids duplicates
    PLUS = PLUS[p;C;topLeft=L1;topRight=L2;Cs1->Pz1 .. Csn->Pzn]
    L = L1 PLUS L2

* This0.Csi in extraPz(L,Cs1..Csn)
* P in extraPz(L,Cs1..Csn) if P in extraPz(L,Csi) 
* This(k-n).Cs in extraPz(L,C1..Cn) //thus is empty if L(Cs) is undefined
    Thisk.Cs in L(C1..Cn).Ts.Ps
    k>n //not k>=n, thus k-n>=1
_______
#define singleMap(L1,L2)=Cs->Csz    transitiveMap(L1,L2)=Cs->Csz
* Cs' in singleMap(L1,L2)(Cs)
    Cs and Cs' has no unique n
    {1,2}={i,j}
    Cs in dom(Li)
    This0.Cs' in Li(Cs).Ts.Ps[from Cs;{}]
    Lj(Cs')>Li(Cs')
* Cs" in singleMap(L1,L2)(Cs)
    Cs' in singleMap(L1,L2)(Cs)
    This0.Cs" in L1(Cs').Ts.Ps[from Cs;{}] U L2(Cs').Ts.Ps[from Cs;{}]

* Cs' in transitiveMap(L1,L2)(Cs)
    Cs' in singleMap(L1,L2)(Cs)
* Cs" in transitiveMap(L1,L2)(Cs)
    Cs' in transitiveMap(L1,L2)(Cs)
    Cs" in singleMap(L1,L2)(Cs')
_______
#define Cs\Cs'=P// make Cs' as it should be when minimized into Cs
* Cs.C1..Cn\Cs = Thisn
* Cs\Cs.C1..Cn = This0.C1..Cn
* Cs.C1..Cn\Cs.C'1..C'k = Thisn.C'1..C'k
    C1!=C'1 
_______
#define CORE.L1 PLUS CORE.L2 = CORE.L3    Ts1+Ts2=Ts3
* L1 PLUS L2 = L3
  PLUS.map(PLUS.Cs)=Cs1..Csn //empty if map undefined for Cs
  Li={Hi MWTsi NCsi Doci Infoi}
  H3=(H1 PLUS H2) H1.Ts + H2.Ts + PLUS.Cs/Cs1+..+PLUS.Cs/Csn 
  LDoms=empty if L1.interface?=L2.interface?
  LDoms={LDom | i in {1,2}, Li.interface?=empty LDom in dom(Li) and LDom have uniqueNum} otherwise//private domain of the non interface Li
  iMWTs=implemented(PLUS.topLeft,PLUS.Cs)[MWTs1\LDoms]
    U implemented(PLUS.topRight,PLUS.Cs)[MWTs2\LDoms]
    U MWTs1 U MWTs'1 U..U MWTsn U MWTs'n
  p=PLUS.p.push(PLUS.C,PLUS.topLeft).navigate(Cs) or PLUS.p.push(PLUS.C,PLUS.topRight).navigate(Cs)
  Cs=C1..Ck
  MWTsi=PLUS.topLeft(Csn).MWTs[from p.minimize(Thisk.Csn);p]//and removing all the docs
  MWTs'i=PLUS.topRight(Csn).MWTs[from p.minimize(Thisk.Csn);p]//and removing all the docs
  MWTs3=PLUS(iMWTs)
  NCs3=NCs1\LDoms PLUS NCs2\LDoms
  Doc3=Doc1,Doc2
  Info=Info1+Info2 but if one header is made interface the watched and the coherentDep from that side are discarded
  Info3=Info[refined+=dom((iMWTs3..iMWTsn).MWTs) typeDep+=Ps]
  Ps=paths(PLUS.topLeft(Cs1),..,PLUS.topLeft(Csn))[from p.minimize(Thisk.Csn);p],
       paths(PLUS.topRight(Cs1),..,PLUS.topEight(Csn))[from p.minimize(Thisk.Csn);p]

* Info1+Info2 =
    just the sum of all the members without repetitions keeping the order from the left one,
    but if there is a nativeKind, then it must be the same on both side,
    and nativePars also need to be the same

*  Ts1 + Ts2= Ts1,Ts2\Ts1 //using T.P for set minus removal
_______
#define NCs1 PLUS NCs2 = NCs3    PLUS(L)=L'    paths(L)=Ps    PLUS(L,NCs)=NCs'
* (Docs C=L NCs1) PLUS NCs2 = Docs C=PLUS[Cs=PLUS.Cs,C](PLUS.topLeft,L) (NCs1 PLUS NCs2)
    C not in dom(NCs2)
* empty PLUS NC1..NCn =NC1'..NCn' 
    NCi'[L=PLUS[Cs=PLUS.Cs,NCi.C](PLUS.topRight,NCi.L)]
* Docs1 C=L1 NCs1 PLUS NCs Docs2 C=L2 NCs2 = Docs1,Docs2 C=L1 PLUS[Cs=PLUS.Cs,C] L2 (NCs1 PLUS NCs NCs2)

* PLUS(L0,L) = L
    PLUS.Cs notin dom(PLUS.map)
* PLUS(L0,L) = L1[info=info0]
    PLUS.map(PLUS.Cs)=Cs1..Csn
    p=either PLUS.p.push(PLUS.C,PLUS.topLeft).navigate(Cs) or PLUS.p.push(PLUS.C,PLUS.topRight).navigate(Cs)
    //at least one of the two is defined, and they would both from identically 
    Cs=C1..Ck
    Ps=paths(PLUS.topLeft(Cs1),..,PLUS.topLeft(Csn))[from p.minimize(Thisk.Csn);p],
         paths(PLUS.topRight(Cs1),..,PLUS.topEight(Csn))[from p.minimize(Thisk.Csn);p]
    Ts=L.Ts+PLUS.Cs\Cs1+..+PLUS.Cs\Csn
    iMWTs=implemented(L0,PLUS.Cs)[L.MWTs] U MWTs1 U MWTs'1 U..U MWTsn U MWTs'n
    MWTsi=PLUS.topLeft(Csn).MWTs[from p.minimize(Thisk.Csn);p]//and removing all the docs
    MWTs'i=PLUS.topRight(Csn).MWTs[from p.minimize(Thisk.Csn);p]//and removing all the docs
    L1=L[Ts=Ts,MWTs=PLUS(iMWTs),NCs=PLUS(L0,L.NCs)]
    info0=L0.info[typeDep+=Ps, refined+=dom(L0.mwts)/dom(L.mwts)]
* P in paths(L) if P in L.Ts.Ps
* P in paths(L) if P in (T0..Tn,Ts).Ps and mdf method T0 m(T1 x1..Tn xn)[Ts] in L//and docs
//TODO: what happens for interfaces with both private and public methods?

* PLUS(L0,C1=L1 .. Cn=Ln) = 
    C1 = PLUS[Cs=PLUS.Cs,C1](L0,L1) .. Cn = PLUS[Cs=PLUS.Cs,Cn](L0,Ln)
    _______
#define interface?[MWTs]=iMWTs
* interface?[MWT1..MWTn] = interface? MWT1 .. interface? MWTn
_______
#define PLUS(iMWTs) = MWTs3
* PLUS(interface? MWT, iMWTs)= MWT PLUS(iMWTs)
    MWT.s not in dom(iMWTs2.MWTs)
* PLUS(iMWT1, iMWTs1, iMWT2, iMWTs2)= PLUS(iMWT, iMWTs1, iMWTs2)
    iMWT1.s=iMWT2.s
    iMWT=iMWT1 PLUS iMWT2
_______
#define interface?1 MWT1 PLUS interface?2 MWT2 = interface?3 MWT3
* interface?1 MWT1 PLUS interface?2 MWT2 = {interface?1,interface?2} MWT1[accDocs MWT2]
    MWT1==MWT2 //except docs
    MWT1.e?=MWT2.e?=empty
* interface?1 MWT1 PLUS interface?2 MWT2 =interface?i MWTi[accDocs MWTj]//assert {interface?1,interface?2}=interface?1
    {i,j}={1,2}
    MWTj.e?=empty//implemented can not lose
    either MWTi.MH==MWTj.MH //except docs
    or interface?j=empty and loseSafeUnique(PLUS.topLeft,PLUS.topRight,Cs,MWTi,MWTj)//interface can not lose
_______
#define PLUS.loseSafeUnique(iMWT,MH)    loseSafe(L,Cs,MWT,MH)    
* PLUS.loseSafeUnique(iMWT,MH)
    loseSafe(PLUS.topLeft,PLUS.Cs,iMWT.S,MH) or loseSafe(PLUS.topRight,iMWT.S,MH)
    iMWT.e?!=empty or iMWT.interface?!=empty//implemented or interface can not lose
* PLUS.loseSafeUnique(iMWT,MH)
    loseSafe(PLUS.topLeft,PLUS.Cs,iMWT.S,MH) or PLUS.loseSafe(PLUS.topRight,iMWT.S,MH)
    iMWT.e?=empty and iMWT.interface?=empty
    not PLUS.loseSafe(PLUS.topLeft,MH.S,iMWT.MH)
    not PLUS.loseSafe(PLUS.topRight,MH.S,iMWT.MH)
    
* PLUS.loseSafe(L,S,MH)
    S in L(PLUS.Cs).Info.refined,
    P in L(PLUS.Cs).Ts.Ps
    p=PLUS.p.push(PLUS.C,L).navigate(PLUS.Cs)
    L'=p(P)
    L'(S).MH[from P;p]==MH //exept docs
_______
#define allWatched(L) = Csz
* Cs in allWatched(L) if Cs in L(Cs').Info.watched[from This0.Cs';{}] and Cs' not of form _._::n._
_______
#define allRequiredCoherent(L) = Csz
* Cs in allRequiredCoherent(L) if 
    Cs in L(Cs').Info.coherentDep[from This0.Cs';{}] U L(Cs').Info.metaCoherentDep[from This0.Cs';{}] 
    and Cs' not of form _._::n._
_______
#define allHiddenSupertypes(L) = Csz
* Cs in allHiddenSupertypes(L) if Cs in L(Cs').Info.hiddenSupertypes[from This0.Cs';{}] and Cs' not of form _._::n._
_______
#define interface?1 PLUS interface?2 = interface?3
* empty PLUS empty = empty
    either PLUS.topLeft(PLUS.Cs).Info.closed undefined
    or PLUS.topRight(PLUS.Cs).Info.closed undefined
* interface PLUS interface = interface
    PLUS.topLeft(PLUS.Cs).Info.closed undefined
    PLUS.topRight(PLUS.Cs).Info.closed undefined
* empty PLUS interface=interface
    PLUS.Cs notin allRequiredCoherent(PLUS.topLeft)
    PLUS.Cs notin allWatched(PLUS.topLeft)
    openImplements(PLUS.p.push(PLUS.cOut,topLeft).navigate(PLUS.Cs))
    forall MWT in PLUS.topLeft(PLUS.Cs).MWTs://all public methods are abstract
      if MWT.s not of form _::n(_) then MWT.e?=empty
    //no public impl methods (thus since not watched, privates can be trashed)
* interface PLUS empty=interface//same but reversed
    PLUS.Cs notin allRequiredCoherent(PLUS.topRight)
    PLUS.Cs notin allWatched(PLUS.topRight)
    openImplements(PLUS.p.push(PLUS.cOut,topRight).navigate(PLUS.Cs))
    forall MWT in PLUS.topRight(PLUS.Cs).MWTs: if MWT.s not of form _::n(_) then MWT.e?=empty
* openImplements(p)//also used by Rename 
    forall P in p(This0).Ts.Ps
      P do not have unique numbers
      p(P).Info.closed = undefined //thus, the interface exists as CORE.L and is not closed
_______ 
#define L1 > L2    implemented(L,Cs)=interface?
* L1 > L2
  L2 is interface
  either L1.Ts\L2.Ts!=empty
  or dom(L1.MWTs)\dom(L2.MWTs)!=empty
  
* implemented(L,Cs)=empty //all public Cs' do not implement Cs
    forall Cs' in dom(L) where Cs' not of form _._::n._:
      This0.Cs notin L(Cs').Ts.Ps[from This0.Cs';{}]
      This0.Cs notin L(Cs').Info.hiddenSupertypes[from This0.Cs';{}]
* implemented(L,Cs)=interface otherwise

NOTE: is irrelevant to watch or not interface methods
 -An interrface must be watched if the private nesteds are used
 -Irrelevant if watched or not because private method are used, since interfaces can not be made abstract anyway