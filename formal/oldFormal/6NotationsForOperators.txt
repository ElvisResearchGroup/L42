______
Define P + n = P'
  Thisk.Cs + n = This(k+n).Cs
  Otherwise
  P + n = P

  ==========================================================================================

Define L[remove Csz] = L' // Remove the nested class denoted by Csz from L
---------------------------------------------
L[remove Csz] = L[remove Csz in empty]
  empty not in Csz // Since it makes no sense to remove L from itself...

auxilary L[remove_Cs Csz] = L0 // Remove the nested classes in Csz that are also in Cs, from L

{interface? implements Pz mwtz ncz}[remove_Cs Csz] = // Just remove the nested classes we don't want
  {interface? implements Pz mwtz ncz[remove_Cs Csz]}
  where empty not in Csz

(C:L, ncz)[remove_Cs Cs.C,Csz] = ncz[remove_Cs Csz] // C:L is on the list for removal
(C:L, ncz)[remove_Cs Csz] = C:(L[remove_Cs.C Csz]), ncz[remove_Cs Csz] // Propagate to member
  Cs.C not in Csz // C:L is not listed for removal
empty[remove_Cs Csz] = empty // Base Case
----------------------------------------------

p|- Ts->T; Pz <= Ts'->T';Pz': // Method type subtyping
  p|- T <= T'
  p|- Ts' <= Ts
  forall P in Pz: exists P' in Pz': p|- P <= P'