reuse L42.is/AdamTowel02
CacheAdamTowel02:Load.cacheTowel()
CheckEq:{
  class method Void (Library that, S expected) (
    s=Location.Lib(that).toS()
    given=s.replace(S" " into:S"").replace(S.nl() into:S"")
    Debug.test(given, expected:expected)
    )
  }
  
Ext:{method S foo() exception S, Library}
IsaacExample:{
  l1={ Blah:{} A:{method Blah foo() exception Blah, Num, S}}
  l2=Refactor2.redirect(path:\"A" into: Ext)<><l1
  catch exception Refactor2.MethodClash x (
    Debug(S.nl()++S.nl()++S.nl())
    Debug(x)
    Debug(S.nl()++S.nl()++S.nl())
    return ExitCode.normal()
    )
  error X"should have failed"
  return ExitCode.normal()
  }
StupidSum:{
    D: Refactor2.compose({ method This1.D m()}, and: { method This2.StupidSum.D m()})
    C:{  D: Refactor2.compose({method This2.C m()} and: {method This1 m()}) }
    C2:Refactor2.compose({  D: Refactor2.compose({method This2.C2 m()} and: {method This1 m()}) } and: {})
    //E: Refactor2.redirect(path:\"A" into: StupidSum)<><{A: {}}
    //E2: Refactor2.redirect(path:\"A" into: E2)<><{A: {B:{}} B:{}}
    }
    
Main: {
  Debug("new Version");
  l1={A:{method This m()}}
  l2={A:{method This1.A m()}}
  CheckEq(l1, expected:S"{A:{methodThis0m()}}")
  CheckEq(l2, expected:S"{A:{methodThis1.Am()}}")
  l3=Use[l1]<><l2
  CheckEq(l3, expected:S"{A:{methodThis0m()}}")
  l4=Use[l2]<><l1
  CheckEq(l4, expected:S"{A:{methodThis1.Am()}}")
  //is this what we want? asimmetric sum in this way?
  return ExitCode.normal()
  }