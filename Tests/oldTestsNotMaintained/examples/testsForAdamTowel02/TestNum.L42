{reuse L42.is/AdamTowel02

Meter:Units.of(Num)
Kg:Units.of(Num)

MeterKg:Units.of(Meter and:Kg)
MeterPerKg:Units.of(Meter per:Kg)


Second:Units.of(Num)
Speed:Units.of(Meter per:Second)
Acc:Units.of(Speed per:Second)
Newton:Units.of(Kg and:Acc)//Kg*m/s2

TestGS:{
  res=(6Meter + 4Meter)*2Num //20Meter
  fast1=Speed(42Meter per:0.1Second)
  fast2=Speed"42/0.1"
  distance1=fast1.left(right:60Second)
  g=Acc"9.8"
  speedAfter=g.left(right:10Second)//98 m/s
  distance2=speedAfter.left(right:10Second)/2Num //490 m after 10s free fall

  myRoket=900Newton
  gForceOnMe=Newton(78Kg and:g)//little less than 780
  myLift=myRoket-gForceOnMe
  if myLift>0Newton (Debug(S"I can fly"))
  myAcc=myLift.right(left:78Kg)//get second component
  reachedHeight=myAcc.left(right:10Second).left(right:10Second)/2Num
  return ExitCode.normal()
  }

Main:{
  n1=123000Num
  n2=456Num
  n3=n1+n2
  n4=Num"123456789/987654321"
  n5=n4*n4*n4
  Debug(n1)
  Debug(n2)
  Debug(n3)
  Debug(n4)
  Debug(n5)
  Debug.test(n3 expected:123456Num)
  Debug.test(n3 expected:Num"123456")
  Debug.test(n3!=123455Num expected:Bool.true())
  var Meter lots=Meter"1234453/4009.43"
  lots+=lots
  lots*=30Num
  Debug(lots)
  mk=MeterKg(lots and:123Kg)
  mpk=MeterPerKg(lots per:123Kg)
  Debug(mk)
  Debug(mpk)
  return ExitCode.normal()
  }
}