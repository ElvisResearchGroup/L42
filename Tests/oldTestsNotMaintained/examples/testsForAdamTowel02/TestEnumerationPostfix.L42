{reuse L42.is/AdamTowel02

//insert from(base)

Enumeration:{
  
  InvalidElements:Message.$<<{implements MetaGuard}
  
  EnumTrait:Resource<<Refactor.RenamePath(Path"Top" to:Path"This")<<Enum.enumTrait()
  
  class method
  Library #from(S.SBuilder builder)
  exception InvalidElements 
    This.from(base:S.#from(builder:builder))
  
  class method
  mut S.SBuilder #builder()
    S.SBuilder.empty()
  
  class method
  Selector numToSel(N that)
  exception InvalidElements{
    if that>=64N (exception InvalidElements"too many enumeration elements:"[that+1N]", max is 64")
    return Selector.fromS(S"#"++that.toS()++S"()")
    }
  
  class method
  Selector sToSel(S that)
  exception InvalidElements{
    return Selector.fromS(that++S"()")
    catch error Selector.ParseFail pf (
      exception InvalidElements"invalid enumeration name:"[that]""(pf)
      )
    }


  class method
  Strings sToSs(S that)
    that.splitOn(chars:S", "++S.nl())

  class method 
  Library traitMeth() (,{
    T inner
    class method This(T inner)    
    T:{implements Concept.Equals
     class method T ord()
     }
    class method This n() This(inner:T.ord())
    method Bool isN() this.inner().equals(T.ord())
    },)

  class method
  Library enumElem(N ord, S s)
  exception InvalidElements {
    sel=this.sToSel(s)
    return Refactor.Rename.selector(\"ord()" of: \"T" to:this.numToSel(ord))
      <<Refactor.Rename.selector(\"n()" to:sel)
      <<Refactor.Rename.selector(\"isN()" to:sel.with(prefix:S"is"))
      <<this.traitMeth()
    catch exception InvalidElements e (exception e)
    error on MetaGuard Assert.CodeNotReachable""
    }
  class method
  Library from(Concept.Base base)
  exception InvalidElements {
    ss=this.sToSs(base.toS())
    res=Extends[EnumTrait()]
      <<Refactor.Redirect(Path"T" to:N)
      <<(Extends[with ord in Range(start:0N), s in ss.vals() (
        use[this.enumElem(ord:ord, s:s)]
        )]
      << Refactor.Rename.selector(\"#apply()" to:\"names()")
      <<Resource(ss))
    catch exception InvalidElements e (exception e)
    error on MetaGuard Assert.CodeNotReachable""
    return res
    }
  }
Dir: Enumeration"left, right, top, down"
      
Main:{
  Assert.Holds[
    Dir.left()!=Dir.right();
    Dir.top()!=Dir.right();
    Dir.names().size()==4N
    ]
  Debug(S"foo")
  return ExitCode.normal()
  }
//bug in parser for many <<
//reorganize refactor, add default for no path and /, done for rename
/*
1  Redirect:{ that->Path  that is Refactor.Redirect(\"T" to:N)
Rename.selector(   .path(  .selector(of
2  RenameSelector:{(Selector that, Path of, Selector to)   that->Selector, of->Path to->Selector,   shortcut no of
3  RenamePath:{(Path that, Path to)  that,to->Path
RemoveImplementation. selector( .selector(of  .selector( of: andMoveTo: .selector( andMoveTo: .path(
4  RemoveImplementationSelector:{(Selector that, Path of)
5  RemoveImplementationPath:{(Path that)
6  MoveImplementationSelector:{(Selector that, Path of,Selector to)
Documentation .addSelector .addSelector(of .addPath .removeSelector( .removeSelector(of .removePath(
7  AddDocumentationSelector:{(Selector that, Path of,Introspection.Doc doc)
8  AddDocumentationPath:{(Path that,Introspection.Doc doc)
Hide.path( .selector( .selector(of
9  MakePrivatePath:{(Path that) //Can be called Hide
10  MakePrivateSelector:{(Selector that, Path of)
Call it ComposeMethods?
11  SumMethods:{   (Selector that,Selector and, Path of, S over, Selector to)
12  MakeMethod:{    (Selector that, Path of, Introspection.Mdf.List mdfs, N exceptionN)
*/
}

