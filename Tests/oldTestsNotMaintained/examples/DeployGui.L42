{reuse L42.is/AdamTowel02
GuiLib:{class method Library (){
  reuse L42.is/AdamTowel02
    Exported:{(S id)
      GuiPlugin:{//@plugin
        //L42.is/connected/withHtml
        }

      class method
      S jsEscape(S that) (
        var S tmp=that
        tmp:=tmp.replace(S"\" into:S"\\")
        tmp:=tmp.replace(S.doubleQuote() into:S"\"++S.doubleQuote())
        tmp:=tmp.replace(S"'" into:S"\'")
        //tmp:=tmp.replace(S"\u" into:S"\u005cu")
        tmp
        )
      method
      Void close()
        use GuiPlugin
          check close(wName:this.id().binaryRepr())
          error void
      method
      Void open(S title, S body, N x, N y)
        this.open(
          html:S""[This.htmlHeader()]"<TITLE>"[title]
          "</TITLE></HTML><BODY>"[body]"</BODY></HTML>"
          x:x
          y:y)
      class method S htmlHeader() S"
        '<!DOCTYPE html><html><head><meta http-equiv="content-class" content="text/html; charset=UTF-8">
        '<script>
        '
        "[Debug.readFile(fileName:Debug.localToAbsolute(fileName:S"examples/resources/js.js"))]"
        '
        '</script>
        "


      method
      Void open(S html, N x, N y) (
        Debug(html)
        use GuiPlugin
          check open(
            wName:this.id().binaryRepr()
            html:html.binaryRepr()
            x:x.binaryRepr()
            y:y.binaryRepr()
            )
          error void
          )
      method
      Void set(S that,S id) {   //$('#Alpha').replaceWith('htmlstring')
        cmd=S"$('#"++This.jsEscape(id)
        ++S"').replaceWith('"++This.jsEscape(that)++S"');"
        x=this.executeJs(cmd)
        Debug(cmd)
        if x!=S"" (Debug(x))
        return void
        }

      method
      S executeJs(S that)
        S.#from(binaryRepr: use GuiPlugin
          check executeJs(wName:this.id().binaryRepr(),command:that.binaryRepr())
          error void)

      method
      mut Iterator events()
        Iterator(id: this.id(), current:S"")

      Iterator:{mut (S id, var S current)

        class method S auxFetchEvent(S id) exception Void {
          Library s=use GuiPlugin
            check eventPending(wName:id.binaryRepr())
            exception void
          catch error Library x exception void
          return S.#from(binaryRepr: s)
          }

        mut method
        Void #next() exception Void {
          s=Iterator.auxFetchEvent(id:this.id())
          return this.current(s)
          }

        read method
        Void #checkEnd() void

        read method
        S #inner() (this.current())

        read method
        Void #close() void
        }
//----------------------
      }
    }
  }

Task: (
  Debug(S"Starting deployment")
  Load.DeployLibrary(
    path:Path"Exported",
    url:Url"localhost/GuiLib.L42"
    )<<GuiLib()
    )

}
