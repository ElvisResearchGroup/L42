{reuse L42.is/miniBase
ListArray:{mut (var mut Cell head,var N size)
  Cell:{interface}
  CellNext:{mut (S val,mut Cell next) implements Cell}
  //CellNextMut:{mut (mut S val,mut Cell next) implements Cell}
  CellEnd:{mut () implements Cell}
  read method Void reportError(N that)
    error S"IndexOutOfBound: max is "++this.size()++S" proposed is "++that
  read method Void reportUnexpected(N that)
    error S"Unexpected failure like IndexOutOfBound: max is "++this.size()++S" proposed is "++that
  //GETTING
  read method 
  S (N that) (
    if that>=this.size() (this.reportError(that))
    This.auxGet(that,cell:this.head())
    )
  class method
  S auxGet(N that,read Cell cell){
    with cell (
      on read CellNext case that==0N return cell.val()
      on read CellNext return This.auxGet(that-1N,cell:cell.next())
      )
    error S"Unreachable"
    }
  //SETTING
  mut method 
  Void (N that,S val) (
    if that>=this.size() (this.reportError(that))
    this.head(This.auxSet(that,val:val,cell:this.#head()))
    )
  class method
  mut CellNext auxSet(N that,S val,mut Cell cell){
    with cell (
      on mut CellNext case that==0N return CellNext(val:val,next:cell.#next())
      on mut CellNext return CellNext(val:cell.val(),next:This.auxSet(that-1N,val:val,cell:cell.#next()))
      )
    error S"Unreachable"
    }
  //EMPTY
  class method 
  mut This () This(head:CellEnd(),size:0N)
  //ADDING
  mut method
  mut This add(S that) (
    this.size(this.size()+1N)
    this.head(This.auxAdd(that,cell:this.#head()))
    this
    )
  class method
  mut Cell auxAdd(S that,mut Cell cell){
    with cell (
      on mut CellEnd return CellNext(val:that,next:cell)
      on mut CellNext return CellNext(
        val:cell.val(),
        next:This.auxAdd(that,cell:cell.#next())
        )
      )
    error S"Unreachable"
    }
    
  //*******************  
  //*******************
    
  class method 
  mut This #begin() This()
  mut method
  mut This #end() this
  mut method
  mut This #add(S that) this.add(that)
  
  
  
  //read method N validateMin(N that) ??
  
  OptMax:Opt(N)
  OptFill:Opt(S)

  
  read method lent Iterator vals(N min, N ok, N max, S fill) //0
    Iterator(this,min:min-1N,ok:ok, max:OptMax(max),fill:OptFill(fill))
  read method lent Iterator vals(N min, N ok, N max) //1
    Iterator(this,min:min-1N,ok:ok, max:OptMax(max),fill:OptFill())
  read method lent Iterator vals(N min, N ok, S fill)//2
    Iterator(this,min:min-1N,ok:ok, max:OptMax(),fill:OptFill(fill))
  read method lent Iterator vals(N min, N ok)//3
    Iterator(this,min:min-1N,ok:ok, max:OptMax(),fill:OptFill())

  read method lent Iterator vals(N min, N max, S fill) //4
    Iterator(this,min:min-1N,ok:max, max:OptMax(max),fill:OptFill(fill))
  read method lent Iterator vals(N min, N max) //5
    Iterator(this,min:min-1N,ok:max, max:OptMax(max),fill:OptFill())
  read method lent Iterator vals(N min, S fill)//6
    Iterator(this,min:min-1N,ok:this.size(), max:OptMax(),fill:OptFill(fill))
  read method lent Iterator vals(N min)//7
    Iterator(this,min:min-1N,ok:this.size(), max:OptMax(),fill:OptFill())
    

  read method lent Iterator vals(N ok, N max, S fill) //9
    Iterator(this,min:-1N,ok:ok, max:OptMax(max),fill:OptFill(fill))
  read method lent Iterator vals(N ok, N max) //9
    Iterator(this,min:-1N,ok:ok, max:OptMax(max),fill:OptFill())
  read method lent Iterator vals(N ok, S fill)//10
    Iterator(this,min:-1N,ok:ok, max:OptMax(),fill:OptFill(fill))
  read method lent Iterator vals(N ok)//11
    Iterator(this,min:-1N,ok:ok, max:OptMax(),fill:OptFill())

  read method lent Iterator vals(N max, S fill) //12
    Iterator(this,min:-1N,ok:max, max:OptMax(max),fill:OptFill(fill))
  read method lent Iterator vals(N max) //13
    Iterator(this,min:-1N,ok:max, max:OptMax(max),fill:OptFill())
  read method lent Iterator vals(S fill)//14
    Iterator(this,min:-1N,ok:this.size(), max:OptMax(),fill:OptFill(fill))
  read method lent Iterator vals()//15
    Iterator(this,min:-1N,ok:this.size(), max:OptMax(),fill:OptFill())

  
  Iterator:{lent (read This1 that, var N min, N ok, OptMax max, OptFill fill)
    mut method
    Void #next() exception Void {
      this.min(this.min()+1N)
      if this.fill().isPresent() (
        if !this.max().isPresent() (return void)
        if this.min()>= ~this.max() (exception void)
        return void
        )
      if this.max().isPresent() (
          if this.min()>=~this.max() (exception void)
          )
      if this.min()>=this.that().size() (exception void)
      return void
      }
    
    read method
    Void #checkEnd()
      if this.min()<this.ok() ( error S"Unexpected termination of iteration, reached "++this.min()++S" instead of "++this.ok() )
    
    read method
    S #inner() {
      if !this.fill().isPresent() (return this.that()(this.min()))
      if this.min()<this.that().size() (return this.that()(this.min()))
      return !this.fill()
      }
    read method
    Void #close() void
    }
  //*************************************
  //*************************************
  mut method mut VarIterator vars(N min, N ok, N max, S fill) //0
    VarIterator(this,min:min-1N,ok:ok, max:OptMax(max),fill:OptFill(fill))
  mut method mut VarIterator vars(N min, N ok, N max) //1
    VarIterator(this,min:min-1N,ok:ok, max:OptMax(max),fill:OptFill())
  mut method mut VarIterator vars(N min, N ok, S fill)//2
    VarIterator(this,min:min-1N,ok:ok, max:OptMax(),fill:OptFill(fill))
  mut method mut VarIterator vars(N min, N ok)//3
    VarIterator(this,min:min-1N,ok:ok, max:OptMax(),fill:OptFill())

  mut method mut VarIterator vars(N min, N max, S fill) //4
    VarIterator(this,min:min-1N,ok:max, max:OptMax(max),fill:OptFill(fill))
  mut method mut VarIterator vars(N min, N max) //5
    VarIterator(this,min:min-1N,ok:max, max:OptMax(max),fill:OptFill())
  mut method mut VarIterator vars(N min, S fill)//6
    VarIterator(this,min:min-1N,ok:this.size(), max:OptMax(),fill:OptFill(fill))
  mut method mut VarIterator vars(N min)//7
    VarIterator(this,min:min-1N,ok:this.size(), max:OptMax(),fill:OptFill())
    

  mut method mut VarIterator vars(N ok, N max, S fill) //9
    VarIterator(this,min:-1N,ok:ok, max:OptMax(max),fill:OptFill(fill))
  mut method mut VarIterator vars(N ok, N max) //9
    VarIterator(this,min:-1N,ok:ok, max:OptMax(max),fill:OptFill())
  mut method mut VarIterator vars(N ok, S fill)//10
    VarIterator(this,min:-1N,ok:ok, max:OptMax(),fill:OptFill(fill))
  mut method mut VarIterator vars(N ok)//11
    VarIterator(this,min:-1N,ok:ok, max:OptMax(),fill:OptFill())

  mut method mut VarIterator vars(N max, S fill) //12
    VarIterator(this,min:-1N,ok:max, max:OptMax(max),fill:OptFill(fill))
  mut method mut VarIterator vars(N max) //13
    VarIterator(this,min:-1N,ok:max, max:OptMax(max),fill:OptFill())
  mut method mut VarIterator vars(S fill)//14
    VarIterator(this,min:-1N,ok:this.size(), max:OptMax(),fill:OptFill(fill))
  mut method mut VarIterator vars()//15
    VarIterator(this,min:-1N,ok:this.size(), max:OptMax(),fill:OptFill())

  
  VarIterator:{mut (mut This1 that, var N min, N ok, OptMax max, OptFill fill)
    mut method
    Void inner(S that) this.#that()(this.min(), val:that)

    //all here is the same?
    mut method
    Void #next() exception Void {
      this.min(this.min()+1N)
      if this.fill().isPresent() (
        if !this.max().isPresent() (return void)
        if this.min()>= ~this.max() (exception void)
        return void
        )
      if this.max().isPresent() (
          if this.min()>=~this.max() (exception void)
          )
      if this.min()>=this.that().size() (exception void)
      return void
      }
    
    read method
    Void #checkEnd()
      if this.min()<this.ok() ( error S"Unexpected termination of iteration, reached "++this.min()++S" instead of "++this.ok() )
    
    read method
    S #inner() {
      if !this.fill().isPresent() (return this.that()(this.min()))
      if this.min()<this.that().size() (return this.that()(this.min()))
      return !this.fill()
      }
    read method
    Void #close() void
    }
  
  }

Tests:{
  class method Void t1(){
    l=ListArray[S"hello";S"world"]
    Debug(S"size is "++l.size()++S" "++l(0N)++S" "++l(1N))
    with x in l.vals() (
      Debug(x)
      )    
    l1=ListArray[S"hello";S"world"]
    l2=ListArray[S"a";S"b";S"c"]
    //with e1 in l1.vals(), e2 in l2.vals() ( fails properly
    with e1 in l1.vals(), e2 in l2.vals(ok:1N) (
      Debug(e1++S"   "++e2)
      )
    with e01 in l1.vals(fill:S"extra"), e02 in l2.vals() (
      Debug(e01++S"   "++e02)
      )    
    with e11 in l1.vals(), e12 in l2.vals(max:2N) (
      Debug(e11++S"   "++e12)
      )
    with e21 in l1.vals(ok:0N), e22 in l2.vals(max:2N) (
      Debug(e21++S"   "++e22)
      ) 
    Debug(S"nothing printed here")
    with e31 in l1.vals(ok:0N), e32 in l2.vals(max:0N) (
      Debug(e31++S"   "++e32)
      ) 
    return void
    }
    //*******************
  class method Void t2(){
    l=ListArray[S"hello";S"world"]
    Debug(S"size is "++l.size()++S" "++l(0N)++S" "++l(1N))
    with var x in l.vars() (
      Debug(x)
      )    
    l1=ListArray[S"hello";S"world"]
    l2=ListArray[S"a";S"b";S"c"]
    with var e1 in l1.vars(), var e2 in l2.vars(ok:1N) (
      Debug(e1++S"   "++e2)
      e1:=e1++S"!"
      e2:=e2++S"!"
      )
    with var e01 in l1.vars(fill:S"extra"), var e02 in l2.vars() (
      Debug(e01++S"   "++e02)
      //e01:=e01++S"!" //no, we can not write on extra cells
      e02:=e02++S"!"
      )    
    with var e11 in l1.vars(), var e12 in l2.vars(max:2N) (
      Debug(e11++S"   "++e12)
      e11++=S"!"
      e12++=S"!"
      )
    with var e21 in l1.vars(ok:0N), var e22 in l2.vars(max:2N) (
      Debug(e21++S"   "++e22)
      e21++=S"!"
      e22++=S"!"
      ) 
    Debug(S"nothing printed here")
    with var e31 in l1.vars(ok:0N), var e32 in l2.vars(max:0N) (
      Debug(e31++S"   "++e32)
      e31++=S"!"
      e32++=S"!"
      ) 
    return void
    }
    
  }
  
Run:{
  Debug(S"First test")
  Tests.t1()
  Debug(S"Second test")
  Tests.t2()
  return ExitCode.normal()
  }
}