{reuse L42.is/AdamTowel02

Cursor:{(N id)
    DbPlugin:{//@plugin
    //L42.is/connected/withDatabase
    }

    method
    Bool hasNext()(
        N.#from(binaryRepr: use DbPlugin
          check cursorNext(id:this.id().binaryRepr())
          error void) == 1N
    )

    method
    S getString(S columnName)(
        S.#from(binaryRepr: use DbPlugin
          check cursorGetString(id:this.id().binaryRepr(), columnName:columnName.binaryRepr())
          error void)
    )

    method
    Void close()(
        use DbPlugin
          check cursorClose(id:this.id().binaryRepr())
          error void
    )
}

DatabaseLib:{(S url)
    DbPlugin:{//@plugin
    //L42.is/connected/withDatabase
    }


    method
    Void connect()(
        use DbPlugin
          check connect(url:this.url().binaryRepr())
          error void
    )

    method
    Bool createTable(S query)(
        N.#from(binaryRepr: use DbPlugin
          check createNewTable(url:this.url().binaryRepr(), query: query.binaryRepr())
          error void) == 1N
    )

    method
    N insert(S query)(
        N.#from(binaryRepr: use DbPlugin
          check insert(url:this.url().binaryRepr(), query: query.binaryRepr())
          error void)
    )

    method
    S queryToString(S query)(
        S.#from(binaryRepr: use DbPlugin
            check queryToString(url:this.url().binaryRepr(), query: query.binaryRepr())
            error void)
    )

    method
    Cursor query(S query)(
        Cursor(id: N.#from(binaryRepr: use DbPlugin
            check query(url:this.url().binaryRepr(), query: query.binaryRepr())
            error void))
    )

    method
    N delete(S query)(
        N.#from(binaryRepr: use DbPlugin
            check delete(url:this.url().binaryRepr(), query: query.binaryRepr())
            error void)
    )

    method
    Bool isConnected()(
        N.#from(binaryRepr: use DbPlugin
          check isConnected(url:this.url().binaryRepr())
          error void) == 1N
    )

    method
    Void close()(
        use DbPlugin
          check close(url:this.url().binaryRepr())
          error void
    )

    method
    Void shutdown()(
        use DbPlugin
          check shutdown(url:this.url().binaryRepr())
          error void
    )
}

C:{
    Debug(S"Running ")

    // Connect to Database
    DatabaseLib db = DatabaseLib(url:S"jdbc:derby:codejava;create=true")
    db.connect()

    Debug(S"Connected to database: "++db.isConnected().toS())

    // Create a new table
    Bool createdTable = db.createTable(query: S"CREATE TABLE Names( FirstName varchar(255) )")
    Debug(S"Created new Table: "++createdTable.toS())


    // Insert stuff into the Table
    N i1 = db.insert(query: S"INSERT INTO Names( FirstName ) VALUES( 'James')" )
    Debug(S"Inserted "++i1.toS())

    N i2 = db.insert(query: S"INSERT INTO Names( FirstName ) VALUES( 'Marco')" )
    Debug(S"Inserted "++i2.toS())


    // Select the data and get it as a string
    S selection = db.queryToString(query: S"SELECT * FROM Names" )
    Debug(S"Selection:")
    Debug(selection)


    // Select the data as a Cursor and display each row seperately
    Debug(S"Cursor:")
    Cursor cursor = db.query(query: S"SELECT * FROM Names" )
    while cursor.hasNext() (
        Debug(S"Rows Name: "++cursor.getString(columnName: S"FirstName"))
    )

    // Close Cursor
    cursor.close()


    // Delete all James's
    N deletedRowCount1 = db.delete(query: S"DELETE FROM Names WHERE FirstName = 'James'")
    Debug(S"Deleted "++deletedRowCount1.toS()++S" rows with James.")

    N deletedRowCount2 = db.delete(query: S"DELETE FROM Names WHERE FirstName = 'Marco'")
    Debug(S"Deleted "++deletedRowCount2.toS()++S" rows with Marco.")


    // Shutdown server
    db.shutdown()
    Debug(S"Connected to database: "++db.isConnected().toS())

    // Close datebase
    db.close()


    Debug(S"#@Success@#")
    return ExitCode.normal()
}
}