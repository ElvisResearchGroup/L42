{
Failure:Message.$<<{ implements MetaGuard}
  //invariant checking, used into the actions
  class method
  Void checkInvariant(read Concept.Invariant that) (
    if !that.invariant() (
      error Invariant.Failure(
        text:S"invalid object detected "++Refactor.Tools.getToSOrName(that) )
      )  )

//actions
class method
Library constructorAction(Introspection.Type that) {
    m=that.mdf()
    if m.isImmutable() (return { implements Concept.Invariant,,,,class method,,,,                   This (             This that),,,,( Invariant.checkInvariant(that) that )  })
    if m.isMutable()     (return { implements Concept.Invariant,,,,class method,,,,            mut  This (      mut This that),,,,( Invariant.checkInvariant(that) that )  })
    if m.isLent()           (return { implements Concept.Invariant,,,,class method,,,,            lent  This (      lent  This that),,,,( Invariant.checkInvariant(that) that )  })
    if m.isReadable()   (return { implements Concept.Invariant,,,,class method,,,,           read This (     read This that),,,,( Invariant.checkInvariant(that) that )  })
    if m.isCapsule()     (return { implements Concept.Invariant,,,,class method,,,,capsule This (capsule This that) (
        mut This open=that
        Invariant.checkInvariant(open)
        open    )   })
    error Assert.CodeNotReachable"unidentified mdf:"[m]"!"
    }

class method
Library setterAction() { implements Concept.Invariant
    mut method
    Void (Void that) (
        Invariant.checkInvariant(this)
        that
        )
    }

  class method
  Library idAction(Introspection.Type that){
    Library mdfA={m=that.mdf()
      if m.isClass()          (return { class method class    T (class T that),,,, that,,,T:{} })
      if m.isImmutable()  (return { class method,,,,         T (          T that),,,,that,,,,T:{} })
      if m.isMutable()      (return { class method,,,,mut   T (mut    T that),,, that,,,,T:{} })
      if m.isLent()            (return { class method,,,,lent   T (lent    T that),,,,that,,,,T:{} })
      if m.isReadable()    (return { class method,,,,read T (read   T that),,,,that,,,,T:{} })
      error Assert.CodeNotReachable"unidentified mdf:"[m]"!"
      }
    nc=that.referencedPath()
    if nc.hasExternalType() (
      return Refactor.Redirect(Path"T" to:nc.externalType())<<mdfA
      )
    return Refactor.RenamePath(Path"T" to:nc.pathFromRoot())<<mdfA
    catch exception MetaGuard cnr
      error Assert.CodeNotReachable"idAction"(cnr)
    }

  //main decoration method
  class method
  Library<<(Library that)
  exception StateUnfit {
    i=Introspection(lib:that)
    if ! i.implements(Introspection(clazz:Concept.Invariant))  (return that)
    state=i.state()
    if state.isEmpty() (exception StateUnfit"State is empty")
    k=state.left()
    if k.isPrivate() (exception StateUnfit"State is private")
    return this.stateDecoration(that, state:state)
    }

//decoration after pre checking
class method
Library stateDecoration(Library that,Introspection.Methods state) {
    p=Path"This"//just a shortcut
    kNames=state.left().selector().names()//all ks have the same argument names
    Strings kNamesF=Strings[with n in kNames.vals() (    use[SafeOperators.freshName(n)]    )]
    var Library acc=that
    with m in state.vals() (
      s=m.selector()
      mdf=m.thisMdf()
      if mdf.isClass() (
        newSel=Selector.from(name:SafeOperators.freshName(s.name()),names:kNamesF)
        acc:=PostAction(s of:p    action:this.constructorAction(m.returnType())  deprecated: newSel)<<acc
        )
      else (
        newSel=This.stateFName(s,old:kNames, fresh:kNamesF)
        if s.names().isEmpty()  (
          acc:=PostAction(s of:p  action:this.idAction(m.returnType())   deprecated:newSel)<<acc
          )
        else (
          acc:=PostAction(s of:p   action:this.setterAction()  deprecated:newSel)<<acc
          )
        )
      )
    return acc
    catch exception  MetaGuard cnr
      error Assert.CodeNotReachable"Invariant"(cnr)
    }

//create a "fresh" selector that agrees with the new fresh constructor// should be put in Data?
class method
Selector stateFName(Selector that, Strings old,Strings fresh){//a field selector and old and fresh field names
    name=that.nameAsField()
    prefix=that.prefixAsField()
    names=that.names()
    with o in old.vals(), f in fresh.vals() (
        if name==o (return Selector.from(name:prefix++f,names:names))
        )
    error Assert.CodeNotReachable
      "stateFName ["[name]"]"[with o1 in old.vals(), f1 in fresh.vals() (use[o1++S"!"++f1])]""
    }
}