{reuse L42.is/AdamTowel01

Main:{

  i=Introspection(lib:{Bar:{method Void foo(Void par1 Any par2)} Beer:{}},path:Path"Bar")
  Debug(S"classkind of Bar is "++i.classKind().toS())
  Debug(S"Bas as string: "++i.allAsString())
  Debug(S"--------------------------")
  Debug(S"classkind of This is "++i.root().classKind().toS())
  Debug(S"This as string: "++i.root().allAsString())
  Debug(S"--------------------------")
  Debug(S"for all the methods of Bar:")
  ms=i.methods()

  if !Selector"foo()".names().isEmpty() (Debug(S"fail"))
  if !Selector"f()".names().isEmpty() (Debug(S"fail"
    [with ni in Selector"f()".names().vals() (use[S"{"++ni++S"}"])]"!!"))

  with m in ms.vals() (
   Debug(S"selector is: "[m.selector()]"")
   ti=m.returnType()
   Debug(S"return class is:"[ti]"")
   with parT in m.parameterTypes().vals() (
     Debug(S"parameter class is:"[parT]"")
     )
   //ti.record().dbg()
   )
  Debug(S"--------------------------")
  Debug(S"for all the nested classes of Root:")
  with nc in i.root().nestedClasses().vals() (
    Debug(S"Nested class path is:"[nc.pathFromRoot()]"")
    Debug(nc)
    )
  return ExitCode.normal()
  }
}