{reuse L42.is/AdamTowel01

// vector tests, from a more external view,
// stacked on top of Vector(of).toS() and Debug.test()

Anys: Collections.vector(of: Any)

Main:{
  s0 = Strings.empty()
  Debug.test(s0.toS() expected:S"[]")
  
  s4 = Strings[S"a"; S"b"; S"c"; S"d"]
  Debug.test(s4.toS() expected:S"[a; b; c; d]")
  
  aLots = Anys[0N; void; 1N; {}; 2N; S"words"; 3N; Strings[]; 4N; Anys[]; 5N]
  Debug.test(aLots.toS() expected:S"[0; ?; 1; ?; 2; words; 3; []; 4; []; 5]")
  
  // Examples from the guide: http://l42.is/tutorial.xhtml#Sequences
  // except with strings instead of numbers
  
  a = S"a" b = S"b" c = S"c" d = S"d" e = S"e"
  true = Bool.true() false = Bool.false()
  
  // (1/5)Vectors as Sequences 
  //element addition
  Debug.test(Strings[a;b;c]+d  expected: Strings[a;b;c;d])
  Debug.test(Strings[]+d  expected: Strings[d])
  
  //sequence concatenation
  Debug.test(Strings[a;b]++Strings[c;d]  expected:Strings[a;b;c;d])

  //element removal
  Debug.test(Strings[a;b;b;c] - b  expected:Strings[a;c]) //only if elements implements Concepts.Equals
  Debug.test(Strings[a;b;b;c] - a  expected:Strings[b;b;c])
  Debug.test(Strings[a;b;b;c] - c  expected:Strings[a;b;b]
   message:S"Strings[a;b;b;c] - c")

  //set subtraction
  Debug.test(Strings[a;b;b;c] -- Strings[b;c]  expected:Strings[a]) // only with Concept.Equals, again
  Debug.test(Strings[a;b;b;c] -- Strings[b;a;e]  expected:Strings[c]) 

  //set intersection
  Debug.test(Strings[a;b]& Strings[b;c]  expected:Strings[b]
   message:S"Strings[a;b]& Strings[b;c]")
  Debug.test(Strings[a;b;b]& Strings[b;c]  expected:Strings[b;b]
   message:S"Strings[a;b;b]& Strings[b;c]")
  Debug.test(Strings[a;b]& Strings[b;b;c]  expected:Strings[b]
   message:S"Strings[a;b]& Strings[b;b;c]")
  Debug.test(Strings[a;b;b]& Strings[b;b;c]  expected:Strings[b;b]
   message:S"Strings[a;b;b]& Strings[b;b;c]")
  Debug.test(Strings[a;b;c]& Strings[c;b]  expected:Strings[b;c]
   message:S"Strings[a;b;c]& Strings[c;b]")
  
  //superset
  Debug.test(Strings[a;b;c]>>Strings[a;c]  expected:true
   message:S"Strings[a;b;c]>>Strings[a;c]")
  Debug.test(Strings[a;b;c]>>Strings[a;a;c]  expected:true
   message:S"Strings[a;b;c]>>Strings[a;a;c]")
  Debug.test(Strings[a;b;c]>>Strings[c;a]  expected:true
   message:S"Strings[a;b;c]>>Strings[c;a]")
  Debug.test(Strings[a;b;c]>>Strings[d;a]  expected:false
   message:S"Strings[a;b;c]>>Strings[d;a]")
  // borrowed from the superseteq examples:
  Debug.test(Strings[a;b]>>Strings[a;c]  expected:false
   message:S"Strings[a;b]>>Strings[a;c]")
  // from a conversation with Marco:
  Debug.test(Strings[a;b;c]>>Strings[a;b;c]  expected:false
   message:S"Strings[a;b;c]>>Strings[a;b;c]")

//superseteq
  Debug.test(Strings[a;b]>>= Strings[a;b]   expected:true
   message:S"Strings[a;b]>>= Strings[a;b]")
  Debug.test(Strings[a;b]>>= Strings[b;a]   expected:true
   message:S"Strings[a;b]>>= Strings[b;a]")
  Debug.test(Strings[a;b]>>= Strings[b;c]   expected:false
   message:S"Strings[a;b]>>= Strings[b;c]")
  Debug.test(Strings[a;b]>>= Strings[c;a]   expected:false
   message:S"Strings[a;b]>>= Strings[c;a]")
  Debug.test(Strings[a;b]>>= Strings[a]   expected:true
   message:S"Strings[a;b]>>= Strings[a]")
  Debug.test(Strings[a;b]>>= Strings[b]   expected:true
   message:S"Strings[a;b]>>= Strings[b]")
  
//contains element
  Debug.test(Strings[a;b]>b  expected:true 
   message:S"Strings[a;b]>b")
  Debug.test(Strings[a;b]>c  expected:false 
   message:S"Strings[a;b]>c")

//is element contained
// trying these examples with numbers, because they don't work with strings
// they don't work on numbers either
//  Debug.test(9N<Anys[9N;8N]   expected:true  message:S"9N<Anys[9N;8N]")
//  Debug.test(c<Strings[a;b]   expected:false  message:S"c<Strings[a;b]")
  Debug(S"[FAIL] The is-an-element-of tests presume that numbers, strings, etc know about lists, and they don't.")
  
  Debug(S"More tests to do, after the names on the list editing methods settle.")
  
  Debug.test(S"Finished" expected: S"Finished")
  
  return ExitCode.normal()
  }
  
}