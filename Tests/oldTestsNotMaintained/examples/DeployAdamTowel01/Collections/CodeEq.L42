{ implements Concept.Equals
read method N size()
read method  Elem val(N that)

class method mut This #seqBuilder()
class method mut This #from(mut This seqBuilder)
mut method Void #add(Elem that)

Elem:{ implements Concept.Equals}

read method lent IteratorVal vals()
IteratorVal:{
  mut method Void #next() exception Void
  read method Void #checkEnd()
  read method Elem #inner()
  read method Void #close()
  }

//################# named
read method
Bool contains(Elem that){
  with e in this.vals() (
    if e.equals(that) (return Bool.true())
    )
  return Bool.false()
  }

//################# operators

method
This -(Elem that)
  this.withoutAll(val:that)


method
This --(This that)
  This[with e in this.vals() ( if !that.contains(e)  (use[e])  )]



method
This &(This that)
  This[with v in this.vals() (
    if (that>v) (use[v])
    )]


method
Bool >>(This that)
  this >>=that & this.size()>that.size()

method
Bool >>=(This that) {
  with e in that.vals() (
    if ! (this > e) (return Bool.false())
    )
  return Bool.true()
  }

method
Bool >(Elem that)
  this.contains(that)




read method
Bool !=(read This that) !(this==that)

read method
Bool ==(read This that){
  with e1 in this.vals(), e2 in that.vals() (
    if !e1.equals(e2) (return Bool.false())
    )
  catch error IterationFailure ( return Bool.false() )
  return Bool.true()
  }
method equals(that){
  with that (on read This return this==that)
  return Bool.false()
  }


read method
N indexOfLeft(Elem val){
  size=this.size()
  var N pos=0N
  loop (
    if this.val(pos).equals(val) (return pos)
    if pos>=size (return N"-1")
    pos+=1N
    )
  }

read method
N indexOfRight(Elem val){
  var N pos=this.size()-1N
  loop (
    if this.val(pos).equals(val) (return pos)
    if pos<=0N (return N"-1")
    pos-=1N
    )
  }

method //from VectorTrait
This without(N index)

method
This withoutLeft(Elem val) {
  pos=this.indexOfLeft(val:val)
  if pos<0N (return this)
  return this.without(index:pos)
  }

method
This withoutRight(Elem val){
  pos=this.indexOfRight(val:val)
  if pos<0N (return this)
  return this.without(index:pos)
  }

method
This withoutAll(Elem val)
  This[with e in this.vals() (if !e.equals(val) (use[e]))]



mut method //from VectorTrait
Void remove(N that)

mut method
Void removeAll(Elem val){
  var N pos=0N
  loop (
    if this.val(pos).equals(val) (this.remove(pos))
    if pos>=this.size() (return void)
    pos+=1N
    )
  }

mut method
Void removeLeft(Elem val){
  pos=this.indexOfLeft(val:val)
  if pos<0N (return void)
  return this.remove(pos)
  }

mut method
Void removeRight(Elem val){
  pos=this.indexOfRight(val:val)
  if pos<0N (return void)
  return this.remove(pos)
  }


}