{
class method //@private
Library generateVector(class Any that, Library lib){
  var res=lib
  res:=Refactor.RenamePath(Path"VectorStruct" to:Path"This")<<res
  res:=Refactor.Redirect(Path"Elem" to: that)<<res
  res:=Refactor.MakePrivatePath(Path"Cell")<<res
  res:=Refactor.MakePrivatePath(Path"CellNext")<<res
  res:=Refactor.MakePrivatePath(Path"CellEnd")<<res
  //res:=Refactor.MakePrivatePath(Path"Iterator")<<res
  //res:=Refactor.MakePrivatePath(Path"VarIterator")<<res
  return res
  catch exception Guard err error err
  }
  
class method Library vector(class Any of)
  This.generateVector(of,lib:{Elem:{} Kind://@private
      {interface 
      class method Elem elem() 
      class method Elem elemRead()
      }
  VectorStruct:...
  })
class method Library vector(class Any ofMut)
  This.generateVector(ofMut,lib:{Elem:{} Kind://@private
      {interface 
      class method mut Elem elem() 
      class method read Elem elemRead()
      }
  VectorStruct:...
  })

//class method Library vector(class Any ofType) This.generateVector(ofType,lib:{
//  Elem:{} Kind://@private
//    {interface 
//    class method class Elem elem() 
//    class method class Elem elemRead()
//    }
//  VectorStruct:...
//  })
      //read/lent/mut/class/capsule/

}
