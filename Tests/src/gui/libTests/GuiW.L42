{reuse L42.is/AdamTowel02

Event:Data<><{
  S targetId
  S eventId
  Strings all
  class method This(S that)(
    s=that.splitOn(chars:S"::")
    This(
      targetId:s.val(0Size)
      eventId:s.val(1Size)
      all:s
      )
    )
  }
Widget:UnsafeRefactor.This$er<><{interface
  S id
  var Size left 
  var Size top
  var Size width
  var Size height
  var S color
  mut List children
  This$: {interface implements Concept.Base}
  List: Collections.vector(ofMut:This$)
  mut method Bool dispatch(Event that)
  }
BoxTrait:Resource<><{implements Widget
  mut method Void process(Event event)
  method dispatch(that) {
    if this.id()==that.targetId() (
      this.process(event:that)
      return Bool.true()
      )
    with w in this.#children().#vals() (
      if w.dispatch(that) (return Bool.true())
      )
    return Bool.false()
    }
  }
BoxW:Data<><Use[BoxTrait()]<>< {
  mut method Void process(Event event) (
    Debug(S"Event processed: "[event]"")
    this.left(this.left()+5Size)
    )
  }

Gui:Use[Load<><{reuse L42.is/GuiLib}]<><{
  mut method Void display(mut Widget that) (
    this.draw(that)
    with event in this.events() (
      unused=that.dispatch(Event(event))
      this.draw(that)
      )
    )

  read method S format(read Widget that)
    S"<div id='"[that.id()]"' style='"[]
        "position: absolute;"[]
        "left: "[that.left()]"px;"[]
        "top: "[that.top()]"px;"[]
        "height: "[that.height()]"px;"[]
        "width: "[that.width()]"px;"[]
        "background-color: "[that.color()]";'>"[]//a comment!
      "<div style='position: relative;'>"
        [with w in that.children().vals() (
          use[this.format(w)]
        )]"</div></div>"

  mut method Void draw(read Widget that)
    this.set(S"<div id='Top' style='"[]
      "position: relative; height: 400px; width: 400px; border: solid black 2px;'>"
        [this.format(that)]"</div>"
      id:S"Top")
}

C: {
  var S msg = S"<div id='Pressed'>"
  mut Gui gui=Gui.#$(id:S"a1")
  initialState=S"
      '<div id="Pressed"> </div>
      '<font size="3" color="blue">Here the ID of the last pressed</font>
      '<button class="button" onclick="event42('A::Pressed::more')">Click Me!</button>
      '<div id="Top" ></div>
      "
  gui.open(
    title:S"Test Abs positioning"
    body:initialState
    x:600Size
    y:600Size
    )
  wA=BoxW(
      id:S"A"
      left:20Size
      top:40Size
      width:400Size
      height:200Size
      color:S"red"
      children:Widget.List[BoxW(
        id:S"B"
        left:50Size
        top:50Size
        width:50Size
        height:149Size
        color:S"blue"
        children:Widget.List[]
        )]
      )
  gui.display(wA)
  gui.close()
  Debug(S"#@Success@#")
  return ExitCode.normal()
  }
}