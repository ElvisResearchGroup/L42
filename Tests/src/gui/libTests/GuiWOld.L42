{reuse L42.is/AdamTowel02

Event:Data<><{
  S targetId
  S eventId
  Strings all
  class method This(S that)(
    s=that.splitOn(chars:S"::")
    This(
      targetId:s.val(0Size)
      eventId:s.val(1Size)
      all:s
      )
    )
  }
Widget:UnsafeRefactor.This$er<><{interface
  S id
  Size left
  Size top
  Size width
  Size height
  S color
  read List children
  This$: {interface implements Concept.Base}
  List: Collections.vector(ofMut:This$)
  mut method Bool dispatch(Event that)
  }
DispatchTrait:Resource<><{
  S id
  mut Widget.List children
  mut method Void process(Event event)
  mut method Bool dispatch(Event that) {
    if this.id()==that.targetId() (
      this.process(event:that)
      return Bool.true()
      )
    with w in this.#children().#vals() (
      if w.dispatch(that) (return Bool.true())
      )
    return Bool.false()
    }
  }
Gui:Use[Load<><{reuse L42.is/GuiLib}]<><{

  mut method Void display(S title, Size x, Size y,mut Widget body) (
    this.open(
      title:title
      body:S"<div id='Top'></div>"
      x:x
      y:y
      )
    this.draw(body)
    with event in this.events() (
      unused=body.dispatch(Event(event))
      this.draw(body)
      )
    this.close()
    )

  read method S format(read Widget that)
    S"<div id='"[that.id()]"' onclick="[S.doubleQuote()]"event42('"[that.id()]"::Pressed::more')"[S.doubleQuote()]" style='"[]
        "position: absolute;"[]
        "left: "[that.left()]"px;"[]
        "top: "[that.top()]"px;"[]
        "height: "[that.height()]"px;"[]
        "width: "[that.width()]"px;"[]
        "background-color: "[that.color()]";'>"[]
        "<div style='position: relative;'>"
        [with w in that.children().vals() (
          use[this.format(w)]
        )]"</div></div>"

  mut method Void draw(read Widget that)
    this.set(S"<div id='Top' style='"[]
      "position: relative; height: 400px; width: 400px; border: solid black 2px;'>"
        [this.format(that)]"</div>"
      id:S"Top")
}

  //---lib code over, user code under
BoxW:Data<><Use[DispatchTrait();{implements Widget}]<>< {
  var Size left
  var Size top
  var Size width
  var Size height
  var S color
  mut Widget.List children
  mut method Void process(Event event) (
    Debug(S"Event processed: "[event]"")
    this.left(this.left()+5Size)
    )
  }



Box:Data<><Use[DispatchTrait()]<><{
  var Size left
  var Size top
  mut method Void process(Event event) (
    Debug(S"Event processed: "[event]"")
    this.left(this.left()+5Size)
    )
  }
SafeMovable:Data<><{implements Widget
  capsule Box box
  class method mut This(S id,Size left,Size top,Size width,Size height,S color,capsule Widget.List children)
    This(width:width,height:height,color:color,box:Box(id:id,children:children,left:left,top:top))
  method id()this.box().id()
  method children()this.box().children()
  method left()this.box().left()
  method top()this.box().top()
  method dispatch(that)this.#box().dispatch(that)
  }

C: {
  wA=SafeMovable(
      id:S"A"
      left:20Size
      top:40Size
      width:400Size
      height:200Size
      color:S"red"
      children:Widget.List[SafeMovable(
        id:S"B"
        left:50Size
        top:50Size
        width:50Size
        height:149Size
        color:S"blue"
        children:Widget.List[]
        )]
      )
  Gui.#$(id:S"a1").display(title:S"Moving",x:600Size,y:600Size,body:wA)
  Debug(S"#@Success@#")
  return ExitCode.normal()
  }
}