{reuse L42.is/AdamTowel02
GuiLib:{class method Library (){
  reuse L42.is/AdamTowel02
    Exported: K.$ <>< {//@untrusted
      S id
      GuiPlugin:{//@plugin
        //L42.is/connected/withHtml
        }

      class method
      S jsEscape(S that) (
        var S tmp=that
        tmp:=tmp.replace(S"\" into:S"\\")
        tmp:=tmp.replace(S.doubleQuote() into:S"\"++S.doubleQuote())
        tmp:=tmp.replace(S"'" into:S"\'")
        tmp:=tmp.replace(S.nl() into:S"\n")
        //tmp:=tmp.replace(S"\u" into:S"\u005cu")
        tmp
        )

      mut method
      Void close()
        use GuiPlugin
          check close(wName:this.id().#binaryRepr())
          error void

      mut method
      Void open(S title, S body, Size x, Size y)
        this.open(
          html:S""[This.htmlHeader()]"<title>"[title]
          "</title></head><body>"[body]"</body></html>"
          x:x
          y:y)
      class method S htmlHeader() S"
        '<!DOCTYPE html><html><head><meta http-equiv="content-class" content="text/html; charset=UTF-8">
        "
//        '<script>
//        '
//        "[Debug.readFile(fileName:Debug.localToAbsolute(fileName:S"examples/resources/js.js"))]"
//        '
//        '</script>
//        "


      mut method
      Void open(S html, Size x, Size y) (
        Debug(html)
        use GuiPlugin
          check open(
            wName:this.id().#binaryRepr()
            html:html.#binaryRepr()
            x:x.#binaryRepr()
            y:y.#binaryRepr()
            )
          error void
          )
      mut method
      Void set(S that,S id) {   //$('#Alpha').replaceWith('htmlstring')
        S qid=S"'"[This.jsEscape(id)]"'"
        S qText=S"'"[This.jsEscape(that)]"'"
        cmd=S"
          'var oldElem = document.getElementById(
          "[qid]"
          ');
          'oldElem.innerHTML =
          "[qText]"
          ';
          'var parentElem = oldElem.parentNode;
          'var innerElem;
          'while (innerElem = oldElem.firstChild){
          '  parentElem.insertBefore(innerElem, oldElem);
          '  }
          'parentElem.removeChild(oldElem);
          "
        x=this.executeJs(cmd)
        Debug(cmd)
        if x!=S"" (Debug(x))
        return void
        }
      mut method
      Void add(S that,S id) {
        S qid=S"'"[This.jsEscape(id)]"'"
        S qText=S"'"[This.jsEscape(that)]"'"
        cmd=S"
          'var template = document.createElement('div');
          'template.innerHTML =
          "[qText]"
          ';
          'document.getElementById(
          "[qid]"
          ').appendChild(template.firstChild);
          "
        x=this.executeJs(cmd)
        Debug(cmd)
        if x!=S"" (Debug(x))
        return void
        }

      mut method
      S executeJs(S that)
        S.#from(binaryRepr: use GuiPlugin
          check executeJs(wName:this.id().#binaryRepr(),command:that.#binaryRepr())
          error void)

      mut method
      mut Iterator events()
        Iterator.#$(id: this.id(), current:S"")

      Iterator: K.$ <>< {//@untrusted
        S id, var S current

        class method S #$auxFetchEvent(S id) exception Void {
          Library s=use GuiPlugin
            check eventPending(wName:id.#binaryRepr())
            exception void
          catch error Library x exception void
          return S.#from(binaryRepr: s)
          }

        mut method
        Void #next() exception Void {
          s=Iterator.#$auxFetchEvent(id:this.id())
          return this.current(s)
          }

        read method
        Void #checkEnd() void

        read method
        S #inner() (this.current())

        read method
        Void #close() void
        }
//----------------------
      }
    }
  }

Task: (
  Debug(S"Starting deployment")
  Load.DeployLibrary.#$(
    path:Path"Exported",
    url:Url"localhost/GuiLib.L42"
    )<><GuiLib()
    )

}
