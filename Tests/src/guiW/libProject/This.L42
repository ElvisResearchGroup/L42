{reuse L42.is/AdamTowel02

GuiLib:{class method Library (){
  reuse L42.is/AdamTowel02
    Exported:{
      Event:Data<><{
      S targetId
      S eventId
      Strings all
      class method This(S that)(
        s=that.splitOn(chars:S"::")
        This(
          targetId:s.val(0Size)
          eventId:s.val(1Size)
          all:s
          )
        )
      }
    Widget:UnsafeRefactor.This$er<><{interface
      S id
      Size left
      Size top
      Size width
      Size height
      S color
      read List children
      This$: {interface implements Concept.Base}
      List: Collections.vector(ofMut:This$)
      mut method Bool dispatch(Event that)
      }
    DispatchTrait:Resource<><{
      S id
      mut Widget.List children
      mut method Void process(Event event)
      mut method Bool dispatch(Event that) {
        if this.id()==that.targetId() (
          this.process(event:that)
          return Bool.true()
          )
        with w in this.#children().#vals() (
          if w.dispatch(that) (return Bool.true())
          )
        return Bool.false()
        }
      }
    Gui:Use[Load<><{reuse L42.is/GuiLib}]<><{

      mut method Void display(S title, Size x, Size y,mut Widget body)
        this.display(title:title,x:x,y:y,body:body,events:Strings[])
      mut method Void display(S title, Size x, Size y,mut Widget body,Strings events) (
        this.open(
          title:title
          body:S"<div id='Top'></div>"
          x:x
          y:y
          )
        this.draw(body)
          {
          with event in events.vals() (
            if event==S"EXIT" (return void)
            unused=body.dispatch(Event(event))
            this.draw(body)
            )
          with event in this.events() (
            if event==S"EXIT" (return void)
            unused=body.dispatch(Event(event))
            this.draw(body)
            )
          return void
          }
        this.close()
        )

      read method S format(read Widget that)
        S"<div id='"[that.id()]"' onclick="[S.doubleQuote()]"event42('"[that.id()]"::Pressed::more')"[S.doubleQuote()]" style='"[]
          "position: absolute;"[]
          "left: "[that.left()]"px;"[]
          "top: "[that.top()]"px;"[]
          "height: "[that.height()]"px;"[]
          "width: "[that.width()]"px;"[]
          "background-color: "[that.color()]";'>"[]
          "<div style='position: relative;'>"
          [with w in that.children().vals() (
            use[this.format(w)]
          )]"</div></div>"

      mut method Void draw(read Widget that)
        this.set(S"<div id='Top' style='"[]
            "position: relative; height: 750px; width: 750px; border: solid black 2px;'>"
            [this.format(that)]"</div>"
          id:S"Top")
      }
    }
  }
}
Task: (
  Debug(S"Starting deployment")
  Load.DeployLibrary.#$(
    path:Path"Exported",
    url:Url"localhost/WidgetGuiLibOld.L42"
    )<><Refactor2.rename(path:\"Exported.Gui" into:\"Exported")<><GuiLib()
    )
}
