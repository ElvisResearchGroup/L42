{reuse L42.is/AdamTowel02


Person:Data<><{ S name, var Size age
  read method
  Bool #invariant()
    this.name()!=S"" & this.age()>= 0Size
  }

Main1:{
  Person p1=Person(name:S"Bob",age:10Size)
  Debug(p1==p1)
  Debug.test(p1 expected:S"
  '[name:"Bob", age:"10"]
  ".withoutRight())
  Debug.test(p1.with(age:20Size) expected:S"
  '[name:"Bob", age:"20"]
  ".withoutRight())

  (
    unused=Person(name:S"", age:2Size)
    catch error Data.Invariant.Fail x
      void
    Debug(S"Fail")
    )
  return ExitCode.normal()
  }

Persons:Collections.vector(ofMut:Person)
Address: Alphanumeric <>< {
  class method
  This parse(S that) This(that)
  }
Family:(p=Persons, a=Address
  Data<><{ capsule Persons members, var Address address
    mut method
    Void add(capsule Person member)
      this.#members().add(left:member)
    }
  )
Main2:{
  f=Family(members:
    Persons[
      Person(name:S"Bob",age:32Size);
      Person(name:S"Charls",age:35Size);
      ]
    address:Address"Willis 25A"
    )
  /*how to automatically be able to write the following?
  f=Family(
    members:\[\(name:\"Bob",age:32\);\(name:\"Charls",age:35\)]
    address:\"Willis 25A"
    )
  */
  f.add(member:Person(name:S"Attila",age:7Size))
  Debug.test(f expected:S"
  '[members:[[name:"Attila", age:"7"]; [name:"Bob", age:"32"]; [name:"Charls", age:"35"]], address:"Willis 25A"]
  ".withoutRight())
  return ExitCode.normal()
  }

RelaxedPerson:Data<><{var Num age,S name, mut Person father
  read method Bool #invariant()
    this.name()!=S"" & this.age()>= 0Num
  }
Main3:{

  (
    p=RelaxedPerson(age:2Num, name:S"Bob",
    father:Person(name:S"Bob",age:32Size)
    )
    p.age(Num"-2")
    catch error Data.Invariant.Fail x
      Debug.test(x, expected:S"
        'Data.Invariant.Fail"invalid object detected
        ' [age:"-2", name:"Bob", father:..]!"
        ".replace(S.nl() into:S"")
        )
    Debug(S"Fail")
    )
  return ExitCode.normal()
  }
}