{reuse L42.is/AdamTowel02

PrW:{//private wrapper
  //@plugin is.L42.connected.withSafeOperators
  //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
  class method Library <<(Library that)use This
    check #main(_1_Library:that)
    error void
  }
Refactor2:PrW<<{
  Fail:{interface implements Concept.ToS, Concept.Classable
    //not implement Guard, not a message, no cause/more then a msg?
    method S text()  
    }
  ErrorW:{
    class method Library trait(){
      //@plugin is.L42.connected.withSafeOperators
      implements Fail
      
      method toS() This.readableName()[]" "[this.text()]""
      
      refine read method class This class() This
      
      method readableName() GetMyName(This)
      
      method is(subtype) {
        with subtype (on class This return Bool.true())
        return Bool.false()
        }
      class method
      Library #pluginUnresponsive(Library binaryRepr)
        binaryRepr  
      }
    class method Library <<(Library that)
      SafeOperatorsAccess.compose(
        left:that,
        right:This.trait()
      )
    }
  JavaImport:{
    //@plugin is.L42.connected.withSafeOperators
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
    class method
    Library #pluginUnresponsive(Library binaryRepr)
      binaryRepr  

    class method
    Library <<(Library that)
    exception UnresolvedOverloading, ClassUnfit, MethodUnfit
      This.main(that)

    class method
    Library main(Library that)
    exception UnresolvedOverloading, ClassUnfit, MethodUnfit

    }
  UnresolvedOverloading:ErrorW<<{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$UnresolvedOverloading
    }
  ClassUnfit:ErrorW<<{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassUnfit
    }
  MethodUnfit:ErrorW<<{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodUnfit
    } 
  }

A:Refactor2.JavaImport<<{//@plugin  toFix @pluginPart testAux.TestShortPrograms$A
  class method Void #pluginUnresponsive(Library binaryRepr) void
  class method This()
  method This m()
  class method This k()
  method Void foo(This bar) exception This
  }
Main:(
  Debug(S"Hi Start")
  A a= A()
  Debug(S"Hi constructor")
  A a0=a.m()
  Debug(S"Hi method m")
  A a1=A.k()
  Debug(S"Hi method k static")
  a.foo(bar:a0)
  Debug(S"Hi wops Fail")
  catch exception A x ( 
    Debug(S"Hi cath!") 
    ExitCode.normal()
    )
  Debug(S"Fail")
  {/*fail*/}
  )

}