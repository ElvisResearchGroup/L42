{reuse L42.is/AdamTowel02

RenNum:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Num")<><that
  }

RenPlus:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Plus")<><that
  }

RenNeg:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Neg")<><that
  }

$exp:Resource<><{
  Exp:{interface}
  T:{implements Exp}
  }

$num:Resource<><Use[RenNum<><$exp()]<><{
  Num:{
    method Size value()
    class method Num of(Size value)
    }
  }

$plus:Resource<><Use[RenPlus<><$exp()]<><{
  Exp:{}
  Plus:{
    method Exp left()
    method Exp right()
    class method Plus of(Exp left, Exp right)
    }
  }

$neg:Resource<><Use[RenNeg<><$exp()]<><{
  Exp:{}
  Neg:{
    method Exp term()
    class method Neg of(Exp term)
  }
}

$base:Resource<>< {
  Exp:{interface method Size eval()}
  T:{implements Exp}
  }

$baseNum:Resource<><Use[$num(); RenNum<><$base()]<>< {
  Num:{
    method Size eval()
      this.value()
    }
  }

$basePlus:Resource<><Use[$plus(); RenPlus<><$base()]<>< {
  Plus:{
    method Size eval()
      this.left().eval()+this.right().eval()
    }
  }

$baseNeg:Resource<><Use[$neg(); RenNeg<><$base()]<>< {
  Neg:{
    method Size eval()
     Size"-1" * this.term().eval()
    }
  }

$basePlusNeg:Resource<><Use[$basePlus();$baseNeg();$baseNum()]<><{}


$show:Resource<><Use[$base()]<><{
  Exp:{interface
    method S show()
    }
  T:{implements Exp}
  }

$showNum:Resource<><Use[$num(); RenNum<><$show()]<><{
  Num:{
    method S show()
      this.value().toS()
    }
  }

$showPlus:Resource<><Use[$plus(); RenPlus<><$show()]<><{
  Plus:{
    method S show()
      this.left().show()++S" + "++this.right().show()
    }
  }

$showNeg:Resource<><Use[$neg(); RenNeg<><$show()]<><{
  Neg:{
    method S show()
      S"-("++this.term().show()++S")"
    }
  }

$showPlusNeg:Resource<><Use[$showNum();$showPlus();$showNeg()]<><{}


$dble:Resource<><Use[$base()]<><{
  Exp:{interface method Exp dble()}
  T:{implements Exp}
  }

$dbleNum:Resource<><Use[$num(); RenNum<><$dble()]<><{
  Exp:{}
  Num:{
    method Exp dble()
      Num.of(value: this.value()*2Size)
    }
  }

$dblePlus:Resource<><Use[$plus(); RenPlus<><$dble()]<><{
  Exp:{}
  Plus:{
    method Exp dble()
      Plus.of(left: this.left().dble(), right: this.right().dble())
    }
  }

$dbleNeg:Resource<><Use[$neg(); RenNeg<><$dble()]<><{
  Exp:{}
  Neg:{
    method Exp dble()
      Neg.of(term: this.term().dble())
    }
  }

$dblePlusNeg:Resource<><Use[$dbleNum();$dblePlus();$dbleNeg()]<><{}

$showDblePlusNeg:Resource<><Use[$showPlusNeg();$dblePlusNeg()]<><{ }

$equals:Resource<><Use[$base()]<><{
  Exp:{interface method Bool eql(Exp that)}
  T:{implements Exp
    method Bool exactEqual(T that)
    method eql(that){
      with that (on T  return this.exactEqual(that) )
      return Bool.false()
      }
    }
  }

$equalsNum:Resource<><Use[$num(); RenNum<>< $equals()]<><{
  Num:{
    method Bool exactEqual(Num that)
      this.value()==that.value()
    }
  }

$equalsPlus:Resource<><Use[$plus(); RenPlus<><$equals()]<><{
  Plus:{
    method Bool exactEqual(Plus that)
      this.left().eql(that.left()) & this.right().eql(that.right())
    }
  }

$equalsNeg:Resource<><Use[$neg(); RenNeg<><$equals()]<><{
  Neg:{
    method Bool exactEqual(Neg that)
      this.term().eql(that.term())
    }
  }

$equalsPlusNeg:Resource<><Use[$equalsPlus();$equalsNeg();$equalsNum()]<><{}

$equalsShowPlusNeg:Resource<><Use[$equalsPlusNeg();$showPlusNeg()]<><{}




Main: {
  Debug(S"Hello ExpProblemScalaWay")
  return ExitCode.normal()
} }