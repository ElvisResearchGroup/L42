{reuse L42.is/AdamTowel02

RenNum:{class method Library<>< (Library right) exception Guard
  Refactor2.rename(path:\"T" into:\"Num")<><right
  }

RenPlus:{class method Library<>< (Library right) exception Guard
  Refactor2.rename(path:\"T" into:\"Plus")<><right
  }

RenNeg:{class method Library<>< (Library right) exception Guard
  Refactor2.rename(path:\"T" into:\"Neg")<><right
  }
//above, header not counted

$exp:Resource<><{ //3 lines
  Exp:{interface}

  T:{implements Exp}
  }

$num:Resource<><Use[RenNum<><$exp()]<><{ //4 lines
  Num:{
    method Size value()
    class method Num of(Size value)
    }
  }

$plus:Resource<><Use[RenPlus<><$exp()]<><{  //6 lines
  Exp:{interface}

  Plus:{
    method Exp left()
    method Exp right()
    class method Plus of(Exp left, Exp right)
    }
  }

$neg:Resource<><Use[RenNeg<><$exp()]<><{  //5 lines
  Exp:{interface}

  Neg:{
    method Exp term()
    class method Neg of(Exp term)
  }
}

$eval:Resource<>< {  //4 lines
  Exp:{interface
    method Size eval()
    }

  T:{implements Exp}
  }

$evalNum:Resource<><Use[$num(); RenNum<><$eval()]<>< {  // 2*3 lines
  Num:{ method Size eval() this.value() }
  }

$evalPlus:Resource<><Use[$plus(); RenPlus<><$eval()]<>< {
  Plus:{ method Size eval() this.left().eval()+this.right().eval() }
  }

$evalNeg:Resource<><Use[$neg(); RenNeg<><$eval()]<>< {
  Neg:{ method Size eval() Size"-1" * this.term().eval() }
  }

$show:Resource<><Use[$exp()]<><{  //4 lines
  Exp:{interface
    method S show()
    }

  T:{implements Exp}
  }

$showNum:Resource<><Use[$num(); RenNum<><$show()]<><{  //2*3 lines
  Num:{ method S show() this.value().toS() }
  }

$showPlus:Resource<><Use[$plus(); RenPlus<><$show()]<><{
  Plus:{ method S show() this.left().show()++S" + "++this.right().show() }
  }

$showNeg:Resource<><Use[$neg(); RenNeg<><$show()]<><{
  Neg:{ method S show() S"-("++this.term().show()++S")" }
  }
//----------------
$double:Resource<><{  //4 lines
  Exp:{interface
    method Exp double()
    }

  T:{implements Exp}
  }

$doubleNum:Resource<><Use[$num(); RenNum<><$double()]<><{ //2*3 lines
  Exp:{interface}//not counted, needed in the full language only to guide scope resolution in the desugaring

  Num:{ method Exp double() Num.of(value: this.value()*2Size) }
  }

$doublePlus:Resource<><Use[$plus(); RenPlus<><$double()]<><{
  Exp:{interface}

  Plus:{ method Exp double() Plus.of(left: this.left().double(), right: this.right().double()) }
  }

$doubleNeg:Resource<><Use[$neg(); RenNeg<><$double()]<><{
  Exp:{interface}

  Neg:{ method Exp double() Neg.of(term: this.term().double()) }
  }
//---------
$equals:Resource<><Use[$eval()]<><{  //6 lines
  Exp:{interface
    method Bool eql(Exp that)
    method Bool equalToT(T that)
    }

  T:{implements Exp
    method eql(that) that.equalToT(this)
    }
  }

$equalsNum:Resource<><Use[$num();  //5*3 lines
  Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToNum(that)"]
  <><RenNum<>< $equals()]<><{
  Num:{
    method Bool equalToNum(Num that) this.value()==that.value()
    }
  }

$equalsPlus:Resource<><Use[$plus();
  Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToPlus(that)"]
  <><RenPlus<><$equals()]<><{
  Plus:{
    method Bool equalToPlus(Plus that)
      this.left().eql(that.left()) & this.right().eql(that.right())
    }
  }

$equalsNeg:Resource<><Use[$neg();
  Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToNeg(that)"]
  <><RenNeg<><$equals()]<><{
  Neg:{
    method Bool equalToNeg(Neg that) this.term().eql(that.term())
    }
  }

 //16+6 lines glue code
$equalsAll:Resource<><Use[$equalsNeg();$equalsPlus();$equalsNum()]<><{
  Exp:{interface
    method Bool eql(Exp that)
    method Bool equalToNum(Num that)
    method Bool equalToPlus(Plus that)
    method Bool equalToNeg(Neg that)
    method Size eval()
    }

  Num:{implements Exp
    method equalToPlus(that) Bool.false()
    method equalToNeg(that) Bool.false()
    }

  Plus:{implements Exp
    method equalToNum(that) Bool.false()
    method equalToNeg(that) Bool.false()
    }

  Neg:{implements Exp
    method equalToNum(that) Bool.false()
    method equalToPlus(that) Bool.false()
    }
  }

$evalAll:Resource<><Use[$evalPlus();$evalNeg()]<><$evalNum()

$showAll:Resource<><Use[$showNum();$showPlus()]<><$showNeg()

$doubleAll:Resource<><Use[$doubleNum();$doublePlus()]<><$doubleNeg()

ESDAll0:Use[Use[$evalPlus();$evalNeg()]<><$evalNum();
  Use[$showNum();$showPlus()]<><$showNeg();
  $doubleNum();$doublePlus()]<><$doubleNeg()


ESDAll:Use[$evalAll();$showAll()]<><$doubleAll()

ESDEAll:Use[$evalAll();$showAll();$doubleAll()]<><$equalsAll()

$equals2:Resource<><{ //7 lines
  Exp:{interface method Bool equals(Exp that)}
  T:{implements Exp
    method Bool exactEquals(T that)
    method equals(that){
      with that (on T  return this.exactEquals(that) )
      return Bool.false()
      }
    }
  }

$equalsNum2:Resource<><Use[$num();RenNum<><$equals2()]<><{  //2*3 lines
  Num:{ method Bool exactEquals(Num that) this.value().equals(that.value()) }
  }

$equalsPlus2:Resource<><Use[$plus();RenPlus<><$equals2()]<><{
  Plus:{ method Bool exactEquals(Plus that) this.left().equals(that.left()) & this.right().equals(that.right()) }
  }

$equalsNeg2:Resource<><Use[$neg();RenNeg<><$equals2()]<><{
  Neg:{method Bool exactEquals(Neg that) this.term().equals(that.term()) }
  }

$equalsAll2:Resource<><Use[$equalsNum2();$equalsPlus2()]<><$equalsNeg2()

ESDEAll2:Use[$evalAll();$showAll();$doubleAll()]<><$equalsAll2()

Main: {
  class Any i=ESDAll
  class Any i1=ESDEAll
  class Any i2=ESDEAll2
  Debug(S"Hello ExpProblemScalaWay")
  return ExitCode.normal()

/*
//------------------
//                              lines     methods
//original scala base            95       12+3
//scala base fully modularized   149      12+3
//scala base instance            41        3
//42 traits Base                 97       4*3+7=19
//42 class Base                  3         0

//original scala eq               51      10
//scala eq d-dispatch             58      10
//scala eq instance               43       3
//42 trait eq d-dispatch          34       6
//42 class dd instance            25      11
//42 traits EqCast                21       6
//42 class cast instance           3       0






As a third case study, we
challenge our approach against an extended version of the expression problem,
as defined in [].
We then compare with the proposed solution is in scala.

The first part of the problem is about defining....

For this part of the problem we use
just base+show

//      lines  methods  fully modularized units  traits class/interf
//42     68      4*2+6    12 (4*3)                12     15
//scala  68      4*2       5 (3+2)                10     6
//42collated //just for this part...
5= (numEval+plusEval+negEval+numShow+plusNegShow)

We propose a more modular solution,
and we compare it with their result.
Their solution requires ....
while our solution require just composition and renaming.






$notEquals:Resource<><{
  Exp:{interface
    method Bool equalToT(Arg that)
    }
  Arg:{}
  T:{implements Exp
    method equalToT(that) Bool.false()
    }
  }
NotEq:{
  class method Library (Selector that,Path arg, Path of) exception Guard
    Refactor2.rename(path:\"T" into:of)<><
    Refactor2.rename(path:\"Arg" into:arg)<><
    Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:that]<><$notEquals()
    }

$equalsPlusNeg:Resource<><Use[
  Use[
    NotEq(Selector"equalToPlus(that)" arg:Path"Plus" of:Path"Num");
    NotEq(Selector"equalToNeg(that)" arg:Path"Neg" of:Path"Num");
    ]<><$equalsNum();
  Use[
    NotEq(Selector"equalToNum(that)" arg:Path"Num" of:Path"Plus");
    NotEq(Selector"equalToNeg(that)" arg:Path"Neg" of:Path"Plus");
    ]<><$equalsPlus();
  Use[
    NotEq(Selector"equalToNum(that)" arg:Path"Num" of:Path"Neg");
    NotEq(Selector"equalToPlus(that)" arg:Path"Plus" of:Path"Neg");
    ]<><$equalsNeg();
  ]<><{}
*/
} }
