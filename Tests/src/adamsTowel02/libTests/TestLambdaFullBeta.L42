{reuse L42.is/AdamTowel02

$exp:Resource<><{
  Exp:{interface}

  X:{implements Exp
    S inner
    class method X(S inner)
    }

  Lambda:{implements Exp
    S x
    Exp body
    class method Lambda (S x, Exp body)
    }

  Application:{implements Exp
    Exp e1
    Exp e2
    class method Application (Exp e1, Exp e2)
    }

  Literal:{implements Exp
    Num inner
    class method Literal (S inner)
    }

  Subtraction:{implements Exp
    Exp e1
    Exp e2
    class method Subtraction (Exp e1, Exp e2)
    }
  }

$transformation:Resource<><Use[$exp()]<><{
  Arg:{}

  Exp:{interface
    method Exp op(Arg that)
    }

  X:{implements Exp
    method op(that)
      this
    }

  Lambda:{implements Exp
    method op(that)
      Lambda(x:this.x(), body:this.body().op(that))
    }

  Application:{implements Exp
    method op(that)
      Application(e1:this.e1().op(that), e2:this.e2().op(that))
    }

  Literal:{implements Exp
    method op(that)
      this
    }

  Subtraction:{implements Exp
    method op(that)
      Subtraction(e1:this.e1().op(that), e2:this.e2().op(that))
    }
  }

$query:Resource<><Use[$exp()]<><{
  Arg:{}

  Exp:{interface
    method Void op(mut Arg that)
    }

  X:{implements Exp
    method op(that)
      void
    }

  Lambda:{implements Exp
    method op(that)
      this.body().op(that)
    }

  Application:{implements Exp
    method op(that) (
      this.e1().op(that)
      this.e2().op(that)
      )
    }

  Literal:{implements Exp
    method op(that)
      void
    }

  Subtraction:{implements Exp
    method op(that) (
      this.e1().op(that)
      this.e2().op(that)
      )
    }
  }


$allVar:Resource<><Use[
  Refactor2.redirect(path:\"Arg" into:Strings)<><
  Refactor2.Method[
    abstract:\"op(that)" of:\"X";
    abstract:\"op(that)" of:\"Lambda";
    rename:\"op(that)" of:\"Exp" into:\"allVar(that)"]<><
  $query()]<><{
    X:{
      method Void allVar(mut Strings that)
        that.add(right:this.inner())
      }
    Lambda:{
      method Void allVar(mut Strings that)
        that.add(right:this.x())
      }
    }
/*
$freeVar:Resource<><Use[Refactor2.Method[
  abstract:\"op(that)" of:\"Lambda";
  rename:\"allVar(that)" of:\"Exp" into:\"fv(that)"
  ]<><$allVar()]<><{
    Lambda:{
      method Void fv(mut Strings that) (
        mut Strings tmp=Strings.empty()
        this.body().allVar(tmp)
        tmp.removeAll(val:this.x())
        with s in tmp.vals() (that.add(right:s))
        that
        )
      }
    }

$dimension:Resource<><{
    Exp:{
      method Num dimension()
      }
    X:{
      method Num dimension() 1Num
      }
    Lambda:{
      method Num dimension()
        1Num+this.body().dimension()
      }
    Application:{
      method Num dimension()
        1Num+this.e1().dimension()+this.e2().dimension()
      }
    Literal:{
      method Num dimension() 1Num
      }
    Subtraction:{
      method Num dimension()
        1Num+this.e1().dimension()+this.e2().dimension()
      }
    }
$substErr:Resource<><Use[
  Refactor2.rename(path:\"Arg" into:SubstArg)<><
  Refactor2.Method[
    abstract:\"op(that)" of:\"X";
    abstract:\"op(that)" of:\"Lambda";
    rename:\"op(that)" of:\"Exp" into:\"subst()"]<><
  $transformation()]<><{
    Exp:{}
    SubstArg:{S x, Exp e,Strings fve}
    X:{
      method Exp subst(SubstArg that){
        if this.inner()==that.x() (return that.e())
        return this
        }
      }
    Lambda{
      method Exp subst(SubstArg that){
        if this.x()==that.x() (return this)
        if this.x() < that.fve() (error X"")
        return Lambda(x:this.x(), body:this.body().subst(that))
        }
      }


$alphaFresh:Resource<><Use[
  Refactor2.rename(path:\"Arg" into:\"AlphaArg")<><
  Refactor2.Method[
    abstract:\"op(that)" of:\"X";
    abstract:\"op(that)" of:\"Lambda";
    rename:\"op(that)" of:\"Exp" into:\"alpha(that)"]<><
  $transformation()]<><{
    Exp:{}
    AlphaArg:{S x, S y}
    X:{
      method Exp alpha(AlphaArg that){
        if this.inner()==that.x() (return X(inner:that.y()))
        return this
        }
      }
    Lambda{
      method Exp alpha(AlphaArg that){
        if this.x()!=that.x() (return this)
        return Lambda(x:this.y(), body:this.body().alpha(that))
        }
      }

$subst:Resource<><Use[$alphaFresh();
  Refactor2.Method[abstract:\"op(that)" of:\"Lambda"]<><$substErr()]<><{
    SubstArg:{mut Strings used
      class method SubstArg(S x, Exp e,Strings fve,mut Strings used)
      }
    Lambda{
      method Exp alpha(SubstArg that){
        if this.x()==that.x() (return this)
        if this.x() < that.fve() (
              AlphaXFresh alpha = new AlphaXFresh(e.x, used);
          yFresh=This.fresh(x:this.x(),this.used)
          body=this.body().alpha(AlphaArg(x:this.x() y:yFresh));
          return Lambda(x:yFresh, body:body);
          )
        return Lambda(x:this.x(), body:this.body().subst(that))
        }
    class method S fresh(S x,mut Strings used) {
      with num in Range(start:0Size) (
        current = x ++ num.toS();
        if current !< used (
          used.add(right:current)
          return current
          )
        )
        error X""
      }
    }


$fullBeta:Resource<><Use[$subst();$freeVar()
  Refactor2.rename(path:\"Arg" into:\"BetaArg")<><
  Refactor2.Method[
    abstract:\"op(that)" of:\"X";
    abstract:\"op(that)" of:\"Lambda";
    rename:\"op(that)" of:\"Exp" into:\"beta(that)"]<><
  $transformation()]<><{
    Exp:{}
    Lambda:{}
    Literal:{}
    BetaArg:{mut Strings used}
    Application:{
      method Exp beta(BetaArg that){
        e2=this.e2.beta(that)
        with e1=this.e1() (on Lambda (
          fve=Strings.empty()
          e.fv(fve)
          sa=SubstArg(x:e1.x(),e:e2,fve:fve,used:used)
          return e1.body().subst(sa)
          ))
        return Application(e1:this.e1().beta(that),e2:e2)
        }
      }
    Subtraction:{
      with e1=this.e1(), e2=this.e2() (on Literal, Literal (
        return Literal(e1.num()-e2.num())
        ))
      return Application(e1:this.e1().beta(that),e2:this.e2().beta(that))
      }
    }

Minimize
*/
Main: {
  Debug(S"Hello LambdaFulLBeta")
  return ExitCode.normal()
  }
//-------------------------
//lines   topconcepts  members
// 106      14           37
// 366


 }