{reuse L42.is/AdamTowel02


T:Data<><{var Size x, var Size y
  read method Bool #invariant()0Size<=this.x() & this.x()<this.y()

  class method This() This(x: 0Size, y: 1Size)
  mut method Void m() (
    X[this.y() - this.x() >= 0Size]
    this.x(this.x() + 3Size)
    this.y(4Size * this.y())
    )
  }
//-------------
U: Data <>< { var Size g
    mut method Void n() this.g(3Size)
}
T: Data <>< { var capsule U f
    read method Bool #invariant() 0Size <= this.f().g()

    mut method Void m() this.#f().n()
}
//----------------------

Reader: {interface
    mut method Size getChar()
}
CharList: Collections.vector(of: Size)

ArrayReader: Data <>< {implements Reader
    var capsule CharList src
    var Size n
    read method Bool #invariant() (
        0Size <=this.n()  & this.n() <= this.src().size()
    )
    class method mut This(capsule CharList source)
        This(src: source, n: 0Size)
    method getChar() (
        var Size ch = 0Size
        if this.n() == this.src().size() (
            ch := Size"-1"
        ) else (
            ch := this.src().val(this.n())
            this.n(this.n() + 1Size)
        )
        ch
    )
}
OReader: Opt(Reader)

Lexer: Data<><{
    capsule OReader rd
    read method Bool #invariant() this.rd().isPresent()
    class method mut This(capsule Reader reader) This(rd: OReader(reader))
    mut method Size getToken() (
        var Size t = 0Size
        var Size ch = Size"0"
        while ch != Size"-1" (
            ch := this.#rd().#get().getChar()
            t := t + ch
        )
        t
    )
}