{reuse L42.is/AdamTowel02

//insert from(base)

Dir: Enumeration"left, right, top, down"
      
Main:{
  Assert.Holds[
    Dir.left()!=Dir.right();
    Dir.top()!=Dir.right();
    Dir.names().size()==4Size
    ]
  Debug(S"foo")
  return ExitCode.normal()
  }
//bug in parser for many <<
//reorganize refactor, add default for no path and /, done for rename
/*
1  Redirect:{ that->Path  that is Refactor.Redirect(\"T" to:Size)
Rename.selector(   .path(  .selector(of
2  RenameSelector:{(Selector that, Path of, Selector to)   that->Selector, of->Path to->Selector,   shortcut no of
3  RenamePath:{(Path that, Path to)  that,to->Path
RemoveImplementation. selector( .selector(of  .selector( of: andMoveTo: .selector( andMoveTo: .path(
4  RemoveImplementationSelector:{(Selector that, Path of)
5  RemoveImplementationPath:{(Path that)
6  MoveImplementationSelector:{(Selector that, Path of,Selector to)
Documentation .addSelector .addSelector(of .addPath .removeSelector( .removeSelector(of .removePath(
7  AddDocumentationSelector:{(Selector that, Path of,Introspection.Doc doc)
8  AddDocumentationPath:{(Path that,Introspection.Doc doc)
Hide.path( .selector( .selector(of
9  MakePrivatePath:{(Path that) //Can be called Hide
10  MakePrivateSelector:{(Selector that, Path of)
Call it ComposeMethods?
11  SumMethods:{   (Selector that,Selector and, Path of, S over, Selector to)
12  MakeMethod:{    (Selector that, Path of, Introspection.Mdf.List mdfs, Size exceptionN)
*/
}

