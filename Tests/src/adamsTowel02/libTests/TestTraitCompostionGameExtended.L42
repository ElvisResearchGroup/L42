{reuse L42.is/AdamTowel02

//
//
// *******************************************************************
// *******************************************************************
// ****************************** Utils ******************************
// *******************************************************************
// *******************************************************************
//
//

Point: Data<><{Size x, Size y}
PointNotFilled: Message.$<><{implements Guard}
PointFilled: Message.$<><{implements Guard}

//
//
// **********************************************************************
// **********************************************************************
// ****************************** Entities ******************************
// **********************************************************************
// **********************************************************************
//
//

ModuleEntities: Trait({
  Graphics: {
    mut method Void draw(S that, Size x, Size y)
    }

  $Player: {}

  Entity: {interface
    read method Point point()
    mut method Void point(Point that, mut World world, Bool updateWorld)
    read method Void drawOnto(mut Graphics that)
    read method S toS()
    mut method Void use(mut $Player playerUsingThis, mut World world)
    }

  World: {
    read method Bool hasEntityAt(Point that)
    mut method Void addEntity(mut Entity that)
    mut method Void removeEntity(Point that)
    mut method mut Entity getEntityAt(Point that)
    }

  HasPoint: Trait(K <>< {implements Entity
    var Point p
    method point() this.p()
    })

  EntityBase: HasPoint & Trait({implements Entity
    method toS() (
      S""[this.representation()]"("[this.point()]")"
      )

    read method S representation()

    method drawOnto(that) (
      that.draw(this.representation(), x: this.point().x(), y: this.point().y())
      )
    })

  ItemBase: EntityBase & Trait({
    mut method Void p(Point that)
    mut method Void point(Point that, mut World world, Bool updateWorld) (
      if world.hasEntityAt(that) (
        error PointFilled""
        )

      if updateWorld (
        world.removeEntity(this.point())
        )

      this.p(that)

      if updateWorld (
        world.addEntity(this)
        )
      )
    })

  OptionalEntity: Option(Entity)

  Player: EntityBase & {implements Entity
    var mut OptionalEntity currentItem

    class method mut This (fwd Point p, fwd mut OptionalEntity currentItem)

    class method mut This (fwd Point p) (
      This(p: p, currentItem: OptionalEntity())
      )

    mut method Void p(Point that)

    method point(that, world, updateWorld) (
      this.p(that)

      if this.#currentItem().isPresent() (
        this.#currentItem().#get().point(that, world: world, updateWorld: updateWorld)
        )
      )

    read method S representation() (
      if this.currentItem().isPresent() (S"p")
      else (S"P")
      )

    mut method Void attemptToPickUpOrDropItem(mut World world) (
      Bool isItemCloseToPlayer = world.hasEntityAt(this.point())

      if !this.currentItem().isPresent() & isItemCloseToPlayer (
        mut Entity itemCloseToPlayer = world.getEntityAt(this.point())
        this.pickUpItem(item: itemCloseToPlayer, world: world)
        )

      if this.currentItem().isPresent() & !isItemCloseToPlayer (
        this.dropItem(world: world)
        )
      )

    mut method Void attemptToUseItem(mut World world) (
      if this.#currentItem().isPresent() (
        this.#currentItem().#get().use(playerUsingThis: this, world: world)
        )
      )

    mut method Void pickUpItem(mut Entity item, mut World world) (
      world.removeEntity(item.point())
      this.currentItem(OptionalEntity(item))
      )

    mut method Void dropItem(mut World world) (
      world.addEntity(this.#currentItem().#get())
      this.currentItem(OptionalEntity())
      )

    mut method Void removeCurrentItem() (
      if !this.#currentItem().isPresent() (
        error X""
        )

      this.currentItem(OptionalEntity())
      )

    method use(playerUsingThis, world) (
      error X"Cannot use Player"
      )
    }

  RockItem: ItemBase & {implements Entity
    read method S representation() S"R"
    method use(playerUsingThis, world) void
    }
  AppleItem: ItemBase & {implements Entity
    read method S representation() S"A"
    method use(playerUsingThis, world) void
    }

  Entities: Collections.vector(ofMut: Entity)
  Points: Collections.vector(of: Point)

  ItemSpawnerItem: ItemBase & {implements Entity
    var Size semiRandomSeed
    Size numberOfItemsToSpawn

    class method Size minimumNumberOfItemsToSpawn() 1Size

    class method mut This (fwd Point p) (
      error X""
      )

    class method mut This (Point p, Size numberOfItemsToSpawn) (
      if numberOfItemsToSpawn < This.minimumNumberOfItemsToSpawn() (
        error X""
        )
      This(p: p, semiRandomSeed: 0Size, numberOfItemsToSpawn: numberOfItemsToSpawn)
      )

    class method mut This (fwd Point p, fwd Size semiRandomSeed, fwd Size numberOfItemsToSpawn)

    read method S representation() S"I"

    method use(playerUsingThis, world) (
      mut Entities itemsToSpawn = this.createItemsToSpawn(world: world)

      if itemsToSpawn.size() > 0Size (
        playerUsingThis.removeCurrentItem()

        with item in itemsToSpawn.#vals() (
          world.addEntity(item)
          )
        )
      )

    mut method mut Entities createItemsToSpawn(mut World world) {
      Points neighbourPoints = this.getNeighbourPoints()
      // NOTE: neighbourPoints should be randomly shuffled here, but randomness
      // is not implemented in the language yet
      mut Entities createdItems = Entities[]

      with i in Range(neighbourPoints.size()) (
        Point point = neighbourPoints.val(i)
        if createdItems.size() < this.numberOfItemsToSpawn() & !world.hasEntityAt(point) (
          createdItems.add(right: this.createItemAt(point: point))
          )
        )

      return createdItems
      }

    mut method mut Entity createItemAt(Point point) (
      RockItem(p: point)
      // TODO: AFTER randomly select item
      )

    read method Points getNeighbourPoints() (
      p = this.point()
      Points[
        Point(x: p.x() + 1Size, y: p.y());
        Point(x: p.x() - 1Size, y: p.y());
        Point(x: p.x(), y: p.y() + 1Size);
        Point(x: p.x(), y: p.y() - 1Size)
        ]
      )
    }

  })"$Player"<=Path"Player"

TestModuleEntities: ModuleEntities & {
  Entity: {interface
    read method S toS()
    }
  RockItem: {implements Entity}

  class method Point newItemPoint() (
    Point(x: 1Size, y: 1Size)
    )

  World: K <>< {
    mut Strings mutations
    var Bool isNewItemPointOccupied

    read method Bool hasEntityAt(Point that) {
      Bool isNewItemPoint = that == TestModuleEntities.newItemPoint()
      if isNewItemPoint (
        return this.isNewItemPointOccupied()
        )
      return Bool.false()
      }

    mut method Void addEntity(mut Entity that) (
      this.#mutations().add(right: S"addEntity("[that.toS()]")")
      )

    mut method Void removeEntity(Point that) (
      this.#mutations().add(right: S"removeEntity("[that.toS()]")")
      )

    mut method mut Entity getEntityAt(Point that) (error X"")
    }

  Graphics: K <>< {
    mut method Void draw(S that, Size x, Size y) (
      Debug.appendLog(
        S"graphicsDrawLog",
        msg: S"[representation:"[that]", x:"[x]", y:"[y]"]"
        )
      )
    }

  Tests: K <>< {
    class method Void #$EntityBase_drawOnto_drawsTheCorrectSquare() (
      unused = Debug.#$readLog(S"graphicsDrawLog") // Clear log
      mut RockItem entity = RockItem(p: Point(x: 4Size, y: 5Size))

      entity.drawOnto(Graphics())

      Debug.test(
        Debug.#$readLog(S"graphicsDrawLog"),
        expected: S"[representation:R, x:4, y:5]"
        )
      )

    class method Void #$ItemBase_setPoint_throwsExceptionWhenTryingToMoveToAnOccupiedPoint() (
      mut World world = World(mutations: Strings[], isNewItemPointOccupied: Bool.true())
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))

      item.point(
        TestModuleEntities.newItemPoint(),
        world: world,
        updateWorld: Bool.true()
        )

      catch error PointFilled pf void
      error X"Expected exception to be thrown"
      )

    class method Void #$ItemBase_setPoint_modifiesItemBaseInternalPoint() (
      mut World world = World(mutations: Strings[], isNewItemPointOccupied: Bool.false())
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))

      item.point(
        TestModuleEntities.newItemPoint(),
        world: world,
        updateWorld: Bool.true()
        )

      Debug.test(item.point(), expected: TestModuleEntities.newItemPoint())
      )

    class method Void #$ItemBase_setPoint_movesItselfInTheWorld() (
      mut World world = World(mutations: Strings[], isNewItemPointOccupied: Bool.false())
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))

      item.point(
        TestModuleEntities.newItemPoint(),
        world: world,
        updateWorld: Bool.true()
        )

      Debug.test(
        world.#mutations(),
        expected: S"
          '[removeEntity([x:"0", y:"0"]); addEntity(R([x:"1", y:"1"]))]
          ".withoutRight()
        )
      )

    class method Void #$ItemBase_setPoint_doesNotModifyTheWorldIfPassedFalse() (
      mut World world = World(mutations: Strings[], isNewItemPointOccupied: Bool.false())
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))

      item.point(
        TestModuleEntities.newItemPoint(),
        world: world,
        updateWorld: Bool.false()
        )

      Debug.test(world.#mutations(), expected: S"[]")
      )
    }
  }

TestModuleEntities_EntityBase_drawOnto_drawsTheCorrectSquare:
  TestModuleEntities.Tests.#$EntityBase_drawOnto_drawsTheCorrectSquare()

TestModuleEntities_ItemBase_setPoint_throwsExceptionWhenTryingToMoveToAnOccupiedPoint:
  TestModuleEntities.Tests.#$ItemBase_setPoint_throwsExceptionWhenTryingToMoveToAnOccupiedPoint()

TestModuleEntities_ItemBase_setPoint_modifiesItemBaseInternalPoint:
  TestModuleEntities.Tests.#$ItemBase_setPoint_modifiesItemBaseInternalPoint()

TestModuleEntities_ItemBase_setPoint_movesItselfInTheWorld:
  TestModuleEntities.Tests.#$ItemBase_setPoint_movesItselfInTheWorld()

TestModuleEntities_ItemBase_setPoint_doesNotModifyTheWorldIfPassedFalse:
  TestModuleEntities.Tests.#$ItemBase_setPoint_doesNotModifyTheWorldIfPassedFalse()

//
//
// *******************************************************************
// *******************************************************************
// ****************************** World ******************************
// *******************************************************************
// *******************************************************************
//
//

ModuleWorld: Trait({
  Graphics: {}
  World: {}
  Entity: {interface
    read method Point point()
    mut method Void point(Point that, mut World world, Bool updateWorld)
    read method Void drawOnto(mut Graphics that)
    }
  Player: {implements Entity}

  }) & Trait({

  Entity: {interface
    read method Point point()
    }
  Player: {
    class method mut Player (fwd Point p)
    mut method Void attemptToPickUpOrDropItem(mut World world)
    mut method Void attemptToUseItem(mut World world)
    }

  Graphics: {
    mut method Void draw(S that, Size x, Size y)
    }

  PointToEntityMap: Trait(Collections.vector(ofMut: Entity)) & {
    mut method mut Entity getEntityAt(Point that) {
      with elem in this.#vals() (
        if elem.point() == that (return elem)
        )
      error PointNotFilled""
      }

    read method Bool hasEntityAt(Point that) {
      with elem in this.vals() (
        if elem.point() == that (return Bool.true())
        )
      return Bool.false()
      }

    mut method Void addEntity(mut Entity that) (
      if this.hasEntityAt(that.point()) (
        error PointFilled""
        )
      this.add(right: that)
      )

    mut method Void removeEntity(Point that) {
      with i in Range(this.size()) (
        elem = this.val(i)
        if elem.point() == that (
          this.remove(i)
          return void
          )
        )
      error PointNotFilled""
      }
    }

  World: K <>< {
    mut PointToEntityMap map
    mut Player player

    class method mut World () (
      World(
        map: PointToEntityMap[],
        player: Player(p: Point(x: 0Size, y: 0Size))
        )
      )

    class method Size gameSizeInCells() 10Size

    mut method mut Entity getEntityAt(Point that) (
      this.#map().getEntityAt(that)
      )

    read method Bool hasEntityAt(Point that) (
      this.map().hasEntityAt(that)
      )

    mut method Void addEntity(mut Entity that) (
      this.#map().addEntity(that)
      )

    mut method Void removeEntity(Point that) (
      this.#map().removeEntity(that)
      )

    mut method Void movePlayerUp() (
      this.#player().point(\point.with(y: \y-1Size), world: this, updateWorld: Bool.false())
      )

    mut method Void movePlayerDown() (
      this.#player().point(\point.with(y: \y+1Size), world: this, updateWorld: Bool.false())
      )

    mut method Void movePlayerLeft() (
      this.#player().point(\point.with(x: \x-1Size), world: this, updateWorld: Bool.false())
      )

    mut method Void movePlayerRight() (
      this.#player().point(\point.with(x: \x+1Size), world: this, updateWorld: Bool.false())
      )

    mut method Void attemptToPickUpOrDropItem() (
      this.#player().attemptToPickUpOrDropItem(world: this)
      )

    mut method Void attemptToUseItem() (
      this.#player().attemptToUseItem(world: this)
      )

    mut method Void drawOnto(mut Graphics graphics) (
      mut PointToEntityMap map = this.#map()
      with i in Range(map.size()) (
        read Entity entity = map.val(i)
        entity.drawOnto(graphics)
        )
      this.player().drawOnto(graphics)
      )
    }
  })

TestModuleWorld: ModuleWorld & {
  Graphics: {
    mut method Void draw(S that, Size x, Size y) void
    class method mut This ()
    }
  World: {}

  Entity: {interface
    read method Point point()
    mut method Void point(Point that, mut World world, Bool updateWorld)
    read method Void drawOnto(mut Graphics that)
    }
  HasPoint: Trait(K <>< {implements Entity
    var Point p
    method point() (
      this.p()
      )
    method point(that, world, updateWorld) (
      this.p(that)
      )
    })
  StubEntity: HasPoint & {implements Entity
    method drawOnto(that) (
      Debug.appendLog(
        S"stubEntityDrawPoints", msg: S"Point"[this.point()]""[S.nl()]""
        )
      )
    }
  Player: HasPoint & {implements Entity
    method drawOnto(that) (
      Debug.appendLog(
        S"playerDrawPoints", msg: S"Point"[this.point()]""[S.nl()]""
        )
      )

    mut method Void attemptToPickUpOrDropItem(mut World world) (error X"")

    mut method Void attemptToUseItem(mut World world) (error X"")
  }

  Tests: K <>< {
    mut World world

    class method mut Tests #$() (
      // Clear logs
      unused1 = Debug.#$readLog(S"playerDrawPoints")
      unused2 = Debug.#$readLog(S"stubEntityDrawPoints")

      This(world: World())
      )

    mut method Void addEntity_add2EntitiesToTheSamePoint() (
      Point p = Point(x: 1Size, y: 2Size)
      this.#world().addEntity(StubEntity(p: p))

      this.#world().addEntity(StubEntity(p: p))
      )

    mut method Void addEntity_doesNotThrowExceptionWhenAdding2ItemsToDifferentPoints() (
      this.#world().addEntity(StubEntity(p: Point(x: 1Size, y: 2Size)))

      this.#world().addEntity(StubEntity(p: Point(x: 3Size, y: 4Size)))
      )

    mut method Void removeEntity_whenNoItemIsAtThePoint() (
      this.#world().removeEntity(Point(x: 1Size, y: 2Size))
      )

    mut method Void removeEntity_doesNotThrowExceptionWhenRemovingAnExistingItem() (
      this.#world().addEntity(StubEntity(p: Point(x: 1Size, y: 2Size)))
      this.#world().removeEntity(Point(x: 1Size, y: 2Size))
      )

    mut method Void #$World_drawOnto_drawsPlayerAtInitialPoint() (
      this.#world().drawOnto(graphics: Graphics())

      Debug.test(Debug.#$readLog(S"playerDrawPoints"), expected: S"
        'Point[x:"0", y:"0"]
        ")
      )

    mut method Void #$World_drawOnto_drawsItemAtProvidedPoint() (
      this.#world().addEntity(StubEntity(p: Point(x: 5Size, y: 2Size)))

      this.#world().drawOnto(graphics: Graphics())

      Debug.test(Debug.#$readLog(S"stubEntityDrawPoints"), expected: S"
        'Point[x:"5", y:"2"]
        ")
      )

    mut method Void #$World_drawOnto_drawsPlayerAtMovedPoint() (
      this.#world().movePlayerDown()
      this.#world().movePlayerLeft()

      this.#world().drawOnto(graphics: Graphics())

      Debug.test(Debug.#$readLog(S"playerDrawPoints"), expected: S"
        'Point[x:"-1", y:"1"]
        ")
      )
    }
  }

TestModuleWorld_addEntity_failsWhenAddingTwoItemsToTheSamePoint: (
  TestModuleWorld.Tests.#$().addEntity_add2EntitiesToTheSamePoint()
  catch error PointFilled pf void
  error X"Expected exception to be thrown"
  )

TestModuleWorld_addEntity_doesNotThrowExceptionWhenAdding2ItemsToDifferentPoints:
  TestModuleWorld.Tests.#$().addEntity_doesNotThrowExceptionWhenAdding2ItemsToDifferentPoints()

TestModuleWorld_removeEntity_failsWhenNoItemIsAtThePoint: (
  TestModuleWorld.Tests.#$().removeEntity_whenNoItemIsAtThePoint()
  catch error PointNotFilled pnf void
  error X"Expected exception to be thrown"
  )

TestModuleWorld_removeEntity_doesNotThrowExceptionWhenRemovingAnExistingItem: (
  TestModuleWorld.Tests.#$().removeEntity_doesNotThrowExceptionWhenRemovingAnExistingItem()
  )

TestModuleWorld_World_drawOnto_drawsPlayerAtInitialPoint:
  TestModuleWorld.Tests.#$().#$World_drawOnto_drawsPlayerAtInitialPoint()

TestModuleWorld_World_drawOnto_drawsItemAtProvidedPoint:
  TestModuleWorld.Tests.#$().#$World_drawOnto_drawsItemAtProvidedPoint()

TestModuleWorld_World_drawOnto_drawsPlayerAtMovedPoint:
  TestModuleWorld.Tests.#$().#$World_drawOnto_drawsPlayerAtMovedPoint()


//
//
// *************************************************************************
// *************************************************************************
// ****************************** WorldLoader ******************************
// *************************************************************************
// *************************************************************************
//
//


ModuleWorldLoader: Trait({
  World: {
    class method mut World ()
    mut method Void addEntity(mut Entity that)
    }

  Entity: {interface}
  RockItem: {implements Entity
    class method mut This (fwd Point p)
    }
  AppleItem: {implements Entity
    class method mut This (fwd Point p)
    }
  ItemSpawnerItem: {implements Entity
    class method mut This (Point p, Size numberOfItemsToSpawn)
    }

  WorldLoader: {
    class method mut World #$(S fileName) (
      S content = Debug.#$readFile(fileName: fileName)
      This.loadWorld(content: content)
      )

    class method mut World loadWorld(S content) (
      mut World world = World()

      // withoutLeft() removes the comment line
      Strings lines = content.splitOn(chars: S.nl()).withoutLeft()

      with line in lines.vals() (
        Strings tokens = line.splitOn(chars: S" ")
        S entityTypeName = tokens.val(0Size)
        Point p = Point(
          x: Size.fromS(tokens.val(1Size)),
          y: Size.fromS(tokens.val(2Size))
          )

        mut Entity entity = {
          if entityTypeName == S"ROCK_ITEM" (return RockItem(p: p))
          if entityTypeName == S"APPLE_ITEM" (return AppleItem(p: p))
          if entityTypeName == S"ITEM_SPAWNER_ITEM" (
            number = Size.fromS(tokens.val(3Size))
            return ItemSpawnerItem(p: p, numberOfItemsToSpawn: number)
            )
          error X"Unknown entityTypeName: "[entityTypeName]""
          }

        world.addEntity(entity)
        )
      world
      )
    }
  })

TestModuleWorldLoader: ModuleWorldLoader & {
  Entity: {interface
    read method Point point()
    read method S toS()
    }
  HasPoint: Trait(K <>< {implements Entity
    var Point p
    method point() this.p()
    })
  RockItem: HasPoint & {implements Entity
    method toS() (
      S"RockItem("[this.point()]")"
      )
    }
  AppleItem: HasPoint & {implements Entity
    method toS() (
      S"AppleItem("[this.point()]")"
      )
    }
  ItemSpawnerItem: HasPoint & {implements Entity
    method toS() (
      S"ItemSpawnerItem("[this.point()]")"
      )
    }

  World: K <>< {
    mut Strings addedEntities

    class method mut World () (
      This(addedEntities: Strings[])
      )

    mut method Void addEntity(mut Entity that) (
      this.#addedEntities().add(right: that.toS())
      )
    }

  WorldLoader: {}

  class method Void producesCorrectItems(S content, S expected) (
    mut World world = WorldLoader.loadWorld(content: content)
    Debug.test(world.addedEntities(), expected: expected)
    )
  }

TestModuleWorldLoader_loadWorld_addsARockAtTheCorrectPosition:
  TestModuleWorldLoader.producesCorrectItems(
    content: S"
      '# Comment line
      'ROCK_ITEM 1 2
      ",
    expected: S"
      '[RockItem([x:"1", y:"2"])]
      ".withoutRight()
    )

TestModuleWorldLoader_loadWorld_addsAnAppleAtTheCorrectPosition:
  TestModuleWorldLoader.producesCorrectItems(
    content: S"
      '# Comment line
      'APPLE_ITEM 3 4
      ",
    expected: S"
      '[AppleItem([x:"3", y:"4"])]
      ".withoutRight()
    )

TestModuleWorldLoader_loadWorld_addsMultipleItemsCorrectPositions:
  TestModuleWorldLoader.producesCorrectItems(
    content: S"
      '# Comment line
      'ROCK_ITEM 1 2
      'APPLE_ITEM 3 4
      'APPLE_ITEM 5 6
      ",
    expected: S"
      '[RockItem([x:"1", y:"2"]); AppleItem([x:"3", y:"4"]); AppleItem([x:"5", y:"6"])]
      ".withoutRight()
    )

//
//
// ****************************************************************
// ****************************************************************
// ****************************** UI ******************************
// ****************************************************************
// ****************************************************************
//
//

ModuleUI: Trait({
  Graphics: Trait(Collections.vector(ofMut: Strings)) & {
    mut method Void draw(S that, Size x, Size y) (
      this.#val(y)(x, val: that)
      )

    mut method S asText() S""[
      with y in Range(this.size()) (
        row = this.val(y)
        with x in Range(row.size()) (
          use[S"|"; row.val(x)]
          )
        use[S.nl()]
        )
      ]""

    class method mut This (Size width, Size height) This[
      with y in Range(height) (
        use[Strings[with x in Range(width) (
          use[S"_"]
          )]]
      )]
    }

  World: {
    mut method Void movePlayerUp()
    mut method Void movePlayerDown()
    mut method Void movePlayerLeft()
    mut method Void movePlayerRight()
    mut method Void attemptToPickUpOrDropItem()
    mut method Void attemptToUseItem()
    }

  Action: {
    interface method Void (mut World world)
    }
  Actions: Collections.vector(of: Action)
  MoveUp: K <>< {implements Action method (world) world.movePlayerUp()}
  MoveDown: K <>< {implements Action method (world) world.movePlayerDown()}
  MoveLeft: K <>< {implements Action method (world) world.movePlayerLeft()}
  MoveRight: K <>< {implements Action method (world) world.movePlayerRight()}
  AttemptToPickUpOrDropItem: K <>< {implements Action method (world) world.attemptToPickUpOrDropItem()}
  AttemptToUseItem: K <>< {implements Action method (world) world.attemptToUseItem()}
  })

//
//
// ******************************************************************
// ******************************************************************
// ****************************** App ******************************
// ******************************************************************
// ******************************************************************
//
//

App: ModuleEntities & ModuleWorld & ModuleWorldLoader & ModuleUI & {
  Action: {}
  Actions: {}
  World: {
    mut method S asText() (
      mut Graphics graphics = Graphics(
        width: This.gameSizeInCells(), height: This.gameSizeInCells()
        )
      this.drawOnto(graphics: graphics)
      graphics.asText()
      )
    }

  WorldLoader: {}
  Graphics: {}

  class method S defaultFileName() S"GameGridSaves/game-save-example-extended.txt"

  class method Strings (Actions actions, mut World world) (
    Strings[world.asText()] ++ Strings[
      with action in actions.vals() (
        action(world: world)
        use[world.asText()]
        )
      ]
    )

  class method Strings #$(Actions actions) (
    This(
      actions: actions,
      world: WorldLoader.#$(fileName: This.defaultFileName())
      )
    )
  }

//
//
// *******************************************************************************
// *******************************************************************************
// ****************************** Integration Tests ******************************
// *******************************************************************************
// *******************************************************************************
//
//

IntegrationTest1: {
  mut App.PointToEntityMap map = App.PointToEntityMap[]
  Debug.test(map.hasEntityAt(Point(x: 10Size, y: 20Size)), expected: S"false")
  map.addEntity(App.RockItem(p: Point(x: 10Size, y: 20Size)))
  Debug.test(map.hasEntityAt(Point(x: 10Size, y: 20Size)), expected: S"true")
  map.removeEntity(Point(x: 10Size, y: 20Size))
  Debug.test(map.hasEntityAt(Point(x: 10Size, y: 20Size)), expected: S"false")
  Debug.test(Bool.readableName() expected: S"Bool")
  return ExitCode.normal()
  }

IntegrationTest2: {
  mut App.World world = App.World()
  world.addEntity(App.RockItem(p: Point(x: 2Size, y: 3Size)))
  Debug.test(world.asText(), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest3: {
  mut App.World world = App.World()
  world.addEntity(App.RockItem(p: Point(x: 2Size, y: 3Size)))
  App.Actions actions = App.Actions[App.MoveDown(); App.MoveDown(); App.MoveDown()]
  Strings ss = App(actions: actions, world: world)
  Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|P|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest4: {
  App.Actions actions = App.Actions[App.MoveDown(); App.MoveDown(); App.MoveRight()]
  Strings ss = App.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|P|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest5: {
  App.Actions actions = App.Actions[
    App.MoveDown();
    App.MoveRight();
    App.MoveRight()
    ]
  Strings ss = App.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest6: {
  App.Actions actions = App.Actions[
    App.MoveDown();
    App.MoveRight();
    App.MoveRight();
    App.AttemptToPickUpOrDropItem()
    ]
  Strings ss = App.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|p|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest7: {
  App.Actions actions = App.Actions[
    App.MoveDown();
    App.MoveRight();
    App.MoveRight();
    App.AttemptToPickUpOrDropItem();
    App.AttemptToPickUpOrDropItem()
    ]
  Strings ss = App.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest8: {
  App.Actions actions = App.Actions[
    App.MoveDown();
    App.MoveRight();
    App.MoveRight();
    App.AttemptToPickUpOrDropItem();
    App.MoveLeft();
    App.AttemptToPickUpOrDropItem();
    App.MoveLeft()
    ]
  Strings ss = App.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|P|R|_|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest9: {
  App.Actions actions = App.Actions[
    App.MoveDown();
    App.MoveRight();
    App.MoveRight();
    App.AttemptToPickUpOrDropItem();
    App.AttemptToUseItem()
    ]
  Strings ss = App.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|p|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest10: {
  App.Actions actions = App.Actions[
    App.MoveDown();
    App.MoveDown();
    App.MoveDown();
    App.MoveDown();
    App.MoveRight();
    App.AttemptToPickUpOrDropItem();
    App.AttemptToUseItem()
    ]
  Strings ss = App.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|I|_|_|_|_|_|_|_|_
    '|_|_|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|I|_|_
    '|_|R|_|_|_|R|_|_|_|_
    '|R|P|R|_|_|_|_|_|_|_
    '|_|R|_|_|I|_|_|_|_|_
    '|_|_|_|_|_|_|I|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }
}
