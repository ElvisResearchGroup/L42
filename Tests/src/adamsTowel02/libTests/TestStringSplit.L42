{reuse L42.is/AdamTowel02

Ns:Collections.vector(of:Size)

SplitList:Data<><{
  implements S.Skip
  var Ns initial
  Size remainder
  
  class method mut SplitList (Size that)
    This(initial:Ns.empty() remainder:that)
    
  method (that, index) {
    if this.initial().isEmpty() (
      return this.remainder()
      )
    ret = this.initial().left()
    this.initial(this.initial().withoutLeft())
    return ret
    }
  }
  
  NFromError:{
  class method Size (S that, capsule S.Skip skipper, Size deflt) {
    // We know that all of the errors are strings with a number in them.
    // Run splitter over that, expecting an error with a number, and to return the number.
    // If there is no error, or no number, debug a fail and return the default.
    // If there is a non-string error, re-throw it.
    
    junk = that.split(skipper:skipper)
    Debug(S"[FAIL] Unexpectedly no error from splitting '"[that]"'")
    return deflt
    
    catch error Guard.Operation go (
      e = go.text()
      var S theNum = S""
      digits = S"0123456789"
      
      // There could be a miracle, where multiple digit strings look like our expected result.
      // Right now, I'm living with it.
      with i in Range(e.size()) (
        chr = e.val(i)
        if digits.contains(chr) (
          theNum := theNum++chr
          )
        )
      
      if 0Size == theNum.size() (
        Debug(S"[FAIL] No digits in error from splitting '"[that]"'; '"[e]"'")
        return deflt
        )
        
      return Size.fromS(theNum)
      )
    
    catch error Any e (
      Debug(S"[FAIL]: split of '"[that]"' returned an error of unexpected type.")
      error e
      )
    }
    }

Main:{

  // First, test your test harness
  mut SplitList sl0 = SplitList(initial:Ns[1Size; Size"-2"; 4Size; Size"-8"] remainder:5Size)

  Debug.Test[
    sl0(S"" index:0Size) expected:1Size;
    sl0(S"" index:100Size) expected:Size"-2";
    sl0(S"" index:Size"-100") expected:4Size;
    sl0(S"" index:50Size) expected:(0Size - 8Size);
    sl0(S"alpha" index:0Size) expected:5Size;
    sl0(S"beta" index:0Size) expected:5Size;
    sl0(S"gamma" index:0Size) expected:5Size;
    ]
  
  Debug(S"SplitList with initial complete; sl0="[sl0]"")

  mut SplitList sl1 = SplitList(42Size)
  
  Debug.Test[
    sl1(S"Ford" index:0Size) expected:42Size;
    sl1(S"Prefect" index:Size"-42") expected:42Size;
    sl1(S"Arthur" index:42Size) expected:42Size;
    ]

  Debug(S"SplitList without initial complete; sl1="[sl1]"")
  
  fifteen = S"abcdefghijklmno"
  
  Debug.Test[
    fifteen.split(skipper:SplitList(1Size))
      expected:Strings[S"a";S"b";S"c";S"d";S"e";S"f";S"g";S"h";S"i";S"j";S"k";S"l";S"m";S"n";S"o"];
    fifteen.split(skipper:SplitList(3Size))
      expected:Strings[S"abc";S"def";S"ghi";S"jkl";S"mno"];
    fifteen.split(skipper:SplitList(5Size))
      expected:Strings[S"abcde";S"fghij";S"klmno"];
      
    fifteen.split(skipper:SplitList(Size"-1")) expected:Strings[];
    fifteen.split(skipper:SplitList(Size"-3")) expected:Strings.empty();
    fifteen.split(skipper:SplitList(Size"-5")) expected:Strings[];
    ]

  Debug.Test[
    fifteen.split(skipper:SplitList(initial:Ns[1Size; Size"-2"; 4Size; Size"-8";] remainder:0Size)) 
    expected:Strings[S"a";S"defg"];
    fifteen.split(skipper:SplitList(initial:Ns[Size"-1"; 2Size; Size"-4"; 8Size] remainder:0Size)) 
      expected:Strings[S"bc";S"hijklmno"];
    fifteen.split(skipper:SplitList(initial:Ns[8Size; Size"-4"; 2Size; Size"-1"] remainder:0Size))
      expected:Strings[S"abcdefgh"; S"mn";];
    fifteen.split(skipper:SplitList(initial:Ns[Size"-8"; 4Size; Size"-2"; 1Size] remainder:0Size))
      expected:Strings[S"ijkl"; S"o"];
    ]
  
  Debug(S"Binary power list tests complete.")
  
  Debug.Test[
    fifteen.split(skipper:S.SkipChars(chars:S"ao")) expected:Strings[S"bcdefghijklmn"];
    fifteen.split(skipper:S.SkipChars(chars:S"bcdefghijklmn")) expected:Strings[S"a"; S"o"];
    fifteen.split(skipper:S.SkipChars(chars:S"b d f h j l n"))
      expected:Strings[S"a"; S"c"; S"e"; S"g"; S"i"; S"k"; S"m"; S"o"];
    fifteen.split(skipper:S.SkipChars(chars:S"abc ghi mno"))
      expected:Strings[S"def";S"jkl";];
    fifteen.split(skipper:S.SkipChars(chars:S"def jkl"))
      expected:Strings[S"abc";S"ghi";S"mno";];
      
    // and, slightly arbitrarily, redo the last two with the usual interface, splitOn()
    fifteen.splitOn(chars:S"abc ghi mno")
      expected:Strings[S"def";S"jkl";];
    fifteen.splitOn(chars:S"def jkl")
      expected:Strings[S"abc";S"ghi";S"mno";];
    ]
    
    // Failure to error tests
    Debug.Test[
      NFromError(fifteen, skipper:SplitList(initial:Ns[] remainder:0Size) deflt:999Size) expected:0Size;
      NFromError(fifteen, skipper:SplitList(initial:Ns[] remainder:Size"-4") deflt:999Size) expected:16Size;
      NFromError(fifteen, skipper:SplitList(initial:Ns[] remainder:6Size) deflt:999Size) expected:18Size;
      NFromError(fifteen, skipper:SplitList(initial:Ns[] remainder:Size"-20") deflt:999Size) expected:20Size;
      NFromError(fifteen, skipper:SplitList(initial:Ns[] remainder:99Size) deflt:999Size) expected:99Size;
      ]

  Debug(S"All tests complete.")


  return ExitCode.normal()
  }
  
}