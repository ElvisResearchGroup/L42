{reuse L42.is/AdamTowel02

NotStringable:{Size that
  class method This (Size that)}

Person:Data<><{S name, var Size age}
Strange:Data<><{Concept.Base name}

PP:(p=Person, Data<><{capsule Person p})
PP2:Data<><{capsule Concept.Base p}

TestWrong:{
  n=NotStringable
    (
    l1=Data<><{NotStringable name}
    catch exception Data.AddEquals.Fail void
    error X""
    )
    (
    l2=Data<><{Any name}
    catch exception Data.AddEquals.Fail void
    error X""
    )
  return ExitCode.normal()
  }

TestOk:{
  dq = S.doubleQuote()
  quoteBob = dq ++ S"Bob" ++ dq
  quoteTen = dq ++ S"10" ++ dq


  p=Person(name:S"Bob",age:10Size)
  Debug.test(p expected:S"[name:"[quoteBob]", age:"[quoteTen]"]")

  pp=PP(p:Person(name:S"Bob",age:10Size))
  Debug.test(pp, expected:S"[p:[name:"[quoteBob]", age:"[quoteTen]"]]")

  pp2=PP2(p:Person(name:S"Bob",age:10Size))
  Debug.test(pp2, expected:S"[p:Person[name:"[quoteBob]", age:"[quoteTen]"]]")

  pp3=PP2(p:PP(p:Person(name:S"Bob",age:10Size)))
  Debug.test(pp3, expected:S"[p:PP[p:[name:"[quoteBob]", age:"[quoteTen]"]]]")


  return ExitCode.normal()
  }
}
