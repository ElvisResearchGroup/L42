{reuse L42.is/AdamTowel02

RenNum:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Num")<><that
  }

RenPlus:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Plus")<><that
  }

RenNeg:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Neg")<><that
  }

$exp:Resource<><{
  Exp:{interface}
  T:{implements Exp}
  }

$baseT:Resource<>< {
  Exp:{interface
    method Size eval()
    }
  T:{implements Exp}
  }

$base:Resource<><Use[RenNum<><$baseT()]<>< {
  Num:{
    method Size value()
    class method Num of(Size value)
    method Size eval()
      this.value()
    }
  }

$basePlus:Resource<><Use[$base();RenPlus<><$baseT()]<>< {
  Exp:{}
  Plus:{
    method Exp left()
    method Exp right()
    class method Plus of(Exp left, Exp right)
    method Size eval()
      this.left().eval()+this.right().eval()
    }
  }

$baseNeg:Resource<><Use[$base();RenNeg<><$baseT()]<>< {
  Exp:{}
  Neg:{
    method Exp term()
    class method Neg of(Exp term)
    method Size eval()
     Size"-1" * this.term().eval()
    }
  }

$basePlusNeg:Resource<><Use[$basePlus()]<><
  Refactor2.Method[abstract:\"eval()" of:\"Num"]<><$baseNeg()

$showT:Resource<><Use[$baseT()]<><{
  Exp:{interface
    method S show()
    }
  T:{implements Exp}
  }

$show:Resource<><Refactor2.Method[abstract:\"eval()" of:\"Num"]
    <><Use[$base(); RenNum<><$showT()]<><{
  Num:{
    method S show()
      this.value().toS()
    }
  }

$showPlus:Resource<><Use[$basePlus();$show(); RenPlus<><$showT()]<><{
  Plus:{
    method S show()
      this.left().show()++S" + "++this.right().show()
    }
  }

$showNeg:Resource<><Use[$baseNeg();$show(); RenNeg<><$showT()]<><{
  Neg:{
    method S show()
      S"-("++this.term().show()++S")"
    }
  }

$showPlusNeg:Resource<><Use[$showPlus()]<><
  Refactor2.Method[abstract:\"eval()" of:\"Num";abstract:\"show()" of:\"Num"
  ]<><$showNeg()

$dbleT:Resource<><Use[$baseT()]<><{
  Exp:{interface
    method Exp dble()
    }
  T:{implements Exp}
  }

$dble:Resource<><Refactor2.Method[abstract:\"eval()" of:\"Num"]
  <><Use[$base(); RenNum<><$dbleT()]<><{
  Exp:{}
  Num:{
    method Exp dble()
      Num.of(value: this.value()*2Size)
    }
  }

$dblePlus:Resource<><Use[$basePlus();$dble(); RenPlus<><$dbleT()]<><{
  Exp:{}
  Plus:{
    method Exp dble()
      Plus.of(left: this.left().dble(), right: this.right().dble())
    }
  }

$dbleNeg:Resource<><Use[$baseNeg();$dble(); RenNeg<><$dbleT()]<><{
  Exp:{}
  Neg:{
    method Exp dble()
      Neg.of(term: this.term().dble())
    }
  }

$dblePlusNeg:Resource<><Use[$dblePlus()]<><
  Refactor2.Method[abstract:\"eval()" of:\"Num";abstract:\"dble()" of:\"Num";
  ]<><$dbleNeg()

$showDblePlusNeg:Resource<><Use[$showPlusNeg()]<><
  Refactor2.Method[abstract:\"eval()" of:\"Num";abstract:\"eval()" of:\"Plus";
  abstract:\"eval()" of:\"Neg";]<><$dblePlusNeg()

$equalsT:Resource<><Use[$baseT()]<><{
  Exp:{interface
    method Bool eql(Exp that)
    method Bool equalToT(T that)
    }
  T:{implements Exp
    method eql(that) that.equalToT(this)
    }
  }

$notEqualsT:Resource<><{
  Exp:{interface
    method Bool eql(Exp that)
    method Bool equalToT(Arg that)
    }
  Arg:{}
  T:{implements Exp
    method equalToT(that) Bool.false()
    }
  }

NotEq:{
  class method Library (Selector that,Path arg, Path of) exception Guard
    Refactor2.rename(path:\"T" into:of)<><
    Refactor2.rename(path:\"Arg" into:arg)<><
    Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:that]<><$notEqualsT()
    }

$equals:Resource<><Refactor2.Method[abstract:\"eval()" of:\"Num"]
  <><Use[$base();Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToNum(that)"]
    <><RenNum<><$equalsT()
  ]<><{
  Num:{
    method Bool equalToNum(Num that)
      this.value()==that.value()
    }
  }

$equalsPlus: (
    equalNumAim=Use[
    Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToNum(that)"]
    <><RenNum<><$equalsT()
    ]<><
    NotEq(Selector"equalToPlus(that)" arg:Path"Plus" of:Path"Num")

  equalPlusAim=Use[
    Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToPlus(that)"]
    <><RenPlus<><$equalsT()
    ]<><
    NotEq(Selector"equalToNum(that)" arg:Path"Num" of:Path"Plus")

  equalAim=Use[equalPlusAim]<><equalNumAim

  baseAim=Use[RenPlus<><$baseT()]<><RenNum<><$baseT()

  aim=Use[equalAim]<><baseAim
  Debug(S"Can I sum")
  //tmp0=Use[$basePlus()]<><aim
  tmp0=Use[$equals();$basePlus()]<><aim
  //NotEq(Selector"equalToNum(that)" arg:Path"Num" of:Path"Plus");


  Debug(S"Can I sum2")
  tmp=Use[tmp0]<><
    NotEq(Selector"equalToPlus(that)" arg:Path"Plus" of:Path"Num")
  Debug(S"Safe")
  renPlus=RenPlus<><$equalsT()
  Debug(S"Can I sum")
  //  NotEq(Selector"equalToNum(that)" arg:Path"Num" of:Path"Plus");
Resource<><Use[
  renPlus;
  tmp;
  ]<><{
  Plus:{
    method Bool equalToPlus(Plus that)
      this.left().eql(that.left()) & this.right().eql(that.right())
    }
  }

  )
/*
$equalsNeg:Resource<><Use[$baseNeg(); $equals(); RenNeg<><$equalsT()]<><{
  Neg:{
    method Bool exactEqual(Neg that)
      this.term().eql(that.term())
    }
  }

$equalsPlusNeg:Resource<><Use[$equalsPlus()]<><
  Refactor2.Method[abstract:\"eval()" of:\"Num";abstract:\"eql(that)" of:\"Num";
  abstract:\"exactEqual(that)" of:\"Num";]<><$equalsNeg()

$equalsShowPlusNeg:Resource<><Use[$equalsPlusNeg()]<><
  Refactor2.Method[abstract:\"eval()" of:\"Num";abstract:\"eval()" of:\"Plus";
  abstract:\"eval()" of:\"Neg";]<><$showPlusNeg()
*/
Main: {
  Debug(S"Hello ExpProblemScalaWay")
  return ExitCode.normal()
} }