{reuse L42.is/AdamTowel02

Email: Alphanumeric <>< {
  S local //fields
  S domain

  class method
  This parse(S that) {
    index= that.indexOfLeft(val:S"@") //works only for simple emails
    if index < 0Size (error Alphanumeric.ParseFail"@ not found")
    local= that(end: index) //string slicing
    domain= that(start: index+1Size ) //string slicing
    if domain.contains(S"@") (error Alphanumeric.ParseFail"multiple @ found")
    return This(that,local: local,domain: domain)
    } //call the factory with fields plus the original string
  }

Main:{

X.Pre[1Size == 1Size]  // because we went through a phase of being unsure about assertions

myEmail= Email"arthur.dent@gmail.com"

X[
  myEmail.local() ==S"arthur.dent";
  myEmail.domain() ==S"gmail.com";
  myEmail.toS() ==S"arthur.dent@gmail.com" msg: S"Original string does not round-trip:" ++ myEmail.toS();
  ]

  Debug(S"Email parsing complete")

  // Try to exercise Alphanumeric.Fail

  var Alphanumeric.Fail bb={
    lib=Alphanumeric <>< {interface}
    catch exception Alphanumeric.Fail b (return b)
    error S"unable to exercise Alphanumeric.Fail"
  }
  var Message.Opt e = bb.responseOf()

X[
  e.isPresent() msg:S"Alphanumeric<><{interface}: (expected) error has no responseOf()";
  Refactor2.ClassClash.is(subtype:e.#get().class())
    msg: S"Alphanumeric<><{interface} response != ClassClash";
]

  // Try to exercise the catch on MethodClash
  var Alphanumeric.Fail bb1= {
    lib=Alphanumeric <>< {class method Void #builder()}
    catch exception Alphanumeric.Fail b (return b)
    error S"unable to exercise MethodClash in Alphanumeric"
  }
  e := bb1.responseOf()

X[
  e.isPresent() msg:S"Alphanumeric<><{builder()}: (expected) error has no responseOf()";
  Refactor2.MethodClash.is(subtype:e.#get().class())
    msg: S"Alphanumeric<><{builder()} response != MethodClash";
]

  Debug(S"Mis-metaprogramming tests complete")

  return ExitCode.normal()
  }
}