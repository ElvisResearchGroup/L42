{reuse L42.is/AdamTowel02

RenLit:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Lit")<><that
  }

RenSum:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"Sum")<><that
  }

RenUMinus:{class method Library<>< (Library that) exception Guard
  Refactor2.rename(path:\"T" into:\"UMinus")<><that
  }

$exp:Resource<><{
  Exp:{interface}
  T:{implements Exp}
  }

$lit:Resource<><Use[RenLit<><$exp()]<><{
  Lit:{
    method Num inner()
    class method Lit of(Num inner)
    }
  }

$sum:Resource<><Use[RenSum<><$exp()]<><{
  Exp:{}
  Sum:{
    method Exp left()
    method Exp right()
    class method Sum of(Exp left, Exp right)
    }
  }

$uMinus:Resource<><Use[RenUMinus<><$exp()]<><{
  Exp:{}
  UMinus:{
    method Exp inner()
    class method UMinus of(Exp inner)
  }
}

$expToS:Resource<><{
  Exp:{interface
    method S toString()
    }
  T:{implements Exp}
  }

$litToS:Resource<><Use[$lit(); RenLit<><$expToS()]<><{
  Lit:{
    method S toString()
      this.inner().toS()
    }
  }

$sumToS:Resource<><Use[$sum(); RenSum<><$expToS()]<><{
  Sum:{
    method S toString()
      this.left().toString()++S"+"++this.right().toString()
    }
  }

$uMinusToS:Resource<><Use[$uMinus(); RenUMinus<><$expToS()]<><{
  UMinus:{
    method S toString()
      S"-"++this.inner().toString()
    }
  }

$expEval:Resource<><{
  Exp:{interface method Num eval()}
  T:{implements Exp}//24
  }

$sumEval:Resource<><Use[$sum(); RenSum<><$expEval()]<>< {
  Sum:{
    method Num eval()
      this.left().eval()+this.right().eval()
    }
  }

$expEquals2:Resource<><{
  Exp:{interface
    method Bool equals(Exp that)
    method Bool equalToT(T that)
    }
  T:{implements Exp
    method equals(that)
      that.equalToT(this)
    }
  }

$litEquals2: Use[$lit();
  Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToLit(that)"]
  <><RenLit<><$expEquals2()]<><{
    Lit:{
      method Bool equalToLit(Lit that)
        this.inner().equals(that.inner())
      }
    }

$sumEquals2: Use[$sum();
  Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToSum(that)"]
  <><RenSum<><$expEquals2()]<><{
    Sum:{
      method Bool equalToSum(Sum that)
        this.left().equals(that.left()) & this.right().equals(that.right())
      }
    }

$uMinusEquals2: Use[$uMinus();
  Refactor2.Method[rename:\"equalToT(that)" of:\"Exp" into:\"equalToUMinus(that)"]
  <><RenUMinus<><$expEquals2()]<><{
    UMinus:{
      method Bool equalToUMinus(UMinus that)
        this.inner().equals(that.inner())
      }
    }

//-------------------------
//lines   topconcepts  members
// 106      14           37
// 366

$expEquals:Resource<><{
  Exp:{interface method Bool equals(Exp that)}
  T:{implements Exp
    method Bool exactEqual(T that)
    method equals(that){
      with that (on T  return this.exactEqual(that) )
      return Bool.false()
      }
    }
  }

$litEquals:Use[$lit();RenLit<><$expEquals()]<><{
  Lit:{
    method Bool exactEquals(Lit that)
      this.inner().equals(that.inner())
    }
  }

$sumEquals:Use[$sum();RenSum<><$expEquals()]<><{
  Sum:{
    method Bool exactEquals(Sum that)
      this.left().equals(that.left()) & this.right().equals(that.right())
    }
  }

$uMinusEquals:Use[$uMinus();RenUMinus<><$expEquals()]<><{
  UMinus:{
    method Bool exactEquals(UMinus that)
      this.inner().equals(that.inner())
    }
  }

Main: {
  Debug(S"Hello LambdaFulLBeta")
  return ExitCode.normal()
} }