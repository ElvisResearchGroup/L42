{reuse L42.is/AdamTowel02

Predicate:{
  interface implements Concept.Base,
  refine read method class This class()
  refine class method read This cast(read Concept.Classable that)
  refine class method mut This #cast(mut Concept.Classable that)
  method Bool (read Node.List that)
  }
Transformer:{interface    method Void(mut Node.List that)}

Node:Data<><UnsafeRefactor.This$er<><{
    var S text
    var mut List nodes
    This$:{implements Concept.Equals, Concept.ToS}
    List:Collections.vector(ofMut:This$)
    }

Graph:Data<><{
  capsule Node.List inner
  Predicate inv
  mut method Void transform(Transformer that)that(this.#inner())
  read method Bool #invariant() this.inv()(this.inner())
  }
GraphSmall:Data<><{implements Predicate
  method (that) that.size()<20Size }

GraphAdd:Data<><{implements Transformer
  method (that) (
    n=Node(text:that.size().toS(),nodes:Node.List[])
    with ni in that.#vals() (n.#nodes().add(right:ni))
    that.add(right:n)
    )
  }
Main:{
  g=Graph(inner:Node.List[], inv:GraphSmall())
  g.transform(GraphAdd())
  g.transform(GraphAdd())
  Debug(g)
  return ExitCode.normal()
  }
}