{reuse L42.is/AdamTowel02

//
//
// *******************************************************************
// *******************************************************************
// ****************************** Utils ******************************
// *******************************************************************
// *******************************************************************
//
//

Point: Data<><{Size x, Size y}
PointNotFilled: Message.$<><{implements Guard}
PointFilled: Message.$<><{implements Guard}

//
//
// **********************************************************************
// **********************************************************************
// ****************************** Entities ******************************
// **********************************************************************
// **********************************************************************
//
//

ModuleEntities: Trait({
  Graphics: {
    mut method Void draw(S that, Size x, Size y)
    }

  World: {
    read method Bool hasEntityAt(Point that)
    mut method Void addEntity(mut Entity that)
    mut method Void removeEntity(Point that)
    }

  Entity: {interface
    read method Point point()
    mut method Void point(Point that, mut World world)
    read method Void drawOnto(mut Graphics that)
    read method S toS()
  }

  EntityBase: HasPoint & Trait({implements Entity
    var Point p
    read method Point point() this.p()
    
    read method S toS() S""[this.representation()]"("[this.point()]")"
    
    read method S representation()
    method drawOnto(that) (
      that.draw(this.representation(), x: this.point().x(), y: this.point().y())
      )
    })
  ItemBase: EntityBase & Trait({
    mut method Void p(Point that)
    mut method Void point(Point that, mut World world) {
      if world.hasEntityAt(that) (error PointFilled"")

      world.removeEntity(this.point())
      this.p(that)
      world.addEntity(this)
      return void
      }
    })

  Player: EntityBase & {
    mut method Void p(Point that)
    mut method Void point(Point that, mut World world) (
      this.p(that)
      )

    read method S representation() S"P"
    }
  RockItem: ItemBase & {
    read method S representation() S"R"
    }
  AppleItem: ItemBase & {
    read method S representation() S"A"
    }
  })

TestModuleEntities: ModuleEntities & {
  Entity: {}
  
  World: K <>< {
    mut Strings mutations

    mut method Void addEntity(mut Entity that) (
      this.#mutations().add(right: S"addEntity("[that.toS()]"")
      )

    mut method Void removeEntity(Point that) (
      this.#mutations().add(right: S"removeEntity("[that.toS()]"")
      )
    }

  Graphics: K <>< {
    mut method Void draw(S that, Size x, Size y) (
      Debug.appendLog(
        S"graphicsDrawLog",
        msg: S"[representation:"[that]", x:"[x]", y:"[y]"]"
        )
      )
    }

  Tests: K <>< {
    mut Graphics graphics
    mut World world
    Point newItemPoint

    class method mut Tests #$() (
      // Clear mutations
      unused = Debug.#$readLog(S"graphicsDrawLog")

      This(
        graphics: Graphics(),
        world: World(mutations: Strings[]),
        newItemPoint: Point(x: 1Size, y: 1Size)
        )
      )

    mut method Void #$EntityBase_drawOnto_drawsTheCorrectSquare() (
      mut RockItem entity = RockItem(p: Point(x: 4Size, y: 5Size))

      entity.drawOnto(this.#graphics())

      Debug.test(
        Debug.#$readLog(S"graphicsDrawLog"),
        expected: S"[representation:R, x:4, y:5]"
        )
      )

    mut method Void #$ItemBase_setPoint_doesNotModifyTheWorldIfTryingToMoveToAnOccupiedPoint() (
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))
      mut RockItem extraItem = RockItem(p: this.newItemPoint())
      // TODO: put in world

      item.point(this.newItemPoint(), world: this.#world())

      Debug.test(
        this.#world().#mutations(),
        expected: S"[]"
        )
      )

    mut method Void #$ItemBase_setPoint_modifiesItemBaseInternalPoint() (
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))
      // TODO: put in world

      item.point(this.newItemPoint(), world: this.#world())

      Debug.test(item.point(), expected: this.newItemPoint())
      )

    mut method Void #$ItemBase_setPoint_movesItselfInTheWorld() (
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))
      // TODO: put in world

      item.point(this.newItemPoint(), world: this.#world())

      Debug.test(
        this.#world().#mutations(),
        expected: S"
          '[removeEntity(RockItem([x:"0", y:"0"])); addEntity(RockItem([x:"1", y:"1"]))]
          ".withoutLeft()
        )
      )

    mut method Void #$ItemBase_setPoint_doesNotModifyTheWorldIfNotInTheWorld() (
      mut RockItem item = RockItem(p: Point(x: 0Size, y: 0Size))
      mut RockItem extraItem = RockItem(p: this.newItemPoint())
      // TODO: not in world

      item.point(this.newItemPoint(), world: this.#world())

      Debug.test(
        this.#world().#mutations(),
        expected: S"[]"
        )
      )
    }
  }

TestModuleEntities_EntityBase_drawOnto_drawsTheCorrectSquare:
  TestModuleEntities.Tests.#$().#$EntityBase_drawOnto_drawsTheCorrectSquare()

TestModuleEntities_ItemBase_setPoint_doesNotModifyTheWorldIfTryingToMoveToAnOccupiedPoint:
  TestModuleEntities.Tests.#$().#$ItemBase_setPoint_doesNotModifyTheWorldIfTryingToMoveToAnOccupiedPoint()

TestModuleEntities_ItemBase_setPoint_modifiesItemBaseInternalPoint:
  TestModuleEntities.Tests.#$().#$ItemBase_setPoint_modifiesItemBaseInternalPoint()

TestModuleEntities_ItemBase_setPoint_movesItselfInTheWorld:
  TestModuleEntities.Tests.#$().#$ItemBase_setPoint_movesItselfInTheWorld()

TestModuleEntities_ItemBase_setPoint_doesNotModifyTheWorldIfNotInTheWorld:
  TestModuleEntities.Tests.#$().#$ItemBase_setPoint_doesNotModifyTheWorldIfNotInTheWorld()

//
//
// *******************************************************************
// *******************************************************************
// ****************************** World ******************************
// *******************************************************************
// *******************************************************************
//
//

ModuleWorld: Trait({
  Graphics: {}
  World: {}
  Entity: {interface
    read method Point point()
    mut method Void point(Point that, mut World world)
    read method Void drawOnto(mut Graphics that)
    }
  Player: {implements Entity}

  }) & Trait({

  Entity: {interface
    read method Point point()
    }
  Player: {}

  Graphics: {
    mut method Void draw(S that, Size x, Size y)
    }

  PointToEntityMap: Trait(Collections.vector(ofMut: Entity)) & {
    mut method mut Entity getEntityAt(Point that) {
      with elem in this.#vals() (
        if elem.point() == that (return elem)
        )
      error PointNotFilled""
      }

    read method Bool hasEntityAt(Point that) {
      with elem in this.vals() (
        if elem.point() == that (return Bool.true())
        )
      return Bool.false()
      }

    mut method Void addEntity(mut Entity that) (
      if this.hasEntityAt(that.point()) (error PointFilled"")
      this.add(right: that)
      )

    mut method Void removeEntity(Point that) {
      with i in Range(this.size()) (
        elem = this.val(i)
        if elem.point() == that (
          this.remove(i)
          return void
          )
        )
      error PointNotFilled""
      }
    }

  World: K <>< {
    mut PointToEntityMap map
    mut Player player

    class method Size gameSizeInCells() 10Size

    mut method mut Entity getEntityAt(Point that) (
      this.getEntityAt(that)
      )

    read method Bool hasEntityAt(Point that) (
      this.hasEntityAt(that)
      )

    mut method Void addEntity(mut Entity that) (
      this.addEntity(that)
      )

    mut method Void removeEntity(Point that) (
      this.removeEntity(that)
      )

    mut method Void movePlayerUp() (
      this.#player().point(\point.with(y: \y-1Size), world: this)
      )

    mut method Void movePlayerDown() (
      this.#player().point(\point.with(y: \y+1Size), world: this)
      )

    mut method Void movePlayerLeft() (
      this.#player().point(\point.with(x: \x-1Size), world: this)
      )

    mut method Void movePlayerRight() (
      this.#player().point(\point.with(x: \x+1Size), world: this)
      )

    mut method Void drawOnto(mut Graphics graphics) (
      mut PointToEntityMap map = this.#map()
      with i in Range(map.size()) (
        read Entity entity = map.val(i)
        entity.drawOnto(graphics)
        )
      this.player().drawOnto(graphics)
      )
    }
  })

TestModuleWorld: ModuleWorld & {
  Graphics: {
    mut method Void draw(S that, Size x, Size y) void
    class method mut This ()
    }
  PointToEntityMap: {}
  World: {}

  Entity: {interface
    read method Point point()
    mut method Void point(Point that, mut World world)
    read method Void drawOnto(mut Graphics that)
    }
  HasPoint: Trait(K<><{
    var Point p
    read method Point point() (
      this.p()
      )
    mut method Void point(Point that, mut World world) (
      this.p(that)
      )
    })
  StubEntity: HasPoint & {implements Entity
    method drawOnto(that) (
      Debug.appendLog(
        S"stubEntityDrawPoints", msg: S"Point"[this.point()]""[S.nl()]""
        )
      )
    }
  Player: HasPoint & {implements Entity
    method drawOnto(that) (
      Debug.appendLog(
        S"playerDrawPoints", msg: S"Point"[this.point()]""[S.nl()]""
        )
      )
  }

  Tests: K <>< {
    mut World world

    class method mut Tests #$() (
      // Clear logs
      unused1 = Debug.#$readLog(S"playerDrawPoints")
      unused2 = Debug.#$readLog(S"stubEntityDrawPoints")

      This(world: World(
        map: PointToEntityMap[], player: Player(p: Point(x: 0Size, y: 0Size))
        ))
      )

    mut method Void addEntity_add2EntitiesToTheSamePoint() (
      Point p = Point(x: 1Size, y: 2Size)
      this.#world().addEntity(StubEntity(p: p))

      this.#world().addEntity(StubEntity(p: p))
      )

    mut method Void addEntity_doesNotThrowExceptionWhenAdding2ItemsToDifferentPoints() (
      this.#world().addEntity(StubEntity(p: Point(x: 1Size, y: 2Size)))

      this.#world().addEntity(StubEntity(p: Point(x: 3Size, y: 4Size)))
      )

    mut method Void removeEntity_whenNoItemIsAtThePoint() (
      this.#world().removeEntity(Point(x: 1Size, y: 2Size))
      )

    mut method Void removeEntity_doesNotThrowExceptionWhenRemovingAnExistingItem() (
      this.#world().addEntity(StubEntity(p: Point(x: 1Size, y: 2Size)))
      this.#world().removeEntity(Point(x: 1Size, y: 2Size))
      )

    mut method Void #$World_drawOnto_drawsPlayerAtInitialPoint() (
      this.#world().drawOnto(graphics: Graphics())

      Debug.test(Debug.#$readLog(S"playerDrawPoints"), expected: S"
        'Point[x:"0", y:"0"]
        ")
      )

    mut method Void #$World_drawOnto_drawsItemAtProvidedPoint() (
      this.#world().addEntity(StubEntity(p: Point(x: 5Size, y: 2Size)))

      this.#world().drawOnto(graphics: Graphics())

      Debug.test(Debug.#$readLog(S"stubEntityDrawPoints"), expected: S"
        'Point[x:"5", y:"2"]
        ")
      )

    mut method Void #$World_drawOnto_drawsPlayerAtMovedPoint() (
      this.#world().movePlayerDown()
      this.#world().movePlayerLeft()

      this.#world().drawOnto(graphics: Graphics())

      Debug.test(Debug.#$readLog(S"playerDrawPoints"), expected: S"
        'Point[x:"-1", y:"1"]
        ")
      )
    }
  }

TestModuleWorld_addEntity_failsWhenAddingTwoItemsToTheSamePoint: (
  TestModuleWorld.Tests.#$().addEntity_add2EntitiesToTheSamePoint()
  catch error PointFilled pf void
  error X"Expected exception to be thrown"
  )

TestModuleWorld_addEntity_doesNotThrowExceptionWhenAdding2ItemsToDifferentPoints:
  TestModuleWorld.Tests.#$().addEntity_doesNotThrowExceptionWhenAdding2ItemsToDifferentPoints()

TestModuleWorld_removeEntity_failsWhenNoItemIsAtThePoint: (
  TestModuleWorld.Tests.#$().removeEntity_whenNoItemIsAtThePoint()
  catch error PointNotFilled pnf void
  error X"Expected exception to be thrown"
  )

TestModuleWorld_removeEntity_doesNotThrowExceptionWhenRemovingAnExistingItem: (
  TestModuleWorld.Tests.#$().removeEntity_doesNotThrowExceptionWhenRemovingAnExistingItem()
  )

TestModuleWorld_World_drawOnto_drawsPlayerAtInitialPoint:
  TestModuleWorld.Tests.#$().#$World_drawOnto_drawsPlayerAtInitialPoint()

TestModuleWorld_World_drawOnto_drawsItemAtProvidedPoint:
  TestModuleWorld.Tests.#$().#$World_drawOnto_drawsItemAtProvidedPoint()

TestModuleWorld_World_drawOnto_drawsPlayerAtMovedPoint:
  TestModuleWorld.Tests.#$().#$World_drawOnto_drawsPlayerAtMovedPoint()


//
//
// *************************************************************************
// *************************************************************************
// ****************************** WorldLoader ******************************
// *************************************************************************
// *************************************************************************
//
//


ModuleWorldLoader: Trait({
  PointToEntityMap: {
    class method mut This #seqBuilder()
    class method mut This #from(mut This seqBuilder)
    }
  World: K <>< {
    mut PointToEntityMap map
    mut Player player
    mut method Void addEntity(mut Entity that)
    }

  Entity: {interface}
  Player: {implements Entity class method mut This (fwd Point p)}
  RockItem: {implements Entity class method mut This (fwd Point p)}
  AppleItem: {implements Entity class method mut This (fwd Point p)}

  WorldLoader: {
    class method mut World #$(S fileName) (
      S content = Debug.#$readFile(fileName: fileName)
      This.loadWorld(content: content)
      )

    class method mut World loadWorld(S content) (
      mut World world = World(
        map: PointToEntityMap[],
        player: Player(p: Point(x: 0Size, y: 0Size))
        )

      // withoutLeft() removes the comment line
      Strings lines = content.splitOn(chars: S.nl()).withoutLeft()

      with line in lines.vals() (
        Strings tokens = line.splitOn(chars: S" ")
        S entityTypeName = tokens.val(0Size)
        Point p = Point(
          x: Size.fromS(tokens.val(1Size)),
          y: Size.fromS(tokens.val(2Size))
          )

        mut Entity entity = {
          if entityTypeName == S"ROCK_ITEM" (return RockItem(p: p))
          if entityTypeName == S"APPLE_ITEM" (return AppleItem(p: p))
          error X"Unknown entityTypeName: "[entityTypeName]""
          }

        world.addEntity(entity)
        )
      world
      )
    }
  })

TestModuleWorldLoader: ModuleWorldLoader & {
  World: {
    mut Strings addedEntities
    mut method Void addEntity(mut Entity that) (
      this.#addedEntities().add(right: that.toS())
      )
    }

  Entity: {interface
    read method Point point()
    read method S toS()
    }
  Player: {implements Entity method toS()S"Player["[this.point()]"]"}
  RockItem: {implements Entity method toS()S"RockItem["[this.point()]"]"}
  AppleItem: {implements Entity method toS()S"AppleItem["[this.point()]"]"}

  WorldLoader: {}

  class method Void producesCorrectItems(S content, S expected) (
    mut World world = WorldLoader.loadWorld(content: content)
    Debug.test(world.addedEntities(), expected: expected)
    )
  }

TestModuleWorldLoader_loadWorld_addsARockAtTheCorrectPosition:
  TestModuleWorldLoader.producesCorrectItems(
    content: S"
      '# Comment line
      'ROCK_ITEM 1 2
      ",
    expected: S"
      '[RockItem[[x:"1", y:"2"]]]
      ".withoutRight()
    )

TestModuleWorldLoader_loadWorld_addsAnAppleAtTheCorrectPosition:
  TestModuleWorldLoader.producesCorrectItems(
    content: S"
      '# Comment line
      'APPLE_ITEM 3 4
      ",
    expected: S"
      '[AppleItem[[x:"3", y:"4"]]]
      ".withoutRight()
    )

TestModuleWorldLoader_loadWorld_addsMultipleItemsCorrectPositions:
  TestModuleWorldLoader.producesCorrectItems(
    content: S"
      '# Comment line
      'ROCK_ITEM 1 2
      'APPLE_ITEM 3 4
      'APPLE_ITEM 5 6
      ",
    expected: S"
      '[RockItem[[x:"1", y:"2"]]; AppleItem[[x:"3", y:"4"]]; AppleItem[[x:"5", y:"6"]]]
      ".withoutRight()
    )

//
//
// ****************************************************************
// ****************************************************************
// ****************************** UI ******************************
// ****************************************************************
// ****************************************************************
//
//

ModuleUI: Trait({
  Graphics: Trait(Collections.vector(ofMut: Strings)) & {
    mut method Void draw(S that, Size x, Size y) (
      this.#val(y)(x, val: that)
      )

    mut method S asText() S""[
      with y in Range(this.size()) (
        row = this.val(y)
        with x in Range(row.size()) (
          use[S"|"; row.val(x)]
          )
        use[S.nl()]
        )
      ]""

    class method mut This (Size width, Size height) This[
      with y in Range(height) (
        use[Strings[with x in Range(width) (
          use[S"_"]
          )]]
      )]
    }

  World: {
    mut method Void movePlayerUp()
    mut method Void movePlayerDown()
    mut method Void movePlayerLeft()
    mut method Void movePlayerRight()
    }

  Action: {interface method Void (mut World world)}
  Actions: Collections.vector(of: Action)
  MoveUp: K<><{implements Action method (world) world.movePlayerUp()}
  MoveDown: K<><{implements Action method (world) world.movePlayerDown()}
  MoveLeft: K<><{implements Action method (world) world.movePlayerLeft()}
  MoveRight: K<><{implements Action method (world) world.movePlayerRight()}
  })

//
//
// ******************************************************************
// ******************************************************************
// ****************************** Main ******************************
// ******************************************************************
// ******************************************************************
//
//

Main: ModuleEntities & ModuleWorld & ModuleWorldLoader & ModuleUI & {
  Action: {}
  Actions: {}
  World: {
    mut method S asText() (
      mut Graphics graphics = Graphics(
        width: This.gameSizeInCells(), height: This.gameSizeInCells()
        )
      this.drawOnto(graphics: graphics)
      graphics.asText()
      )
    }

  WorldLoader: {}
  Graphics: {}

  class method S defaultFileName() S"GameGridSaves/game-save-example.txt"

  class method Strings (Actions actions, mut World world) (
    Strings[world.asText()] ++ Strings[
      with action in actions.vals() (
        action(world: world)
        use[world.asText()]
        )
      ]
    )

  class method Strings #$(Actions actions) (
    This(
      actions: actions,
      world: WorldLoader.#$(fileName: This.defaultFileName())
      )
    )
  }

//
//
// *******************************************************************************
// *******************************************************************************
// ****************************** Integration Tests ******************************
// *******************************************************************************
// *******************************************************************************
//
//

IntegrationTest1: {
  mut Main.PointToEntityMap map = Main.PointToEntityMap[]
  Debug.test(map.hasEntityAt(Point(x: 10Size, y: 20Size)), expected: S"false")
  map.addEntity(Main.RockItem(p: Point(x: 10Size, y: 20Size)))
  Debug.test(map.hasEntityAt(Point(x: 10Size, y: 20Size)), expected: S"true")
  map.removeEntity(Point(x: 10Size, y: 20Size))
  Debug.test(map.hasEntityAt(Point(x: 10Size, y: 20Size)), expected: S"false")
  Debug.test(Bool.readableName() expected: S"Bool")
  return ExitCode.normal()
  }

IntegrationTest2: {
  mut Main.World world = Main.World(
    map: Main.PointToEntityMap[],
    player: Main.Player(p: Point(x: 2Size, y: 1Size))
    )
  world.addEntity(Main.RockItem(p: Point(x: 2Size, y: 3Size)))
  Debug.test(world.asText(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest3: {
  mut Main.World world = Main.World(
    map: Main.PointToEntityMap[],
    player: Main.Player(p: Point(x: 2Size, y: 1Size))
    )
  world.addEntity(Main.RockItem(p: Point(x: 2Size, y: 3Size)))
  Main.Actions actions = Main.Actions[Main.MoveDown(); Main.MoveDown(); Main.MoveDown()]
  Strings ss = Main(actions: actions, world: world)
  Debug.test(ss.val(0Size), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

IntegrationTest4: {
  Main.Actions actions = Main.Actions[Main.MoveDown(); Main.MoveDown(); Main.MoveRight()]
  Strings ss = Main.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|P|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }
}
