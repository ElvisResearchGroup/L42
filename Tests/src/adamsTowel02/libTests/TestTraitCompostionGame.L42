{reuse L42.is/AdamTowel02

// ****************************** Utils ******************************

Point: Data<><{Size x, Size y}
PointNotFilled: Message.$<><{implements Guard}
PointFilled: Message.$<><{implements Guard}

// ****************************** Entities ******************************

ModuleEntities: Trait({
  Entity: {interface
    read method Point point()
    mut method Void point(Point that)
    read method S representation()
    }

  EntityTrait: Trait(K<><{implements Entity
    var Point p
    method point() this.p()
    method point(that) this.p(that)
    })

  Player: EntityTrait & {read method S representation() S"P"}
  RockItem: EntityTrait & {read method S representation() S"R"}
  AppleItem: EntityTrait & {read method S representation() S"A"}
  })

ModuleWorld: Trait({
  Entity: {interface
    read method Point point()
    mut method Void point(Point that)
    }
  Player: {implements Entity}

  PointToEntityMap: Trait(Collections.vector(ofMut: Entity)) & {
    mut method mut Entity getItemAt(Point that) {
      with elem in this.#vals() (
        if elem.point() == that (return elem)
        )
      error PointNotFilled""
      }

    read method Bool hasItemAt(Point that) {
      with elem in this.vals() (
        if elem.point() == that (return Bool.true())
        )
      return Bool.false()
      }

    mut method Void addEntity(mut Entity that) (
      if this.hasItemAt(that.point()) (error PointFilled"")
      this.add(right: that)
      )

    mut method Void removeEntity(Point that) {
      with i in Range(this.size()) (
        elem = this.val(i)
        if elem.point() == that (
          this.remove(i)
          return void
          )
        )
      error PointNotFilled""
      }
    }

  World: K<><{
    mut PointToEntityMap map
    mut Player player
    mut method Void movePlayerUp() this.#player().point(\point.with(y: \y-1Size))
    mut method Void movePlayerDown() this.#player().point(\point.with(y: \y+1Size))
    mut method Void movePlayerLeft() this.#player().point(\point.with(x: \x-1Size))
    mut method Void movePlayerRight() this.#player().point(\point.with(x: \x+1Size))
    }
  })

// ****************************** WorldLoader ******************************

ModuleWorldLoader: Trait({
  PointToEntityMap: {
    class method mut This #seqBuilder()
    class method mut This #from(mut This seqBuilder)
    mut method Void addEntity(mut Entity that)
    }
  World: K<><{mut PointToEntityMap map, mut Player player}

  Entity: {interface}
  Player: {implements Entity class method mut This (fwd Point p)}
  RockItem: {implements Entity class method mut This (fwd Point p)}
  AppleItem: {implements Entity class method mut This (fwd Point p)}

  WorldLoader: {
    class method mut World #$(S fileName) (
      mut World world = World(
        map: PointToEntityMap[],
        player: Player(p: Point(x: 0Size, y: 0Size))
        )
      S content = Debug.#$readFile(fileName: fileName)
      Strings lines = content.splitOn(chars: S.nl()).withoutLeft()
      with s in lines.vals() (
        Strings tokens = s.splitOn(chars: S" ")
        S entityTypeName = tokens.val(0Size)
        Point p = Point(
          x: Size.fromS(tokens.val(1Size)),
          y: Size.fromS(tokens.val(2Size))
          )
        mut Entity e = {
          if entityTypeName == S"ROCK_ITEM" (return RockItem(p: p))
          if entityTypeName == S"APPLE_ITEM" (return AppleItem(p: p))
          error X"@"[entityTypeName]"@"
          }
        world.#map().addEntity(e)
        )
      world
      )
    }
  })

// ****************************** UI ******************************

ModuleUI: Trait({
  Entity: {interface
    read method Point point()
    read method S representation()
    }

  Player: {implements Entity}

  PointToEntityMap: {
    read method Bool hasItemAt(Point that)
    mut method mut Entity getItemAt(Point that)
    }

  World: Trait(K<><{mut PointToEntityMap map, mut Player player})& {
    mut method Void movePlayerUp()
    mut method Void movePlayerDown()
    mut method Void movePlayerLeft()
    mut method Void movePlayerRight()
    class method Size gameSizeInCells() 10Size

    mut method S asText() S""[
      with y in Range(This.gameSizeInCells()) (
        with x in Range(This.gameSizeInCells()) (
          Point p = Point(x: x, y: y)
          if this.player().point() == p (
            use[S"|"; this.player().representation()]
            )
          else if this.map().hasItemAt(p) (
            use[S"|"; this.#map().getItemAt(p).representation()]
            )
          else (use[S"|_"])
          )
        use[S.nl()]
        )
      ]""
    }

  Action: {interface method Void (mut World world)}
  Actions: Collections.vector(of: Action)
  MoveUp: K<><{implements Action method (world) world.movePlayerUp()}
  MoveDown: K<><{implements Action method (world) world.movePlayerDown()}
  MoveLeft: K<><{implements Action method (world) world.movePlayerLeft()}
  MoveRight: K<><{implements Action method (world) world.movePlayerRight()}
  })

// ****************************** Main ******************************

Main: ModuleEntities & ModuleWorld & ModuleWorldLoader & ModuleUI & {
  Action: {}
  Actions: {}
  World: {}
  WorldLoader: {}
  class method Strings (Actions actions, mut World world) (
    Strings[world.asText()] ++ Strings[
      with action in actions.vals() (
        action(world: world)
        use[world.asText()]
        )
      ]
    )
  class method Strings #$(Actions actions) (
    This(
      actions: actions,
      world: WorldLoader.#$(fileName: S"GameGridSaves/game-save-example.txt")
      )
    )
  }

// ****************************** Tests ******************************

Test1: {
  mut Main.PointToEntityMap map = Main.PointToEntityMap[]
  Debug.test(map.hasItemAt(Point(x: 10Size, y: 20Size)), expected: S"false")
  map.addEntity(Main.RockItem(p: Point(x: 10Size, y: 20Size)))
  Debug.test(map.hasItemAt(Point(x: 10Size, y: 20Size)), expected: S"true")
  map.removeEntity(Point(x: 10Size, y: 20Size))
  Debug.test(map.hasItemAt(Point(x: 10Size, y: 20Size)), expected: S"false")
  Debug.test(Bool.readableName() expected: S"Bool")
  return ExitCode.normal()
  }

Test2: {
  mut Main.World world = Main.World(
    map: Main.PointToEntityMap[],
    player: Main.Player(p: Point(x: 2Size, y: 1Size))
    )
  world.#map().addEntity(Main.RockItem(p: Point(x: 2Size, y: 3Size)))
  Debug.test(world.asText(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

Test3: {
  mut Main.World world = Main.World(
    map: Main.PointToEntityMap[],
    player: Main.Player(p: Point(x: 2Size, y: 1Size))
    )
  world.#map().addEntity(Main.RockItem(p: Point(x: 2Size, y: 3Size)))
  Main.Actions actions = Main.Actions[Main.MoveDown(); Main.MoveDown(); Main.MoveDown()]
  Strings ss = Main(actions: actions, world: world)
  Debug.test(ss.val(0Size), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }

Test4: {
  Main.Actions actions = Main.Actions[Main.MoveDown(); Main.MoveDown(); Main.MoveRight()]
  Strings ss = Main.#$(actions: actions)
    Debug.test(ss.val(0Size), expected: S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected: S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|P|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }
}
