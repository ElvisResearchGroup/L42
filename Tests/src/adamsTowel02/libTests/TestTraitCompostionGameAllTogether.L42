{reuse L42.is/AdamTowel02

Point:Data<><{Size x, Size y}

Entity:{interface
  read method Point point()
  mut method Void point(Point that)
  read method S representation()
  }
//hash map point-> entity
PointNotFilled: Message.$<><{ implements Guard}
PointFilled: Message.$<><{ implements Guard}
HM:Trait(Collections.vector(ofMut:Entity))&{
  mut method mut Entity getE(Point that){
    with elem in this.#vals() (
      if elem.point()== that (return elem)
      )
    error PointNotFilled""
    }
  read method Bool hasE(Point that){
    with elem in this.vals() (
      if elem.point()== that (return Bool.true())
      )
    return Bool.false()
    }
  mut method Void addE(mut Entity that)(
    if this.hasE(that.point()) (error PointFilled"")
    this.add(right:that)
    )
  mut method Void removeE(Point that){
    with i in Range(this.size()) (
      elem=this.val(i)
      if elem.point()== that (
        this.remove(i)
        return void
        )
      )
    error PointNotFilled""  
    }
  }

EntityTrait: Trait(K<><{implements Entity
  var Point p
  method point()this.p()
  method point(that)this.p(that)
  })
Player: EntityTrait & {read method S representation()S"P"}
RockItem: EntityTrait & {read method S representation()S"R"}
AppleItem: EntityTrait & {read method S representation()S"A"}

World:K<><{
  mut HM map
  mut Player player
  class method Size gameSizeInCells()10Size
  mut method S asText()S""[
    with y in Range(This.gameSizeInCells()) (
      with x in Range(This.gameSizeInCells()) (
        Point p=Point(x:x,y:y)
        if this.player().point()==p (use[S"|";this.player().representation()])
        else if this.map().hasE(p) (
          use[S"|";this.#map().getE(p).representation()]
          )
        else (use[S"|_"])
        )
      use[S.nl()]
      )
    ]""
  mut method Void movePlayerUp()this.#player().point(\point.with(y:\y-1Size))
  mut method Void movePlayerDown()this.#player().point(\point.with(y:\y+1Size))
  mut method Void movePlayerLeft()this.#player().point(\point.with(x:\x-1Size))
  mut method Void movePlayerRight()this.#player().point(\point.with(x:\x+1Size))
  }
Action:{interface method Void (mut World w)}
Actions:Collections.vector(of:Action)
MoveUp:K<><{implements Action method (w)w.movePlayerUp()}
MoveDown:K<><{implements Action method (w)w.movePlayerDown()}
MoveLeft:K<><{implements Action method (w)w.movePlayerLeft()}
MoveRight:K<><{implements Action method (w)w.movePlayerRight()}
WorldLoader:{
class method mut World #$(S fileName) (
  mut World w=World(map:HM[], player:Player(p:Point(x:0Size,y:0Size)))
  S content=Debug.#$readFile(fileName:fileName)//S"GameGridSaves/game-save-example.txt"
  Strings lines=content.splitOn(chars:S.nl()).withoutLeft()
  with s in lines.vals() (
    Strings tokens=s.splitOn(chars:S" ")
    Debug(tokens) 
    S entityTypeName=tokens.val(0Size)
    Point p=Point( x:Size.fromS(tokens.val(1Size)), y:Size.fromS(tokens.val(2Size)) )
    mut Entity e={
      if entityTypeName==S"ROCK_ITEM" ( return RockItem(p:p) )
      if entityTypeName==S"APPLE_ITEM" ( return AppleItem(p:p) )
      error X"@"[entityTypeName]"@"
      }
    w.#map().addE(e)
    )
  w
  )
}
Main:{
  class method Strings (Actions as,mut World w) Strings[w.asText()]++Strings[
    with a in as.vals() (
      a(w:w) 
      use[w.asText()]
      )
    ]
  class method Strings #$(Actions as) This(as:as, w:WorldLoader.#$(fileName:S"GameGridSaves/game-save-example.txt"))  
  }
Test1:{
  mut HM map=HM[]
  Debug.test(map.hasE(Point(x:10Size,y:20Size)), expected:S"false")
  map.addE(RockItem(p:Point(x:10Size,y:20Size)))
  Debug.test(map.hasE(Point(x:10Size,y:20Size)), expected:S"true")
  map.removeE(Point(x:10Size,y:20Size))
  Debug.test(map.hasE(Point(x:10Size,y:20Size)), expected:S"false")
  Debug.test(Bool.readableName() expected:S"Bool")
  return ExitCode.normal()
  }
Test2:{
  mut World w=World(map:HM[], player:Player(p:Point(x:2Size,y:1Size)))
  w.#map().addE(RockItem(p:Point(x:2Size,y:3Size)))
  Debug.test(w.asText(), expected:S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }
Test3:{
  mut World w=World(map:HM[], player:Player(p:Point(x:2Size,y:1Size)))
  w.#map().addE(RockItem(p:Point(x:2Size,y:3Size)))
  Actions as=Actions[MoveDown();MoveDown();MoveDown()]
  Strings ss=Main(as:as, w:w)
  Debug.test(ss.val(0Size), expected:S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected:S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|_|_|_|_|_|_|_
    '|_|_|P|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }
  Test4:{
  Actions as=Actions[MoveDown();MoveDown();MoveRight()]
  Strings ss=Main.#$(as:as)
    Debug.test(ss.val(0Size), expected:S"
    '|P|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  Debug.test(ss.right(), expected:S"
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|R|A|_|_|_|_|_|_
    '|_|P|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|R|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    '|_|_|_|_|_|_|_|_|_|_
    ")
  return ExitCode.normal()
  }
}