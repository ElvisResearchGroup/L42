{
//shape of a loadable library:
// This contains actual library, but
// Abstract:{} contains abstract classes, and
// Abstract.ConceptMap mapps concepts names to abstract classes

  ConceptMapMismatch:Message.$<<{ implements MetaGuard}
  ConceptMapUnavailable:Message.$<<{ implements MetaGuard}

  class method
  Library << (Library that)
  exception ConceptMapMismatch, ConceptMapUnavailable
    {
    return Refactor.Redirect(Path"Abstract.ConceptMap" to:ConceptMap)<<that
    error on MetaGuard.InvalidOnTopLevel X"Load1"
    catch exception MetaGuard.NestedClassUnavailable err
      exception ConceptMapUnavailable
          "provided library do not offers Abstract.ConceptMap or "[err.path()]
          " available paths are "[with av in Introspection(lib:that).transitivelyNestedClasses().vals() (
              use[S.nl()++av.pathFromRoot().toS()]
            )]""
    exception on MetaGuard.SourceUnfit, MetaGuard.MethodClash, MetaGuard.IncoherentRedirectMapping
      ConceptMapMismatch""
    }
  DeployLibrary:...
}