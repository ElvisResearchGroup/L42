{ implements Concept.Base
  class method mut This _private(Library _binaryRepr)
  read method Library _binaryRepr()
 
  Plg:{//@plugin
    //L42.is/connected/withNumbers
    }

  class method
  This fromS(Concept.ToS that) (
    s=that.toS()
    This._private(_binaryRepr: use Plg
      check stringToNum(s.#binaryRepr())
      error This.parseError(s))
    )
  class method
  This #from(Library binaryRepr)
    This._private(_binaryRepr:binaryRepr)
  read method
  Library #binaryRepr() this._binaryRepr()

  class method
  mut S.SBuilder #builder()
    S.SBuilder.empty()

  class method
  This #from(S.SBuilder builder)
    This._private(_binaryRepr: use Plg
      check stringToNum(builder.#binaryRepr())
      error This.parseError(S.#from(builder: builder)))

  ParseFail:Message.$<><{ implements Guard.ParseFail}
  class method
  Any parseError(S that)
    ParseFail"The provided string is not a valid Rational: "[that]""
  method
  toS()
    S.#from(binaryRepr: use Plg
      check numToString(this.#binaryRepr())
      error void)

  method S toSDouble()
    S.#from(binaryRepr: use Plg
      check numToStringDouble(this.#binaryRepr())
      error void)
  method
  This +(This right)
    This._private(_binaryRepr:use Plg
      check sumNum(n1:this.#binaryRepr() n2:right.#binaryRepr())
      error void)

  method
  This -(This right)
    This._private(_binaryRepr:use Plg
      check subNum(n1:this.#binaryRepr() n2:right.#binaryRepr())
      error void)

  method
  This *(This right)
    This._private(_binaryRepr:use Plg
      check mulNum(n1:this.#binaryRepr() n2:right.#binaryRepr())
      error void)

  method
  This /(This right)
    This._private(_binaryRepr: use Plg
      check divNum(n1:this.#binaryRepr() n2:right.#binaryRepr())
      error void)

  read method
  Bool equals(read This that){
    use Plg
      check ifNumEqualDo(n1:this.#binaryRepr() n2:that.#binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method Bool >(This right)  {
    use Plg
      check ifNumGrtDo(n1:right.#binaryRepr() n2:this.#binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method Bool >=(This right) {
    use Plg
      check ifNumGEqDo(n1:right.#binaryRepr() n2:this.#binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  }