{(Library _binaryRepr) implements Concept.ToS Concept.Equals, Concept.Classable //@private
  Plg:{//@plugin
    //L42.is/connected/withNumbers
    }

  method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
  refine read method class This class() This
  method readableName()GetMyName(This)
  class method
  This fromS(Concept.ToS that) (
    s=that.toS()
    This(_binaryRepr: use Plg
      check stringToNum(s.binaryRepr())
      error This.parseError(s))
    )
  class method
  This #from(Library binaryRepr)
    This(_binaryRepr:binaryRepr)
  method
  Library binaryRepr() this._binaryRepr()

  class method
  mut S.SBuilder #builder()
    S.SBuilder.empty()

  class method
  This #from(S.SBuilder builder)
    This(_binaryRepr: use Plg
      check stringToNum(builder.binaryRepr())
      error This.parseError(S.#from(builder: builder)))

  ParseFail:Message.$<<{ implements Guard.ParseFail}
  class method
  Any parseError(S that)
    ParseFail"The provided string is not a valid Rational: "[that]""
  method
  toS()
    S.#from(binaryRepr: use Plg
      check numToString(this.binaryRepr())
      error void)

  method
  This +(This that)
    This(_binaryRepr:use Plg
      check sumNum(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  This -(This that)
    This(_binaryRepr:use Plg
      check subNum(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  This *(This that)
    This(_binaryRepr:use Plg
      check mulNum(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  This /(This that)
    This(_binaryRepr: use Plg
      check divNum(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  Bool ==(This that) {
    use Plg
      check ifNumEqualDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method equals(that){
    with that (on This return this==that)
    return Bool.false()
    }

  method
  Bool <(This that) {
    use Plg
      check ifNumGrtDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method
  Bool <=(This that) {
    use Plg
      check ifNumGEqDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method Bool !=(This that) !(this==that)

  method Bool >(This that)  !(this<=that)

  method Bool >=(This that) !(this<that)

  }