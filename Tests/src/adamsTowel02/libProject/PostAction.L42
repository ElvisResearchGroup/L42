{
Selector that,
Path of,
Library action,
Selector deprecated
class method This (Selector that,Path of,  Library action,Selector deprecated)
//can be used as
// PostAction(Selector"foo(bar)" of:Path"A"
//   action:{method Size (Size that) that+that}
//   deprecated: Selector"fooOld(bar)")<><myCode
method
Library <><(Library right)
exception InvalidAction{
  this.checkAction(this.action())// check action well formed

  src=this.that() //src selector of the method
  dest=this.deprecated()//dest selector for the copy of the method
  p=this.of()// path of the method
  fresh=Selector.fresh(like:Selector"#apply(that)")// will be the name of the action

  var Library acc=right
  acc:=Refactor2.toAbstract(selector:src of:p into:dest)<><acc
  //now src is abstract
  acc:=this.composeAction(acc,fresh:fresh)
  acc:={return Refactor2.sumMethods(dest and:fresh of:p over:S"that" into:src)<><acc
    exception on Refactor2.PathUnfit, Refactor2.MethodClash
      InvalidAction"Action class signature does not fit decorated method"
    }
  acc:=Refactor2.Method[hide:fresh of:p]<><acc
  //we do not need to refer to the action any more
  return acc
  catch exception InvalidAction x exception x
  error on Refactor2.Fail
    X"PostAct.Action1"
  }

method //@_private
Library composeAction(Library that,Selector fresh){
  var Library acc=this.action()
  acc:=Refactor2.rename(path:\"This" into:this.of())<><acc
  acc:=Refactor2.Method[rename:\"#apply(that)" of:this.of() into:fresh]<><acc
  acc:=Refactor2.compose(that,and:acc)
  //ok since action res has fresh name
  return acc
  error on Refactor2.Fail
    X"PostAct.ActionCompose"
  }

method //@_private
Void checkAction(Library that)
exception InvalidAction (
  defM=Location.Lib(that).method(selector:\"#apply(that)")
  exception on Refactor2.Fail, Location.NotAvailable
    InvalidAction"action method not present"
  pt=defM.parameterTypes().val(1Size)
  rt=defM.returnType()
  ok=pt.refTo()==rt.refTo() & pt.mdf() ==rt.mdf()
  if !ok (
    exception InvalidAction"action return class need to be equal to parameter class: '"[pt]"' is different from '"[rt]"'"
    )
  )
InvalidAction:Message.$<><{ implements Refactor2.Fail}
}