{
GetMyName:{
  class method
  This2.S (class Any that)
    Location.Type.RefTo.Binded(classObj:that)
      .toS().withoutLeft(val:This2.S"This0.")
  }
Message:{Opt:This2.Opt(This2.Message)}

Guard:{interface ParseFail:{interface  implements Guard}}
Bool:{
  ParseFail:This2.Message.$<><{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid bool: "[that]""
  }
Size:{
  ParseFail:This2.Message.$<><{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid Int32: "[that]""
  }

S:{implements Concept.ToS
  method Strings splitOn(This2.S chars)
    StringSplit.splitOn(this.toS(),chars:chars)
  }


Selector:{
  ParseFail:This2.Message.$<><{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid selector: "[that]""
  }
Path:{
  ParseFail:This2.Message.$<><{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid path: "[that]""
  class method
  Any parseError(This2.S that,This2.Message cause)
    ParseFail"The provided string is not a valid internalized path: "[that]""(cause)
  }

X:{
  class method mut Tests #seqBuilder() Tests.empty()
  class method Void #from(Tests seqBuilder) (
    res=seqBuilder.collapse()
    if !res.isEmpty() (
      error This2.X"Observed bug: "[res]""
      )
    )
     
  Pre:{
    class method mut Tests #seqBuilder() Tests.empty()
    class method Void #from(Tests seqBuilder) (
      res=seqBuilder.collapse()
      if !res.isEmpty() (
        error This3.X"Precondition violation: "[res]""
        )
      )
    }
  Test: {
    This3.Bool that, This3.S msg
    class method This (This3.Bool that, This3.S msg)
    }
  Tests: Refactor2.compose(
    Refactor2.Method[hide:\"#add(that)"]<><Collections.vector(of:Test)
    and:{ 

    mut method
    Void #add(This3.Bool that, Concept.ToS msg)
        this.add(right: Test(that,msg:This3.S""[msg;This3.S.nl()]"number:"[this.size()]" failed") )

    mut method
    Void #add(This3.Bool that)
        this.add(right: Test(that,msg:This3.S"Condition number "[this.size()]" failed") )

    read method
    This3.S collapse() This3.S""[with a in this.vals() (
      if !a.that() ( use[a.msg(), sep:This3.S.nl()] )
      )]""
    })
  }
}