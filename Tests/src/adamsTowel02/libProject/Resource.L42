{
ProvidedValueNotOfExpectedType:Message.$<><{ implements Guard}

class method Library<><(Library right) this(right,clazz:Library)

/*FromBinaryRepr: {
  class method Library <><(Library right) (
    Use[right]<><{implements Concept.Resourceable
      read method Library #binaryRepr()
      class method mut This #from(Library binaryRepr)
      method toResource() Use.Over[Resource <>< this.#binaryRepr()]<><{
        class method Library #1#apply()
        class method This1() This1.#from(binaryRepr:this.#1#apply())
    }}
  )
}*/

class method class Selector #default##apply(Void selector) Selector
class method Library(Any that, Selector selector) {
  return Refactor2.Method[rename:\"#apply()" into:selector; hide:\"val()"]
    <><This(that)
  error on Refactor2.Fail X""
  }

class method Library(Any that) {
  with that (
    on Library return this(that,clazz:Library)
    on Void return {class method Void()void}
    on Concept.Resourceable return that.toResource()
    on S return Use.Over[Resource<><that.#binaryRepr()]<><{
      class method Library #1#apply()
      class method S() S.#from(binaryRepr:this.#1#apply())
    }
    on Size return Use.Over[Resource<><that.#binaryRepr()]<><{
      class method Library #1#apply()
      class method Size() Size.#from(binaryRepr:this.#1#apply())
    }
    )
  error on Message X"The object can not be turned into a resource"//TODO: improve error
  error X"The object can not be turned into a resource"//TODO: improve error
  }

class method Library castTrait(){
  T:{}
  class method Any val()
  class method T () {
    with val=this.val() (on T return val)
    error ProvidedValueNotOfExpectedType""
    }
  }
class method Library(Library that, class Any clazz) (
  trait=Refactor2.redirect(path:\"T" into:clazz)<><this.castTrait()
  error on Refactor2.Fail X"Resource usage of redirect failed"
  SafeOperators.liftValue(that,selector:Selector"val()"  lib:trait)
  //can throw primitive error MethodClash, but should never happen here
  )
  }