{
ProvidedValueNotOfExpectedType:Message.$<><{ implements Guard}

class method Library<><(Library that) This(that)

class method Library(Any that) {
  with that (
    on Concept.Classable return this(that, clazz:that.class())
    on Library return this(that,clazz:Library)
    on Void return this(that,clazz:Void)
    )
  return this(that,clazz:Any)
  }

class method Library castTrait(){
  T:{}
  class method Any val()
  class method T () {with val=this.val() (on T return val) error ProvidedValueNotOfExpectedType"" }
   }
class method Library(Any that, class Any clazz) (
  trait=Refactor2.redirect(path:\"T" into:clazz)<><this.castTrait()
  error on Refactor2.Fail X"Resource usage of redirect failed"
  SafeOperators.liftValue(that,selector:Selector"val()"  lib:trait)
  //can throw primitive error MethodClash, but should never happen here
  )
  }