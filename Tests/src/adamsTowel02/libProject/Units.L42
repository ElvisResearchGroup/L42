{
//of(that)//base
//of(that and) comp*
//of(that on) comp/

class method
Library traitUnit() { implements Concept.Equals, Concept.ToS
  Support that

  class method//factory
  This (Support that)

  method Support #inner()
    this.that()

  method toS() this.that().toS()


  Support:{ implements Concept.ToS Concept.Equals

    class method
    This #from(S.SBuilder builder)

    method
    This +(This that)

    method
    This -(This that)

    method
    This *(This that)

    method
    This /(This that)

    read method
    Bool equals(read This that)

    method
    Bool >(This that)

    method
    Bool >=(This that)

    }
//***********************
  class method
  mut S.SBuilder #builder()
    S.SBuilder.empty()

  class method
  This #from(S.SBuilder builder)
    This(Support.#from(builder:builder))


  method
  This +(This that)
    This(this.that()+that.that())

  method
  This -(This that)
    This(this.that()-that.that())

  method
  This *(Support that)
    This(this.that()*that)

  method
  This /(Support that)
    This(this.that()/that)

  read method
  Bool equals(read This that)
    this.that()==that.that()

  method
  Bool >(This that)
    this.that()>that.that()

  method
  Bool >=(This that)
    this.that()>=that.that()

  method
  Support divide(This that)
    this.that()/that.that()
  //*********
  }
NotValidSupport:Message.$<><{implements Guard}
NotSameSupport:Message.$<><{implements Guard}
NotValidUnit:Message.$<><{implements Guard}

class method
Library of(class Any that) exception NotValidSupport{
  return UnsafeRefactor.MiniData<><Refactor2.redirect(path:\"Support" into:that)<><this.traitUnit()
  exception on Refactor2.Fail
    NotValidSupport"The provided class is not a valid support class for a unit of measure: "[GetMyName(that)]""
  }

class method
Library traitAnd(){
    T1:{method S #inner()  class method This(S that) }
    T2:{method S #inner()  class method This(S that) }
    S:{ method This *(This that)  method This /(This that)}
    method S #inner()  class method  This(S that)

    class method
    This (T1 that, T2 and)
      This(that.#inner()*and.#inner())
    method
    T1 left(T2 right)
      T1(this.#inner()/right.#inner())
    method
    T2 right(T1 left)
      T2(this.#inner()/left.#inner())
    }

class method
Library traitPer(){
    T1:{method S #inner()  class method This(S that) }
    T2:{method S #inner()  class method This(S that) }
    S:{ method This *(This that)  method This /(This that)}
    method S #inner()  class method  This(S that)

    class method
    This (T1 that, T2 per)
      This(that.#inner()/per.#inner())

    method
    T1 left(T2 right)
      T1(this.#inner()*right.#inner())

    method
    T1 right(T2 left)
      T1(left.#inner()/this.#inner())
    }


class method
Library of(class Any that, class Any and) exception NotValidUnit, NotSameSupport
  this.of(c1:that,c2:and, trait:this.traitAnd())

class method
Library of(class Any that, class Any per) exception NotValidUnit, NotSameSupport
  this.of(c1:that,c2:per, trait:this.traitPer())


class method
Library of(class Any c1, class Any c2,Library trait) exception NotValidUnit, NotSameSupport {
  //check c1.#inner() and c2.#inner() are same type t
  t1=Location.Lib(classObj:c1).method(selector:\"#inner()").returnType()
  exception on Refactor2.SelectorUnfit
    NotValidUnit"Provided class "[GetMyName(c1)]" do not offers 'method Support #inner()'"
  t2=Location.Lib(classObj:c2).method(selector:\"#inner()").returnType()
  exception on Refactor2.SelectorUnfit
    NotValidUnit"Provided class "[GetMyName(c2)]" do not offers 'method Support #inner()'"
  r=t1.refTo()
  if r!=t2.refTo() (exception NotSameSupport
    "Provided classes "[GetMyName(c1)]"("[GetMyName(r.class())]") and "[GetMyName(c2)]"("[GetMyName(t2.refTo().class())]") have different supports."
    )
  Location.Type.RefTo.Binded cObj={
    with r (on Location.Type.RefTo.Binded return r)
    error X""}
  res=UnsafeRefactor.MiniData<><Refactor2.redirect(path:\"Support" into:cObj.referredClassObj())<><this.traitUnit()
  var Library traitAnd=Refactor2.redirect(path:\"S" into:cObj.referredClassObj())<><trait
  traitAnd:=Refactor2.redirect(path:\"T1" into:c1)<><traitAnd
  traitAnd:=Refactor2.redirect(path:\"T2" into:c2)<><traitAnd
  return Use.Over[res]<><traitAnd
  exception on Refactor2.Fail
    NotValidUnit"The provided classes "[GetMyName(c1)]" and "[GetMyName(c2)]" are not  valid Unit classes."
  }

//Meter2:Unit(Meter and:Meter)
//Meter2(m1 and:m2)
//Speed:Unit(Meter on:Second)

}