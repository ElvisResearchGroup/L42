{
class method Library stringableTrait(){
  (S inner) implements Concept.ToS
  class method This (Concept.ToS that)
    This(inner:that.toS())

  method S ~() this.inner()

  method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
  class method S readableName()
  method toS()  This.readableName()[]"["[this.inner()]"]"
  method Library #binaryRepr() this.inner().#binaryRepr()
  method Bool == (This that) this.inner()==that.inner()
  method Bool equals(Any that) {
    with that (on read This return this==that)
    return Bool.false()
    }
  }

class method
Library <><(Library that)
  UnsafeRefactor.Compose.compose(left:that, right:This.stringableTrait())
}
