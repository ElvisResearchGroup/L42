{//@untrusted
Path path,Url url
class method mut This #$(Path path,Url url)

class method Library moveToAbstract(Path that,Library of){
  return Refactor2.rename(
    path:\"PrImpl"++that 
    into:\"Abstract"++that)<><of
  error on Refactor2.PathUnfit 
    This.msg(that, of:of)
  error on Refactor2.Fail
    X"DeployLibrary3"
  }

class method
X.AssertionFail msg(Path that,Library of) (
  available=Location.Lib(of).nested(path:\"PrImpl").nesteds()
  error on Location.NotAvailable
    X"DeployLibrary2"
  X"map and library mismatch on "[that]" available paths are "[
    with av in available.vals() (
      use[S.nl()++av.path().toS()]
    )]""  
  )

class method
Library  exposeAsLibrary(Library that, Path path)
exception
,,,,Refactor2.PathUnfit,
,,,,Refactor2.PrivacyCoupuled
,,,,Location.NotAvailable {
  //X[path!=Path"This"]
  this.checkTargetExists(that,path:path)//throws Refactor2.PathUnfit
  var Library res=that
  Debug(S"1.1")
  res:=Refactor2.rename(path:\"This" into:\"PrImpl")<><res
  error on Refactor2.Fail
    X"DeployLibrary1"
  Debug(S"1.2")
  ms=Location.Lib(that).nested(path:Path"ConceptMap").methods()
  with m in ms.vals() (
    Path p={ with r=m.returnType().refTo() (
      on Location.Type.RefTo.Lib return r.referredLib().path()
      )
      error X""}
    res:=This.moveToAbstract(p of:res)
    Debug(S"1.2b "[p]" renamed")
    )
  Debug(S"1.3")
  res:=Refactor2.toAbstract(path:\"Abstract")<><res//leak PrivacyCoupuled
  Debug(S"1.4")
  error on Refactor2.PathUnfit
    X"DeployLibrary3"
  res:=Refactor2.rename(path:\"PrImpl"++path into:\"This")<><res
  Debug(S"1.5")
  res:=Refactor2.hide(path:\"PrImpl")<><res
  Debug(S"1.6")
  return res
  error on Refactor2.Fail
    X"DeployLibrary4"
  }
class method
Void checkTargetExists(Library that,Path path)
exception Refactor2.PathUnfit (
  unused=Refactor2.hide(path:path)<><that
  catch exception Refactor2.ClassUnfit void
  void//just a way to test if path is there
  )

mut method
Library <><(Library right)
exception Refactor2.PathUnfit, Refactor2.PrivacyCoupuled,Location.NotAvailable {
  Debug(S"1")
  var Library res=This.exposeAsLibrary(right,path:this.path())
  Debug(S"2")
  res:=Optimize.RemoveUnreachableCode<><res
  Debug(S"3")
  return DeployTowel.#$(fileName:this.url())<><res
  }
}