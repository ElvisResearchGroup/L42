{
Fail:{}
method
Bool shouldDecorate(Location.Lib that)
exception Fail {
  mToS=that.method(selector:\"#equalequal#0left(right)")
  catch exception Location.NotAvailable
    return Bool.true()
  if !that.implements(classObj:Concept.Equals) (
    exception Fail"method == not from Concept.Equals"
    )
  return mToS.isAbstract()
  }

class method
Library operationTrait(Strings fNs, Location.Type.Parameter.List fTs)
exception Fail{
  //if fNs.isEmpty() (error S"TODO")
  op=This.op()
  //accumulation
  Use.Override.Decorator acc=Use.Override[with fN in fNs.vals(), fT in fTs.vals() (
    use[op.select(type:fT,name:fN)]
    exception on Refactor2.Fail Fail"Field operation can not be generated for field "[fN]""
    void)]
  lib=acc.foldLeft(resolver:{
      read method Bool #1equals(read This that)
      read method Bool #2equals(read This that)
      read method Bool equals(read This that) {
        if !this.#1equals(that:that) (return Bool.false())
        return this.#2equals(that:that)
        }
     })
  error on Refactor2.Fail X"accumulation"
  //final wrapping
  miniEquals={ implements Concept.Equals
    read method
    Bool equals(read This that)
      Bool.true()
    method ==(right) {
      with right (on read This return this.equals(right))
      return Bool.false()
      }
    }
  return Use.Override[miniEquals]<><lib
  error on Refactor2.Fail X"finalWrapping"
  }
class method FieldOperation op()
  FieldOperation(
    forReadable:{ read T f,,,,,T:{implements Concept.Equals}
      read method Bool equals(read This that) this.f()==that.f()
      }
    forImmutable:{ T f,,,,,T:{implements Concept.Equals}
      read method Bool equals(read This that) this.f()==that.f()
      }
    forClassable:{ class T f,,,,,T:{implements Concept.Classable}
      read method Bool equals(read This that) Location.Lib(classObj:this.f())==Location.Lib(classObj:that.f())
      }
    forClassAny:{ class T f,,,,,T:{}
      read method Bool equals(read This that) Location.Lib(classObj:this.f())==Location.Lib(classObj:that.f())
      }
    forLibrary:{ Library f
      read method Bool equals(read This that) Location.Lib(this.f())==Location.Lib(that.f())
      }
    forVoid:{ Void f
      read method Bool equals(read This that) Bool.true()
      }
    )
}