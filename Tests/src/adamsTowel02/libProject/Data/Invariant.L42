{
Path of
Size mode
class method class Path #default##apply(Void of)Path
Fail:Message.$<><{ implements This2.Fail}

/*
Right now, invariant can not be applied if methods using exposers
leak exceptions.
I could wrap them and, in case the invariant fails, silent the exception.
But I'm no so eager to swallow an exception, even if it is to rais an error..
*/

method
Library ensureInvariant(Library that)
,,,,exception Refactor2.PathUnfit, Fail {
  intoOf=Refactor2.rename(path:\"This" into:this.of())
  i=Location.Lib(that).nested(path:this.of())
  catch exception Location.NotAvailable  
    exception ExcHelp.pathUnfit(this.of())
    (
    m=i.method(selector:\"#invariant()")
    catch exception Location.NotAvailable
      return Refactor2.compose(
        that and:intoOf<><{read method Void #invariant()void})
     void
    )
  //here I'm sure #invariant() is defined, check has right type
    (
    type1=intoOf<><{read method Void #invariant()}
    unused1=Refactor2.compose(that and:type1)
    return that//if compose is good, Void #invariant was already defined
    catch exception Refactor2.Fail void //we skip former return
    void)
  return Use.Over[that]<><intoOf<><{
    read method S #invariantToS()
    read method Bool #1#invariant()
    read method Void #invariant()(
      if !this.#1#invariant() (
        error Invariant.Fail"invalid object detected "[this.#invariantToS()]"!"
        )
      )
    }
  exception on Refactor2.Fail    
    Fail"Method '#invariant()' has incompatible type"
  }

method
Library <><(Library right)
exception Fail Refactor2.PathUnfit {
  inv=this.ensureInvariant(right)
  return PlgInvariantClose.closeJ(path:this.of(),top:inv,mode: this.mode())
  exception on Refactor2.Fail Fail""
  }


PlgInvariantClose:Refactor2.JavaImport<><{
  //@plugin is.L42.connected.withSafeOperators
  //@pluginPart is.L42.connected.withSafeOperators.refactor.InvariantClose
  class method
  Library closeJ(Path path,Library top,Size mode)
  exception Refactor2.PathUnfit, Refactor2.ClassUnfit

  class method
  Library #pluginUnresponsive(Library binaryRepr)
    binaryRepr  
  }
}
