{
Path of
class method class Path #default##apply(Void of)Path
Fail:Message.$<><{ implements This2.Fail}

class method Selector immK(Library that,Path of) exception Fail{
  loc=Location.Lib(that).navigate(of)
  ks=Location.Method.List[with m in loc.methods().vals() (
    if m.selector().name()==This1.immKName() (use[m]))]
  if ks.size()==1Size (return ks.left().selector())
  exception on Message Fail""
  exception Fail""
  }

method
Library <><(Library that)
exception Fail Refactor2.PathUnfit {
  immK=This.immK(that, of:this.of())
  return PlgWither.witherJ(path:this.of(),top:that,immK:immK)
  exception on Refactor2.Fail Fail""
  }


PlgWither:Refactor2.JavaImport<><{
  //@plugin is.L42.connected.withSafeOperators
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Wither
  class method
  Library witherJ(Path path,Library top,Selector immK)
  exception 
  ,,,,Refactor2.PathUnfit, Refactor2.SelectorUnfit,
  ,,,,Refactor2.MethodUnfit, Refactor2.ClassUnfit
  class method
  Library #pluginUnresponsive(Library binaryRepr)
    binaryRepr  
  }
}