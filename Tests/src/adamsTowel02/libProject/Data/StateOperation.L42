{
Fail:Message.$<><{ implements This2.Fail}
ReadSkeletonTrait:Resource<><{
  T:{}
  read method read T f()
  }
ClassSkeletonTrait:Resource<><{
  T:{}
  read method class T f()
  }
class method // maybe private
Library readToImm(Library that)
exception Fail {
  return Refactor2.Method[hide:\"f()"; rename:\"#0f()" into:\"f()"]<><
    Use[that]<><{//Use.Over would do the opposite kind of hiding
      T:{}
      read method read T f() this.#0f()
      read method T #0f()
      }
  error on Refactor2.PathUnfit, Refactor2.SelectorUnfit X""
  error on Refactor2.Fail Fail""
  }
class method
Library fieldOperation(Library forReadable, Library forClass)
exception Fail 
  this.fieldOperation(forReadable:forReadable,forClassable:forClass,forClassAny:forClass)

class method
Library fieldOperation(Library forReadable, Library forClassable,Library forClassAny)
exception Fail {
  return Use[
    Resource(Use[ReadSkeletonTrait()]<><forReadable,
      selector:\"forReadable()");
    Resource(Use[ReadSkeletonTrait()]<><This.readToImm(forReadable),
      selector:\"forImmutable()");
    Resource(Use[ClassSkeletonTrait();{T:{implements Concept.Classable}}]<><forClassable,
      selector:\"forClassable()");
    Resource(Use[ClassSkeletonTrait()]<><forClassAny,
      selector:\"forClassAny()");
    ]<><This.specializerTrait()
  error on Refactor2.Fail Fail""  
  }

class method Library specializerTrait(){
  class method Library forReadable()
  class method Library forImmutable()
  //class method Library forClass()
  class method Library forClassable()
  class method Library forClassAny()

  class method
  Library (Selector selector,Location.Type type)
  exception Fail {
    mdf=type.mdf()
    r=type.refTo()
    if mdf.isCmpClass() (
      return this.specialize(This.forClassable(),selector:selector,refTo:r)
      catch exception Guard return this.specialize(This.forClassAny(),selector:selector,refTo:r)
      void
      )
    if mdf.isCmpImm() (
      return this.specialize(This.forImmutable(),selector:selector,refTo:r)
      )
    return this.specialize(This.forReadable(),selector:selector,refTo:r)
    }
   class method // maybe private
   Library specialize(
   ,,,,Library that, Selector selector, Location.Type.RefTo refTo)
   exception Fail {
    return Refactor2.redirect(path:\"T"  intoRefTo:refTo)<><
      Refactor2.Method[rename:\"f()" into:selector]<><that
    exception on Refactor2.Fail Fail"Unfit operation"
    }
  }

class method
Library <><(Library right)
exception Fail {
  return K.Imm<><Use[Trait()]<><right
  exception on  Refactor2.Fail Fail""
  }
Trait:Resource<><{
  Selector mutK
  Path of
  class method class Path #default##apply(Void of)Path
  class method class Selector #default##apply(Void mutK)Selector
  Fail:Message.$<><{ implements This3.Fail}

  method
  Bool shouldDecorate(Location.Lib that)
  exception Fail 

  class method
  Library operationTrait(Strings fNs, Location.Type.Parameter.List fTs)
  exception Fail

  //initial delegation
  method
  Library<><(Library right) exception Fail{
    l=Location.Lib(right).navigate(this.of())
    exception on Location.NotAvailable
      Fail"Nested class "[this.of()]" not found"
    m=l.method(selector:this.mutK())
    exception on Location.NotAvailable
      Fail"Selector "[this.mutK()]" not found"
    //TODO: add checks mutK is actually a factory
    if !this.shouldDecorate(l) (return right)
    fNs=m.selector().names()
    fTs=m.parameterTypes().withoutLeft()
    return Use[right]<><
      Refactor2.rename(path:\"This" into:this.of())<><
      This.operationTrait(fNs:fNs,fTs:fTs)
    error on Refactor2.Fail
      X"AddToS.<><"
    }
  }
}