{
Fail:{interface implements Guard}
Invariant:K<><...
Wither:K<><...
//AddToS:...
//AddEquals:...

class method S mutKName() S"#apply"
class method S immKName() S"#immK"
class method Selector immK(Library that,Path of) exception Invariant.Fail{
  loc=Location.Lib(that).navigate(of)
  ks=Location.Method.List[with m in loc.methods().vals() (
    if m.selector().name()==This.immKName() (use[m]))]
  if ks.size()==1Size (return ks.left().selector())
  exception on Message Invariant.Fail""
  exception Invariant.Fail""
  }

ExcHelp:{
  class method Refactor2.SelectorUnfit selectorUnfit(Selector that) {
    unused=Refactor2.toAbstract(selector:that)<><{}
    catch exception Refactor2.SelectorUnfit r return r
    error on Refactor2.Fail X""
    error X""
    }
  class method Refactor2.PathUnfit pathUnfit(Path that) {
    unused=Refactor2.toAbstract(selector:\"a()" of:that)<><{}
    catch exception Refactor2.PathUnfit r return r
    error on Refactor2.Fail X""
    error X""
    }
  }
Base:{
  Fail:Message.$<><{ implements This2.Fail}
  //class, ToS == required
  class method Library (){
    implements Concept.Base
    
    refine read method
    class This class()
      This

    method readableName()
      GetMyName(This)

    method is(subtype){
      with subtype (on class This return Bool.true())
      return Bool.false()}
    refine class method
    read This cast(read Concept.Classable that){
      with that (on read This return that)
      error GetMyName.classCastError(that,classObj:This)
      }
    refine class method
    mut This #cast(mut Concept.Classable that){
      with that (on mut This return that)
      error GetMyName.classCastError(that,classObj:This)
      }

    method ==(that) {
      with that (on read This return this.equals(that))
      return Bool.false()}

    read method Bool equals(read This that)
    }
  class method
  Library<><(Library that)
  exception Fail {
    return Use.Override[this()]<><that
    exception on Refactor2.Fail Fail""
    }
  }

class method
Library <>< (Library that)
exception Fail Refactor2.PathUnfit {
 var Library res=that
 res><>=Base
 res><>=Invariant(of:\"This")
 immK=this.immK(res, of:Path"This")
 res><>=Wither(immK:immK, of:\"This")
 return res
}

/*
class method
Library <>< (Library that)
exception StateUnfit, MetaGuard
 {
  var Library res=that
  if Introspection(lib:res).classKind().equals(\class._Interface()) (
    return Extends[res]<><{interface implements 
      Concept.Classable, Concept.ToS, Concept.Equals
      }
    )
  res><>=K
  res><>=Wither
  res><>=AddToS
  res><>=AddEquals
  res><>=Invariant
  res><>=Solid
  return res
  //data: toS == class named,  invariant, with  ---  Still missing: fromS, clone mutk
  }
*/
}