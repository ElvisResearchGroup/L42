{
Fail:{interface implements Guard}
AmbiguosConstructor:Message.$<><{implements Fail}
Invariant:K.Imm<><...
Wither:K.Imm<><...
FieldOperation:K.Imm<><...
AddToSTrait: Resource <><FieldOperation<><...
AddToS: AddToSTrait()
AddInvToS:Use.Override[AddToSTrait()]<><...
AddEquals:FieldOperation<><...

class method S mutKName() S"#apply"
class method S immKName() S"#immK"
class method Selector immK(Library that,Path of) exception AmbiguosConstructor{
  loc=Location.Lib(that).navigate(of)
  ks=Location.Method.List[with m in loc.methods().vals() (
    if m.selector().name()==This.immKName() (use[m]))]
  if ks.size()==1Size (return ks.left().selector())
  exception on Message AmbiguosConstructor""
  exception AmbiguosConstructor""
  }

ExcHelp:{
  class method Refactor2.SelectorUnfit selectorUnfit(Selector that) {
    unused=Refactor2.toAbstract(selector:that)<><{}
    catch exception Refactor2.SelectorUnfit r return r
    error on Refactor2.Fail X""
    error X""
    }
  class method Refactor2.PathUnfit pathUnfit(Path that) {
    unused=Refactor2.toAbstract(selector:\"a()" of:that)<><{}
    catch exception Refactor2.PathUnfit r return r
    error on Refactor2.Fail X""
    error X""
    }
  }
Base:{
  Fail:Message.$<><{ implements This2.Fail}
  //class, ToS == required
  class method Library (){
    implements Concept.Base

    refine read method
    class This class()
      This

    method readableName()
      GetMyName(This)

    method is(subtype){
      with subtype (on class This return Bool.true())
      return Bool.false()}
    refine class method
    read This cast(read Concept.Classable that){
      with that (on read This return that)
      error GetMyName.classCastError(that,classObj:This)
      }
    refine class method
    mut This #cast(mut Concept.Classable that){
      with that (on mut This return that)
      error GetMyName.classCastError(that,classObj:This)
      }
    }
  class method
  Library<><(Library right)
  exception Fail {
    return Use.Override[this()]<><right
    exception on Refactor2.Fail Fail""
    }
  }

class method
Library <>< (Library right)
exception Fail Refactor2.PathUnfit {
 var Library res=right
 excluded=S""[with m in Location.Lib(classObj:Concept.Base).methods().vals() ( 
   use[m.selector().nameAsField();S" "])
   ]""
 res><>=Base
 (res><>=K(name:This.mutKName(),path:Path"This",excluded:excluded, immK:Bool.false(),isFwd:Bool.false())
 res><>=K(name:This.immKName(),path:Path"This",excluded:excluded, immK:Bool.true(),isFwd:Bool.false())
 exception on Refactor2.ClassUnfit AmbiguosConstructor""
 void
 )
 immK=this.immK(res, of:Path"This")
 mutK=immK.with(name:This.mutKName())
 res><>=Wither(immK:immK, of:\"This")
 res><>=AddToS(mutK:mutK, of:\"This")
 res><>=AddInvToS(mutK:mutK, of:\"This")
 res><>=AddEquals(mutK:mutK, of:\"This")
 res><>=Invariant(of:\"This", immK:immK,mutK:mutK)
 return res
}
}
