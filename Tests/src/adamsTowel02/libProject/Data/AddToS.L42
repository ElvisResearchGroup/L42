{
Fail:{}
method
Bool shouldDecorate(Location.Lib that)
exception Fail {
  mToS=that.method(selector:\"toS()")
  catch exception Location.NotAvailable
    return Bool.true()
  if !that.implements(classObj:Concept.ToS) (
    exception Fail"method toS not from Concept.ToS"
    )
  return mToS.isAbstract()
  }
class method
Library operationTrait(Strings fNs, Location.Type.Parameter.List fTs)
exception Fail{
  //accumulation
  Use.Override.Decorator acc=Use.Override[with fN in fNs.vals(), fT in fTs.vals() (
    use[
      Refactor2.Method[hide:\"fN()"]<><
      Use[Resource(fN,selector:\"fN()")]<><
      This(fSel:Selector.from(string:fN++S"()"),fT:fT)
      ])]
  lib=acc.foldLeft(resolver:{
      read method S #1baseToS()
      read method S #2baseToS()
      read method S baseToS()
        S""[this.#1baseToS()]", "[this.#2baseToS()]""
     })
  error on Refactor2.Fail X"AddToS.accumulation"
  //final wrapping
  miniToS={ implements Concept.ToS
    method toS() S"["[this.baseToS()]"]"
    read method S baseToS() S""
    }
  //lib can override baseToS to provide the real behaviour,
  //the empty baseToS is used for classes with no fields
  return Refactor2.Method[hide:\"baseToS()"]<><Use.Override[miniToS]<><lib
  error on Refactor2.Fail X"AddToS.finalWrapping - hide"
  }

//auxiliary functions

class method
S nodeName(read Any that){
  with that (
    on read Void return S"Void"
    on read Library return S"Library"
    on read Concept.Classable return that.class().readableName()
    )
  return S"?"
  }

class method
S valToS(read Any that){
  with that (
    on read Concept.ToS (
      ts=that.toS()
      if ts.beginsWith(S"[") ( return ts)
      return S.doubleQuote()++ts++S.doubleQuote()
      )
    on read Void  return S.doubleQuote()++S"void"++S.doubleQuote()
    on read Library  return S.doubleQuote()++S"{..}"++S.doubleQuote()
    )
  return S"?"
  }

class method
S nodeNameAndValToS(read Any that){
  S nn=this.nodeName(that)
  S ts=this.valToS(that)
  return nn++ts
  }

class method
Location.Lib lib(Location.Type.RefTo refTo)
exception Fail {
  with refTo (
    on Location.Type.RefTo.Lib
      return refTo.referredLib()
    on Location.Type.RefTo.Binded
      return Location.Lib(classObj:refTo.referredClassObj())
    )
  exception Fail"field missing or unavailable: "[refTo]""
  }

class method
Library (Selector fSel,Location.Type fT) exception Fail {
  rich=this.lib(refTo:fT.refTo()).isInterface()
  if rich (return FieldOpAddClassName(selector:fSel,type:fT))
  return FieldOp(selector:fSel,type:fT)
  exception on StateOperation.Fail Fail""
  }

FieldOp:StateOperation.fieldOperation(
  forReadable:{
    class method S fN()
    read method S baseToS()
      S""[This.fN()]":"[This1.valToS(this.f())]""}
  forClassable:{
    class method S fN()
    read method S baseToS()
      S""[This.fN()]":"[this.f().readableName()]""}
  forClassAny:{
    class method S fN()
    read method S baseToS()
      S""[This.fN()]":"[GetMyName(this.f())]""}
  )

FieldOpAddClassName:StateOperation.fieldOperation(
  forReadable:{
    class method S fN()
    read method S baseToS()
      S""[This.fN()]":"[This1.nodeNameAndValToS(this.f())]""}
  forClassable:{
    class method S fN()
    read method S baseToS()
      S""[This.fN()]":"[this.f().readableName()]""}
  forClassAny:{
    class method S fN()
    read method S baseToS()
      S""[This.fN()]":"[GetMyName(this.f())]""}
  )
}