{
Fail:{}

class method Selector name() Selector"toS()"
class method Bool elideField(Location.Type that) Bool.false()
MiniTos: Resource <>< { implements Concept.ToS
    method toS() S"["[this.baseToS()]"]"
    read method S baseToS() S""
    }
DotDot: Resource <>< {read T f,,,,,T:{implements Concept.ToS}
      class method S fN()
      read method S baseToS() (S""[This.fN()]": ...")
}



method
Bool shouldDecorate(Location.Lib that)
exception Fail {
  mToS=that.method(selector:This.name())
  catch exception Location.NotAvailable
    return Bool.true()
  if !that.implements(classObj:Concept.ToS) (
    exception Fail"method toS not from Concept.ToS"
    )
  return mToS.isAbstract()
  }
class method
Library operationTrait(Strings fNs, Location.Type.Parameter.List fTs)
exception Fail{
  op=This.op()
  opCName=This.opClassName(op:op)
  //accumulation
  Use.Override.Decorator acc=Use.Override[with fN in fNs.vals(), fT in fTs.vals() (
    hide=Refactor2.Method[hide:\"fN()"]
    add=Use[Resource(fN,selector:\"fN()")]
    rich=this.lib(refTo:fT.refTo()).isInterface()
    if This.elideField(fT) (use[hide<><add
        <>< Refactor2.Method[rename:\"f()" into:Selector.from(string:fN++S"()")]
        <>< Refactor2.redirect(path:\"T"  intoRefTo:fT.refTo())
        <>< DotDot()
    ])
    else if rich (use[hide<><add<><opCName.select(type:fT,name:fN)])
    else (use[hide<><add<><op.select(type:fT,name:fN)])
    exception on Refactor2.Fail Fail"Field operation can not be generated for field "[fN]""
    void)]
  lib=acc.foldLeft(resolver:{
      read method S #1baseToS()
      read method S #2baseToS()
      read method S baseToS()
        S""[this.#1baseToS()]", "[this.#2baseToS()]""
     })
  error on Refactor2.Fail X"AddToS.accumulation"
  //final wrapping
  //lib can override baseToS to provide the real behaviour,
  //the empty baseToS is used for classes with no fields
  return Refactor2.Method[hide:\"baseToS()"]<><Use.Override[MiniTos()]<><lib
  error on Refactor2.Fail X"AddToS.finalWrapping"
  }

class method
Location.Lib lib(Location.Type.RefTo refTo)
exception Fail {
  with refTo (
    on Location.Type.RefTo.Lib
      return refTo.referredLib()
    on Location.Type.RefTo.Binded
      return Location.Lib(classObj:refTo.referredClassObj())
    )
  exception Fail"field missing or unavailable: "[refTo]""
  }

class method FieldOperation op()
  FieldOperation(
    forReadable:{read T f,,,,,T:{implements Concept.ToS}
      class method S fN()
      read method S baseToS() {
        ts=this.f().toS()
        if ts.beginsWith(S"[") ( return S""[This.fN()]":"[ts]"")
        return S""[This.fN()]":"[S.doubleQuote();ts;S.doubleQuote()]""
        }}
    forImmutable:{T f,,,,,T:{implements Concept.ToS}
      class method S fN() 
      read method S baseToS() {
        ts=this.f().toS()
        if ts.beginsWith(S"[") ( return S""[This.fN()]":"[ts]"")
        return S""[This.fN()]":"[S.doubleQuote();ts;S.doubleQuote()]""
        }}
    forClassable:{class T f,,,,,T:{
        implements Concept.Classable
        refine read method class This class()
        refine class method read This cast(read Concept.Classable that)
        refine class method mut This #cast(mut Concept.Classable that)
        }
      class method S fN()
      read method S baseToS()
        S""[This.fN()]":"[this.f().readableName()]""
      }
    forClassAny:{class T f,,,,,T:{}
      class method S fN()
      read method S baseToS()
        S""[This.fN()]":"[GetMyName(this.f())]""
      }
    forLibrary:{Library f
      class method S fN()
      read method S baseToS()
        S""[This.fN()]":{..}"
      }
    forVoid:{Void f
      class method S fN()
      read method S baseToS()
        S""[This.fN()]":void"
      }
    )  
class method FieldOperation opClassName(FieldOperation op)
  FieldOperation(
    forReadable:{read T f,,,,,T:{implements Concept.ToS, Concept.Classable
        refine read method class This class()
        refine class method read This cast(read Concept.Classable that)
        refine class method mut This #cast(mut Concept.Classable that)
        }
      class method S fN()
      read method S baseToS() {
        ts=this.f().toS()
        if ts.beginsWith(S"[") ( return S""[This.fN()]":"[this.f().class().readableName();ts]"")
        return S""[This.fN()]":"[this.f().class().readableName();S.doubleQuote();ts;S.doubleQuote()]""
        }}
    forImmutable:{T f,,,,,T:{implements Concept.ToS, Concept.Classable
        refine read method class This class()
        refine class method read This cast(read Concept.Classable that)
        refine class method mut This #cast(mut Concept.Classable that)
        }
      class method S fN()
      read method S baseToS() {
        ts=this.f().toS()
        if ts.beginsWith(S"[") ( return S""[This.fN()]":"[this.f().class().readableName();ts]"")
        return S""[This.fN()]":"[this.f().class().readableName();S.doubleQuote();ts;S.doubleQuote()]""
        }}
    forClassable:op.forClassable()
    forClassAny:op.forClassAny()
    forLibrary:op.forLibrary()
    forVoid:op.forVoid()
    )
}
