{
OptTrait: Resource <>< UnsafeRefactor.Classable <>< {
  mut TOpt that
  T: {}
  class method mut This new(fwd mut TOpt that)
  class method mut This() This.new(TEmpty())
  class method mut This(fwd mut T that) This.new(Tof(that))
  read method read T get()
        this.that().get()//error Guard.Operation

  mut method mut T #get() this.#that().#get()
  read method Bool isPresent() {
    with cell=this.that() (on read Tof return Bool.true())
    return Bool.false()
    }
  TOpt:{interface implements Concept.ToS,Concept.Equals
    read method read T get()
    mut  method mut T #get()
    }

  TEmpty: K<><{implements TOpt
    class method Guard err()
      Guard.Operation"Value not present in Optional"
    method get() error This.err()
    method #get() error This.err()
    method toS() S"empty"
    method ==(right) {
      with right (on read This, return Bool.true() )
      return Bool.false()
      }
    }

  Tof: K<><{implements TOpt
    mut T that
    method get() this.that()
    method #get() this.#that()

    method toS() {
      with v=this.that() (
        on read Concept.ToS return v.toS()
        on read Void return S"void"
        on read Library return S"{..}"
        )
      return S"?"
      }
    method ==(right) {
      with right (on read This, return this.equals(right) )
      return Bool.false()
      }
    read method
    Bool equals(read This that){
      with v1=this.that(),v2=that.that() (
        on read Concept.Equals, read Concept.Equals, return v1==v2
        )
      return Bool.false()
      }


    }
  }
Hide:{class method Library <><(Library right)exception Guard
  Refactor2.hide(path:\"TOpt")<><
  Refactor2.hide(path:\"Tof")<><
  Refactor2.hide(path:\"TEmpty")<><
  Refactor2.Method[closeState:\"This"]<><
  right
  }
OptNoBaseTrait:Resource <><Hide<><OptTrait()
OptBaseTrait: Resource <>< Hide<>< Use.Override[OptTrait()] <><
  {implements Concept.Base
  T: {implements Concept.ToS, Concept.Equals}
  Tof:{implements Concept.ToS
    mut T that //below is just an optimization to remove typecases
    method toS() this.that().toS()
    read method Bool equals(read This that) this.that()==that.that()
    }
  method toS() S"Opt["[this.that()]"]"
  method ==(right) {
    with right (on read This, return this.equals(right) )
    return Bool.false()
    }
  read method Bool equals(read This that) this.that()==that.that()
  }
class method Library (class Any that) (
  //this method body is proof that 42 syntax need improvements
  //also with-on still need the mdf, as you can see above
  redirect = Refactor2.redirect(path: \"T", into: that)
    {
    return redirect <>< OptBaseTrait()
    catch exception Refactor2.Fail xx (
      Debug(xx)
      return redirect <>< OptNoBaseTrait()
      error on Refactor2.Fail X"Option(that)"
      error X""
      )
    }
  )
}