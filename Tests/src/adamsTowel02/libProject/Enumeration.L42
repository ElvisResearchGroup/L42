{
  
  InvalidElements:Message.$<><{implements Refactor2.Fail}
  
  EnumTrait:Resource<><
   Refactor2.rename(path:\"Top" into:\"This")<><
   Enum.enumTrait()
  
  class method
  Library #from(S.SBuilder builder)
  exception InvalidElements 
    This.from(base:S.#from(builder:builder))
  
  class method
  mut S.SBuilder #builder()
    S.SBuilder.empty()
  
  class method
  Selector numToSel(Size that)
  exception InvalidElements{
    if that>=64Size (exception InvalidElements"too many enumeration elements:"[that+1Size]", max is 64")
    return Selector.fromS(S"#"++that.toS()++S"()")
    }
  
  class method
  Selector sToSel(S that)
  exception InvalidElements{
    return Selector.fromS(that++S"()")
    catch error Selector.ParseFail pf (//does not implements Message before we do the fixing
      Guard gpf={with pf (on Guard return pf) error S"subtype will be fixed in adam2"}
      exception InvalidElements"invalid enumeration name:"[that]""(gpf)
      )
    }


  class method
  Strings sToSs(S that)
    StringSplit.splitOn(that,chars:S", "++S.nl())
    //we need to use StringSplit since we are still in the adam2 creation

  class method 
  Library traitMeth() (,{
    T inner
    class method This(T inner)    
    T:{implements Concept.Equals
     class method T ord()
     }
    class method This n() This(inner:T.ord())
    method Bool isN() this.inner()==T.ord()
    },)

  class method
  Library enumElem(Size ord, S s)
  exception InvalidElements {
    sel=this.sToSel(s)
    return Refactor2.Method[
    ,,,,rename:\"ord()" of:\"T" into:this.numToSel(ord);
    ,,,,rename:\"n()" into:sel;
    ,,,,rename:\"isN()" into:sel.with(prefix:S"is")]<><
      this.traitMeth()
    catch exception InvalidElements e (exception e)
    error on Refactor2.Fail X""
    }
  class method
  Library from(Concept.Base base)
  exception InvalidElements {
    ss=this.sToSs(base.toS())
    res=Use.Override[EnumTrait()]<><
      Refactor2.redirect(path:\"T" into:Size)<><
        Use.Override[with ord in Range(start:0Size), s in ss.vals() (
          use[this.enumElem(ord:ord, s:s)]
          )]<><
      Refactor2.Method[rename:\"#apply()" into:\"names()"]<><
      Resource(ss)
      
    catch exception InvalidElements e (exception e)
    error on Refactor2.Fail X""
    return res
    }
  }