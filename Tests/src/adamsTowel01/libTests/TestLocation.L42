{reuse L42.is/AdamTowel01
/*
Here we document and test The introspection/location library for 42
This library is mostly a complex wrapper over plugin classes.
The main different with respect of other introspection/reflection
libraries is that we represent the code as is wrote *where* is wrote.
That is, an occurence of a type and the class of such type are
different objects: indeed the occurence of a type is wrote
in a certain place in the source, and the corresponding class
is declared in a completly different place.
---------------
Location.Origin
---------------
Origin is a Data class representing a point in the sourcecode. It fields are self explanatory
*/
OriginTest:{
  o=Location.Origin(fileName:S"foo",
    lineStart:0Size, lineEnd:10Size,
    columnStart:1Size, columnEnd:10Size
    )
  Debug.test(
    S"our origin is in "[o]"!!"
    expected:
    S"our origin is in Origin:foo"[S.nl()]
 "lines 0 to 10; colums 1 to 10!!")
  return ExitCode.normal()
  }
/*
--------------------------------
Location
--------------------------------
Location is the general interface of all things that have origins.
Location.Lib, Location.Method, Location.Type and Location.Doc
implements Location.
All locations are Data classes and offer
origins,location,doc
----
origins(): a list of Origin of this Location.
An element can have many origins since metaprogramming can merge
things from multiple sources.
----
location()
The location object containing this Location
----
doc()
The documentation associated with this Location

--------------------------------
Location.Lib
--------------------------------
Lib reify library literals.
To create a Lib object there are two main ways:
Lib({method Void hi()})//argument of type Library
Lib(classObj:Void)//argument of type class Any
Lib offers many methods, we will examin them now:
--------------------------
Accessing nested classes:
method Lib.List nesteds() //direct nesteds
method Lib.List allNesteds()//nesteds at any levels
method Bool has(Path path) //check and retrive a nested with a Path
method Lib nested(Path path) exception Location.NotAvailable
*/
LibNestedTest:{
  Location.Lib lib1=Location.Lib({method Void hi()})
  Debug.test(lib1.nesteds().size() expected:0Size)//we have no nesteds
  Debug.test(lib1.allNesteds().size() expected:1Size)//there is at least This
  lib2=Location.Lib({A:{A1:{}} B:{B1:{} B2:{}} C:{C1:{} C2:{} C3:{}}})
  Location.Lib.List libs=lib2.nesteds()
  Debug.test(libs.val(0\).nesteds().size() expected:1Size)
  Debug.test(libs.val(1\).nesteds().size() expected:2Size)
  Debug.test(libs.val(2\).nesteds().size() expected:3Size)
  Debug.test(lib2.allNesteds().size() expected:10Size)
  Debug.test(lib2.has(path:\"A") expected:Bool.true())
  Debug.test(lib2.has(path:\"A1") expected:Bool.false())
  Debug.test(lib2.nested(path:\"B").has(path:\"B2") expected:Bool.true())
  return ExitCode.normal()
  }
/*
--------------------------
Accessing methods:
  method Method.List methods()
  method Method method(Selector selector) exception NotAvailable
  method Bool has(Selector selector)
*/
LibMethodsTest:{
  Debug.test(Location.Lib({}).methods().size()
    expected:0Size)
  Debug.test(Location.Lib({var mut Any field}).methods().size()
    expected:3Size)//getter, setter and exposer
  Debug.test(Location.Lib({ mut Any field}).methods().size()
    expected:2Size)//getter and exposer
  Debug.test(Location.Lib({Any field}).has(selector:\"field()")
    expected:Bool.true())
  Debug.test(Location.Lib({Any field}).has(selector:\"foo()")
    expected:Bool.false())
  return ExitCode.normal()
  }
/*
--------------------------
Accessing implements:

  Type.Implemented.List implements()
  method Bool implements(class Any classObj)
  method Bool implements(Path path)
*/
LibImplementsTest:{
  a=Location.Lib({implements A, Concept.ToS C:{D:{ implements A,B, Concept.ToS B:{interface}} } A:{interface}})
  Debug.test(a.implements().size()
    expected:2Size)
  b=Location.Lib({implements A, Concept.Base A:{interface} B:{interface}})
  Debug.test(a.nested(path:\"C.D").implements() expected:S"[A; C.D.B; This0.Concept.ToS]")
  Debug.test(b.implements()
    expected:S"[A; This0.Concept.Base;"[]
    " This0.Concept.ToS; This0.Concept.Classable;"[]
    " This0.Concept.Equals]")//normalization!
  Debug.test(b.implements(path:\"A") expected:Bool.true())
  Debug.test(b.implements(path:\"B") expected:Bool.false())
  Debug.test(b.implements(path:\"C") expected:Bool.false())
  Debug.test(b.implements(classObj:Concept.Equals) expected:Bool.true())
  Debug.test(b.implements(classObj:Concept.Sizable) expected:Bool.false())
  return ExitCode.normal()
  }
/*
  Many boolean properties can be extracted from Lib objects:
  ------
  method Bool isCloseState()
  True if the state is not public.
  Two literals with closed state can not be summed together.
  ------
  method Bool isInterface()
  True if the literal is an interface
  ------
  method Bool isPotentialInterface()
  True if the literal is either an interface or it can be turned into an interface by the sum operator, or redirected onto
  an interface by the redirect operator.
  This requires all the methods to be public, abstract and not class.
  ------
  method Bool isRedirectable()
  True if this can be redirected to a compatible classObj.
  This requires all methods to be public and abstract.
  ------
  method Bool isBinded()
  True if this object represent an already binded literal.
  ------
  method Bool isEnsuredCoherent()
  Code of a coherent class can be run, is rougly equivalent
  to a non-abstract class in Java.
  From a library literal you can also use EnsureCoherent<><lib
  to check for coherence.
  Todo: should we make the language stricter and require
  coherence to have precise types?
  it is ok now with interfaces since we can use refine!!
*/
LibIsMethodsTest:{
  Debug(S"isCloseState()")
  Debug.test(Location.Lib({}).isCloseState() expected:Bool.false())
  Debug.test(Location.Lib(
    {class method This m( S field) method S field()}
    ).isCloseState() expected:Bool.false())
  Debug.test(Location.Lib(
    {class method This m_$_1( S field) method S field_$_1()}
    ).isCloseState() expected:Bool.true())

  Debug(S"isInterface()")
  Debug.test(Location.Lib(
    {interface A:{}}
    ).nested(path:\"A").isInterface() expected:Bool.false())
  Debug.test(Location.Lib(
    {interface A:{}}
    ).isInterface() expected:Bool.true())

  Debug(S"isPotentialInterface()")
  Debug.test(Location.Lib(
    {A:{}}
    ).nested(path:\"A").isPotentialInterface() expected:Bool.true())
  Debug.test(Location.Lib(
    {A:{method Void foo()}}
    ).nested(path:\"A").isPotentialInterface() expected:Bool.true())
  Debug.test(Location.Lib(
    {A:{method Void foo()void}}
    ).nested(path:\"A").isPotentialInterface() expected:Bool.false())
  Debug.test(Location.Lib(
    {A:{class method Void foo()void}}
    ).nested(path:\"A").isPotentialInterface() expected:Bool.false())
  Debug.test(Location.Lib(
    {A:{class method Void foo()}}
    ).nested(path:\"A").isPotentialInterface() expected:Bool.false())

  Debug(S"isRedirectable()")
  Debug.test(Location.Lib(
    {A:{}}
    ).nested(path:\"A").isRedirectable() expected:Bool.true())
  Debug.test(Location.Lib(
    {A:{method Void foo()}}
    ).nested(path:\"A").isRedirectable() expected:Bool.true())
  Debug.test(Location.Lib(
    {A:{method Void foo()void}}
    ).nested(path:\"A").isRedirectable() expected:Bool.false())
  Debug.test(Location.Lib(
    {A:{class method Void foo()void}}
    ).nested(path:\"A").isRedirectable() expected:Bool.false())
  Debug.test(Location.Lib(
    {A:{class method Void foo()}}
    ).nested(path:\"A").isRedirectable() expected:Bool.true())

  Debug(S"isBinded()")
  Debug.test(Location.Lib({}).isBinded() expected:Bool.false())
  Debug.test(Location.Lib(classObj:Concept.Base).isBinded() expected:Bool.true())

  Debug(S"isEnsuredCoherent()")
  Debug.test(Location.Lib(
    {class method This m( S field) method S field()}
    ).isEnsuredCoherent() expected:Bool.true())
  Debug.test(Location.Lib(
    { method S field()}
    ).isEnsuredCoherent() expected:Bool.false())
  Debug.test(Location.Lib(
    {class method This m( S field) method S field() method S anotherF()}
    ).isEnsuredCoherent() expected:Bool.false())
  Debug.test(Location.Lib(
    {class method This m_$_1( S field) method S field_$_1()}
    ).isEnsuredCoherent() expected:Bool.true())
  return ExitCode.normal()
  }
/*
  As we have seen, it is possible to navigate
  inside of a Lib by using nested(path).
  We can go out one level by using location()
  or go directly to the root using root().
  In any moment, path() is telling us where we are with
  respect of the root, that is, the library literal used
  to create the Lib object.
  To get the library documentation we can use doc()
  while nestedDoc() give us the documentation of the path() nested class.
  The concept of root() and path() makes sense for free floating
  library literals.
  If the lib object represent a library already binded to a class name, then path() is always empty, and navigating with nested(path) will give us another root Lib from such binded literal.
  More in details:
  ------
  method Path path()
  Give use the path from root.
  You can extract the last element from the path to get the name of the current nested class.
  If this is the root Lib, path()==Path"This"
  ------
  method Location.Lib root()
  return the root of this object. Note that binded Libs are their
  own roots.
  ------
  method Location.Lib location()
  give us the Lib where this Lib is wrote.
  (Library literals could also be inside of a method, but those can not be access by this API)
  ------
  method Location.Doc nestedDoc()
  The documentation of this nested class.
  Empty doc if this is a non binded root
  ------
  method Location.Doc doc()
  The documentation of this library literal.
  ------
  location() and doc() from Location,
  == equals(that) class() readableName() is(subtype) toS() since Data

*/
LibPathRootDocTest:{
  a=Location.Lib({/*Top*/A:/*NA*/{/*A*/B:/*NB*/{/*B*/C:/*NC*/{/*C*/}}}})
  Debug.test(a.path() expected: Path"This")
  Debug.test(a.nested(path:\"A.B").path() expected: Path"A.B")
  Debug.test(a.nested(path:\"A.B").root()==a expected: Bool.true())
  Debug.test(a.nested(path:\"A.B").location()==a.nested(path:\"A") expected: Bool.true())
  Debug.test(a.nested(path:\"A.B").location()==a expected: Bool.false())
  Debug.test(a.nested(path:\"A.B").root()==a.nested(path:\"A") expected: Bool.false())

  Debug.test(a.nestedDoc() expected:S"")
  Debug.test(a.nested(path:\"A.B").nestedDoc() expected:S"NB")
  Debug.test(a.doc() expected:S"Top")
  Debug.test(a.nested(path:\"A.B").doc() expected:S"B")
  return ExitCode.normal()
  }

/*
--------------------------------
Location.Method
--------------------------------
Method implements Location, is a Data class and reify 42 methods.
Since only normalized literals can be introspected,
all methods have their type information available.
Method lists:
------
method Selector selector()
To get the selector of this method.
Note that you can use the Selector object to obtain the list of
parameter names.
------
method Location.Type.Return returnType()
method Location.Type.Exception.List exceptionTypes()
method Location.Type.Parameter.List parameterTypes()
The return type, exceptions and parameters types for this method.
Note how types in different locations have different types, since we represent the Location of the code elements.
parameterTypes().left() is the type for this.
Thus, to recover the modifier for the method,
use the code m.parameterTypes().left().mdf()
-----
method Bool isAbstract()
True if the method has no body
------
method Bool isRefine()
True if the method has the refine keyword.
This is true for all and only the methods that are implementing/refining an interface method.
------
location() and doc() from Location,
== equals(that) class() readableName() is(subtype) toS() since Data
*/

MethodTest:{
  Debug(S"methodTest()")
  m=Location.Lib(
    {class method /*hi*/ mut Any foo(This bar) exception Void}
    ).methods().left()
  Debug.test(m.selector() expected: Selector"foo(bar)")
  Debug.test(m.returnType() expected: S"mut Any")
  Debug.test(m.exceptionTypes() expected: S"[Void]")
  Debug.test(m.parameterTypes() expected: S"[class This; This]")
  Debug.test(m.isAbstract() expected: Bool.true())
  Debug.test(m.isRefine() expected: Bool.false())
  Debug.test(m.doc() expected: S"hi")

  return ExitCode.normal()
  }

/*
--------------------------------
Location.Type
--------------------------------
Type implements Location and is an interface that reify types:
There are 4 different points where types can appear, and each point have its own nested class:
Return, Parameter, Exception and Implements.
All the Types are Data classes.
Except for Return, the others have a pos() method telling what what their exact position in their location.
Applications where this information is not relevant can just use Type everywhere as the common supertype.
Implements are located in library literals, so their location()
method returns a Lib, while Return, Parameter and Exception
are located in method headers, so their location() method returns a Method.
Type offers the following methods:
------
method Location.Mdf mdf()
Return the modifier of the type.
Mdf is an enumeration with the following constants:
cmpImm;cmpMut;cmpRead;cmpLent;cmpCapsule;cmpClass;fwdImm;fwdMut;
Where "cmp" stand for complete, and "fwd" is for forward types.
------
method Size pos()
The position of the type in the location.
This method is not availabe in the Type.Return class.
------
method Type.RefTo refTo()
This method, and the RefTo type, bridges Type (as the Location where a type is wrote) with the definition of its path.
See the documentation of RefTo later.
------
location() and doc() from Location,
== equals(that) class() readableName() is(subtype) toS() since Data
*/
TypeTest:{
  Debug(S"typeTest()")
  m=Location.Lib({implements Barrretta/*iDoc*/
    Barrretta:{interface
      method /*hi*/ mut Any/*rDoc*/ foo(This/*pDoc*/ bar) exception Void/*eDoc*/
      }
    method foo(bar) void
    }).methods().left()
  Debug.test(m.location().implements().left().doc() expected:S"iDoc")
  Debug.test(m.exceptionTypes().left().doc() expected:S"eDoc")
  Debug.test(m.parameterTypes().left().doc() expected:S"")
  Debug.test(m.parameterTypes().right().doc() expected:S"pDoc")
  Debug.test(m.returnType().doc() expected:S"rDoc")
  return ExitCode.normal()
  }
/*
--------------------------------
Location.Type.RefTo
--------------------------------
The very nested interface RefTo
bridges Type objects with their referred code:
In the contex of 42 and metaprogramming this is not
an obvious task, and there are many subcases.
Code examing all the cases may look like:
Location.Type t=someType
with r=t.refTo() (
  on Location.Type.RefTo.Binded (//binded to the program
    class Any a=r.referredClassObj()
    DoStuffLikeRedirect(a)
    //note, this is always going to be the case while
    //starting from Lib(classObj:..)
    )
  on Location.Type.RefTo.Lib (//declared inside the
    Location.Lib l=r.referredLib()// examined code
    DoStuffLikeRenameClass(l.path())
    )
  on Location.Type.RefTo.Unavailable (
    //external code not typed yet, as in
    //C:Data<><{..}//C and C.D still Unavailable
    //C:{..}//C Unavailable if C was not needed yet
    DoStuffDebug(r.toS())
    )
  on Location.Type.RefTo.Missing (
    //this code will not be produced ever,as in
    //C:{} //C.D will never exists
    DoStuffWithTextOfMissingPath(r.toS())
    )
  )

------
location() and doc() from Location,
== equals(that) class() readableName() is(subtype) toS() since Data
*/
DummyNotUsed:{}
RefToTest:{
  Debug(S"Test RefTo")
  //test binded Void
  t1=Location.Lib({method Void m()}).methods().left().returnType()
  with r=t1.refTo() (
    on Location.Type.RefTo.Binded (
      Debug.test(Location.Lib(classObj:r.referredClassObj())
        expected:S"{/*PrimitivePath:Void*/}")
      )
    on Location.Type.RefTo error X""
    )
  //test binded Concept.Equals
  t2=Location.Lib({method Concept.Equals m()}).methods().left().returnType()
  with r=t2.refTo() (
    on Location.Type.RefTo.Binded (
      Debug.test(
        Location.Lib(classObj:r.referredClassObj()).toS()
        >S"Bool #equalequal("//contains ==
        expected:Bool.true())
      )
    on Location.Type.RefTo error X""
    )
  //test Lib A
  t3=Location.Lib({method A m()  A:{/*hi*/}}).methods().left().returnType()
  with r=t3.refTo() (
    on Location.Type.RefTo.Lib (
      Debug.test(r.referredLib()
        expected:S" {/*hi*/}")
      )
    on Location.Type.RefTo error X""
    )
  //test Unavailable RefToTest
  t4=Location.Lib({method RefToTest m()}).methods().left().returnType()
  with r=t4.refTo() (
    on Location.Type.RefTo.Unavailable (
      Debug.test(r expected:S"Unavailable path: This0.RefToTest; code not generated yet.")
      )
    on Location.Type.RefTo error X""
    )
  //TODO: how to obtain unavailable with the new dependency?
  /*t5=Location.Lib({method DummyNotUsed m()}).methods().left().returnType()
  with r=t5.refTo() (
    on Location.Type.RefTo.Unavailable (
      Debug.test(r expected:S"Unavailable path: This0.DummyNotUsed; code not typed yet.")
      )
    on Location.Type.RefTo error X""
    )*/
  t6=Location.Lib({method DummyMispelled m()}).methods().left().returnType()
  with r=t6.refTo() (
    on Location.Type.RefTo.Missing (
      Debug.test(r expected:S"This0.DummyMispelled")
      )
    on Location.Type.RefTo error X""
    )
  return ExitCode.normal()
  }

/*
--------------------------------
Location.Doc and Location.Doc.Annotation
--------------------------------
Doc reify documentation, that is, comments.
Doc objects can be seen as strings, but have structure,
that can be explored.
In 42 the at simbol can be used, followed by a Path or a lowerCase
identifier to inject meaning in comments. This is called an annotation title.
The text after annotation, and before the next annotation or end of the comment, is the annotation text.
To extract information from Doc use
method Location.Doc.Annotation.List annotations()
providin a list of Annotation.
Every annotation offers a
method Location.Type.RefTo title()
and
method S text()

------
location() and doc() from Location,
== equals(that) class() readableName() is(subtype) toS() since Data
*/
DocTest:{
  Debug(S"DocTest")
  d=Location.Lib({/*
  @hiThisIsALabel I'm actually a RefTo.Missing
  @DocTest I'm instead a RefTo.Unresolved
  @A Here I point to the inner nested class A as RefTo.Lib
  @Concept.Equals Here I point to Concept as RefTo.Binded*/ A:{}}).doc()
  as=d.annotations()
  Debug.test(as.val(0\).title() expected:S"hiThisIsALabel")
  Debug.test(as.val(0\).title().class().is(subtype:
    Location.Type.RefTo.Missing) expected:Bool.true())
  Debug.test(as.val(0\).text() expected:
    S" I'm actually a RefTo.Missing"[S.nl()]"  ")//new line and 2 spaces of indentation

  Debug.test(as.val(1\).title() expected:
    S"Unavailable path: This0.DocTest; code not generated yet.")
  Debug.test(as.val(1\).title().class().is(subtype:
    Location.Type.RefTo.Unavailable) expected:Bool.true())
  Debug.test(as.val(1\).text() expected:
    S" I'm instead a RefTo.Unresolved"[S.nl()]"  ")

  Debug.test(as.val(2\).title() expected:S"A")
  Debug.test(as.val(2\).title().class().is(subtype:
    Location.Type.RefTo.Lib) expected:Bool.true())
  Debug.test(as.val(2\).text() expected:
    S" Here I point to the inner nested class A as RefTo.Lib"[S.nl()]"  ")

  Debug.test(as.val(3\).title() expected:S"This0.Concept.Equals")
  Debug.test(as.val(3\).title().class().is(subtype:
    Location.Type.RefTo.Binded) expected:Bool.true())
  Debug.test(as.val(3\).text() expected:
    S" Here I point to Concept as RefTo.Binded")
    //note, no new line in the string here
  return ExitCode.normal()
  }
}