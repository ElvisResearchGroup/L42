{reuse L42.is/AdamTowel01

C1:Composers<><{
  mut method Void op(Location.Lib l, Location.Method m, Size i)(
    p=l.path()
    s=m.selector()
    s2=this.superName(selector:s,i:i)
    this.open(i).#add(rename:s of:p into:s2)
    this.close().#add(hide:s2 of:p)
    )
  }

C2:Composers<><{
  mut method Void op(Location.Lib l, Location.Method m, Size i)(
    p=l.path()
    s=m.selector()
    s2=this.superName(selector:s,i:i)
    this.open(i).#add(abstract:s of:p alias:s2)
    this.close().#add(hide:s2 of:p)
    )
  }

A:{class method Library(){
  class method S foo() S"a"
  class method S bar() this.foo()
  }}

B1:C1[A()]<><{class method S foo() S"b"}

B2:C1[A()]<><{class method S foo() S"b"++this.#1foo()}

B3:C2[A()]<><{class method S foo() S"b"}

B4:C2[A()]<><{class method S foo() S"b"++this.#1foo()}


Main:{
  Debug.test(B1.foo()++B1.bar() expected:S"ba")
  Debug.test(B2.foo()++B2.bar() expected:S"baa")
  Debug.test(B3.foo()++B3.bar() expected:S"bb")
  Debug.test(B4.foo()++B4.bar() expected:S"baba")
  return ExitCode.normal()
  }

}