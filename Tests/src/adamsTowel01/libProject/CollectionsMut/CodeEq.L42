{ implements Concept.Equals
read method Size size()
read method Bool isEmpty()
read method  read Elem val(Size that)
mut method   mut Elem #val(Size that)

class method mut This #seqBuilder()
class method mut This #from(mut This seqBuilder)
mut method Void #add(mut Elem that)

read method  read Elem left()
method This withoutLeft()
method This withAlsoLeft(Elem that)

Elem:{ implements Concept.Equals}

read method lent IteratorVal vals()
IteratorVal:{
  mut method Void #next() exception Void
  read method Void #checkEnd()
  read method read Elem #inner()
  read method Void #close()
  }

//################# named
read method
Bool contains(read Elem that){
  with e in this.vals() (
    if e==that (return Bool.true())
    )
  return Bool.false()
  }

//################# operators
//TODO: general issue:  V[a;b] wants a,b mut to create a mut?
//with the current builder desugaring,
//can not take imms since the collection under genration is still mut!

method
This -(Elem right)
  this.withoutAll(val:right)


method
This --(This right){
  //This[with e in this.vals() ( if !right.contains(e)  (use[e])  )]
  if right.isEmpty() (return this)
  return (this-right.left()) --right.withoutLeft()
  }


method
This &(This right){
  //This[with v in this.vals() ( if (right>v) (use[v]) )]
  var This res=this
  with v in this.vals() (if !right.contains(v) (res:=res.withoutAll(val:v)))
  return res
  }

method
Bool >>(This right)
  this >>=right & !(right>>=this)

method
Bool >>=(This right) {
  with e in right.vals() (
    if !this.contains(e) (return Bool.false())
    )
  return Bool.true()
  }

method
Bool >(Elem right)
  this.contains(right)



read method
Bool equals(read This that){
  with e1 in this.vals(), e2 in that.vals() (
    if e1!=e2 (return Bool.false())
    )
  catch error IterationFailure ( return Bool.false() )
  return Bool.true()
  }
method ==(right){
  with right (on read This return this.equals(right))
  return Bool.false()
  }


read method
Size indexOfLeft(read Elem val){
  size=this.size()
  var Size pos=0Size
  loop (
    if this.val(pos)==val (return pos)
    if pos>=size (return Size"-1")
    pos+=1Size
    )
  }

read method
Size indexOfRight(read Elem val){
  var Size pos=this.size()-1Size
  loop (
    if this.val(pos)==val (return pos)
    if pos<=0Size (return Size"-1")
    pos-=1Size
    )
  }

method //from VectorTrait
This without(Size index)

method
This withoutLeft(read Elem val) {
  pos=this.indexOfLeft(val:val)
  if pos<0Size (return this)
  return this.without(index:pos)
  }

method
This withoutRight(read Elem val){
  pos=this.indexOfRight(val:val)
  if pos<0Size (return this)
  return this.without(index:pos)
  }

method
This withoutAll(read Elem val){
  //This[with e in this.vals() (if e!=val (use[e]))]
  if this.isEmpty() (return this)
  rec=this.withoutLeft().withoutAll(val:val)
  if this.left()==val (return rec)
  return rec.withAlsoLeft(this.left())
  }


mut method //from VectorTrait
Void remove(Size that)

mut method
Void removeAll(read Elem val){
  var Size pos=0Size
  loop (
    if this.val(pos)==val (this.remove(pos))
    else (pos+=1Size)
    if pos==this.size() (return void)
    )
  }

mut method
Void removeLeft(read Elem val){
  pos=this.indexOfLeft(val:val)
  if pos<0Size (return void)
  return this.remove(pos)
  }

mut method
Void removeRight(read Elem val){
  pos=this.indexOfRight(val:val)
  if pos<0Size (return void)
  return this.remove(pos)
  }


}