{  
implements Concept.ToS Concept.Classable
mut MutListT inner
class method
mut This (fwd mut MutListT inner)
class method
This #immK(MutListT inner)
  This(inner:inner)
  
class method mut This empty() This(inner:MutListT.empty())
class method mut This #seqBuilder() this.empty()
class method mut This #from(mut This seqBuilder) seqBuilder
mut method Void #add(mut Elem that) this.add(right:that)

MutListT:{ implements Concept.ToS
  read method Size size()
  class method mut This empty()
  read method read Any val(Size that)
  mut method mut Any #val(Size that)
  mut method Void (Size that,mut Any val)
  mut method Void add(Size that, mut Any val) 
  mut method Void remove(Size that) 
  method This without(Size that)
  method This withAlso(Size that, Any val)
  method This with(Size that, Any val) 
  }
Elem:{}
Cast:{
  class method read Elem (read Any that) {
  with that (on read Elem return that)
  error CollectionErrors.cast()
  }
  class method mut Elem mut(mut Any that) {
  with that (on mut Elem return that)
  error CollectionErrors.cast()
  }
}

//#################READ METHODS
mut method  mut This #reverse() (//TODO: read reverse is just impossible?
  mut This result=This.empty()
  with e in this.#vals() (result.add(left:e))
  result
  )

read method Size size() this.inner().size()
read method Bool isEmpty() this.size()==0Size
read method  read Elem val(Size that) Cast(this.inner().val(that) )
mut  method   mut Elem #val(Size that) Cast.mut(this.#inner().#val(that) )
read method class Size #default#val(Void that) Size
read method  read Elem left() Cast(this.inner().val(0Size) )
read method  read Elem right() Cast(this.inner().val(\size-1Size) )
mut method  mut Elem #left() Cast.mut(this.#inner().#val(0Size) )
mut method  mut Elem #right() Cast.mut(this.#inner().#val(\size-1Size) )

//#################MUT METHODS
mut method  Void (Size that,mut Elem val) this.#inner()(that, val:val)
mut method  Void left(mut Elem that) this.#inner()(0Size,val:that)
mut method  Void right(mut Elem that) this.#inner()(\size-1Size,val:that)

mut method  Void add(Size that, mut Elem val) this.#inner().add(that,val:val)
mut method  Void add(mut Elem right) this.#inner().add(\size,val:right)
mut method  Void add(mut Elem left) this.#inner().add(0Size,val:left)

mut method  Void remove(Size that) this.#inner().remove(that)
mut method  Void removeLeft() this.remove(0Size)
mut method  Void removeRight() this.remove(this.size()-1Size)


//#################OPERATORS
method
This +(Elem that) this.withAlso(\size,val:that)

method
This ++(This that){
  //var This res=this//this does not work, iterator would return it read.
  //with e in that.vals() (res+=e)
  //return res
  if that.isEmpty() (return this)
  return (this+that.left()) ++that.withoutLeft()
  }



//#################Withs

method
This with(Size that, Elem val)
  This.#immK(inner:this.inner().with(that,val:val))

method
This withLeft(Elem that)
  this.with(0Size, val:that)

method
This withRight(Elem that)
  this.with(this.size()-1Size, val:that)

//insertion
method
This withAlso(Size that, Elem val)
  This.#immK(inner:this.inner().withAlso(that,val:val))

method
This withAlsoLeft(Elem that)
  this.withAlso(0Size, val:that)

method
This withAlsoRight(Elem that)
  this.withAlso(this.size(), val:that)


//skipping/filtering
method
This without(Size index)
  This.#immK(inner:this.inner().without(index))

method
This withoutLeft()
  this.without(index:0Size)

method
This withoutRight()
  this.without(index:this.size()-1Size)



//################# Iterators
IteratorTrait:{class method Library () ...}

//first chunk, no fill
read method  lent IteratorVal vals(Size from, Size maxTo, Size minTo) IteratorVal(this.inner(), from:from,maxTo:maxTo,minTo:minTo)
read method lent IteratorVal vals(Size minTo) this.vals(from:Size"-1", maxTo:Size"-2", minTo:minTo)
read method lent IteratorVal vals(Size from, Size to) this.vals(from:from, maxTo:to, minTo:this.inner().size() )
read method lent IteratorVal vals() this.vals(from:Size"-1", maxTo:Size"-2", minTo:this.inner().size() )

IteratorVal: UnsafeRefactor.Compose.compose(left:IteratorTrait(),
  right:  { 
    var Size from, Size maxTo, Size minTo
    read method read MutListT that(),
    mut  method mut MutListT #that() error X"type system should make it not called"
    class method
    lent This (read MutListT that, Size from, Size maxTo, Size minTo)
    read method read Elem #inner() this.readInner()
    read method Bool isFill() Bool.false()
    read method read Elem filled() error X"Filled called on not fill iterator, should never happen"
    mut method mut Elem #filled() error X"Filled called on not fill iterator, should never happen"
    } )
//now with fill
read method  lent IteratorValFill vals(Size from, Size maxTo, Size minTo, read Elem filled) IteratorValFill(this.inner(), from:from,maxTo:maxTo,minTo:minTo, filled:filled)
read method lent IteratorValFill vals(Size minTo, read Elem filled) this.vals(from:Size"-1", maxTo:Size"-2", minTo:minTo, filled:filled)
read method lent IteratorValFill vals(Size from, Size to, read Elem filled) this.vals(from:from, maxTo:to, minTo:this.inner().size(), filled:filled )
read method lent IteratorValFill vals(read Elem filled) this.vals(from:Size"-1", maxTo:Size"-2", minTo:this.inner().size(), filled:filled )

IteratorValFill: UnsafeRefactor.Compose.compose(left:IteratorTrait(),
   right:  {
     var Size from, Size maxTo, Size minTo
     read method read Elem filled()
     mut method mut Elem #filled() error X"type system should make it not called"
     read method read MutListT that(),
     mut  method mut MutListT #that() error X"type system should make it not called"
     class method
     lent This (read MutListT that, Size from, Size maxTo, Size minTo, read Elem filled)
     read method read Elem #inner() this.readInner()
     read method Bool isFill() Bool.true()
     } )


mut method  mut IteratorVar #vals(Size from, Size maxTo, Size minTo) IteratorVar(this.#inner(), from:from,maxTo:maxTo,minTo:minTo)
mut method mut IteratorVar #vals(Size minTo) this.#vals(from:Size"-1", maxTo:Size"-2", minTo:minTo)
mut method mut IteratorVar #vals(Size from, Size to) this.#vals(from:from, maxTo:to, minTo:this.inner().size() )
mut method mut IteratorVar #vals() this.#vals(from:0Size-1Size, maxTo:Size"-2", minTo:this.inner().size() )

IteratorVar: UnsafeRefactor.Compose.compose(left:IteratorTrait(),
  right:  { 
    mut MutListT that, var Size from, Size maxTo, Size minTo
    class method
    mut This (mut MutListT that, Size from, Size maxTo, Size minTo)
    mut method
    Void inner(mut Elem that)  
      this.#that()(this.from(),val:that)
    mut method mut Elem #inner() this.mutInner()
    read method Bool isFill() Bool.false()
    read method read Elem filled() error X"Filled called on not fill iterator, should never happen"
    mut method mut Elem #filled() error X"Filled called on not fill iterator, should never happen"
    })
//################# Interfaces implemented
  method toS()
    this.inner().toS()
  
  method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
  refine read method class This class() This
  method readableName()GetMyName(This)
  }