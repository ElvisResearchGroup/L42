{ implements  Concept.Base//, Concept.Equals //needed until we do (also refine) normalization
  class method mut This _private(Library _binaryRepr)
  read method Library _binaryRepr()
  read method
  This clone()
    This._private(_binaryRepr:this._binaryRepr())

  //#####Implemented
  refine class method
  read This cast(read Concept.Classable that){
    with that (on read This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  refine class method
  mut This #cast(mut Concept.Classable that){
    with that (on mut This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
  refine read method class This class() This
  method readableName()GetMyName(This)

  class method mut This #from(Library binaryRepr) This._private(_binaryRepr:binaryRepr)

  read method Library #binaryRepr() this._binaryRepr()

  method toS() this.clone()

  method ==(that){
    with that (on read This return this.equals(that))
    return Bool.false()
    }



  //#####operators
  method
  S ++ (S that) S.#from(binaryRepr: use Alu
      check stringConcat(s1:this.#binaryRepr(),s2:that.#binaryRepr())
      error void)

  read method
  Bool equals(read This that) {
    use Alu
      check ifStringEqualDo(s1:this.#binaryRepr(),s2:that.#binaryRepr())
      return Bool.true()
    return Bool.false()
    }

method
This -(This that)
  this.withoutAll(val:that)


method
Bool >>(This that)
  this >>=that & this.size()>that.size()

method
Bool >>=(This that)
  this.contains(that)

method
Bool >(This that)
  this.contains(that)


  //#####other sequence like methods

method
Size indexOfLeft(S val)
  this.indexOfLeft(val:val,start:0Size)
method
Size indexOfLeft(S val, Size start){
  //val must be not empty, TODO: error here?
  var Size current=start
  while current<this.size() (
    if this.subStrEq(val,start:current) (return current)
    current+=1Size
    )
  return Size"-1"
  } 

method
Size indexOfRight(This val){
  //val must be not empty, TODO: error here?
  var Size current=this.size()-val.size()
  while current>=0Size (
    if this(start:current).beginsWith(val) (return current)
    current-=1Size
    )
  return Size"-1"
  }

method
This withoutLeft(This val) {
  pos=this.indexOfLeft(val:val)
  if pos<0Size (return this)
  return this.without(index:pos, skipNum:val.size())
  }

method
This withoutRight(This val){
  pos=this.indexOfRight(val:val)
  if pos<0Size (return this)
  return this.without(index:pos, skipNum:val.size())
  }

method
This withoutAll(This val)
  this.replace(val, into:S"")


method
Bool isEmpty()
  this.size()==0Size

method
This val(Size that)
  this(that)

method
This left()
  this.val(0Size)

method
This right()
  this.val(this.size()-1Size)


//#################Withs

method
This with(Size that, This val)
  this(end:that)++val++this(start:that+val.size())

method
This withLeft(This that)
  this.with(0Size, val:that) //TODO: should be with(left)??

method
This withRight(This that)
  this.with(this.size()-1Size, val:that)

//insertion
method
This withAlso(Size that, This val)
  this(end:that)++val++this(start:that)

method
This withAlsoLeft(This that)
  this.withAlso(0Size, val:that)

method
This withAlsoRight(This that)
  this.withAlso(this.size(), val:that)


//skipping/filtering
method
This without(Size index)
  this(end:index)++this(start:index+1Size)

method
This without(Size index, Size skipNum)
  this(end:index)++this(start:skipNum+index)
method
This withoutLeft()
  this.without(index:0Size)

method
This withoutRight()
  this.without(index:this.size()-1Size)


  method
  Bool contains(S that){
    res=this.indexOfLeft(val:that)
    if res>=0Size (return Bool.true())
    return Bool.false()
    }



  method
  S (Size start, Size end)
    S.#from(binaryRepr:use Alu
      check stringSubstring(this.#binaryRepr(),start:start.#binaryRepr(),end:end.#binaryRepr())
      error void )

  method
  S (Size that) this(start:that, end:that+1Size)

  method
  S (Size start) this(start:start, end:this.size())

  method
  S (Size end) this(start:0Size, end:end)


  method Size size()
    Size.#from(binaryRepr: use Alu
      check stringSize(this.#binaryRepr())
      error void)


  //##### string special

  method
  Bool subStrEq(S that, Size start)
    this(start:start, end:that.size()+start)==that//optimizing this one may help many methods
  method
  Bool beginsWith(S that)
    this.subStrEq(that,start:0Size)


  class method S aSCIILowerCase() S"qwertyuiopasdfghjklzxcvbnm"
  class method S aSCIIUpperCase() S"QWERTYUIOPASDFGHJKLZXCVBNM"

  method
  Bool isASCIILowerCase(Size that)
    S.aSCIILowerCase().contains(this(that))
  method
  Bool isASCIIUpperCase(Size that) (
    S.aSCIIUpperCase().contains(this(that))
    )

  class method
  S doubleQuote()
    S"
    '"
    "(0Size)

  class method
  S nl()
    S"
    '
    "

  method
  S replace(S that, S into)
    S.#from(binaryRepr:use Alu
      check stringReplace(this.#binaryRepr(),
        src:that.#binaryRepr()
        dest:into.#binaryRepr())
      error void)

  method
  S as42MultilineString()
    S.doubleQuote()
    ++S.nl()++S"'"
    ++this.replace(S.nl(), into:S.nl()++S"'")
    ++S.nl()
    ++S.doubleQuote()
    
  method
  Continue #from(S.SConcat seqBuilder)
    Continue(seqBuilder.old()++seqBuilder.accumulator())

  Continue:{S that
    class method This(S that)
    method mut S.SBuilder #builder() S.SBuilder.empty()
    method This1 #from(S.SBuilder builder)
      this.that()++S.#from(builder:builder)
    }

  method
  mut SConcat #seqBuilder()
    S.SConcat(old:this,accumulator:S"")

  SConcat:{S old,var S accumulator
    class method mut This (S old, S accumulator)
    mut method
    Void #add(read Concept.ToS that)
      this.accumulator(\accumulator++that.toS())
    mut method
    Void #add(read Concept.ToS that, Concept.ToS sep) (
      var S newAcc=that.toS()
      if this.accumulator()!=S"" (
        newAcc:=this.accumulator()++sep.toS()++newAcc
        )
      this.accumulator(newAcc)
      )
    }

  SBuilder:...
  class method This #from(S.SBuilder builder)
    This._private(_binaryRepr:builder.#binaryRepr())
  class method mut S.SBuilder #builder() S.SBuilder.empty()


  }