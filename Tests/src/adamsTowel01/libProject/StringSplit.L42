{
  Skip: {interface 
    mut method Size (S that, Size index)
    //positive to keep and jump, negative to skip and jump,
    //never zero
    }
  class method Strings split(S that,capsule Skip skipper){
    res=Strings.empty()
    mut Skip mskip = skipper
    var Size index= 0Size
    while index< that.size() (
      skip=mskip(that,index:index)
      if skip>0Size (
        res.add(right:that(start:index, end:index+skip))
        index+=skip
        )
      else if skip<0Size (
        index-=skip
        )
      else (
        error X
        "String.split(): skipper returned 0 on: '"[that]"' - "[index]""
        )
      )
    if index != that.size() (
      error X
      "String.split(): skipper indexes summed to "[index]" on '"[that]"'"
      )
    return res
    }
  
  SkipChars: K<><{ implements Skip 
    S chars
    
    method ( that, index) {
      Size negSkip={
        with r in Range(that.size()-index) (
          if !this.chars().contains(that(index+r)) (return r)
          )
        //reached the end of the string
        return that.size()-index
        }
      if negSkip>0Size (return 0Size-negSkip)
      //X[
      //  negSkip==0Size; 
      //  !this.chars().contains(that(index))
      //  ]
      with r in Range(that.size()-index) (
        if this.chars().contains(that(index+r)) (return r)
        )
      //reached the end of the string
      return that.size()-index
      }
    }
  class method
  Strings splitOn(S that, S chars) (
    This.split(that,skipper:SkipChars(chars:chars))
    )  
  }
