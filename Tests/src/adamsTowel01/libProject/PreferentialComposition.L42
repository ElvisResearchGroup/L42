{
//members of PreferentialComposition
$:{interface
  method
  Library solveConflict(Library that,SrcDest location)
  }
SrcDest:{
  Path path, Selector src,Selector dest
  class method This (Path path, Selector src,Selector dest)
  }
SrcDests:Collections.vector(of:SrcDest)
Libs: Collections.vector(of:Library)

class method
SrcDests renameMap(Library that,S prefix,Location.Lib.List intros)
  SrcDests[with intro in intros.vals() (
    round=this.renameMap(that,prefix:prefix,
      path:intro.path()
      ms:intro.methods())
    with r in round.vals() (use[r])
    )]
class method
SrcDests renameMap(
Library that,S prefix,Path path, Location.Method.List ms) {
  thatI=Location.Lib(that).nested(path:path)
  catch exception Location.NotAvailable return SrcDests[]
  return SrcDests[with meth in ms.vals() (
    if this.needRename(thatI,meth:meth) (
      destSel=Selector.from(string:prefix++meth.selector().toS())
      use[SrcDest(path:path,src:meth.selector(),dest:destSel)]
      ))]
  }
class method
Bool needRename(
,,,,Location.Lib that,Location.Method meth) {
  if meth.selector().isUnique() (return Bool.false() )
  if meth.isAbstract()(return Bool.false() )
  meth2=that.method(meth.selector())
  catch exception  Location.NotAvailable return Bool.false()
  if meth2.isAbstract() (return Bool.false() )
  return Bool.true()
  }

class method
Library <><(Library right) 
exception Refactor2.ClassClash,Refactor2.MethodClash
  Refactor2.compose(right,and:This.composerTrait())
class method Library composerTrait(){implements $
  Libs myLibs  
  class method This(Libs myLibs) 

  class method
  mut Libs #seqBuilder()
    Libs.empty()

  class method
  This #from(Libs seqBuilder)
    This(myLibs:seqBuilder)


  method
  Library <>< (Library that)
  exception Refactor2.ClassClash,Refactor2.MethodClash{
    i=Location.Lib(that)
    map=SrcDests.empty()
    var Library acc={}
    with lib in this.myLibs().vals(), index in 1Size.vals() (
      var Library libi=lib
      rens=This1.renameMap(lib,
      ,,,,prefix:S"#"[index]"",
      ,,,,intros:i.transitivelyNestedClasses())
      with ren in rens.vals() (
        map.add(right:ren)
        libi:=this.solveConflict(libi,location:ren)
        )
      acc:=Refactor2.compose(acc,and:libi)
      )
    acc:=Refactor2.compose(acc,and:that)
    with mapi in map.vals() (
      acc:=Refactor.MakePrivateSelector(mapi.dest() of:mapi.path())<><acc
      )
    return acc
    error on Location.NotAvailable X"PreferentialComposition1"
    }
  method This ++ (This right)
    This(myLibs:this.myLibs()++right.myLibs())
  }
}