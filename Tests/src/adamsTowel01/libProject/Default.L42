{
DecorationUnfeasable:Message.$<><{ implements MetaGuard}


Parsable:{
  Fail:Message.$<><{ implements Guard}
  class method Library<><(Library that)
  exception Fail{
    return Refactor2.compose(that and:{
      class method// if you do not implement it, it is a constructor?
      //may become an interface Concept.Parsable method?
      This fromS(Concept.ToS that)

      class method
      This #from(S.SBuilder builder)
        This.from(string:S.#from(binaryRepr: builder.#binaryRepr()))

      class method
      mut S.SBuilder #builder() S.SBuilder.empty()
     })
    exception on Refactor2.Fail
      Fail"Parsable"
    }
  }
SealState:{
  // how to specify which factory to keep out? what getters
  class method Library<><(Library that){
    i=Introspection(lib:that)
    return that
    }
  }

DataFromToS:{// in the future we can add also hashCode and > =>
  class method Library<><(Library that) exception DecorationUnfeasable{
    return Extends[{ implements Concept.ToS
    
    read method Bool equals(read This that) this.toS()==that.toS()
    }]<><Equals<><that
    catch exception DecorationUnfeasable mg
      exception mg
    exception on MetaGuard
      DecorationUnfeasable""
    }
  }

Equals:{
  class method Library<><(Library that) exception DecorationUnfeasable{
    return Extends[{ implements Concept.Equals
      method ==(that){
        with that (on read This return this.equals(that))
        return Bool.false()
        }
      read method Bool equals(read This that)
      }]<><that
    exception on MetaGuard
      DecorationUnfeasable"Equals"
    }
  }
}