{
  class method Library<><(Library right) 
    UnsafeRefactor.MiniData<><UnsafeRefactor.Compose(this.enumTrait() and:right)

  class method Library enumTrait() {
    implements Concept.Base
    Size inner
    class method This(Size inner)
    method toS()
      This.readableName()++S"."++this.name()
       
    read method
      S name()
      This.names().val(this.inner())
       
    read method Bool equals(read This that) this.inner()==that.inner()
       
    class method Strings names()
       
    class method
    This fromS(S that){
      with n in 0Size.vals(), d in This.names().vals() (
         if d==that (return This(inner:n))
         )
      error ParseFail"The provided string is not valid: "[that]""
      }
    ParseFail:Message.$<><{ implements Guard.ParseFail}
    This$:{implements Concept.Base}
    List:Collections.vector(of:This$)
    //class method mut Set #seqBuilder() Set.empty()
    //class method Set #from(Set seqBuilder)seqBuilder
    //Set: UnsafeRefactor.Compose.compose(left:SolidTrait() //Use[SolidTrait()]<><
    //  right:{(var BinaryFlag32 that) implements Concept.ToS
    //  class method mut This #seqBuilder() this.empty()
    //  class method mut This empty() This(0BinaryFlag32)
    //  class method This #from(This seqBuilder) seqBuilder
    //  mut method Void #add(Top that) this.that(\that | (1BinaryFlag32<><that.that()))
    //  method This ++(This right) This(this.that() | right.that())
    //  method This --(This right) This(this.that() & ~right.that())
    //  method This &(This right) This(this.that() & right.that())
    //  method Bool >(Top that)  this.that() equals(this.that() | 1BinaryFlag32<><that.that())
    //  method toS()
    //    This.myName()++S"["[
    //      with n in 0Size.vals(), d in Top.names().vals() (
    //        if this>Top(n) (use[ d sep:S";"])
    //        )]"]"
   //
   //   read method Bool equals(read This that) this.that()==that.that()
   //   })//end compose
  }
}