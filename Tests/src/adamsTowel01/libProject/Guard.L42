{
// exception as Guard bureocracy, error as Guard detection
//-is a check guarenteed to be performed, program logic can rely on this being enforced.
//  as exceptions, Guards objects are a way to report/guard complex operations,
// where checking the shape of the input can be unconvenient.
//as errors, they represent precondition violations.
//Turning an exception Guard into an error Guard
// is equivalent of declaring that such misuse should not happen (blame on the caller),
// still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed

interface implements Message //all other guards should implement this one
This$:{interface}
Operation:Message.$<><{ implements This$}//if "this" is unfit
Parameter:Message.$<><{ implements This$}// if a parameter is unfit
Precondition:Message.$<><{ implements This$}// if it is about multiple parameters

ParseFail:{interface  implements This$} //thrown by fromS methods and similar

}