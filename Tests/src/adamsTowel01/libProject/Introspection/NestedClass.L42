{//findMeNestedClass
(fwd NestedClass _root,Path path,MirrorPr mirror, Record record) implements Member,Concept.Equals, Concept.Classable //@_private

method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
refine read method class This class() This
method readableName()GetMyName(This)
method toS() This.readableName()++S"["[this.allAsString()]"]"
read method
Bool ==(read This that){
  if this.path()!=that.path() (return Bool.false())
  //else equal paths
  if this.path()!=Path"This" (return this.root()==that.root())
  //else, both paths are This
  ext=this.hasExternalType()
  if ext!=that.hasExternalType() (return Bool.false())
  if ext (return this.externalTypeToS()==that.externalTypeToS())
  return this.allAsString()==that.allAsString()
  }
method equals(that){
  with that (on read This return this==that)
  return Bool.false()
  }
method This root()this._root()
method //error for This
Doc nestedDoc()(
  if this.path()==Path"This" (
    error Guard.Operation"NestedClass.nestedDoc()  The NestedClass Object refers to This"
    )
  this.record().docOf(path:Path"MemberDoc")
  )
method //of the library literal
Doc doc() this.record().docOf(path:Path"LibraryDoc")

method Path pathFromRoot()
  this.path() // invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path

method Bool hasExternalType(){
  if this.path()!=Path"This" (return Bool.false())
   with mirror=this.mirror() (
    on MirrorPr.Class return Bool.true()
    )
  return Bool.false()
  }
method class Any externalType(){
  if this.path()!=Path"This" (
    error Guard.Operation(text:S"NestedClass.externalType() The NestedClass Object refers to "[this.path()]"")
    )
  with mirror=this.mirror() (
    on MirrorPr.Class return mirror.lib()
    on MirrorPr.Lib
      error Guard.Operation
        "NestedClass.externalType() The NestedClass Object is unbound"
    default error X"NestedClass1"
    )
  }
method S externalTypeToS() {
  if this.path()!=Path"This" (
    error Guard.Operation(text:S"NestedClass.externalTypeToS() The NestedClass Object refers to "[this.path()]"")
    )
  doc=this.record().docOf(path:Path"MyClass")
  nameAndPrefix=doc.annotations().left().toS()
  sep=nameAndPrefix.indexOfLeft(val:S".")
  name= nameAndPrefix(start:sep+1Size)
  prefix=Size.fromS(nameAndPrefix(start:4Size, end:sep)) //4Size== S"This".size()
  //X[prefix>0Size]
  if prefix == 1Size (return S"This."++name)
  return S"This"[prefix-1Size]"."++name
}

method ClassKind classKind() ClassKind.fromS(this.record()"ClassKind")
method S allAsString() this.record()"AllAsString"  //just the library literal
method
Members members() (
  result=Members.empty()
  var Size mN=1Size
  while Bool.true() (// to be able to break
    //Debug(S"Iteration "[mN]"")
    result.add(right:this.mirror()
      .introspectReportMember(root:this,path:this.path(),memberN:mN))
    //this was a private member
    catch exception MetaGuard.MemberUnavailable exception void
    mN+=1Size
    )
  result)
  //TODO: this method goes in loop for private members.
  //different result with compiled or bigstep see test introspection5

method
Methods methods()
  Methods[with m in this.members().vals() ( on Method use[m])]

method
NestedClasses nestedClasses()
  NestedClasses[with m in this.members().vals() ( on NestedClass use[m])]

method
NestedClasses transitivelyNestedClasses()
  NestedClasses[this]++
  NestedClasses[with nc in this.nestedClasses().vals() (
    with nci in nc.transitivelyNestedClasses().vals() (use[nci])
    )]

method Types implementedInterfaces() (
  result=Types.empty()
  var Size tN=1Size
  while Bool.true() (// to be able to break
    ti=this.mirror()
      .introspectReportType(root:this,path:this.path(),memberN:0Size,typeN:tN)
    //X[with sr=ti.strRepr() (
    //  use[sr!=S"This";sr!=S""]
    //  )]
    sr=ti.strRepr()
    //X[sr!=S"@.This";sr!=S"This";sr!=S""]

    result.add(right:ti)
    tN+=1Size
    )
  catch exception MetaGuard.MemberUnavailable x error X"NestedClass3"(x)
  result)
method Types transitivelyImplementedInterfaces() {
  var Types result=this.removeDup(this.implementedInterfaces())
  var Types new=result
  loop (
    var Types extra=Types[]
    with t in new.vals() (
      impl=t.referencedPath().implementedInterfaces()
      extra++=this.remove(impl, from:result)
      )
    if extra.isEmpty() (return result)
    new:=extra
    result++=extra
    )
  }

method
Bool implements(This that){
    with ti in this.transitivelyImplementedInterfaces().vals() (
        if ti.referencedPath()==that (return Bool.true())
        )
    return Bool.false()
  }
method//@_private
Types removeDup(Types that) (
  var mut Types result=Types.empty() //can not use [with since we need to check in results
  with t in that.vals() (
    if this.select(t,from:result) (result.add(right:t))
    )
  result
  )
method//@_private
Bool select(Type that,read Types from) (
  rp=that.referencedPath()
  Count[with t in from.vals() (use[t.referencedPath() == rp])]==0Size
  )
method//@_private
Types remove(Types that,Types from)
  Types[with t in that.vals() (if this.select(t,from:from) (use[t]))]

method
Methods stateCandidate() {
  var Bool havePrivate=Bool.false()
  absMethods=Methods[with m in this.methods().vals() (
    if m.methodKind().equals(\class._AbstractMethod())  (
      havePrivate|=m.isPrivate()
      use[m]
      )
    )]
  if !havePrivate (return absMethods)
  return Methods[with a in absMethods.vals() (   if a.isPrivate() (use[a])   )]
  }
method
Methods state() {
  stateCandidate=this.stateCandidate()
  classMethods=Methods[with m in stateCandidate.vals() (
      if m.thisMdf()==Mdf._Class() (use[m])
      )]
  if classMethods.isEmpty() (return Methods.empty())
  names=classMethods.left().selector().names()//the first constructor names
  //check that all constr have the same names.
  //We do not check same types, that would be part of coherent
  mut Methods result=Methods.empty()
  with c in classMethods.vals() (
    if names!=c.selector().names() (return Methods.empty() )
    result.add(right:c)
    )
  with name in names.vals() (
    getter=Selector.fromS(name++S"()")
    exposer=Selector.fromS(S"#"++name++S"()")
    setter=Selector.fromS(name++S"(that)")
    with f in stateCandidate.vals() (
      if f.selector()==getter |f.selector()==exposer |f.selector()==setter (
        result.add(right:f)
        )
      )
    )

  return result
  }
method
Method method(Selector that) exception MetaGuard.MethodUnavailable {
  with meth in this.methods().vals() (
    if meth.selector()==that (return meth)
    )
  exception MetaGuard.MethodUnavailable(path:this.pathFromRoot(),selector:that,isPrivate:Bool.false())
  //note: it can return a private method
  }
method
Bool has(Selector selector){
  unused=this.method(selector)
  catch exception MetaGuard.MemberUnavailable return Bool.false()
  return Bool.true()
  }

method
NestedClass nestedClassFromRoot(Path that) exception MetaGuard.NestedClassUnavailable {
  if that==Path"This" (return this.root())
  myClass=this.record().docOf(path:Path"MyClass").annotations().left()
  if !myClass.hasReferredClass() (
     return this.mirror().introspectReport(root:this.root(),path:that)
    )
  return Introspection(clazz:myClass.referredClass(),path:that)
  }

method
Bool has(Path fromRoot) (
  unused=this.nestedClassFromRoot(fromRoot)
  catch exception MetaGuard.MemberUnavailable Bool.false()
  Bool.true()
  )

method
Bool isPrivate() {
  with ann in this.nestedDoc().annotations().vals() (
    if ann.toS()==S"private" (return Bool.true())
    )
  return Bool.false()
  }
}
