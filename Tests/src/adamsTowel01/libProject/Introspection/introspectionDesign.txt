Idea: the introspection lets you talk about locations in the code, so 
if you have the class { class method Library foo()}
you can ask what is the return type of This.foo(), and you get
a Location.ReturnType knowing the Path (Library) the modifier (imm/immutable)
and the Location.Method that contains such type annotation.

General class shape:
Location:{interface implements Base //that is equals, toS and "know your class"
  Mdf:Enum...
  Location location()
  Origin:{
    List:...
    S fileName()
    Size line()
    Size column()
    }
  Origin.List origins()//many since metaprogramming
  Doc:{ implements Location
    Location location()//user will need typecase to discover precise type
    Annotation:{
      List:..
      Type.RefTo 
      S text
      }
    }
  //there is no Member since normalized classes have order: first nested, then methods
  Lib:{ implements Location
    refine Lib location()
    List directNested()
    List allNesteds()
    Method.List methods()
    Type.Implemented.List implementedInterfaces()
    Bool isInterface()
    Doc doc()
    List:...
    Root root()
    Path path()//last is its name, empty path for root
    Doc nestedDoc()//empty doc if it is root
    //even if obtained with a classObj, no method to get it back
    //to get a nested classObj, Refactor.navigateClassObj(classAny,Path)->classAny??
    }
  Method:{
    List:...
    refine Lib location()
    Bool isAbstract()
    Bool isRefine()
    Selector selector()
    Type.Return returnType()
    Type.Parameter.List parameterTypes()
    Type.Exception.List exceptions()
    }
  Type:{ interface
    Doc doc()
    RefTo:{interface implements Base
      //toS is the full path with Thisn.
      Lib:{
        Location.Lib referredLib()
        }
      Uncompiled:{ implements This1
        S pathToExpression()//can be a subset of toS
        S expression()
        }
      Binded:{implements This1 //includes primitives
        class Any referredClassObj()
        }
      Missing:{implements This1
        //mostly useful for docs, where we can use lowercase annotation
        //or we may want to preserve @P where we removed the P
        //also, if an (nested) Uncompiled is resolved not existing..        
        }
      }
    RefTo refTo()
    Mdf mdf()//imm for exception/implemented    
    Return:{
      refine Method location()
      }
    Parameter:{
      List:...
      refine Method location()
      Size pos()//0 for this
      }
    Exception:{
      List:...
      refine Method location()
      Size pos()//should start from 1 or 0?
      }
    Implemented:{
      List:...
      refine Lib location()
      Size pos()//should start from 1 or 0?
      }    
    }

By calling Refactor.introspect(lib:{...})or
By calling Refactor.introspect(class:A.B) you get a Location.Lib

L::={ interface? Doc implements Ts mwt1..mwtn nc1..nck Phase}  //library compiled
mwt::= abstract? refine? mh //we do not expose the implementation
nc::= C Doc:L
mdf::= imm|mut|lent|read|capsule|class | fwdImm | fwdMut 
ms::=m(xs) //method selector
mh::= mdf method Doc T m(T1 x1..Tn xn) exception Ts
P::= Thisn.Cs | Any | Library | Void  //is pronounced "Path"
T::= mdf P Doc
Doc::= /*has a text, a set of annotations,
 where every annotation can be either a string or
 a Path, and a string content for each annotation */
C::= uppercase identifiers including $ as uppercase
x::= lowercase identifier including _ as lowercase
m::= x| #x




repl
main.runSlow L42Continuation c
c.original src
c.desugared src
c.free names maps
c.add(C:e)
-------
Please, sort of ignore the rest, it is a former attempt
Introspection:{
  class method NestedClass (Library lib)
  class method NestedClass (Library lib,Path path) exception MetaGuard.NestedClassUnavailable
  class method NestedClass (class Any clazz)
  class method NestedClass (class Any clazz,Path path) exception MetaGuard.NestedClassUnavailable

  Member:{interface implements Concepts.Base}
  NestedClass:{<:Member
    Library mirror
    NestedClass root
    Path path
    Record record
    method Bool ==(This that)
    method Doc nestedDoc()// error  for This
    method Doc doc() //of the library literal
    method Path pathFromRoot() // invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
    method Bool hasExternalType()
    method class Any externalType() //error if  root()!=this or root() is literal, otherwise contains the class Any used to initialize root/this.
    method S externalTypeToS()
    method ClassKind classKind()
    method S allAsString()  //just the library literal//badname
    method Members members()
    method Methods methods()
    method NestedClasses nestedClasses()
    method Types implementedInterfaces()
    method NestedClasses transitivelyNestedClasses()
    method Bool implements(This that)//note type of argument
    method Bool consistent()
    method Methods constructors()
    method Methods getters()
    method Methods setters()
    method Methods exposers()    
    method Method method(Selector that) exception MetaGuard.MethodUnavailable
    method Bool has(Selector selector)
    method NestedClass nestedClassFromRoot(Path that) exception MetaGuard.NestedClassUnavailable
    method Bool has(Path pathFromRoot)
    method Bool isPrivate()
    }

  Method:{<:Member
    method NestedClass root()
    method NestedClass nestedClass()
    method Doc doc()
    method Mdf thisMdf()
    method Path pathFromRoot()// invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
    method Selector selector()
    method MethodKind methodKind() //one of InterfaceImplementedMethod,ImplementedMethod,AbstractMethod
    method S allAsString()
    method Type returnType()
    method Types exceptions()
    method Types parameterTypes()
    }

  Type:{
    method NestedClass root()
    method TypeKind typeKind() //{Normal,Alias,AliasUnresolvable}
    method Mdf mdf()//error on AliasUnresolvable
    method NestedClass referencedPath()
    method NestedClass resolvedReferencedPath() //error on AliasUnresolvable
    method Bool partial()
    method Bool resolvedPartial() //error on Normal? or the same of partial()
    method S suffix()  //error on Normal
    method Doc doc()
    method S allAsString()
    }
    Members: ...
    Methods: ...
    NestedClasses: ...
    Types:...
  }