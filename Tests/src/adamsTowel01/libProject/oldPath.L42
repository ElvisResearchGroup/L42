{ implements Concept.ToS Concept.Equals, Concept.Classable//@_private
  class method mut This _private(Library _binaryRepr)
  read method Library _binaryRepr()
  

  refine class method
  read This cast(read Concept.Classable that){
    with that (on read This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  refine class method
  mut This #cast(mut Concept.Classable that){
    with that (on mut This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
  refine read method class This class() This
  method readableName()GetMyName(This)

  class method
  This fromDocInternalizedS(S that){
    S internal={
      if that(\size-1Size)!=S.nl() (return that)
      return that(end:\size-1Size)
      }
    if internal==S"@." (return This.fromS(S"This"))
    return This.fromS(internal(start:2Size))
    catch error Message x
      error This.parseError(that,cause:x)
    }
  class method
  This fromS(Concept.ToS that)
    This.#from(binaryRepr: that.toS().#binaryRepr())

  class method This #from(S.SBuilder builder)
    This.#from(binaryRepr: builder.#binaryRepr())
  class method mut S.SBuilder #builder() S.SBuilder.empty()

  class method mut This #from(Library binaryRepr) (
    use SafeOperators
      check ifInvalidDo(path:binaryRepr)
      error This.parseError(S.#from(binaryRepr: binaryRepr))
    This._private(_binaryRepr:binaryRepr)
    )
  class method
  Any parseError(S that)
    S"Path1.["[that]"] UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"
  class method
  Any parseError(S that, Message cause)
    S"Path2.["[that]"] UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"

  read method Library #binaryRepr() this._binaryRepr()


  method toS() S.#from(binaryRepr: this._binaryRepr())

  read method
  Bool equals(read This that) {
    use Alu
      check ifStringEqualDo(s1:this.#binaryRepr(),s2:that.#binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method ==(right){
    with that (on read This return this.equals(right))
    return Bool.false()
    }
  method
  Path ++(Path that){
    if this==Path"This" (return that)
    if that==Path"This" (return this)
    return Path.#from(binaryRepr:
      this.toS()[S".";that]"".#binaryRepr()
      )
    }
  method
  mut Strings names(){
    var S str=this.toS()
    if str==S"This" (return Strings.empty())
    str++=S"."
    mut Strings result=Strings.empty()
    while str!=S"" (
      pos=str.indexOfLeft(val:S".")
      result.add(right:str(end:pos))
      str:=str(start:pos+1Size)
      )
    return result
    }

  method
  Bool isUnique()
     S"_$_"<this.toS()

  class method
  Path from(read Strings names) {
    if names.isEmpty() (return Path"This")
    s=S""[with n in names.vals() (use[n sep:S"."])]""
    return This.fromS(s) //(end:s.size()-1Size)
    }
  class method
  Path fresh(S name)
    Path.fromS(SafeOperators.freshName(name))

  class method
  Path fresh()
    this.fresh(name:S"Fresh")

  class method
  Path fresh(Path path) {
    mut Strings names=path.names()
    if names.isEmpty() (return this.fresh())
    right=SafeOperators.freshName(names.right())
    names.right(right)
    return Path.from(names:names)
    }
  }