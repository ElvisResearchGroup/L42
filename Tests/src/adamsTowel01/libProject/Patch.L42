{
  method Path that()
  class method This(Path that)
  
  method
  Library <><(Library right)
  exception Refactor2.ClassClash,Refactor2.MethodClash{
    ip=Location.Lib(right).nested(path:this.that())
    itr=ip.allNesteds()

HERE

    rens=This.renameMap(that,prefix:S"#1", intros:itr)
    map=PreferentialComposition.SrcDests.empty()
    var Library acc=that
    with ren in rens.vals() (
      map.add(right:ren)
      acc:=Refactor.MoveImplementationSelector(
        ren.src() of:ren.path() to:ren.dest())<><acc
      catch exception MetaGuard err
        error X"Path.#lessless(that)"(err)
      void
      )
    acc:=Refactor.RenamePath(
      this.that() to:Path"This")<><acc
    with mapi in map.vals() (
      acc:=Refactor.MakePrivateSelector(
        mapi.dest() of:mapi.path())<><acc
      )
    return acc
    catch exception MetaGuard.MemberUnavailable err
      error X"Path2"(err)
    }
  class method //@_private
  PreferentialComposition.SrcDests renameMap(Library that,S prefix,Introspection.NestedClasses intros)
    PreferentialComposition.SrcDests[ with intro in intros.vals() (
      Strings ns=intro.pathFromRoot().names()
      //X[!ns.isEmpty()]
      round=PreferentialComposition.renameMap(that,
        prefix:prefix,
        path:Path.from(names:ns.withoutLeft())
        ms:intro.methods())
      with r in round.vals() (use[r])
      )]

  }




Top
Top.N

map=empty
with l in lN.allNesteds().vals()
  with 
l1=l[abs sel of p]//for all good sel in N.p
l2=l1[rename N in This0]
lres=l2[hide #sel of p]


    
