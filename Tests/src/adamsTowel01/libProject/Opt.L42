{
  class method Library (class Any that){
    return Refactor2.redirect(path:\"T",into:that)<><This.optTrait()
    error on Refactor2.Fail X""
    }
  class method Library optTrait(){
      method TOpt that()
      class method This #new(TOpt that)
      method
      T get()
      exception Guard.Operation {
        return this.#get()
        catch error Guard.Operation err
          exception err
        }
      T:{}
      TOpt:{interface method T get() }
      TEmpty:{
        implements TOpt
        class method This ()
        method get()
          error X"TEmpty.get() Value not present in Optional" 
        }
      TOf:{implements TOpt
        method T that()
        class method This (T that)
        method get()
          this.that()
        }
      method T #get() this.that().get()
      method Bool isPresent(){
        with cell=this.that() (on TOf return Bool.true())
        return Bool.false()
        }
      class method This () This.#new(TEmpty())
      class method This (T that) This.#new(TOf(that))
      }
  }