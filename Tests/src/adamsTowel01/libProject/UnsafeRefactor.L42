{
Compose:{
  //@plugin  toFix 
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Compose
  
  class method Void #pluginUnresponsive(Library binaryRepr) 
    error {/*Compose(that,and)*/}

  class method
  Library compose(Library left,Library right)
  
  class method
  Library (Library that,Library and)
    This.compose(left:that,right:and)
  }
RenameClass:{
  //@plugin  toFix 
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Rename
  class method Void #pluginUnresponsive(Library binaryRepr) 
    error {/*renameClass(Library that,S nameSrc,S nameDest)*/}

  class method
  Library renameClassS(Library that,S nameSrc,S nameDest)
  }
Redirect:{
  //@plugin  toFix 
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Redirect
  class method Void #pluginUnresponsive(Library binaryRepr) 
    error {/*redirect(Library that,S src,class Any dest)*/}

  class method
  Library redirectS(Library that,S src,class Any dest)
  }
This$er:{
  class method
  Library <><(Library that)
    RenameClass.renameClassS(that,nameSrc:S"This$",nameDest:S"This")
  }
MiniDataTrait:{class method Library(){
  implements Concept.Base

  refine class method
  read This cast(read Concept.Classable that){
    with that (on read This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  refine class method
  mut This #cast(mut Concept.Classable that){
    with that (on mut This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  refine read method
  class This class()
    This

  method readableName()
    GetMyName(This)

  method is(subtype){
    with subtype (on class This return Bool.true())
    return Bool.false()}

  method ==(that) {
    with that (on read This return this.equals(that))
    return Bool.false()}

  read method Bool equals(read This that)
  This$:{}
  }}
MiniData:{
  class method Library thisLib() {
    implements Concept.Base
    refine read method class This class()
    }
  class method
  Library <><(Library that)
    This$er<><Compose.compose(left:MiniDataTrait() right:that)
  }
ClassableTrait:{class method Library(){
  implements Concept.Classable

  refine class method
  read This cast(read Concept.Classable that){
    with that (on read This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  refine class method
  mut This #cast(mut Concept.Classable that){
    with that (on mut This return that)
    error GetMyName.classCastError(that,classObj:This)
    }
  refine read method
  class This class()
    This

  method readableName()
    GetMyName(This)

  method is(subtype){
    with subtype (on class This return Bool.true())
    return Bool.false()}
  }}
Classable:{
  class method
  Library <><(Library that)
    Compose.compose(left:ClassableTrait() right:that)
  }
}