{

//------------------------------
//Infrastructure
//------------------------------
  Fail:{interface implements Guard    }
  ErrorW:{
    class method Library trait(){
      //@plugin is.L42.connected.withSafeOperators
      implements Fail

      method kind() S"Refactor.Fail"
      method responseOf()Message.Opt()
      method toS() This.readableName()[
        S": ";S.nl();this.text().as42MultilineString()
        ]""

      class method
      Library #pluginUnresponsive(Library binaryRepr)
        binaryRepr
      }
    class method Library <><(Library right)
      UnsafeRefactor.MiniData<><UnsafeRefactor.Compose.compose(
        left:right,
        right:This.trait()
      )
    }


//------------------------------
//Kinds of Fails
//------------------------------

  ParseFail:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ParseFail
    method S string()
    method S expected()
    }

  UnresolvedOverloading:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$UnresolvedOverloading
    }
  ClassUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassUnfit
    }
  MethodUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodUnfit
    }

  ClassClash:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassClash
    method Location.Lib left()
    method Location.Lib right()
    }
  MethodClash:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodClash
    method Location.Method left()
    method Location.Method right()
    }
  PathUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$PathUnfit
    method Path path()
    }
  SelectorUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SelectorUnfit
    method Path path()
    method Selector selector()
    }
  IncoherentMapping:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SelectorUnfit
    }

  PrivacyCoupuled:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$PrivacyCoupuled
    }


SubtleSubtypeViolation:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SubtleSubtypeViolation
    }

//------------------------------
//JavaImport
//------------------------------

  JavaImport:{
    //@plugin is.L42.connected.withSafeOperators
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
    class method
    Library #pluginUnresponsive(Library binaryRepr)
      binaryRepr

    class method
    Library <><(Library right)
    exception UnresolvedOverloading, ClassUnfit, MethodUnfit
      This.main(right)

    class method
    Library main(Library that)
    exception UnresolvedOverloading, ClassUnfit, MethodUnfit

    }


//------------------------------
//Compose
//------------------------------
Compose:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Compose

  class method
  Void #pluginUnresponsive(Library binaryRepr)
    error X"Compose(that,and)"

  class method
  Library compose(Library left,Library right)
  exception MethodClash,ClassClash,SubtleSubtypeViolation
  }
class method
Library compose(Library that,Library and)
exception MethodClash,ClassClash,SubtleSubtypeViolation
  Compose.compose(left:that,right:and)

//------------------------------
//Rename
//------------------------------
PlgRenameClass:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Rename
  class method Void #pluginUnresponsive(Library binaryRepr)
    error X"renameClass(Library that,Path src,Path dest)"

  class method
  Library renameClassJ(Library that,Path src,Path dest)
  exception  PathUnfit, MethodClash,ClassClash,SubtleSubtypeViolation

  class method
  Library hideClassJ(Library that,Path src)
  exception  PathUnfit, ClassUnfit
  }
RenameClass:{
  method Path src()
  method Path dest()
  class method This (Path src,Path dest)
  method Library <><(Library right)
  exception  PathUnfit, MethodClash,ClassClash,SubtleSubtypeViolation
    PlgRenameClass.renameClassJ(
      right,src:this.src(),dest:this.dest())
  }
//TODO: change sugar so that is #default1 or #default2, so that
//we can have "into" as both selector and path
class method
class Path #default#rename(Void path) Path
class method
class Path #default#rename(Void into) Path
class method
RenameClass rename(Path path, Path into)
  RenameClass(src:path,dest:into)

HideClass:{
  method Path src()
  class method This (Path src)
  method Library <><(Library right)
  exception  PathUnfit, ClassUnfit
    PlgRenameClass.hideClassJ(
      right,src:this.src())
  }
class method
class Path #default#hide(Void path) Path
class method
HideClass hide(Path path)
  HideClass(src:path)


PlgAbstractClass:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.AbstractClass
  class method Void #pluginUnresponsive(Library binaryRepr)
    error X"abtractClass(Library that,Path src)"

  class method
  Library toAbstractJ(Library that,Path src)
  exception  PathUnfit, PrivacyCoupuled
  }

ToAbstractClass:{
  Path src
  class method This (Path src)
  method Library <><(Library right)
  exception  PathUnfit, PrivacyCoupuled
    PlgAbstractClass.toAbstractJ(right,src:this.src())

  }

class method
class Path #default#toAbstract(Void path) Path
class method
ToAbstractClass toAbstract(Path path)
  ToAbstractClass(src:path)


//------------------------------
//ToAbstract
//------------------------------
PlgToAbstract:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.ToAbstract
  class method Void #pluginUnresponsive(Library binaryRepr)
    error X"toAbstractSelector"

  class method
  Library toAbstractPathDestJ(Library that,Path path,Selector src,Selector dest)
  exception SelectorUnfit, PathUnfit, MethodClash
  class method
  Library toAbstractPathJ(Library that,Path path,Selector src)
  exception SelectorUnfit, PathUnfit
  class method
  Library toAbstractDestJ(Library that,Selector src,Selector dest)
  exception SelectorUnfit,  MethodClash
  class method
  Library toAbstractJ(Library that,Selector src)
  exception SelectorUnfit
  }
//1
ToAbstract:{
  method Selector src()
  class method This (Selector src)
  method Library <><(Library right)
  exception SelectorUnfit
    PlgToAbstract.toAbstractJ(
      right,src:this.src())
  }
class method
ToAbstract toAbstract(Selector selector)
  ToAbstract(src:selector)
//2
ToAbstractDest:{
  method Selector src()   method Selector dest()
  class method This (Selector src,Selector dest)
  method Library <><(Library right)
  exception SelectorUnfit,MethodClash
    PlgToAbstract.toAbstractDestJ(
      right,src:this.src() dest:this.dest())
  }
class method
ToAbstractDest toAbstract(Selector selector,Selector into)
  ToAbstractDest(src:selector,dest:into)
//3
ToAbstractPath:{
  method Path path() method Selector src()
  class method This (Path path,Selector src)
  method Library <><(Library right)
  exception SelectorUnfit, PathUnfit
    PlgToAbstract.toAbstractPathJ(
      right,path:this.path(),src:this.src())
  }
class method
ToAbstractPath toAbstract(Selector selector Path of)
  ToAbstractPath(path:of,src:selector)
//4
ToAbstractPathDest:{
  method Path path() method Selector src() method Selector dest()
  class method This (Path path,Selector src,Selector dest)
  method Library <><(Library right)
  exception SelectorUnfit, PathUnfit, MethodClash
    PlgToAbstract.toAbstractPathDestJ(
      right,path:this.path(),src:this.src(),dest:this.dest())
  }
class method
ToAbstractPathDest toAbstract(Selector selector, Path of,Selector into)
  ToAbstractPathDest(path:of,src:selector,dest:into)

class method
class Selector #default#toAbstract(Void selector) Selector
class method
class Selector #default#toAbstract(Void into) Selector
class method
class Path #default#toAbstract(Void of) Path

/*
rename method:
  if path private, path not found
  if src private, selector not found
  if dest is private, check not abstract
    on fail??
*/


//------------------------------
//Redirect
//------------------------------
PlgRedirect:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Redirect
  class method Void #pluginUnresponsive(Library binaryRepr)
    error {/*redirect(that,src,dest)*/}

  class method
  Library redirectJ(Library that,Path src,class Any dest)
  exception ClassUnfit, IncoherentMapping, MethodClash, PathUnfit
  }
Redirect:{
  method Path src()
  method class Any dest()
  class method This(Path src, class Any dest)
  method
  Library <><(Library right)
  exception ClassUnfit, IncoherentMapping, MethodClash, PathUnfit
    PlgRedirect.redirectJ(right,src:this.src(),dest:this.dest())
  }
class method
class Path #default#redirect(Void path) Path
class method
Redirect redirect(Path path,class Any into)
  Redirect(src:path,dest:into)


RefToUnfit: Message.$<><{implements Fail}

RedirectRefTo:{
  Path src
  Location.Type.RefTo into
  class method This (Path src, Location.Type.RefTo into)
  method Library <><(Library right)
  exception
  ,,,,ClassUnfit
  ,,,,IncoherentMapping
  ,,,,MethodClash
  ,,,,ClassClash
  ,,,,PathUnfit
  ,,,,RefToUnfit
  ,,,,SubtleSubtypeViolation {
    with r=this.into() (
      on Location.Type.RefTo.Binded
        return This1.redirect(path:this.src() into:r.referredClassObj())<><right
      on Location.Type.RefTo.Lib
        return This1.rename(path:this.src() into:r.referredLib().path())<><right
      )
    exception RefToUnfit"Provided RefTo is not Binded nor Lib: "[this.into()]""
    }
  }
class method RedirectRefTo redirect(Path path, Location.Type.RefTo intoRefTo)
  RedirectRefTo(src:path, into:intoRefTo)

//------------------------------
//Method  //as in Refactor.Method
//------------------------------
PlgMethod:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.RenameMethods
  class method Void #pluginUnresponsive(Library binaryRepr)
    error {/*redirect(that,src,dest)*/}

  //from Java
  class method This ()
  method Library act(Library that)
  exception PathUnfit, SelectorUnfit,MethodClash, ClassUnfit
  method This addRenameJ(Path path, Selector src, Selector dest)
  method This addHideJ(Path path,Selector src)
  method This addCloseJ(Path path)
  method This addAbstractJ(Path path,Selector src)
  method This addAbstractAliasJ(Path path, Selector src, Selector dest)
  }
Method:{
  var PlgMethod inner
  class method mut This (PlgMethod inner)

  read method
  Library <><(Library right)
  exception PathUnfit, SelectorUnfit,MethodClash, ClassUnfit
    this.inner().act(right)

  //[] syntax
  class method mut This #seqBuilder() This(inner:PlgMethod())
  class method mut This #from(mut This seqBuilder) seqBuilder

  class method class Path #default##square(Void of) Path
  class method class Selector #default##square(Void hide) Selector
  class method class Selector #default##square(Void rename) Selector
  class method class Selector #default##square(Void into) Selector
  class method class Selector #default##square(Void abstract) Selector
  class method class Selector #default##square(Void alias) Selector

  //hide:\"foo()" of:\"Bar";
  mut method Void #add(Selector hide, Path of)
    this.inner(this.inner().addHideJ(path:of,src:hide))
  //hide:\"foo()";
  mut method Void #add(Selector hide)
    this.inner(this.inner().addHideJ(path:Path"This",src:hide))
  //rename:\"foo()" of:\"Bar" into:\"bar()";
  mut method Void #add(Selector rename Path of Selector into)
    this.inner(this.inner().addRenameJ(path:of,src:rename,dest:into))
  //rename:\"foo()" into:\"bar()";
  mut method Void #add(Selector rename Selector into)
    this.inner(this.inner().addRenameJ(path:Path"This",src:rename,dest:into))
  //closeState:\"Bar";
  mut method Void #add(Path closeState)
    this.inner(this.inner().addCloseJ(path:closeState))
  //abstract:\"foo()" of:\"Bar";
  mut method Void #add(Selector abstract Path of)
    this.inner(this.inner().addAbstractJ(path:of,src:abstract))
  //abstract:\"foo()" of:\"Bar" alias:\"..";
  mut method Void #add(Selector abstract Path of Selector alias)
    this.inner(this.inner()
      .addAbstractAliasJ(path:of,src:abstract,dest:alias))
  //abstract:\"foo()";
  mut method Void #add(Selector abstract)
    this.inner(this.inner().addAbstractJ(path:Path"This",src:abstract))
  //abstract:\"foo()" alias:\"..";
  mut method Void #add(Selector abstract Selector alias)
    this.inner(this.inner().addAbstractAliasJ(path:Path"This",src:abstract,dest:alias))
  }
//------------------------------
//MakeDoc
//------------------------------
MakeDoc:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.MakeDoc

  class method
  Void #pluginUnresponsive(Library binaryRepr)
    error X"MakeDoc(that)"

  class method
  Library makeDoc(S that)
  }
class method
Library makeDoc(S that)
  MakeDoc.makeDoc(that)



//------------------------------
//SumMethods
//------------------------------
PlgSumMethods:{
  //@plugin  toFix
  //@pluginPart is.L42.connected.withSafeOperators.refactor.SumMethods
  class method Void #pluginUnresponsive(Library binaryRepr)
    error {/*redirect(that,src,dest)*/}
  class method Library sumMethodsJ(
    Library lib, Path path,Selector src1,Selector src2,Selector dest,S name)
  exception MethodClash, PathUnfit, SelectorUnfit
  }

SumMethods:{
    Selector that
    Selector and
    Path of
    S over
    Selector into
    class method This (Selector that,Selector and, Path of, S over, Selector into)
    method
    Library <>< (Library right)
    exception  MethodClash, PathUnfit, SelectorUnfit
      PlgSumMethods.sumMethodsJ(lib:right,path:this.of() src1:this.that(),src2:this.and(), dest:this.into(),name:this.over())
    }
class method
SumMethods sumMethods(Selector that,Selector and, Path of, S over, Selector into)
  SumMethods(that,and:and, of:of,over:over,into:into)

 }
