{

//------------------------------
//Infrastructure
//------------------------------
  Fail:{interface implements Concept.ToS, Concept.Classable
    //not implement Guard, not a message, no cause/more then a msg?
    read method S text()  
    }
  ErrorW:{
    class method Library trait(){
      //@plugin is.L42.connected.withSafeOperators
      implements Fail
      
      method toS() This.readableName()[
        S": ";S.nl();this.text().as42MultilineString()
        ]""
      
      refine read method class This class() This
      
      method readableName() GetMyName(This)
      
      method is(subtype) {
        with subtype (on class This return Bool.true())
        return Bool.false()
        }
      class method
      Library #pluginUnresponsive(Library binaryRepr)
        binaryRepr  
      }
    class method Library <><(Library that)
      UnsafeRefactor.Compose.compose(
        left:that,
        right:This.trait()
      )
    }


//------------------------------
//Kinds of Fails
//------------------------------

  UnresolvedOverloading:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$UnresolvedOverloading
    }
  ClassUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassUnfit
    }
  MethodUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodUnfit
    } 

  ClassClash:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassClash
    method Location.Lib left()
    method Location.Lib right()
    }
  MethodClash:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodClash
    method Location.Method left()
    method Location.Method right()
    } 
  PathUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$PathUnfit
    method Path path()
    } 
  SelectorUnfit:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SelectorUnfit
    method Path path()
    method Selector selector()
    } 
//errors ready for other operations
//IncoherentMapping
//PrivacyCoupuled
SubtleSubtypeViolation:ErrorW<><{
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SubtleSubtypeViolation
    } 

//------------------------------
//JavaImport
//------------------------------

  JavaImport:{
    //@plugin is.L42.connected.withSafeOperators
    //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
    class method
    Library #pluginUnresponsive(Library binaryRepr)
      binaryRepr  

    class method
    Library <><(Library that)
    exception UnresolvedOverloading, ClassUnfit, MethodUnfit
      This.main(that)

    class method
    Library main(Library that)
    exception UnresolvedOverloading, ClassUnfit, MethodUnfit

    }


//------------------------------
//Compose
//------------------------------
Compose:{
  //@plugin  toFix 
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Compose
  
  class method
  Void #pluginUnresponsive(Library binaryRepr) 
    error X"Compose(that,and)"

  class method
  Library compose(Library left,Library right)
  exception MethodClash,ClassClash,SubtleSubtypeViolation
  }
class method
Library compose(Library that,Library and)
exception MethodClash,ClassClash,SubtleSubtypeViolation
  Compose.compose(left:that,right:and)

//------------------------------
//Rename
//------------------------------
PlgRenameClass:{
  //@plugin  toFix 
  //@pluginPart is.L42.connected.withSafeOperators.refactor.Rename
  class method Void #pluginUnresponsive(Library binaryRepr) 
    error X"renameClass(Library that,Path src,Path dest)"

  class method
  Library renameClass(Library that,Path src,Path dest)
  exception  PathUnfit, MethodClash,ClassClash,SubtleSubtypeViolation

  class method
  Library hideClass(Library that,Path src)
  exception  PathUnfit, ClassUnfit
  }
RenameClass:{
  method Path src()
  method Path dest()
  class method This (Path src,Path dest)
  method Library <><(Library that)
  exception  PathUnfit, MethodClash,ClassClash,SubtleSubtypeViolation
    PlgRenameClass.renameClass(
      that,src:this.src(),dest:this.dest())
  }
//TODO: change sugar so that is #default1 or #default2, so that
//we can have "into" as both selector and path
class method
class Path #default#rename(Void path) Path
class method
class Path #default#rename(Void into) Path
class method
RenameClass rename(Path path, Path into)
  RenameClass(src:path,dest:into)

HideClass:{
  method Path src()
  class method This (Path src)
  method Library <><(Library that)
  exception  PathUnfit, ClassUnfit
    PlgRenameClass.hideClass(
      that,src:this.src())
  }
class method
class Path #default#hide(Void path) Path
class method
HideClass hide(Path path)
  HideClass(src:path)


//------------------------------
//ToAbstract
//------------------------------
PlgToAbstract:{
  //@plugin  toFix 
  //@pluginPart is.L42.connected.withSafeOperators.refactor.ToAbstract
  class method Void #pluginUnresponsive(Library binaryRepr) 
    error X"toAbstractSelector"

  class method
  Library toAbstractPathDest(Library that,Path path,Selector src,Selector dest)
  exception SelectorUnfit, PathUnfit, MethodClash
  class method
  Library toAbstractPath(Library that,Path path,Selector src)
  exception SelectorUnfit, PathUnfit
  class method
  Library toAbstractDest(Library that,Selector src,Selector dest)
  exception SelectorUnfit,  MethodClash
  class method
  Library toAbstract(Library that,Selector src)
  exception SelectorUnfit
  }
//1
ToAbstract:{
  method Selector src()
  class method This (Selector src)
  method Library <><(Library that)
  exception SelectorUnfit
    PlgToAbstract.toAbstract(
      that,src:this.src())
  }
class method
ToAbstract toAbstract(Selector selector)
  ToAbstract(src:selector)
//2
ToAbstractDest:{
  method Selector src()   method Selector dest()
  class method This (Selector src,Selector dest)
  method Library <><(Library that)
  exception SelectorUnfit,MethodClash
    PlgToAbstract.toAbstractDest(
      that,src:this.src() dest:this.dest())
  }
class method
ToAbstractDest toAbstract(Selector selector,Selector into)
  ToAbstractDest(src:selector,dest:into)
//3
ToAbstractPath:{
  method Path path() method Selector src()
  class method This (Path path,Selector src)
  method Library <><(Library that)
  exception SelectorUnfit, PathUnfit
    PlgToAbstract.toAbstractPath(
      that,path:this.path(),src:this.src())
  }
class method
ToAbstractPath toAbstract(Selector selector Path of)
  ToAbstractPath(path:of,src:selector)
//4
ToAbstractPathDest:{
  method Path path() method Selector src() method Selector dest()
  class method This (Path path,Selector src,Selector dest)
  method Library <><(Library that)
  exception SelectorUnfit, PathUnfit, MethodClash
    PlgToAbstract.toAbstractPathDest(
      that,path:this.path(),src:this.src(),dest:this.dest())
  }
class method
ToAbstractPathDest toAbstract(Selector selector, Path of,Selector into)
  ToAbstractPathDest(path:of,src:selector,dest:into)

class method
class Selector #default#toAbstract(Void selector) Selector
class method
class Selector #default#toAbstract(Void into) Selector
class method
class Path #default#toAbstract(Void of) Path

/*
rename method:
  if path private, path not found
  if src private, selector not found
  if dest is private, check not abstract 
    on fail??
*/
  }
