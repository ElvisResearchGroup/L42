{(Library _binaryRepr)
 implements Concept.Equals, Concept.ToS, Concept.Classable//@_private

  read method
  This clone()
    This(_binaryRepr:this._binaryRepr())
 
  method 
  Library #binaryRepr()
    this._binaryRepr()
  
  class method
  This #from(Library binaryRepr)
    This(_binaryRepr:binaryRepr)
 
  
  method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
  refine read method class This class() This
  method readableName()GetMyName(This)
  method
  toS(){
    if this (return S"true")
    return S"false"
    }

  method
  equals(that){
    with that (on read This return this==that)
    return Bool.false()
    }

  read method
  Void #checkTrue() exception Void
    use Alu
      check ifFalseBoolDo(this._binaryRepr())
      exception void
  class method
  This true()
    This.#from(binaryRepr:use Alu check constTrue() error void)
  class method
  This false()
    This.#from(binaryRepr:use Alu check constFalse() error void)

  method
  This &(This that){
    if this (return that)
    return this
    }
  method
  This |(This that){
    if this (return this)
    return that
    }
  method
  This !(){
    if this (return This.false())
    return This.true()
    }

  read method
  Bool ==(read This that){
    if this (return that.clone())
    return !that.clone()
    }

  class method
  This fromS(read Concept.ToS that){
    if that.toS()==S"true" (return This.true())
    if that.toS()==S"false" (return This.false())
    error This.parseError(that.toS())
    }

  class method
  Any parseError(S that)
    S"Bool.UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"

}