{
  class method
  Library compose(Library left,Library right)
  exception MetaGuard.ClassClash, MetaGuard.MethodClash {
    return SafeOperators.compose(left:left,right:right)
    catch error Library err (
      MetaGuard.ClassClash(lift:err)
      MetaGuard.MethodClash(lift:err)
      error err)
    }
  class method
  Void checkTargetExists(Library that,Path path) exception MetaGuard.NestedClassUnavailable (
    unused=AddDocumentationPath(path doc:Introspection.Doc"JustToSeeIfItIsThere")<><that
    catch exception MetaGuard.InvalidOnTopLevel x
      error X"Refactor4"
    void
    )

  RedirectType:{(Path that, Introspection.Type to)
    method
    Library <>< (Library that)
    exception
        MetaGuard.NestedClassUnavailable,
        MetaGuard.InvalidOnTopLevel,
        MetaGuard.SourceUnfit,
        MetaGuard.MethodClash,
        MetaGuard.ClassClash,
        MetaGuard.IncoherentRedirectMapping{
    if this.to().isVoid() (return Redirect(this.that() to: Void)<><that)
    if this.to().isAny() (return Redirect(this.that() to: Any)<><that)
    if this.to().isLibrary() (return Redirect(this.that() to: Library)<><that)
    nc=this.to().referencedPath()
    if nc.hasExternalType() (return Redirect(this.that() to: nc.externalType())<><that )
    return RenamePath(this.that() to:nc.pathFromRoot())<><that
    }
  }

  Redirect:{(Path that, class Any to)

    class method
    RedirectType (Path that, Introspection.Type toType)
      RedirectType(that, to:toType)

    method
    Library <>< (Library that)
    exception
        MetaGuard.NestedClassUnavailable,
        MetaGuard.InvalidOnTopLevel,
        MetaGuard.SourceUnfit,
        MetaGuard.MethodClash,
        MetaGuard.IncoherentRedirectMapping{
      return SafeOperators.redirect(that,src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)
        MetaGuard.InvalidOnTopLevel(lift:err)
        MetaGuard.SourceUnfit(lift:err)
        MetaGuard.MethodClash(lift:err)
        MetaGuard.IncoherentRedirectMapping(lift:err)
        error err)
      }
    }
  RenameSelector:{(Selector that, Path of, Selector to)
    method
    Library <>< (Library that)
    exception MetaGuard.MemberUnavailable,MetaGuard.MethodClash{
      return SafeOperators.renameMethod(that,path:this.of() src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        MetaGuard.MethodClash(lift:err)
        error err)
      }
    }
  RenamePath:{(Path that, Path to)
    method
    Library <>< (Library that)
    exception
        MetaGuard.NestedClassUnavailable,
        MetaGuard.MethodClash,
        MetaGuard.ClassClash{
      return SafeOperators.renameClass(that,src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)
        MetaGuard.MethodClash(lift:err)
        MetaGuard.ClassClash(lift:err)
        error err
        )
      }
    }
  RemoveImplementationSelector:{(Selector that, Path of)
    method
    Library <>< (Library that)
    exception MetaGuard.MemberUnavailable{
      return SafeOperators.removeImplementation(that,path:this.of(),selector:this.that())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        error err)
      }
    }
  MoveImplementationSelector:{(Selector that, Path of,Selector to)
    method
    Library <>< (Library that)
    exception MetaGuard.MemberUnavailable,MetaGuard.MethodClash{
      return SafeOperators.moveImplementation(that,path:this.of(),src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        MetaGuard.MethodClash(lift:err)
        error err)
      }
    }
  RemoveImplementationPath:{(Path that)
    method
    Library <>< (Library that)
    exception
        MetaGuard.NestedClassUnavailable,
        MetaGuard.PrivacyCoupuled{
      return SafeOperators.removeImplementation(that,path:this.that())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)MetaGuard.PrivacyCoupuled(lift:err)
        error err)
      }
    }
  AddDocumentationSelector:{(Selector that, Path of,Introspection.Doc doc)
    method
    Library <>< (Library that)
    exception MetaGuard.MemberUnavailable{
      return SafeOperators.addDocumentation(that,path:this.of() selector:this.that(),doc:this.doc())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        error err)
      }
    }
  AddDocumentationPath:{(Path that,Introspection.Doc doc)
    method
    Library <>< (Library that)
    exception
        MetaGuard.NestedClassUnavailable,
        MetaGuard.InvalidOnTopLevel{
      return SafeOperators.addDocumentation(that,path:this.that(),doc:this.doc())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)
        MetaGuard.InvalidOnTopLevel(lift:err)
        error err)
      }
    }
    
    
    
  MakePrivatePath:{(Path that) //Can be called Hide
    method
    Library <>< (Library that)
    exception
        MetaGuard.MemberUnavailable,
        MetaGuard.InvalidOnTopLevel {
      if this.that()==Path"This" (error S"need to create an MetaGuard.InvalidOnTopLevel")
      return SafeOperators.hideClass(that,src:this.that())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)
        error err
        )
      }
    }
  MakePrivateSelector:{(Selector that, Path of)
    method
    Library <>< (Library that)
    exception MetaGuard.MemberUnavailable {
      return SafeOperators.hideMethod(that,path:this.of() src:this.that())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        error err)
      }
    }
    
  SumMethods:{
    (Selector that,Selector and, Path of, S over, Selector to)

    method
    Library <>< (Library that)
    exception
        MetaGuard.MemberUnavailable,
        MetaGuard.MethodClash,
        MetaGuard.ParameterMismatch{
      return SafeOperators.sumMethods(that,path:this.of() src1:this.that(),src2:this.and(), dest:this.to(),name:this.over())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        MetaGuard.MethodClash(lift:err)
        MetaGuard.ParameterMismatch(lift:err)
        error err)
      }
    }

  MakeMethod:{
    (Selector that, Path of, Introspection.Mdf.List mdfs, Size exceptionN)

   method
   Library <>< (Library that)
   exception
       MetaGuard.NestedClassUnavailable
       MetaGuard.MethodClash{
   return SafeOperators.makeMethod(that,
     path:this.of(),
     selector:this.that(),
     mdfs:S""[with m in this.mdfs().vals() ( use[m.name() sep: S" "]  ) ]"",
     exceptionN:this.exceptionN()
     )
   catch error Library err (
      MetaGuard.NestedClassUnavailable(lift:err)
      MetaGuard.MethodClash(lift:err)
      error err)
   }
 }

  Tools:...

//########### new interface with \  and better syntax:
Rename:{
  class method  RenamePath path(Path that, Path to) RenamePath(that, to:to)
 class method class Path #default#path(Void that) Path
 class method class Path #default#path(Void to) Path
 class method RenameSelector  selector(Selector that, Path of, Selector to) RenameSelector(that,of:of,to:to)
 class method RenameSelector  selector(Selector that, Selector to) RenameSelector(that,of:Path"This0",to:to)
 //still throw general exceptions
 class method class Selector #default#selector(Void that) Selector
 class method class Selector #default#selector(Void to) Selector
 class method class Path #default#selector(Void of) Path
  }
Hide:{
  class method MakePrivateSelector  selector(Selector that, Path of) MakePrivateSelector(that,of:of)
  class method MakePrivateSelector  selector(Selector that) MakePrivateSelector(that,of:Path"This0")
  class method class Selector #default#selector(Void that) Selector
  class method class Path #default#selector(Void of) Path
  }
}