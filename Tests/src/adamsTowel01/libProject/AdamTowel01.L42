{
PrW:{//private wrapper
  //@plugin is.L42.connected.withSafeOperators
  //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
  class method Library <><(Library that)use This
    check #main(_1_Library:that)
    error void
  }
Alu:{//@plugin
  //L42.is/connected/withAlu
  }
ExitCode:...
Bool:...
Size:...
S:...
UnsafeRefactor:PrW<><...
Range:...
Debug:...
Count:...
Concept:...
GetMyName:{
  class method S (class Any that) S"--NameStillToFix--"
  class method Any classCastError(read Concept.Classable that,class Concept.Classable classObj) S"--CastStillToFix"
  }
Message:...
Guard:UnsafeRefactor.This$er<><...
System:...
X:...
CollectionsMut:...
Collections:...
Strings:Collections.vector(of:S)
//TestC:{var Library field class method mut This (Library field)}
//TestCs:CollectionsMut.vector(of:TestC)
//CMTest:( TestCs ss=TestCs[] {}  ) //check lists are usable
//CTest:( Strings ss=Strings[S"foo"] {}  ) //check lists are usable
Path:...
Path2:PrW<><UnsafeRefactor.MiniData<><...
Selector:...
Selector2:PrW<><UnsafeRefactor.MiniData<><...
SafeOperators:...
//BinaryFlag32:...
Enum:...

Location:PrW<><UnsafeRefactor.RenameClass.renameClass(
  UnsafeRefactor.RenameClass.renameClass(
    UnsafeRefactor.This$er<><...,
    nameSrc:S"Type.$_RefTo",nameDest:S"Type.RefTo"),
  nameSrc:S"$_Doc",nameDest:S"Doc")


Refactor2:PrW<><...
K:...
Opt:...
Composers:...
Use:UnsafeRefactor.This$er<><...
Parsable:...
Url:Parsable<><...
DeployTowel:... //uses Url
StringSplit:...
}