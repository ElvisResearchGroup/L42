{
//--layer-- Bool Size S -     and first layer of unsafe operators
PrW:{//private wrapper
  //@plugin is.L42.connected.withSafeOperators
  //@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
  class method Library <><(Library that)use This
    check #main(_1_Library:that)
    error void
  }
Alu:{//@plugin
  //L42.is/connected/withAlu
  }
ExitCode:...
Bool:...
Size:...
S:...
UnsafeRefactor:PrW<><...
Range:...
Debug:...
Count:...
//SafeOperatorsAccess:  ...
Concept:...
GetMyName:{class method S (class Any that) S"--NameStillToFix--"}
//will be overridden and then become private later
//--layer-- Message backbone organization
Message:...
Guard:UnsafeRefactor.This$er<><...
System:...
X:...
//--layer-- linked list and its test
Collections:...
Strings:Collections.vector(of:S)
StringSplit:{
  class method //will be fixed in adam2
  Strings splitOn(S that,S chars)
    error S"StringSplit.UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"
}
CTest:( Strings ss=Strings[S"foo"] {}  ) //check lists are usable
//--layer-- introspection layer, and MetaGuard
Path:...
Selector:...
SafeOperators:...
//BinaryFlag32:...
Enum:...

Location:UnsafeRefactor.RenameClass.renameClass(
  PrW<><UnsafeRefactor.This$er<><...,
  nameSrc:S"Type.$_RefTo",nameDest:S"Type.RefTo")


//I may need to insert new refactor2 here and reconsider the rest?? need to be before collections but after selector/path?
//Introspection_Record:...
//MetaGuard:UnsafeRefactor.This$er<><...
//Introspection:...
//--layer-- Refactor, one fat feature
//Refactor:...

//TODO: refactor2 will eventually replace refactor
Refactor2:PrW<><...
// more composition
//Opt:...
//PreferentialComposition:...
//Extends:PreferentialComposition<><{ implements PreferentialComposition.$
//  method solveConflict(that,location){
//    return Refactor.MoveImplementationSelector(location.src() of:location.path() to:location.dest())<><that
//    error on MetaGuard X""
//    }
//  }
//Use:PreferentialComposition<><{ implements PreferentialComposition.$
//  method solveConflict(that,location){
//    return Refactor.RenameSelector(location.src() of:location.path() to:location.dest())<><that
//    error on MetaGuard X""
//    }
//  }
//Patch:...
//Default:...
//Url:Default.Parsable<><...
//DeployTowel:... //uses Url
//K:...
}