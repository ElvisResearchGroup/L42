{ 
//@plugin  toFix 
//@pluginPart ast.Ast$MethodSelector
implements Concept.Base
  class method
  Library #pluginUnresponsive(Library binaryRepr)
    binaryRepr
  
  class method
  This parse(S that)

  class method
  This from(Concept.ToS string) {
    return This.parse(string.toS())
    catch error Any error ParseFail"The provided string is not a valid selector: "[string]""
    }
  ParseFail:Message.$<><{ implements Guard.ParseFail}

  class method
  This #from(S.SBuilder builder)
    This.from(string:S.#from(binaryRepr: builder.#binaryRepr()))
  class method
  mut S.SBuilder #builder()
    S.SBuilder.empty()

  class method
  This from(S name,Strings names) {
    if names.isEmpty() (return This.from(string:name++S"()"))
    pars=S"("[with n in names.vals() (use[n++S","])]""
    return This.from(string:name[pars(end:\-1Size)]")")
    }
  method S nameAsField() {
    n=this.name()
    if n(0Size)==S"#" (return n(start:1Size))
    return n
    }
  method S prefixAsField() {
    if this.toS()(0Size)==S"#" (return S"#")
    return S""
    }

  method
  Bool isOperator(){
    if this.name().size()==0Size (return Bool.true() )
    return this.name()(0Size)==S"#"
    }
  method
  Bool isUnique(){
    if this.name().size()==0Size (return Bool.false() )
    return S"_$_"<this.name()
    }
  method
  S nameToS()
  method
  S name() this.nameToS()

  method
  Size nameSize()
  method
  S name(Size that)
  method
  Strings names()
    Strings[with i in 0Size.vals(upTo:this.nameSize()) (use[this.name(i)])]

  class method
  This fresh(This like)


    class method //will be private
    S leftAsASCIIUpperCase(S that){
      index=S.aSCIILowerCase().indexOfLeft(val:that.left())
      if index>=0Size  ( return that.withLeft(S.aSCIIUpperCase()(index) ))
      return that
      }

    method
    This with(S prefix) {
      S newName=prefix++This.leftAsASCIIUpperCase(this.name())
      return This.from(name:newName, names:this.names())
      }
  }