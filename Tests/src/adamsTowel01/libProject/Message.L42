{interface implements Concept.Base
class method S kind()
read method S text()
read method Opt responseOf()
refine read method class This class()
//change? remove opt, use fwd and method isResponse()?
//error fixed in adam 2 as usual?
Opt:{//will be Fixed in AdamTowel02
  class method This ()
  class method This (This1 that) This()
  method Bool isPresent() Bool.false()
  method This1 #get() error {/*toFix*/}
  }
EqualMessages:{
  class method Bool (read Message that,read Message other){
  //assuming they have the same class
  res=that.class().kind()==other.class().kind()
    & that.text()==other.text()
    & that.responseOf().isPresent()==other.responseOf().isPresent()
  if !res (return Bool.false())
  if !that.responseOf().isPresent() (return Bool.true())
  //i know both are present
  return that.responseOf().#get()==other.responseOf().#get() // this calls  equals in message,
  //that check for equal class and then call EqualMessages
  }}
$:{class method This()
  class method Library <><(Library right)
    UnsafeRefactor.MiniData<><UnsafeRefactor.Compose.compose(left:right, right:This.messageTrait())
  class method Library messageTrait() {implements Message
    S _text, Message.Opt cause
    class method This (S _text, Message.Opt cause)
    method kind() this.readableName()
    method text() this._text()
    method responseOf() this.cause()
    method
    This (Message that)
      This(text:this.text(),cause:that)

    method toS() {
      if !this.cause().isPresent() (
        return This.kind()++S.doubleQuote()++this.text()++S.doubleQuote()
        )
      var S res=This.kind()
      if this.text()!=S"" (
        res:=res++S"[text:"++S.doubleQuote()++this.text()++S.doubleQuote()
          ++S", cause:"
        )
      else (res:=res++S"[")
      return res[this.cause().#get()]"]"
      }

    read method Bool equals(read This that)
      Message.EqualMessages(this,other:that)
    class method
    This (S text)
      This(_text:text,cause:Message.Opt())
    class method
    This(S text, Message cause)
      This(_text:text,cause:Message.Opt(cause))
    //next part could become a trait on its own (but S must keep its version)

    class method mut S.SBuilder #builder()S.SBuilder.empty()
      class method This #from(S.SBuilder builder)
        This(text:S.#from(builder:builder))

    method
    Continue #from(S.SConcat seqBuilder)
      Continue(seqBuilder.old()++seqBuilder.accumulator())

    Continue:{S that
      class method This(S that)
      method mut S.SBuilder #builder() S.SBuilder.empty()
      method This1 #from(S.SBuilder builder)
        This1(text:this.that()++S.#from(builder:builder) )
      }

    method
    mut S.SConcat #seqBuilder()
      S.SConcat(old:this.text(),accumulator:S"")

    }
  }
}