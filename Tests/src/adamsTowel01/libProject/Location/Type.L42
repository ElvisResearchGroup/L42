{ interface
    This$:{interface implements This2.This$
      method RefTo refTo()
      method Size mdfS()//cmpImm for exception/implemented
      method Mdf mdf()    
      }
    RefTo:{interface}//to break a circle, we merge $_RefTo later
    $_RefTo:UnsafeRefactor.This$er<><{interface implements Concept.Base
      This$:{interface}
      //toS is the full path with Thisn.
      Lib:PUnresponsive<><UnsafeRefactor.MiniData<><{
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Lib
        implements This1.This$
        This$:UnsafeRefactor.MiniData.thisLib()
        method This3.Lib referredLib()
        }
      Unavailable:PUnresponsive<><UnsafeRefactor.MiniData<><{ 
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Unavailable
        implements This1.This$
        This$:UnsafeRefactor.MiniData.thisLib()
        //cases:
        //  (1)
        //  A: .. Refactor.introspect(lib:{ method B(B.C that)})..
        //  B:{..}//just not yet typed in the program flow
        //  (2)
        //  A: .. Refactor.introspect(lib:{ method B()})..
        //  B:Foo<><{..}//B is not there yet.
        //  (3)
        //  A: .. Refactor.introspect(lib:{ method B.C()})..
        //  B:Foo<><{..}//we do not know if B.C will ever exists
        //  (4)
        //  {//this all is seen as This1 by lib:{..}
        //  A: .. Refactor.introspect(lib:{ method This1()})..
        //  }//it can not be norm, not even in principle, since
        //   // A is under compilation right now.
        
        }
      Binded:PUnresponsive<><UnsafeRefactor.MiniData<><{
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Binded
        implements This1.This$ //includes primitives
        This$:UnsafeRefactor.MiniData.thisLib()
        method
        class Any referredClassObj()
        
        class method
        This (class Any classObj)

        class method
        Bool equalsClassObj(class Any that, class Any and)

        //This class will also offer some static 
        //functionalities to work with classObjs: 
        //Refactor.navigateClassObj(classObj,Path)->classObj??
        //Lib do not offer a way to get back a classObj
        }
      Missing:PUnresponsive<><UnsafeRefactor.MiniData<><{
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Missing
        implements This1.This$
        This$:UnsafeRefactor.MiniData.thisLib()
        //mostly useful for docs, where we can use lowercase annotation
        //or we may want to preserve @P where we removed the P
        //also, if an (nested) Unavailable is resolved not existing..        
        }
      } 
    DispatchRefTo:{
      class method RefTo(Library that){
        use $_RefTo.Lib check instanceof(_this:that)
          return $_RefTo.Lib.#from(binaryRepr:that)
        use $_RefTo.Unavailable check instanceof(_this:that)
          return $_RefTo.Unavailable.#from(binaryRepr:that)
        use $_RefTo.Binded check instanceof(_this:that)
          return $_RefTo.Binded.#from(binaryRepr:that)
        use $_RefTo.Missing check instanceof(_this:that)
          return $_RefTo.Missing.#from(binaryRepr:that)
        error that
        }
      }
    Return:PlgClass<><{
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.Type$Return
      implements This1.This$
      This$:UnsafeRefactor.MiniData.thisLib()
      refine method Method location()
      method refTo()DispatchRefTo(use This check #refTo(_this:this.#binaryRepr())
        error This.#pluginUnresponsive(binaryRepr:S"".#binaryRepr()))
      method mdf()Mdf(inner:this.mdfS())
      }
    Parameter:PlgClass<><{
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.Type$Parameter     
      implements This1.This$
      This$:UnsafeRefactor.MiniData.thisLib()
      List:Collections.vector(of:This$)

      refine method Method location()
      method refTo()DispatchRefTo(use This check #refTo(_this:this.#binaryRepr())
        error This.#pluginUnresponsive(binaryRepr:S"".#binaryRepr()))
      method mdf()Mdf(inner:this.mdfS())
      method Size pos()//0 for this
      }
    Exception:PlgClass<><{
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.Type$Exception
      implements This1.This$
      This$:UnsafeRefactor.MiniData.thisLib()
      List:Collections.vector(of:This$)

      refine method Method location()
      method refTo()DispatchRefTo(use This check #refTo(_this:this.#binaryRepr())
        error This.#pluginUnresponsive(binaryRepr:S"".#binaryRepr()))
      method mdf()Mdf(inner:this.mdfS())

      method Size pos()//should start from 1 or 0?
      }
    Implemented:PlgClass<><{
        //@plugin  toFix 
        //@pluginPart is.L42.connected.withSafeOperators.location.Type$Implemented
      implements This1.This$
      This$:UnsafeRefactor.MiniData.thisLib()
      List:Collections.vector(of:This$)

      refine method Lib location()
      method refTo()DispatchRefTo(use This check #refTo(_this:this.#binaryRepr())
        error This.#pluginUnresponsive(binaryRepr:S"".#binaryRepr()))
      method mdf()Mdf(inner:this.mdfS())

      method Size pos()//should start from 1 or 0?
      }    
    }