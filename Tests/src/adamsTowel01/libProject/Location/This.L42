{
interface implements Concept.Base //that is equals, toS and "know your class"
/*Idea: the introspection lets you talk about locations in the code, so 
if you have the class { class method Library foo()}
you can ask what is the return type of This.foo(), and you get
a Location.ReturnType knowing the Path (Library) the modifier (imm/immutable)
and the Location.Method that contains such type annotation.
###0 Location declaration and methods 
------------------------------------
Location:{
*/

NotAvailable:Message.$<><{implements Guard}

//note: "class" is not a good name for an enum elem.
Mdf:Enum<><{class method Strings names()Strings[
    S"cmpImm";
    S"cmpMut";
    S"cmpRead";
    S"cmpLent";
    S"cmpCapsule";
    S"cmpClass";
    S"fwdImm";
    S"fwdMut";
    ]
  class method This cmpImm() This(inner:0Size)
  method Bool isCmpImm() this.inner()==0Size
  class method This cmpMut() This(inner:1Size)
  method Bool isCmpMut() this.inner()==1Size
  class method This cmpRead() This(inner:2Size)
  method Bool isCmpRead() this.inner()==2Size
  class method This cmpLent() This(inner:3Size)
  method Bool isCmpLent() this.inner()==3Size
  class method This cmpCapsule() This(inner:4Size)
  method Bool isCmpCapsule() this.inner()==4Size
  class method This cmpClass() This(inner:5Size)
  method Bool isCmpClass() this.inner()==5Size
  class method This fwdImm() This(inner:6Size)
  method Bool isFwdImm() this.inner()==6Size
  class method This fwdMut() This(inner:7Size)
  method Bool isFwdMut() this.inner()==7Size 
  }

//###1 Origin
//------------------------------------  
Origin:UnsafeRefactor.MiniData<><...

//###1.5 Meta support
//------------------------------------  
This$:{interface implements Concept.Base
  method Size originSize()//many since metaprogramming
  method Origin origin(Size that)
  method This location()
  }

PUnresponsive:{
  class method
  Library<><(Library that)
    UnsafeRefactor.Compose.compose(left:This(), right:that)
  class method Library(){
    class method
    Library #pluginUnresponsive(Library binaryRepr)
      binaryRepr
  }
}

This$Impl:{
  class method
  Library<><(Library that)
    UnsafeRefactor.Compose.compose(left:This(), right:that)
 
  class method Library(){ implements This$
    refine read method class This class()//to work with simple minded sum
    method
    Origin.List origins()
      Origin.List[with i in 0Size.vals(upTo:this.originSize()) (use[this.origin(i)])]
    }
  }
PlgClass:{
  class method
  Library<><(Library that)
    PUnresponsive<><UnsafeRefactor.MiniData<><This$Impl<><that
  }
//###2 Doc 
//------------------------------------
Doc:PlgClass<><...
//###3 Lib 
//------------------------------------
//there is no Member since normalized classes have order: first nested, then methods
Lib:PlgClass<><...
  
//###4 Method 
//------------------------------------
Method:PlgClass<><...

//###5 Type and RefTo 
//------------------------------------
Type:UnsafeRefactor.This$er<><...
}

//###6 Discussions 
//------------------------------------
/*
By calling Refactor.introspect(lib:{...})or
By calling Refactor.introspect(class:A.B) you get a Lib

Java Lib need to store a optional classObj in case
the lib come from binded class.
When extracting a RefTo from a type with classObj, it will
never be Lib.
if the classObj is typed in p, it will be a RefTo a typed Binded
else will be any of Missing, Binded, Unreached 


L::={ interface? Doc implements Ts mwt1..mwtn nc1..nck Phase}  //library compiled
mwt::= abstract? refine? mh //we do not expose the implementation
nc::= C Doc:L
mdf::= imm|mut|lent|read|capsule|class | fwdImm | fwdMut 
ms::=m(xs) //method selector
mh::= mdf method Doc T m(T1 x1..Tn xn) exception Ts
P::= Thisn.Cs | Any | Library | Void  //is pronounced "Path"
T::= mdf P Doc
Doc::= //has a text, a set of annotations,
 //where every annotation can be either a string or
 //a Path, and a string content for each annotation 
C::= uppercase identifiers including $ as uppercase
x::= lowercase identifier including _ as lowercase
m::= x| #x

Notes:
//no more methodKind, just isAbstract+isRefine is all we need 

//from oldImpl: state/stateCandidate
//rootPath no. nestedFromRoot can be emulated by root().nested(path:))

//isPrivate should be a method for Selector/Path

impl Concept.ToS,Concept.Equals, Concept.Classable //that is Base
equals is complex: are two equal literal equal 
  if binded to different names? yes if they have the same origins?

    
All locations need to be sum with
{ implements Location
  method
  Origin.List origins()
    Origin.List[with i in 0Size.vals(upTo:this.originSize()) (use[this.origin(i)])]
  }
Refactor.baseDefaults()<>< to call MiniData?

Refactor2 design:

who come first?

java impl for AllErrors(Doneish),Location, Sum, Redirect,liftValue with new errors
1 java Location
2 java enrich some errors with Location, some will have lists-> blasSize() blas(Size that)
3 java Sum with new errors/testing
4 redirect, and james can import the tests? depends on how sum goes?
5 safeOperatorsAccess can be updated to use new Sum/Redirect
6 finally, we can start Refactor2 as below...

Refactor2
  Fail impl Base
  OpAccess:PrW<><{//we may need to continue using a variation of
    //safeOperatorsAccess instead...
    compose,//use Compose check
    redirect, liftValue  //no errors
    }
  Resource
  MiniData/baseDefaults()
  ErrorW using MiniData
  AllErrors, with LocationTmp location() 
    and LocationTmp:{..dull impl for #binaryRepr etc for nested Lib:{} Method:{} etc}
  compose
  Compose:{//plugAnn
    class method
    Library main(Library left,Library right)
    exception ..
    }
  redirect //may need to add support for class Any
  Redirect:{//plgAnn}
  etc?
  }
  Location:..
  Redirect3:{..stuff needing Locations..}
  
  in Fixing:
    Refactor=Refactor2+Refactor3,
    Resource=Refactor.Resource
    redirect Refactor.LocationTmp to Location?
    
*/