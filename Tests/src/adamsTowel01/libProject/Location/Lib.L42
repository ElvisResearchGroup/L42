{ //@plugin  toFix 
  //@pluginPart is.L42.connected.withSafeOperators.location.Lib
  implements This1.This$ 
  
  This$:UnsafeRefactor.MiniData.thisLib()

  List:Collections.vector(of:This$)

  method
  List nesteds()
    List[with i in 0Size.vals(upTo:this.nestedSize()) (use[this.nested(i)])]
  method
  List allNesteds()
    List[this]++
    List[with nc in this.nesteds().vals() (
      with nci in nc.allNesteds().vals() (use[nci])
    )]
  method class Path #default#nested(Void path) Path
  method This nested(Path path) exception NotAvailable {
    /*with ni in this.root().allNesteds().vals() (
      if ni.path()==this.path()++path (return ni)
      )
    exception NotAvailable"Path "[path]"not present"
    more performance using navigate*/
    return this.navigate(path)
    catch error Library x
      exception NotAvailable"Path "[path]"not present"
    }
  method class Path #default#has(Void path) Path
  method Bool has(Path path) (
    unused=this.nested(path:path)
    catch exception NotAvailable Bool.false()
    Bool.true()
    )
        
  method
  Method.List methods()
    Method.List[with i in 0Size.vals(upTo:this.methodSize()) (use[this.method(i)])]

  method class Selector #default#method(Void selector) Selector    
  method Method method(Selector selector) exception NotAvailable {
    with mi in this.methods().vals() (
      if mi.selector()==selector (return mi)
      )
    exception NotAvailable"Selector "[selector]"not present"
    }
  method class Selector #default#has(Void selector) Selector
  method Bool has(Selector selector) (
    unused=this.method(selector:selector)
    catch exception NotAvailable Bool.false()
    Bool.true()
    )      
  method
  Type.Implemented.List implements()
    Type.Implemented.List[with i in 0Size.vals(upTo:this.implementedSize()) (use[this.implemented(i)])]
    
  method Bool implements(class Any classAny){
    if Type.$_RefTo.Binded.equalsClassObj(Any, and:classAny) (
      return Bool.true()
      ) 
     with ti in this.implements().vals() (
       with ri=ti.refTo() (
         on Type.$_RefTo.Binded (
           ci=ri.referredClassObj()
           if Type.$_RefTo.Binded.equalsClassObj(ci, and:classAny) (
            //no need of supertypes since normalized classes has transitive implements already
            return Bool.true()
            )
           )
         )
       )
     return Bool.false()
     }
  
  method class Path #default#implements(Void path) Path   
  method Bool implements(Path path) {
     with ti in this.implements().vals() (
       with ri=ti.refTo() (
         on Type.$_RefTo.Lib (
           libi=ri.referredLib()
           if path==libi.path() (
             return Bool.true()
             )
           )
         )
       )
     return Bool.false()
     }   
  

  class method
  This (class Any classAny)
    This.newFromClass(classAny)
  class method 
  This (Library that)
    This.newFromLibrary(that)
    
  //methods imported from java
  method
  Lib navigate(Path that)
  class method
  This newFromClass(class Any that)
  class method 
  This newFromLibrary(Library that)
  method
  Doc doc()
  method 
  Type.Implemented implemented(Size that)
  method
  Size implementedSize()
  method
  Bool isBinded()
  method
  Bool isCloseState()
  method//as in EnsureCoherent<><
  Bool isEnsuredCoherent()
  method
  Bool isInterface()
  method
  Bool isPotentialInterface()
  method
  Bool isRedirectable()
  method
  Method method(Size that)
  method
  Size methodSize()
  method
  This nested(Size that)
  method //empty doc if it is root
  Doc nestedDoc()
  method 
  Size nestedSize()
  method//last is its name, empty path for root
  Path path()
  method
  This root()

  refine method   //implemented but refined
  This location()
  refine read method
  class This class()
  //and == location() origin(Size) originSize() toS()
  }