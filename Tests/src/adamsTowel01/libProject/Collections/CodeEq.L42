{ implements Concept.Equals
read method Size size()
read method  Elem val(Size that)

class method mut This #seqBuilder()
class method mut This #from(mut This seqBuilder)
mut method Void #add(Elem that)

Elem:{ implements Concept.Equals}

read method lent IteratorVal vals()
IteratorVal:{
  mut method Void #next() exception Void
  read method Void #checkEnd()
  read method Elem #inner()
  read method Void #close()
  }

//################# named
read method
Bool contains(Elem that){
  with e in this.vals() (
    if e==that (return Bool.true())
    )
  return Bool.false()
  }

//################# operators

method
This -(Elem right)
  this.withoutAll(val:right)


method
This --(This right)
  This[with e in this.vals() ( if !right.contains(e)  (use[e])  )]



method
This &(This right)
  This[with v in this.vals() (
    if (right>v) (use[v])
    )]


method
Bool >>(This right)
  this >>=right & !(right>>=this)

method
Bool >>=(This right) {
  with e in right.vals() (
    if ! (this > e) (return Bool.false())
    )
  return Bool.true()
  }

method
Bool >(Elem right)
  this.contains(right)



read method
Bool equals(read This that){
  with e1 in this.vals(), e2 in that.vals() (
    if e1!=e2 (return Bool.false())
    )
  catch error IterationFailure ( return Bool.false() )
  return Bool.true()
  }
method ==(right){
  with right (on read This return this.equals(right))
  return Bool.false()
  }


read method
Size indexOfLeft(Elem val){
  size=this.size()
  var Size pos=0Size
  loop (
    if this.val(pos)==val (return pos)
    if pos>=size (return Size"-1")
    pos+=1Size
    )
  }

read method
Size indexOfRight(Elem val){
  var Size pos=this.size()-1Size
  loop (
    if this.val(pos)==val (return pos)
    if pos<=0Size (return Size"-1")
    pos-=1Size
    )
  }

method //from VectorTrait
This without(Size index)

method
This withoutLeft(Elem val) {
  pos=this.indexOfLeft(val:val)
  if pos<0Size (return this)
  return this.without(index:pos)
  }

method
This withoutRight(Elem val){
  pos=this.indexOfRight(val:val)
  if pos<0Size (return this)
  return this.without(index:pos)
  }

method
This withoutAll(Elem val)
  This[with e in this.vals() (if e!=val (use[e]))]



mut method //from VectorTrait
Void remove(Size that)

mut method
Void removeAll(Elem val){
  var Size pos=0Size
  loop (
    if this.val(pos)==val (this.remove(pos))
    else (pos+=1Size)
    if pos==this.size() (return void)
    )
  }

mut method
Void removeLeft(Elem val){
  pos=this.indexOfLeft(val:val)
  if pos<0Size (return void)
  return this.remove(pos)
  }

mut method
Void removeRight(Elem val){
  pos=this.indexOfRight(val:val)
  if pos<0Size (return void)
  return this.remove(pos)
  }


}