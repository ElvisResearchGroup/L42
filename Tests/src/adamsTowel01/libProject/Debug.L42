{
  class method
  Void (read Concept.ToS that)
    use Alu
      check stringDebug(that.toS().#binaryRepr())
      void

  class method Void incrementCounter(read Concept.ToS that)
    use Alu check incrementCounter(that.toS().#binaryRepr())
    void

  class method Void printCounter(read Concept.ToS that)
    use Alu check printCounter(that.toS().#binaryRepr())
    void

  class method Void appendLog(S that, S msg)
    use Alu check appendLog(that.#binaryRepr(), msg:msg.#binaryRepr())
    void

  class method S #$readLog(S that)
    S.#from(binaryRepr:(use Alu check #$readLog(that.#binaryRepr())
    error void))

  class method Size #$rand(Size that)
    Size.#from(binaryRepr:(use Alu check #$randomInt32(that.#binaryRepr())
    error void))

  class method
  Void (Library lib) error S"to fix in AdamTowel2"

  class method
  Void #$(Concept.ToS fileName, Concept.ToS content)
    use FileSystem
      check fileDebug(
        fileName:fileName.toS().#binaryRepr(),
        content:content.toS().#binaryRepr()
        )
      void

  class method
  S #$readFile(Concept.ToS fileName)
    S.#from(binaryRepr:use FileSystem
      check fileReadDebug(   fileName:fileName.toS().#binaryRepr()  )
      error S"Alu.fileReadDebug reading file:"[fileName]""
      )

  class method
  S #$localToAbsolute(Concept.ToS fileName)
    S.#from(binaryRepr:use FileSystem
      check localToAbsolute(   fileName:fileName.toS().#binaryRepr()  )
      error S"Alu.fileReadDebug reading file:"[fileName]""
      )

  class method
  Void test(read Concept.ToS that, read Concept.ToS expected,S message)(
    sExpected=expected.toS()
    given=that.toS()
    if sExpected != given (
      Debug(S"[FAIL] "[message]": '"[given]"' != '"[expected]"'")
      )
    else (
      // message = given
      Debug(S"[PASS] "[message]": "[given]"")
      )
    )

  class method
  Void test(read Concept.ToS that, read Concept.ToS expected)
    Debug.test(that,expected:expected, message:S"")
  
  Test:{
    // Builder to look like a list and run a series of debug.test calls.
    // Does not actually make an instance or store the list of calls anywhere :-)

    class method class This #seqBuilder() This
    class method Void #from(class This seqBuilder) void
    
    class method Void #add(read Concept.ToS that, read Concept.ToS expected)
      Debug.test(that,expected:expected, message:S"")
    
    class method Void #add(read Concept.ToS that, read Concept.ToS expected,S message)
      Debug.test(that expected:expected message:message)
    }
  }