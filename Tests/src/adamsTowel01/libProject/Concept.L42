{
ToS:{interface
  read method S toS()
  }
Classable:{interface
  class method/*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This cast(read This that)
  class method/*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This #cast(mut This that)
  read method/*
  Extracts the class singleton from another instance of this class
  */class This class()
  class method/*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */S readableName()
  class method/*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */Bool is(class This subtype)
  }

Base:{interface
  implements ToS, Classable, Equals
  //class method This from(Base base)
  }
 //boxes: class capsule imm mut lent read & var novar
//but to avoid initialization/update cast: novar, capsule==lent
//class imm mut lent read
Wrapper:{interface read method Any inner() }
ClassWrapper:{interface read method class Any inner() }
//ReadWrapper:{interface read method read Any inner() }
MutWrapper:{interface
 read method read Any inner()
 mut method mut Any #inner()
 }
//LentWrapper:{interface  implements ReadWrapper mut method lent Any #inner()}

Equals:{interface
  read method Bool ==(read Any right)
  //read method Bool equals(read This that)
  }
//a<b == b>a
Comparable:{interface
  read method Bool greater(read Any that)
  //read method Bool >(read This that)
  }
Boollable:{interface
  read method Void #checkTrue() exception Void
  }
Decorator:{interface
  //method Library>>(Library that) exception MetaGuard(specific)
  //method Library decorate(Library that) exception MetaGuard I can link metaguard for circularity
  }
Contains:{interface
  //read method Bool >>(read Elem that)
  read method Bool contains(read Any that)
  }
Parsable:{interface
  //class method capsule This fromS(S that) exception Guard.Parameter(specific) invalid string
  //////class method capsule This #fromS(S that) exception Guard.Parameter
  }
/*Invariant:{interface
  read method // can throw error or return false, as more opportune
  Bool invariant()
  }*/
RandomAccess:{interface
  //read method read Elem (Size that)
  //mut method mut Elem #(Size that)
  read method read Any get(Size that)
  mut method mut Any #get(Size that)
  }
//RandomUpdate:{interface
  //mut method Void (Size that, mut Elem val)
//  mut method Void set(Size that, mut Any val) exception Guard.Parameter ???
//  }
Sizable:{interface
  read method Size size()
  read method Bool isEmpty()
  }
Iterator:{interface
  mut method Void #next() exception Void
  read method Void #checkEnd()
  read method Void #close()
  //will also implement one of the wrapper kind
  //read method read Elem #inner()
  //mut method mut Elem #inner()
  //mut method Void #inner(mut Elem that)
  //mut method Void #inner(Elem that) //is this the form?
  // no idea how to put the unsatisfactory version
  //iterator, iterexposer, variterator, variterexposer???
  }
}