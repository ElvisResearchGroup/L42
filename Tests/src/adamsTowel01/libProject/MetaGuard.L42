{ interface implements Guard
 This$:{interface}
 MemberUnavailable:{interface implements This$}
 
 RecordWrapper:// can not be private, I need to Patch it.
    {
    class method S libToS(Library that) S"TO FIX"

    class method Library recordWrapperToSTrait(){ implements This$
      method toS() This.readableName()++This1.libToS(this.lib())
      method Library lib()
      }
    class method Library recordWrapperTrait(){ implements This$
      method kind() This.readableName()
      method text() S""
      method responseOf() Message.Opt()
      method is(subtype) {  with subtype (on class This return Bool.true()) return Bool.false()}
      method readableName()GetMyName(This)
      method ==(right){
        with that (on read This return this.equals(right))
        return Bool.false()
        }
      refine read method class Message class() This
      class method This(Introspection_Record.Record record, Library lib)

      method Bool equals(This that)
        Message.EqualMessages(this,other:that)
      class method S libName()
      class method Void (Library lift) exception This (
        record=Introspection_Record.Record(lib:lift)
        x=record"Kind"
        if x==This.libName() (
          exception This(record:record,lib:lift)
          )
        )
      }

    class method Library <><(Library right) (
      //either that provides a toS, or I have a default impl, that requires lib()
      res=UnsafeRefactor.Compose.compose(left:right,right:This.recordWrapperTrait())
      Library open=  {
        return UnsafeRefactor.Compose.compose(left:res,right:This.recordWrapperToSTrait())
        catch error Library return res
        }
      {
        return UnsafeRefactor.Compose.compose(left:open,right:{
            class method mut This #mut(fwd Introspection_Record.Record record, fwd Library lib)
            class method This(Introspection_Record.Record record, Library lib) This.#mut(record:record,lib:lib)
            })
        catch error Library return open
        }


      )
    }
SourceUnfit:RecordWrapper<><{class method S libName()S"SourceUnfit"}
IncoherentRedirectMapping:RecordWrapper<><{class method S libName()S"IncoherentRedirectMapping"}
ClassClash:RecordWrapper<><{class method S libName()S"ClassClash"}
MethodClash:RecordWrapper<><{class method S libName()S"MethodClash"}
InvalidOnTopLevel:RecordWrapper<><{class method S libName()S"InvalidOnTopLevel"}
PrivacyCoupuled:RecordWrapper<><{class method S libName()S"PrivacyCoupuled"}
ParameterMismatch:RecordWrapper<><{class method S libName()S"ParameterMismatch"}

DispatchMemberUnavailable:{
  class method Void(Library that)
  exception MemberUnavailable(
    record=Introspection_Record.Record(lib:that)
    x=record"Kind"
    if x== S"MemberUnavailable" (
      if record"InvalidKind".contains(S"Method") (
        exception MethodUnavailable(record:record,lib:that) )
      exception NestedClassUnavailable(record:record,lib:that)
      )
    )
  }
NestedClassUnavailable:RecordWrapper<><{(Path path,Bool isPrivate) implements MemberUnavailable
  method toS() This.readableName()++S"[path:"[this.path()]",isPrivate:"[this.isPrivate()]"]"
  class method This (Introspection_Record.Record record, Library lib)
    This(path:Path.fromDocInternalizedS(record"Path"),isPrivate:Bool.fromS(record"IsPrivate"))
  class method S libName()S"MemberUnavailable"
  }
MethodUnavailable:RecordWrapper<><{(Path path,Selector selector,Bool isPrivate) implements MemberUnavailable
  method toS() This.readableName()++S"[path:"[this.path()]", selector:"[this.selector()]",isPrivate:"[this.isPrivate()]"]"
  class method This (Introspection_Record.Record record, Library lib)
    This(path:Path.fromDocInternalizedS(record"Path"),selector:Selector.from(string:record"Selector"),isPrivate:Bool.fromS(record"IsPrivate"))
  class method S libName()S"MemberUnavailable"
  }
}