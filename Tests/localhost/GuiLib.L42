 {
Abstract: {
Alu: {/*@plugin
L42.is/connected/withAlu
*/}
ExitCode: {
class method 
Library normal() 
class method 
Library failure() }
Bool: {implements This1.Concept.Equals, This1.Concept.ToS, This1.Concept.Classable
class method 
mut This0 #mutK(Library binaryRepr) 
class method 
This0 #apply(Library binaryRepr) 
mut method 
Library #binaryRepr() 
read method 
Library binaryRepr() 
refine class method 
This0 is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This1.S readableName() 
refine read method 
This1.S toS() 
refine read method 
This0 equals(read Any that) 
method 
Void #checkTrue() exception Void 
class method 
This0 true() 
class method 
This0 false() 
method 
This0 #and(This0 that) 
method 
This0 #or(This0 that) 
method 
This0 #bang() 
method 
This0 #equalequal(This0 that) 
class method 
This0 fromS(read This1.Concept.ToS that) 
class method 
Any parseError(This1.S that) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
refine class method 
This1 is(class Any subtype) 
refine class method 
This2.S readableName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
This1 equals(read Any that) 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
method 
This1 #equalequal(This0 that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Size: {implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
refine class method 
This1.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This1.S readableName() 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
mut This0 #from(Library binaryRepr) 
method 
Library binaryRepr() 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
Any parseError(This1.S that) 
refine read method 
This1.S toS() 
method 
This0 #plus(This0 that) 
method 
This0 #less(This0 that) 
method 
This0 #times(This0 that) 
method 
This0 #divide(This0 that) 
method 
This1.Bool #equalequal(This0 that) 
refine read method 
This1.Bool equals(read Any that) 
method 
This1.Bool #right(This0 that) 
method 
This1.Bool #rightequal(This0 that) 
method 
mut This0.Iterator vals() 
method 
mut This0.Iterator vals(This0 upTo) 
class method 
This0 #0() 
class method 
This0 #1() 
class method 
This0 #2() 
class method 
This0 #3() 
class method 
This0 #4() 
class method 
This0 #5() 
class method 
This0 #6() 
class method 
This0 #7() 
class method 
This0 #8() 
class method 
This0 #9() 
class method 
This0 #10() 
class method 
This0 #11() 
class method 
This0 #12() 
class method 
This0 #13() 
class method 
This0 #14() 
class method 
This0 #15() 
class method 
This0 #16() 
class method 
This0 #17() 
class method 
This0 #18() 
class method 
This0 #19() 
class method 
This0 #20() 
class method 
This0 #21() 
class method 
This0 #22() 
class method 
This0 #23() 
class method 
This0 #24() 
class method 
This0 #25() 
class method 
This0 #26() 
class method 
This0 #27() 
class method 
This0 #28() 
class method 
This0 #29() 
class method 
This0 #30() 
class method 
This0 #31() 
class method 
This0 #32() 
class method 
This0 #33() 
class method 
This0 #34() 
class method 
This0 #35() 
class method 
This0 #36() 
class method 
This0 #37() 
class method 
This0 #38() 
class method 
This0 #39() 
class method 
This0 #40() 
class method 
This0 #41() 
class method 
This0 #42() 
class method 
This0 #43() 
class method 
This0 #44() 
class method 
This0 #45() 
class method 
This0 #46() 
class method 
This0 #47() 
class method 
This0 #48() 
class method 
This0 #49() 
class method 
This0 #50() 
class method 
This0 #51() 
class method 
This0 #52() 
class method 
This0 #53() 
class method 
This0 #54() 
class method 
This0 #55() 
class method 
This0 #56() 
class method 
This0 #57() 
class method 
This0 #58() 
class method 
This0 #59() 
class method 
This0 #60() 
class method 
This0 #61() 
class method 
This0 #62() 
class method 
This0 #63() 
Iterator: {
class method 
mut This0 #mutK(This1 start, This1 end) 
class method 
mut This0 #apply(This1 start, This1 end) 
mut method 
Void start(This1 that) 
mut method 
This1 #start() 
read method 
This1 start() 
mut method 
This1 #end() 
read method 
This1 end() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This1 #inner() 
read method 
Void #close() }
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
This2.Bool equals(read Any that) 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
method 
This2.Bool #equalequal(This0 that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
S: {implements This1.Concept.Base, This1.Concept.Classable, This1.Concept.Equals, This1.Concept.ToS
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
refine class method 
This1.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This0 readableName() 
class method 
mut This0 #from(Library binaryRepr) 
method 
Library binaryRepr() 
refine read method 
This0 toS() 
refine read method 
This1.Bool equals(read Any that) 
method 
This0 #plusplus(This0 that) 
method 
This1.Bool #equalequal(This0 that) 
method 
This0 #less(This0 that) 
method 
This1.Bool #rightright(This0 that) 
method 
This1.Bool #rightrightequal(This0 that) 
method 
This1.Bool #right(This0 that) 
method 
This1.Size indexOfLeft(This0 val) 
method 
This1.Size indexOfLeft(This0 val, This1.Size start) 
method 
This1.Size indexOfRight(This0 val) 
method 
This0 withoutLeft(This0 val) 
method 
This0 withoutRight(This0 val) 
method 
This0 withoutAll(This0 val) 
method 
This1.Bool isEmpty() 
method 
This0 val(This1.Size that) 
method 
This0 left() 
method 
This0 right() 
method 
This0 with(This1.Size that, This0 val) 
method 
This0 withLeft(This0 that) 
method 
This0 withRight(This0 that) 
method 
This0 withAlso(This1.Size that, This0 val) 
method 
This0 withAlsoLeft(This0 that) 
method 
This0 withAlsoRight(This0 that) 
method 
This0 without(This1.Size index) 
method 
This0 without(This1.Size index, This1.Size skipNum) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
method 
This1.Bool contains(This0 that) 
method 
This0 #apply(This1.Size start, This1.Size end) 
method 
This0 #apply(This1.Size that) 
method 
This0 #apply(This1.Size start) 
method 
This0 #apply(This1.Size end) 
method 
This1.Size size() 
method 
This1.Bool subStrEq(This0 that, This1.Size start) 
method 
This1.Bool beginsWith(This0 that) 
class method 
This0 aSCIILowerCase() 
class method 
This0 aSCIIUpperCase() 
method 
This1.Bool isASCIILowerCase(This1.Size that) 
method 
This1.Bool isASCIIUpperCase(This1.Size that) 
class method 
This0 doubleQuote() 
class method 
This0 nl() 
method 
This0 replace(This0 that, This0 into) 
method 
This0.Continue #from(This0.SConcat seqBuilder) 
method 
mut This0.SConcat #seqBuilder() 
class method 
This0 #from(This0.SBuilder builder) 
class method 
mut This0.SBuilder #builder() 
method 
This1.Strings split(capsule This0.Skip skipper) 
method 
This1.Strings splitOn(This0 chars) 
Continue: {
class method 
mut This0 #mutK(This1 that) 
class method 
This0 #apply(This1 that) 
mut method 
This1 #that() 
read method 
This1 that() 
method 
mut This1.SBuilder #builder() 
method 
This1 #from(This1.SBuilder builder) }
SConcat: {
class method 
mut This0 #mutK(This1 old, This1 accumulator) 
class method 
mut This0 #apply(This1 old, This1 accumulator) 
mut method 
This1 #old() 
read method 
This1 old() 
mut method 
Void accumulator(This1 that) 
mut method 
This1 #accumulator() 
read method 
This1 accumulator() 
mut method 
Void #add(read This2.Concept.ToS that) 
mut method 
Void #add(read This2.Concept.ToS that, This2.Concept.ToS sep) }
SBuilder: {
class method 
mut This0 #mutK(Library _binaryRepr) 
class method 
mut This0 _private(Library _binaryRepr) 
mut method 
Void _binaryRepr(Library that) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
read method 
Library binaryRepr() 
mut method 
Void acc(Library that) 
class method 
mut This0 empty() 
mut method 
Void #0() 
mut method 
Void #1() 
mut method 
Void #2() 
mut method 
Void #3() 
mut method 
Void #4() 
mut method 
Void #5() 
mut method 
Void #6() 
mut method 
Void #7() 
mut method 
Void #8() 
mut method 
Void #9() 
mut method 
Void #q() 
mut method 
Void #w() 
mut method 
Void #e() 
mut method 
Void #r() 
mut method 
Void #t() 
mut method 
Void #y() 
mut method 
Void #u() 
mut method 
Void #i() 
mut method 
Void #o() 
mut method 
Void #p() 
mut method 
Void #a() 
mut method 
Void #s() 
mut method 
Void #d() 
mut method 
Void #f() 
mut method 
Void #g() 
mut method 
Void #h() 
mut method 
Void #j() 
mut method 
Void #k() 
mut method 
Void #l() 
mut method 
Void #z() 
mut method 
Void #x() 
mut method 
Void #c() 
mut method 
Void #v() 
mut method 
Void #b() 
mut method 
Void #n() 
mut method 
Void #m() 
mut method 
Void #Q() 
mut method 
Void #W() 
mut method 
Void #E() 
mut method 
Void #R() 
mut method 
Void #T() 
mut method 
Void #Y() 
mut method 
Void #U() 
mut method 
Void #I() 
mut method 
Void #O() 
mut method 
Void #P() 
mut method 
Void #A() 
mut method 
Void #S() 
mut method 
Void #D() 
mut method 
Void #F() 
mut method 
Void #G() 
mut method 
Void #H() 
mut method 
Void #J() 
mut method 
Void #K() 
mut method 
Void #L() 
mut method 
Void #Z() 
mut method 
Void #X() 
mut method 
Void #C() 
mut method 
Void #V() 
mut method 
Void #B() 
mut method 
Void #N() 
mut method 
Void #M() 
mut method 
Void #%() 
mut method 
Void #$() 
mut method 
Void #left() 
mut method 
Void #right() 
mut method 
Void #bang() 
mut method 
Void #tilde() 
mut method 
Void #plus() 
mut method 
Void #times() 
mut method 
Void #divide() 
mut method 
Void #less() 
mut method 
Void #and() 
mut method 
Void #or() 
mut method 
Void #oRound() 
mut method 
Void #cRound() 
mut method 
Void #oSquare() 
mut method 
Void #cSquare() 
mut method 
Void #oCurly() 
mut method 
Void #cCurly() 
mut method 
Void #dQuote() 
mut method 
Void #sQuote() 
mut method 
Void #hQuote() 
mut method 
Void #equal() 
mut method 
Void #qMark() 
mut method 
Void #hat() 
mut method 
Void #comma() 
mut method 
Void #semicolon() 
mut method 
Void #colon() 
mut method 
Void #dot() 
mut method 
Void #underscore() 
mut method 
Void #hash() 
mut method 
Void #at() 
mut method 
Void #backslash() 
mut method 
Void #space() 
mut method 
Void #newline() }
Skip: {interface 
mut method 
This2.Size #apply(This1 that, This2.Size index) }
SkipChars: {implements This1.Skip
read method 
This1 chars() 
refine mut method 
This2.Size #apply(This1 that, This2.Size index) 
class method 
mut This0 #apply(This1 chars) 
class method 
lent This0 lentK(This1 chars) 
class method 
read This0 readK(This1 chars) 
class method 
This0 immK(This1 chars) }}
Concept: {
ToS: {interface 
read method 
This2.S toS() }
Classable: {interface 
read method 
class This0 class() 
class method 
This2.S readableName() 
class method 
This2.Bool is(class Any subtype) }
Base: {interface implements This1.ToS, This1.Classable, This1.Equals
refine read method 
This2.S toS() 
refine read method 
class This1.Classable class() 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
This2.Bool equals(read Any that) }
Wrapper: {interface 
read method 
Any inner() }
ClassWrapper: {interface 
read method 
class Any inner() }
MutWrapper: {interface 
read method 
read Any inner() 
mut method 
mut Any #inner() }
Equals: {interface 
read method 
This2.Bool equals(read Any that) }
Comparable: {interface 
read method 
This2.Bool greater(read Any that) }
Boollable: {interface 
read method 
Void #checkTrue() exception Void }
Decorator: {interface }
Contains: {interface 
read method 
This2.Bool contains(read Any that) }
Parsable: {interface }
Invariant: {interface 
read method /* can throw error or return false, as more opportune
*/This2.Bool invariant() }
RandomAccess: {interface 
read method 
read Any get(This2.Size that) 
mut method 
mut Any #get(This2.Size that) }
Sizable: {interface 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() }
Iterator: {interface 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Void #close() }}
Message: {interface implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable
class method 
This1.S kind() 
method 
This1.S text() 
method 
This0.Opt responseOf() 
refine read method 
class This0 class() 
refine read method 
This1.S toS() 
refine read method 
This1.Bool equals(read Any that) 
refine class method 
This1.S readableName() 
refine class method 
This1.Bool is(class Any subtype) 
Opt: {
class method 
mut This0 #mutK(This0.TOpt that) 
class method 
This0 #new(This0.TOpt that) 
mut method 
This0.TOpt #that() 
read method 
This0.TOpt that() 
method 
This1 #get() 
method 
This2.Bool isPresent() 
class method 
This0 #apply() 
class method 
This0 #apply(This1 that) 
method 
This1 get() exception This2.Guard.Operation 
TOpt: {interface 
method 
This2 get() }
TEmpty: {implements This1.TOpt
class method 
mut This0 #mutK() 
class method 
This0 #apply() 
refine method 
This2 get() }
TOf: {implements This1.TOpt
class method 
mut This0 #mutK(This2 that) 
class method 
This0 #apply(This2 that) 
mut method 
This2 #that() 
read method 
This2 that() 
refine method 
This2 get() }}
EqualMessages: {
class method 
This2.Bool #apply(This1 that, This1 other) }
$: {
class method 
mut This0 #mutK() 
class method 
This0 #apply() 
class method 
Library #leftrightleft(Library that) 
class method 
Library messageTrait() }}
Guard: {/* exception as Guard bureocracy, error as Guard detection
-is a check guarenteed to be performed, program logic can rely on this being enforced.
  as exceptions, Guards objects are a way to report/guard complex operations,
 where checking the shape of the input can be unconvenient.
as errors, they represent precondition violations.
Turning an exception Guard into an error Guard
 is equivalent of declaring that such misuse should not happen (blame on the caller),
 still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed
*/interface implements This1.Message, This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable
refine class method 
This1.S kind() 
refine method 
This1.S text() 
refine method 
This1.Message.Opt responseOf() 
refine read method 
class This1.Message class() 
refine read method 
This1.S toS() 
refine read method 
This1.Bool equals(read Any that) 
refine class method 
This1.S readableName() 
refine class method 
This1.Bool is(class Any subtype) 
Operation: {implements This1, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Parameter: {implements This1, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Precondition: {implements This1, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
ParseFail: {interface implements This1, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) }}
System: {
Guard: {/* implements Outer.Guard soon (remove "interface" for a bad translation bug: This1_System_Guard is not abstract and does not override abstract method MtoS()
*/interface implements This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
PluginFailure: {implements This1, This3.Guard, This3.Message, This3.Concept.ToS, This3.Concept.Equals, This3.Concept.Classable
refine class method 
This3.S kind() 
refine method 
This3.S text() 
refine method 
This3.Message.Opt responseOf() 
refine read method 
class This3.Message class() 
refine read method 
This3.S toS() 
refine read method 
This3.Bool equals(read Any that) 
refine class method 
This3.S readableName() 
refine class method 
This3.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}}}
X: {
class method 
This0.AssertionFail #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
mut This0.Tests #seqBuilder() 
class method 
Void #from(This0.Tests seqBuilder) 
NotImplementedYet: {implements This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
This2.Bool equals(read Any that) 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
method 
This2.Bool #equalequal(This0 that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
AssertionFail: {implements This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
This2.Bool equals(read Any that) 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
method 
This2.Bool #equalequal(This0 that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Pre: {
class method 
mut This1.Tests #seqBuilder() 
class method 
Void #from(This1.Tests seqBuilder) }
Test: {
class method 
mut This0 #mutK(This2.Bool that, This2.S msg) 
class method 
This0 #apply(This2.Bool that, This2.S msg) 
mut method 
This2.Bool #that() 
read method 
This2.Bool that() 
mut method 
This2.S #msg() 
read method 
This2.S msg() }
Tests: {implements This2.Concept.ToS, This2.Concept.Classable
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
class method 
This1.Test cast(Any that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.Test val(This2.Size that) 
read method 
This1.Test left() 
read method 
This1.Test right() 
mut method 
Void #apply(This2.Size that, This1.Test val) 
mut method 
Void left(This1.Test that) 
mut method 
Void right(This1.Test that) 
mut method 
Void add(This2.Size that, This1.Test val) 
mut method 
Void add(This1.Test right) 
mut method 
Void add(This1.Test left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.Test that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This2.Size that, This1.Test val) 
method 
This0 withLeft(This1.Test that) 
method 
This0 withRight(This1.Test that) 
method 
This0 withAlso(This2.Size that, This1.Test val) 
method 
This0 withAlsoLeft(This1.Test that) 
method 
This0 withAlsoRight(This1.Test that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This1.Test filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
mut method 
Void #add(This2.Bool that, This2.Concept.ToS msg) 
mut method 
Void #add(This2.Bool that) 
read method 
This2.S collapse() 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Test filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() }
IteratorValFill: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Test filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Test filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Test filled) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
This2.Test #filled() }
IteratorVar: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Test filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Void inner(This2.Test that) }}}
Strings: {implements This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
class method 
mut This0 #mutK(mut This1.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This1.Collections.MutListAny inner) 
mut method 
mut This1.Collections.MutListAny #inner() 
read method 
read This1.Collections.MutListAny inner() 
class method 
This0 #immK(This1.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.S that) 
class method 
This1.S cast(Any that) 
read method 
mut This0 reverse() 
read method 
This1.Size size() 
read method 
This1.Bool isEmpty() 
read method 
This1.S val(This1.Size that) 
read method 
This1.S left() 
read method 
This1.S right() 
mut method 
Void #apply(This1.Size that, This1.S val) 
mut method 
Void left(This1.S that) 
mut method 
Void right(This1.S that) 
mut method 
Void add(This1.Size that, This1.S val) 
mut method 
Void add(This1.S right) 
mut method 
Void add(This1.S left) 
mut method /*from VectorTrait
*/Void remove(This1.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.S that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This1.Size that, This1.S val) 
method 
This0 withLeft(This1.S that) 
method 
This0 withRight(This1.S that) 
method 
This0 withAlso(This1.Size that, This1.S val) 
method 
This0 withAlsoLeft(This1.S that) 
method 
This0 withAlsoRight(This1.S that) 
method /*from VectorTrait
*/This0 without(This1.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This1.Size from, This1.Size maxTo, This1.Size minTo) 
read method 
lent This0.IteratorVal vals(This1.Size minTo) 
read method 
lent This0.IteratorVal vals(This1.Size from, This1.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This1.Size from, This1.Size maxTo, This1.Size minTo, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.Size minTo, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.Size from, This1.Size to, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.S filled) 
mut method 
lent This0.IteratorVar #vals(This1.Size from, This1.Size maxTo, This1.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This1.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This1.Size from, This1.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This1.S toS() 
refine class method 
This1.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This1.S readableName() 
read method 
This1.Bool contains(This1.S that) 
method 
This0 #less(This1.S that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This1.Bool #rightright(This0 that) 
method 
This1.Bool #rightrightequal(This0 that) 
method 
This1.Bool #right(This1.S that) 
read method 
This1.Bool #equalequal(read This0 that) 
refine read method 
This1.Bool equals(read Any that) 
read method 
This1.Size indexOfLeft(This1.S val) 
read method 
This1.Size indexOfRight(This1.S val) 
method 
This0 withoutLeft(This1.S val) 
method 
This0 withoutRight(This1.S val) 
method 
This0 withoutAll(This1.S val) 
mut method 
Void removeAll(This1.S val) 
mut method 
Void removeLeft(This1.S val) 
mut method 
Void removeRight(This1.S val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This2.Collections.MutListAny that() 
read method 
This2.Size from() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
read method 
This2.Bool isFill() 
read method 
This2.S filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
class method 
lent This0 #apply(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
read This2.Collections.MutListAny #that() 
mut method 
This2.Size #from() 
mut method 
This2.Size #maxTo() 
mut method 
This2.Size #minTo() }
IteratorValFill: {
read method 
read This2.Collections.MutListAny that() 
read method 
This2.Size from() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
read method 
This2.Bool isFill() 
read method 
This2.S filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo, This2.S filled) 
class method 
lent This0 #apply(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo, This2.S filled) 
mut method 
read This2.Collections.MutListAny #that() 
mut method 
This2.Size #from() 
mut method 
This2.Size #maxTo() 
mut method 
This2.Size #minTo() 
mut method 
This2.S #filled() }
IteratorVar: {
read method 
read This2.Collections.MutListAny that() 
read method 
This2.Size from() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
read method 
This2.Bool isFill() 
read method 
This2.S filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
mut This2.Collections.MutListAny #that() 
mut method 
This2.Size #from() 
mut method 
This2.Size #maxTo() 
mut method 
This2.Size #minTo() 
mut method 
Void inner(This2.S that) }}
Debug: {
class method 
Void #apply(read This1.Concept.ToS that) 
class method 
Void #apply(Library lib) 
class method 
Void #apply(This1.Concept.ToS fileName, This1.Concept.ToS content) 
class method 
This1.S readFile(This1.Concept.ToS fileName) 
class method 
This1.S localToAbsolute(This1.Concept.ToS fileName) 
class method 
Void test(read This1.Concept.ToS that, read This1.Concept.ToS expected, This1.S message) 
class method 
Void test(read This1.Concept.ToS that, read This1.Concept.ToS expected) 
Test: {/* Builder to look like a list and run a series of debug.test calls.
 Does not actually make an instance or store the list of calls anywhere :-)
*/
class method 
class This0 #seqBuilder() 
class method 
Void #from(class This0 seqBuilder) 
class method 
Void #add(read This2.Concept.ToS that, read This2.Concept.ToS expected) 
class method 
Void #add(read This2.Concept.ToS that, read This2.Concept.ToS expected, This2.S message) }}
ConceptMap: {interface 
method 
This1.Alu _Alu() 
method 
This1.ExitCode _ExitCode() 
method 
This1.Bool _Bool() 
method 
This1.Size _N() 
method 
This1.S _S() 
method 
This1.Concept _Concept() 
method 
This1.Message _Message() 
method 
This1.Guard _Guard() 
method 
This1.System _System() 
method 
This1.X _X() 
method 
This1.Strings _Strings() 
method 
This1.Debug _Debug() 
method 
This0 _ConceptMap() 
method 
This1.Url _Url() 
method 
This1.Path _Path() 
method 
This1.Selector _Selector() 
method 
This1.MetaGuard _MetaGuard() 
method 
This1.Introspection _Introspection() 
method 
This1.Refactor _Refactor() 
method 
This1.Optimize _Optimize() 
method 
This1.Opt _Opt() 
method 
This1.Extends _Extends() 
method 
This1.Use _Use() 
method 
This1.Default _Default() 
method 
This1.Collections _Collections() 
method 
This1.K _K() 
method 
This1.Alphanumeric _Alphanumeric() 
method 
This1.DeployTowel _DeployTowel() 
method 
This1.PreferentialComposition _PreferentialComposition() 
method 
This1.Load _Load() }
Url: {/*ParseFailure:Message:S[]<><{ implements Guard} no need, related to invariant?
*/implements This1.Concept.ToS
class method /* if you do not implement it, it is a constructor?
*/This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
mut This0 #mutK(This1.S inner) 
class method 
This0 #apply(This1.S inner) 
mut method 
This1.S #inner() 
read method 
This1.S inner() 
refine read method 
This1.S toS() 
method 
Library binaryRepr() }
Path: {implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
refine class method 
This1.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This1.S readableName() 
class method 
This0 fromDocInternalizedS(This1.S that) 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
mut This0 #from(Library binaryRepr) 
class method 
Any parseError(This1.S that) 
class method 
Any parseError(This1.S that, This1.Message cause) 
method 
Library binaryRepr() 
refine read method 
This1.S toS() 
method 
This1.Bool #equalequal(This0 that) 
refine read method 
This1.Bool equals(read Any that) 
method 
This0 #plusplus(This0 that) 
method 
mut This1.Strings names() 
class method 
This0 from(read This1.Strings names) 
class method 
This0 fresh(This1.S name) 
class method 
This0 fresh() 
class method 
This0 fresh(This0 path) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
This2.Bool equals(read Any that) 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
method 
This2.Bool #equalequal(This0 that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Selector: {implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
refine class method 
This1.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This1.S readableName() 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
mut This0 #from(Library binaryRepr) 
class method 
Any parseError(This1.S that) 
class method 
This0 from(This1.S name, This1.Strings names) 
method 
This1.S nameAsField() 
method 
This1.S prefixAsField() 
method 
Library binaryRepr() 
refine read method 
This1.S toS() 
method 
This1.Bool #equalequal(This0 that) 
refine read method 
This1.Bool equals(read Any that) 
method 
This1.Bool isOperator() 
method 
This1.S name() 
method 
This1.Strings names() 
class method 
This0 fresh(This0 that) 
class method /*will be private
*/This1.S leftAsASCIIUpperCase(This1.S that) 
method 
This0 with(This1.S prefix) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
This2.Bool equals(read Any that) 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
method 
This2.Bool #equalequal(This0 that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
MetaGuard: {interface implements This1.Guard, This1.Message, This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable
refine class method 
This1.S kind() 
refine method 
This1.S text() 
refine method 
This1.Message.Opt responseOf() 
refine read method 
class This1.Message class() 
refine read method 
This1.S toS() 
refine read method 
This1.Bool equals(read Any that) 
refine class method 
This1.S readableName() 
refine class method 
This1.Bool is(class Any subtype) 
RecordWrapper:/* can not be private, I need to Patch it.
*/ {
class method 
This2.S libToS(Library that) 
class method 
Library recordWrapperToSTrait() 
class method 
Library recordWrapperTrait() 
class method 
Library #leftrightleft(Library that) }
SourceUnfit: {implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
refine read method 
This2.S toS() 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
IncoherentRedirectMapping: {implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
refine read method 
This2.S toS() 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
ClassClash: {implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
refine read method 
This2.S toS() 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
MethodClash: {implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
refine read method 
This2.S toS() 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
InvalidOnTopLevel: {implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
refine read method 
This2.S toS() 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
PrivacyCoupuled: {implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
refine read method 
This2.S toS() 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
ParameterMismatch: {implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine class method 
This2.Bool is(class Any subtype) 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
refine read method 
class This2.Message class() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
refine read method 
This2.S toS() 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
MemberUnavailable: {interface implements This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) }
DispatchMemberUnavailable: {
class method 
Void #apply(Library that) exception This1.MemberUnavailable }
NestedClassUnavailable: {implements This1.MemberUnavailable, This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.Path path, This2.Bool isPrivate) 
class method 
This0 #apply(This2.Path path, This2.Bool isPrivate) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Bool #isPrivate() 
read method 
This2.Bool isPrivate() 
refine read method 
This2.S toS() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 }
MethodUnavailable: {implements This1.MemberUnavailable, This1, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(This2.Path path, This2.Selector selector, This2.Bool isPrivate) 
class method 
This0 #apply(This2.Path path, This2.Selector selector, This2.Bool isPrivate) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Selector #selector() 
read method 
This2.Selector selector() 
mut method 
This2.Bool #isPrivate() 
read method 
This2.Bool isPrivate() 
refine read method 
This2.S toS() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
class method 
This2.S libName() 
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 }}
Introspection: {/*findMeIntrospection
*/
class method 
This0.NestedClass #apply(Library lib) 
class method 
This0.NestedClass #apply(Library lib, This1.Path path) exception This1.MetaGuard.NestedClassUnavailable 
class method 
This0.NestedClass #apply(class Any clazz) 
class method 
This0.NestedClass #apply(class Any clazz, This1.Path path) 
MirrorPr: {interface implements This2.Concept.ToS
method 
This1.NestedClass introspectReport(fwd This1.NestedClass root, This2.Path path) exception This2.MetaGuard.NestedClassUnavailable 
method 
This1.Member introspectReportMember(fwd This1.NestedClass root, This2.Path path, This2.Size memberN) exception This2.MetaGuard.MemberUnavailable, Void 
method 
This1.Type introspectReportType(fwd This1.NestedClass root, This2.Path path, This2.Size memberN, This2.Size typeN) exception This2.MetaGuard.MemberUnavailable, Void 
method 
This2.S introspectDocAsString(This2.Path path) exception This2.MetaGuard.NestedClassUnavailable 
method 
This2.S introspectDocAsString(This2.Path path, This2.Size annotationN) exception This2.MetaGuard.NestedClassUnavailable, Void 
method 
class Any introspectDocPath(This2.Path path, This2.Size annotationN) exception This2.MetaGuard.NestedClassUnavailable, Void 
refine read method 
This2.S toS() 
Lib: {implements This1, This3.Concept.ToS
class method 
mut This0 #mutK(Library lib) 
class method 
This0 #apply(Library lib) 
mut method 
Library #lib() 
read method 
Library lib() 
refine read method 
This3.S toS() 
refine method 
This2.NestedClass introspectReport(fwd This2.NestedClass root, This3.Path path) exception This3.MetaGuard.NestedClassUnavailable 
refine method 
This2.Member introspectReportMember(fwd This2.NestedClass root, This3.Path path, This3.Size memberN) exception This3.MetaGuard.MemberUnavailable, Void 
refine method 
This2.Type introspectReportType(fwd This2.NestedClass root, This3.Path path, This3.Size memberN, This3.Size typeN) exception This3.MetaGuard.MemberUnavailable, Void 
refine method 
This3.S introspectDocAsString(This3.Path path, This3.Size annotationN) exception This3.MetaGuard.NestedClassUnavailable, Void 
refine method 
This3.S introspectDocAsString(This3.Path path) exception This3.MetaGuard.NestedClassUnavailable 
refine method 
class Any introspectDocPath(This3.Path path, This3.Size annotationN) exception This3.MetaGuard.NestedClassUnavailable, Void }
Class: {implements This1, This3.Concept.ToS
class method 
mut This0 #mutK(class Any lib) 
class method 
This0 #apply(class Any lib) 
mut method 
class Any #lib() 
read method 
class Any lib() 
refine read method 
This3.S toS() 
refine method 
This2.NestedClass introspectReport(fwd This2.NestedClass root, This3.Path path) exception This3.MetaGuard.NestedClassUnavailable 
refine method 
This2.Member introspectReportMember(fwd This2.NestedClass root, This3.Path path, This3.Size memberN) exception This3.MetaGuard.MemberUnavailable, Void 
refine method 
This2.Type introspectReportType(fwd This2.NestedClass root, This3.Path path, This3.Size memberN, This3.Size typeN) exception This3.MetaGuard.MemberUnavailable, Void 
refine method 
This3.S introspectDocAsString(This3.Path path, This3.Size annotationN) exception This3.MetaGuard.NestedClassUnavailable, Void 
refine method 
This3.S introspectDocAsString(This3.Path path) exception This3.MetaGuard.NestedClassUnavailable 
refine method 
class Any introspectDocPath(This3.Path path, This3.Size annotationN) exception This3.MetaGuard.NestedClassUnavailable, Void }}
Doc: {implements This2.Concept.ToS, This2.Concept.Classable
class method 
mut This0 #mutK(Library _binaryRepr, This0.Annotations _annotations) 
class method 
This0 _private(Library _binaryRepr, This0.Annotations _annotations) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
mut method 
This0.Annotations #_annotations() 
read method 
This0.Annotations _annotations() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
class method 
This0 #apply(Library that) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
Library binaryRepr() 
refine read method 
This2.S toS() 
method 
This0.Annotations annotations() 
Annotation: {implements This3.Concept.ToS, This3.Concept.Classable
class method 
mut This0 #mutK(Library _binaryRepr, This3.S text, This3.Size index) 
class method 
This0 #apply(Library _binaryRepr, This3.S text, This3.Size index) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
mut method 
This3.S #text() 
read method 
This3.S text() 
mut method 
This3.Size #index() 
read method 
This3.Size index() 
refine class method 
This3.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This3.S readableName() 
refine read method 
This3.S toS() 
method 
class Any referredClass() 
method 
This3.Bool hasReferredClass() }
Annotations: {implements This3.Concept.ToS, This3.Concept.Classable
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.Annotation that) 
class method 
This1.Annotation cast(Any that) 
read method 
mut This0 reverse() 
read method 
This3.Size size() 
read method 
This3.Bool isEmpty() 
read method 
This1.Annotation val(This3.Size that) 
read method 
This1.Annotation left() 
read method 
This1.Annotation right() 
mut method 
Void #apply(This3.Size that, This1.Annotation val) 
mut method 
Void left(This1.Annotation that) 
mut method 
Void right(This1.Annotation that) 
mut method 
Void add(This3.Size that, This1.Annotation val) 
mut method 
Void add(This1.Annotation right) 
mut method 
Void add(This1.Annotation left) 
mut method 
Void remove(This3.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.Annotation that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This3.Size that, This1.Annotation val) 
method 
This0 withLeft(This1.Annotation that) 
method 
This0 withRight(This1.Annotation that) 
method 
This0 withAlso(This3.Size that, This1.Annotation val) 
method 
This0 withAlsoLeft(This1.Annotation that) 
method 
This0 withAlsoRight(This1.Annotation that) 
method 
This0 without(This3.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1.Annotation filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1.Annotation filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1.Annotation filled) 
read method 
lent This0.IteratorValFill vals(This1.Annotation filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
refine class method 
This3.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This3.S readableName() 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2.Annotation filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Annotation #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() }
IteratorValFill: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2.Annotation filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Annotation #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2.Annotation filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2.Annotation filled) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
This2.Annotation #filled() }
IteratorVar: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2.Annotation filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Annotation #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
Void inner(This2.Annotation that) }}}
Record: {
class method 
mut This0 #mutK(This1.MirrorPr that) 
class method 
This0 #apply(This1.MirrorPr that) 
mut method 
This1.MirrorPr #that() 
read method 
This1.MirrorPr that() 
class method 
This0 #apply(class Any clazz) 
class method 
This0 #apply(Library lib) 
method 
Void dbg() 
method 
mut This2.S.SBuilder #builder() 
method 
This2.S #from(This2.S.SBuilder builder) 
method 
This1.Doc docOf(This2.Path path) 
class method 
This1.Member dispatch(fwd This1.NestedClass root, This2.Path path, This1.MirrorPr mirror, This2.Size memberN, Library record) 
RootForMember:/* toPutAs private
*/ {interface 
method 
This2.Member #apply(fwd This2.NestedClass root) }
RootForNested:/* toPutAs private
*/ {implements This1.RootForMember
class method 
mut This0 #mutK(This3.Path path, This2.MirrorPr mirror, This1 _report) 
class method 
This0 #apply(This3.Path path, This2.MirrorPr mirror, This1 _report) 
mut method 
This3.Path #path() 
read method 
This3.Path path() 
mut method 
This2.MirrorPr #mirror() 
read method 
This2.MirrorPr mirror() 
mut method 
This1 #_report() 
read method 
This1 _report() 
refine method 
This2.Member #apply(fwd This2.NestedClass root) }
RootForMethod:/* toPutAs private
*/ {implements This1.RootForMember
class method 
mut This0 #mutK(This3.Path path, This3.Size memberN, This1 _report) 
class method 
This0 #apply(This3.Path path, This3.Size memberN, This1 _report) 
mut method 
This3.Path #path() 
read method 
This3.Path path() 
mut method 
This3.Size #memberN() 
read method 
This3.Size memberN() 
mut method 
This1 #_report() 
read method 
This1 _report() 
refine method 
This2.Member #apply(fwd This2.NestedClass root) }}
Member: {interface implements This2.Concept.ToS, This2.Concept.Equals
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) }
Members: {implements This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.Member that) 
class method 
This1.Member cast(Any that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.Member val(This2.Size that) 
read method 
This1.Member left() 
read method 
This1.Member right() 
mut method 
Void #apply(This2.Size that, This1.Member val) 
mut method 
Void left(This1.Member that) 
mut method 
Void right(This1.Member that) 
mut method 
Void add(This2.Size that, This1.Member val) 
mut method 
Void add(This1.Member right) 
mut method 
Void add(This1.Member left) 
mut method /*from VectorTrait
*/Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.Member that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This2.Size that, This1.Member val) 
method 
This0 withLeft(This1.Member that) 
method 
This0 withRight(This1.Member that) 
method 
This0 withAlso(This2.Size that, This1.Member val) 
method 
This0 withAlsoLeft(This1.Member that) 
method 
This0 withAlsoRight(This1.Member that) 
method /*from VectorTrait
*/This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Member filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Member filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Member filled) 
read method 
lent This0.IteratorValFill vals(This1.Member filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
read method 
This2.Bool contains(This1.Member that) 
method 
This0 #less(This1.Member that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This2.Bool #rightright(This0 that) 
method 
This2.Bool #rightrightequal(This0 that) 
method 
This2.Bool #right(This1.Member that) 
read method 
This2.Bool #equalequal(read This0 that) 
refine read method 
This2.Bool equals(read Any that) 
read method 
This2.Size indexOfLeft(This1.Member val) 
read method 
This2.Size indexOfRight(This1.Member val) 
method 
This0 withoutLeft(This1.Member val) 
method 
This0 withoutRight(This1.Member val) 
method 
This0 withoutAll(This1.Member val) 
mut method 
Void removeAll(This1.Member val) 
mut method 
Void removeLeft(This1.Member val) 
mut method 
Void removeRight(This1.Member val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Member filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Member #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() }
IteratorValFill: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Member filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Member #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Member filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Member filled) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
This2.Member #filled() }
IteratorVar: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Member filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Member #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Void inner(This2.Member that) }}
Method: {implements This1.Member, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(fwd This1.NestedClass _root, This2.Path path, This2.Size memberN, This1.Record record) 
class method 
This0 #apply(fwd This1.NestedClass _root, This2.Path path, This2.Size memberN, This1.Record record) 
mut method 
This1.NestedClass #_root() 
read method 
This1.NestedClass _root() 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Size #memberN() 
read method 
This2.Size memberN() 
mut method 
This1.Record #record() 
read method 
This1.Record record() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
refine read method 
This2.S toS() 
method 
This2.Bool #equalequal(This0 that) 
refine read method 
This2.Bool equals(read Any that) 
method 
This1.Doc doc() 
method 
This1.Mdf thisMdf() 
method /* invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
*/This2.Path pathFromRoot() 
method 
This2.Selector selector() 
method 
This1.MethodKind methodKind() 
method 
This2.S allAsString() 
method 
This1.Type returnType() 
method 
This1.Types exceptions() 
method 
This1.Types parameterTypes() 
method 
This2.Bool isPrivate() 
method 
This1.NestedClass root() }
Methods: {implements This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.Method that) 
class method 
This1.Method cast(Any that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.Method val(This2.Size that) 
read method 
This1.Method left() 
read method 
This1.Method right() 
mut method 
Void #apply(This2.Size that, This1.Method val) 
mut method 
Void left(This1.Method that) 
mut method 
Void right(This1.Method that) 
mut method 
Void add(This2.Size that, This1.Method val) 
mut method 
Void add(This1.Method right) 
mut method 
Void add(This1.Method left) 
mut method /*from VectorTrait
*/Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.Method that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This2.Size that, This1.Method val) 
method 
This0 withLeft(This1.Method that) 
method 
This0 withRight(This1.Method that) 
method 
This0 withAlso(This2.Size that, This1.Method val) 
method 
This0 withAlsoLeft(This1.Method that) 
method 
This0 withAlsoRight(This1.Method that) 
method /*from VectorTrait
*/This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Method filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Method filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Method filled) 
read method 
lent This0.IteratorValFill vals(This1.Method filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
read method 
This2.Bool contains(This1.Method that) 
method 
This0 #less(This1.Method that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This2.Bool #rightright(This0 that) 
method 
This2.Bool #rightrightequal(This0 that) 
method 
This2.Bool #right(This1.Method that) 
read method 
This2.Bool #equalequal(read This0 that) 
refine read method 
This2.Bool equals(read Any that) 
read method 
This2.Size indexOfLeft(This1.Method val) 
read method 
This2.Size indexOfRight(This1.Method val) 
method 
This0 withoutLeft(This1.Method val) 
method 
This0 withoutRight(This1.Method val) 
method 
This0 withoutAll(This1.Method val) 
mut method 
Void removeAll(This1.Method val) 
mut method 
Void removeLeft(This1.Method val) 
mut method 
Void removeRight(This1.Method val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Method filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Method #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() }
IteratorValFill: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Method filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Method #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Method filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Method filled) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
This2.Method #filled() }
IteratorVar: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Method filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Method #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Void inner(This2.Method that) }}
NestedClass: {/*findMeNestedClass
*/implements This1.Member, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
class method 
mut This0 #mutK(fwd This0 _root, This2.Path path, This1.MirrorPr mirror, This1.Record record) 
class method 
This0 #apply(fwd This0 _root, This2.Path path, This1.MirrorPr mirror, This1.Record record) 
mut method 
This0 #_root() 
read method 
This0 _root() 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This1.MirrorPr #mirror() 
read method 
This1.MirrorPr mirror() 
mut method 
This1.Record #record() 
read method 
This1.Record record() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
refine read method 
This2.S toS() 
method 
This2.Bool #equalequal(This0 that) 
refine read method 
This2.Bool equals(read Any that) 
method 
This0 root() 
method /*error for This
*/This1.Doc nestedDoc() 
method /*of the library literal
*/This1.Doc doc() 
method 
This2.Path pathFromRoot() 
method 
This2.Bool hasExternalType() 
method 
class Any externalType() 
method 
This2.S externalTypeToS() 
method 
This1.ClassKind classKind() 
method 
This2.S allAsString() 
method 
This1.Members members() 
method 
This1.Methods methods() 
method 
This1.NestedClasses nestedClasses() 
method 
This1.NestedClasses transitivelyNestedClasses() 
method 
This1.Types implementedInterfaces() 
method 
This1.Types transitivelyImplementedInterfaces() 
method 
This2.Bool implements(This0 that) 
method 
This1.Methods stateCandidate() 
method 
This1.Methods state() 
method 
This1.Method method(This2.Selector that) exception This2.MetaGuard.MethodUnavailable 
method 
This2.Bool has(This2.Selector selector) 
method 
This0 nestedClassFromRoot(This2.Path that) exception This2.MetaGuard.NestedClassUnavailable 
method 
This2.Bool has(This2.Path fromRoot) 
method 
This2.Bool isPrivate() }
NestedClasses: {implements This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.NestedClass that) 
class method 
This1.NestedClass cast(Any that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.NestedClass val(This2.Size that) 
read method 
This1.NestedClass left() 
read method 
This1.NestedClass right() 
mut method 
Void #apply(This2.Size that, This1.NestedClass val) 
mut method 
Void left(This1.NestedClass that) 
mut method 
Void right(This1.NestedClass that) 
mut method 
Void add(This2.Size that, This1.NestedClass val) 
mut method 
Void add(This1.NestedClass right) 
mut method 
Void add(This1.NestedClass left) 
mut method /*from VectorTrait
*/Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.NestedClass that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This2.Size that, This1.NestedClass val) 
method 
This0 withLeft(This1.NestedClass that) 
method 
This0 withRight(This1.NestedClass that) 
method 
This0 withAlso(This2.Size that, This1.NestedClass val) 
method 
This0 withAlsoLeft(This1.NestedClass that) 
method 
This0 withAlsoRight(This1.NestedClass that) 
method /*from VectorTrait
*/This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.NestedClass filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.NestedClass filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.NestedClass filled) 
read method 
lent This0.IteratorValFill vals(This1.NestedClass filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
read method 
This2.Bool contains(This1.NestedClass that) 
method 
This0 #less(This1.NestedClass that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This2.Bool #rightright(This0 that) 
method 
This2.Bool #rightrightequal(This0 that) 
method 
This2.Bool #right(This1.NestedClass that) 
read method 
This2.Bool #equalequal(read This0 that) 
refine read method 
This2.Bool equals(read Any that) 
read method 
This2.Size indexOfLeft(This1.NestedClass val) 
read method 
This2.Size indexOfRight(This1.NestedClass val) 
method 
This0 withoutLeft(This1.NestedClass val) 
method 
This0 withoutRight(This1.NestedClass val) 
method 
This0 withoutAll(This1.NestedClass val) 
mut method 
Void removeAll(This1.NestedClass val) 
mut method 
Void removeLeft(This1.NestedClass val) 
mut method 
Void removeRight(This1.NestedClass val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.NestedClass filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.NestedClass #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() }
IteratorValFill: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.NestedClass filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.NestedClass #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.NestedClass filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.NestedClass filled) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
This2.NestedClass #filled() }
IteratorVar: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.NestedClass filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.NestedClass #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Void inner(This2.NestedClass that) }}
Type: {implements This2.Concept.ToS, This2.Concept.Classable
class method 
mut This0 #mutK(fwd This1.NestedClass root, This2.Path path, This2.Size memberN, This2.Size typeN, This1.Record record) 
class method 
This0 #apply(fwd This1.NestedClass root, This2.Path path, This2.Size memberN, This2.Size typeN, This1.Record record) 
mut method 
This1.NestedClass #root() 
read method 
This1.NestedClass root() 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Size #memberN() 
read method 
This2.Size memberN() 
mut method 
This2.Size #typeN() 
read method 
This2.Size typeN() 
mut method 
This1.Record #record() 
read method 
This1.Record record() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
refine read method 
This2.S toS() 
method 
This2.S allAsString() 
method 
This2.S strRepr() 
method 
This1.TypeKind typeKind() 
method 
This1.Mdf mdf() 
method 
This1.NestedClass referencedPath() 
method 
This1.NestedClass resolvedReferencedPath() 
method 
This2.Bool partial() 
method 
This2.Bool resolvedPartial() 
method 
This2.S suffix() 
method 
This1.Doc doc() 
method 
This2.Bool isInterface() 
method 
This2.Bool isAny() 
method 
This2.Bool isVoid() 
method 
This2.Bool isLibrary() 
method 
This2.Bool isPrimitive() }
Types: {implements This2.Concept.ToS, This2.Concept.Classable
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.Type that) 
class method 
This1.Type cast(Any that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.Type val(This2.Size that) 
read method 
This1.Type left() 
read method 
This1.Type right() 
mut method 
Void #apply(This2.Size that, This1.Type val) 
mut method 
Void left(This1.Type that) 
mut method 
Void right(This1.Type that) 
mut method 
Void add(This2.Size that, This1.Type val) 
mut method 
Void add(This1.Type right) 
mut method 
Void add(This1.Type left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.Type that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This2.Size that, This1.Type val) 
method 
This0 withLeft(This1.Type that) 
method 
This0 withRight(This1.Type that) 
method 
This0 withAlso(This2.Size that, This1.Type val) 
method 
This0 withAlsoLeft(This1.Type that) 
method 
This0 withAlsoRight(This1.Type that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Type filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Type filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Type filled) 
read method 
lent This0.IteratorValFill vals(This1.Type filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Type filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Type #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() }
IteratorValFill: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Type filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Type #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Type filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Type filled) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
This2.Type #filled() }
IteratorVar: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.Type filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Type #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Void inner(This2.Type that) }}
Mdf: {/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
*/implements This2.Concept.Equals, This2.Concept.Classable, This2.Concept.ToS
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
read method 
This2.Bool #equalequal(read This0 that) 
refine read method 
This2.S toS() 
read method 
This2.Size inner() 
class method 
This0 #apply(This2.Size inner) 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _Capsule() 
class method 
This0 _Mutable() 
class method 
This0 _Lent() 
class method 
This0 _Readable() 
class method 
This0 _Immutable() 
class method 
This0 _Class() 
method 
This2.Bool isCapsule() 
method 
This2.Bool isMutable() 
method 
This2.Bool isLent() 
method 
This2.Bool isReadable() 
method 
This2.Bool isImmutable() 
method 
This2.Bool isClass() 
ParseFail: {implements This3.Guard.ParseFail, This3.Guard, This3.Message, This3.Concept.ToS, This3.Concept.Equals, This3.Concept.Classable
refine class method 
This3.S kind() 
refine method 
This3.S text() 
refine method 
This3.Message.Opt responseOf() 
refine read method 
class This3.Message class() 
refine read method 
This3.S toS() 
refine read method 
This3.Bool equals(read Any that) 
refine class method 
This3.S readableName() 
refine class method 
This3.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
mut This0 reverse() 
read method 
This3.Size size() 
read method 
This3.Bool isEmpty() 
read method 
This1 val(This3.Size that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
refine class method 
This3.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This3.S readableName() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This3.Bool #rightright(This0 that) 
method 
This3.Bool #rightrightequal(This0 that) 
method 
This3.Bool #right(This1 that) 
read method 
This3.Bool #equalequal(read This0 that) 
refine read method 
This3.Bool equals(read Any that) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() }
IteratorValFill: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
This2 #filled() }
IteratorVar: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
Void inner(This2 that) }}}
MethodKind: {/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
*/implements This2.Concept.Equals, This2.Concept.Classable, This2.Concept.ToS
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
read method 
This2.Bool #equalequal(read This0 that) 
refine read method 
This2.S toS() 
read method 
This2.Size inner() 
class method 
This0 #apply(This2.Size inner) 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _InterfaceImplementedMethod() 
class method 
This0 _ImplementedMethod() 
class method 
This0 _AbstractMethod() 
ParseFail: {implements This3.Guard.ParseFail, This3.Guard, This3.Message, This3.Concept.ToS, This3.Concept.Equals, This3.Concept.Classable
refine class method 
This3.S kind() 
refine method 
This3.S text() 
refine method 
This3.Message.Opt responseOf() 
refine read method 
class This3.Message class() 
refine read method 
This3.S toS() 
refine read method 
This3.Bool equals(read Any that) 
refine class method 
This3.S readableName() 
refine class method 
This3.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
mut This0 reverse() 
read method 
This3.Size size() 
read method 
This3.Bool isEmpty() 
read method 
This1 val(This3.Size that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
refine class method 
This3.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This3.S readableName() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This3.Bool #rightright(This0 that) 
method 
This3.Bool #rightrightequal(This0 that) 
method 
This3.Bool #right(This1 that) 
read method 
This3.Bool #equalequal(read This0 that) 
refine read method 
This3.Bool equals(read Any that) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() }
IteratorValFill: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
This2 #filled() }
IteratorVar: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
Void inner(This2 that) }}}
ClassKind: {/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
*/implements This2.Concept.Equals, This2.Concept.Classable, This2.Concept.ToS
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
read method 
This2.Bool #equalequal(read This0 that) 
refine read method 
This2.S toS() 
read method 
This2.Size inner() 
class method 
This0 #apply(This2.Size inner) 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _Interface() 
class method 
This0 _ClosedClass() 
class method 
This0 _OpenClass() 
class method 
This0 _Template() 
class method 
This0 _FreeTemplate() 
ParseFail: {implements This3.Guard.ParseFail, This3.Guard, This3.Message, This3.Concept.ToS, This3.Concept.Equals, This3.Concept.Classable
refine class method 
This3.S kind() 
refine method 
This3.S text() 
refine method 
This3.Message.Opt responseOf() 
refine read method 
class This3.Message class() 
refine read method 
This3.S toS() 
refine read method 
This3.Bool equals(read Any that) 
refine class method 
This3.S readableName() 
refine class method 
This3.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
mut This0 reverse() 
read method 
This3.Size size() 
read method 
This3.Bool isEmpty() 
read method 
This1 val(This3.Size that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
refine class method 
This3.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This3.S readableName() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This3.Bool #rightright(This0 that) 
method 
This3.Bool #rightrightequal(This0 that) 
method 
This3.Bool #right(This1 that) 
read method 
This3.Bool #equalequal(read This0 that) 
refine read method 
This3.Bool equals(read Any that) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() }
IteratorValFill: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
This2 #filled() }
IteratorVar: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
Void inner(This2 that) }}}
TypeKind: {/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
may disappear
*/implements This2.Concept.Equals, This2.Concept.Classable, This2.Concept.ToS
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
refine read method 
This2.Bool equals(read Any that) 
read method 
This2.Bool #equalequal(read This0 that) 
refine read method 
This2.S toS() 
read method 
This2.Size inner() 
class method 
This0 #apply(This2.Size inner) 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _Normal() 
class method 
This0 _Alias() 
class method 
This0 _AliasUnresolvable() 
ParseFail: {implements This3.Guard.ParseFail, This3.Guard, This3.Message, This3.Concept.ToS, This3.Concept.Equals, This3.Concept.Classable
refine class method 
This3.S kind() 
refine method 
This3.S text() 
refine method 
This3.Message.Opt responseOf() 
refine read method 
class This3.Message class() 
refine read method 
This3.S toS() 
refine read method 
This3.Bool equals(read Any that) 
refine class method 
This3.S readableName() 
refine class method 
This3.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
mut This0 reverse() 
read method 
This3.Size size() 
read method 
This3.Bool isEmpty() 
read method 
This1 val(This3.Size that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
refine class method 
This3.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This3.S readableName() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
method 
This0 #and(This0 that) 
method 
This3.Bool #rightright(This0 that) 
method 
This3.Bool #rightrightequal(This0 that) 
method 
This3.Bool #right(This1 that) 
read method 
This3.Bool #equalequal(read This0 that) 
refine read method 
This3.Bool equals(read Any that) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() }
IteratorValFill: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
This2 #filled() }
IteratorVar: {
read method 
read This4.Collections.MutListAny that() 
read method 
This4.Size from() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.Size #from() 
mut method 
This4.Size #maxTo() 
mut method 
This4.Size #minTo() 
mut method 
Void inner(This2 that) }}}}
Refactor: {
class method 
Library compose(Library left, Library right) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash 
class method 
Void checkTargetExists(Library that, This1.Path path) exception This1.MetaGuard.NestedClassUnavailable 
RedirectType: {
class method 
mut This0 #mutK(This2.Path that, This2.Introspection.Type to) 
class method 
This0 #apply(This2.Path that, This2.Introspection.Type to) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
This2.Introspection.Type #to() 
read method 
This2.Introspection.Type to() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.InvalidOnTopLevel, This2.MetaGuard.SourceUnfit, This2.MetaGuard.MethodClash, This2.MetaGuard.ClassClash, This2.MetaGuard.IncoherentRedirectMapping }
Redirect: {
class method 
mut This0 #mutK(This2.Path that, class Any to) 
class method 
This0 #apply(This2.Path that, class Any to) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
class Any #to() 
read method 
class Any to() 
class method 
This1.RedirectType #apply(This2.Path that, This2.Introspection.Type toType) 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.InvalidOnTopLevel, This2.MetaGuard.SourceUnfit, This2.MetaGuard.MethodClash, This2.MetaGuard.IncoherentRedirectMapping }
RenameSelector: {
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Selector to) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Selector to) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Selector #to() 
read method 
This2.Selector to() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.MethodClash }
RenamePath: {
class method 
mut This0 #mutK(This2.Path that, This2.Path to) 
class method 
This0 #apply(This2.Path that, This2.Path to) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
This2.Path #to() 
read method 
This2.Path to() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.MethodClash, This2.MetaGuard.ClassClash }
RemoveImplementationSelector: {
class method 
mut This0 #mutK(This2.Selector that, This2.Path of) 
class method 
This0 #apply(This2.Selector that, This2.Path of) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MemberUnavailable }
MoveImplementationSelector: {
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Selector to) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Selector to) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Selector #to() 
read method 
This2.Selector to() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.MethodClash }
RemoveImplementationPath: {
class method 
mut This0 #mutK(This2.Path that) 
class method 
This0 #apply(This2.Path that) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.PrivacyCoupuled }
AddDocumentationSelector: {
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Introspection.Doc doc) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Introspection.Doc doc) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Introspection.Doc #doc() 
read method 
This2.Introspection.Doc doc() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MemberUnavailable }
AddDocumentationPath: {
class method 
mut This0 #mutK(This2.Path that, This2.Introspection.Doc doc) 
class method 
This0 #apply(This2.Path that, This2.Introspection.Doc doc) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
This2.Introspection.Doc #doc() 
read method 
This2.Introspection.Doc doc() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.InvalidOnTopLevel }
MakePrivatePath: {
class method 
mut This0 #mutK(This2.Path that) 
class method 
This0 #apply(This2.Path that) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.InvalidOnTopLevel }
MakePrivateSelector: {
class method 
mut This0 #mutK(This2.Selector that, This2.Path of) 
class method 
This0 #apply(This2.Selector that, This2.Path of) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MemberUnavailable }
SumMethods: {
class method 
mut This0 #mutK(This2.Selector that, This2.Selector and, This2.Path of, This2.S over, This2.Selector to) 
class method 
This0 #apply(This2.Selector that, This2.Selector and, This2.Path of, This2.S over, This2.Selector to) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Selector #and() 
read method 
This2.Selector and() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.S #over() 
read method 
This2.S over() 
mut method 
This2.Selector #to() 
read method 
This2.Selector to() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.MethodClash, This2.MetaGuard.ParameterMismatch }
MakeMethod: {
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Introspection.Mdf.List mdfs, This2.Size exceptionN) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Introspection.Mdf.List mdfs, This2.Size exceptionN) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Introspection.Mdf.List #mdfs() 
read method 
This2.Introspection.Mdf.List mdfs() 
mut method 
This2.Size #exceptionN() 
read method 
This2.Size exceptionN() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.MethodClash }
Tools: {
class method 
This2.S getToSOrName(read Any that) 
class method 
Library specializeField(This2.Selector selector, This2.Introspection.Type type, Library forReadable, Library forClass) exception This0.CanNotSpecializeOperation 
class method /* maybe private
*/Library specialize(Library that, This2.Selector selector, This2.Introspection.Type type) exception This0.CanNotSpecializeOperation 
class method /* maybe private
*/Library readToImm(Library that) exception This0.CanNotSpecializeOperation 
CanNotSpecializeOperation: {implements This3.MetaGuard, This3.Guard, This3.Message, This3.Concept.ToS, This3.Concept.Equals, This3.Concept.Classable
refine class method 
This3.S kind() 
refine method 
This3.S text() 
refine method 
This3.Message.Opt responseOf() 
refine read method 
class This3.Message class() 
refine read method 
This3.S toS() 
refine read method 
This3.Bool equals(read Any that) 
refine class method 
This3.S readableName() 
refine class method 
This3.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}}
Rename: {
class method 
This1.RenamePath path(This2.Path that, This2.Path to) 
class method 
class This2.Path #default#path(Void that) 
class method 
class This2.Path #default#path(Void to) 
class method 
This1.RenameSelector selector(This2.Selector that, This2.Path of, This2.Selector to) 
class method 
This1.RenameSelector selector(This2.Selector that, This2.Selector to) 
class method 
class This2.Selector #default#selector(Void that) 
class method 
class This2.Selector #default#selector(Void to) 
class method 
class This2.Path #default#selector(Void of) }
Hide: {
class method 
This1.MakePrivateSelector selector(This2.Selector that, This2.Path of) 
class method 
This1.MakePrivateSelector selector(This2.Selector that) 
class method 
class This2.Selector #default#selector(Void that) 
class method 
class This2.Path #default#selector(Void of) }}
Optimize: {
RemoveUnreachableCode: {
class method 
Library #leftrightleft(Library that) }}
Opt: {
class method 
Library #apply(class Any that) }
Extends: {/*members of each produced class
*/implements This1.PreferentialComposition.$
refine method 
Library solveConflict(Library that, This1.PreferentialComposition.SrcDest location) 
class method 
mut This0 #mutK(This1.PreferentialComposition.Libs myLibs) 
class method 
This0 #apply(This1.PreferentialComposition.Libs myLibs) 
mut method 
This1.PreferentialComposition.Libs #myLibs() 
read method 
This1.PreferentialComposition.Libs myLibs() 
class method 
mut This1.PreferentialComposition.Libs #seqBuilder() 
class method 
This0 #from(This1.PreferentialComposition.Libs seqBuilder) 
method 
Library #leftrightleft(Library that) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash 
method 
This0 #plusplus(This0 that) 
method 
Library foldLeft(Library resolver) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash }
Use: {/*members of each produced class
*/implements This1.PreferentialComposition.$
refine method 
Library solveConflict(Library that, This1.PreferentialComposition.SrcDest location) 
class method 
mut This0 #mutK(This1.PreferentialComposition.Libs myLibs) 
class method 
This0 #apply(This1.PreferentialComposition.Libs myLibs) 
mut method 
This1.PreferentialComposition.Libs #myLibs() 
read method 
This1.PreferentialComposition.Libs myLibs() 
class method 
mut This1.PreferentialComposition.Libs #seqBuilder() 
class method 
This0 #from(This1.PreferentialComposition.Libs seqBuilder) 
method 
Library #leftrightleft(Library that) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash 
method 
This0 #plusplus(This0 that) 
method 
Library foldLeft(Library resolver) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash }
Default: {
DecorationUnfeasable: {implements This2.MetaGuard, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Parsable: {
class method 
Library #leftrightleft(Library that) exception This1.DecorationUnfeasable }
SealState: {/* how to specify which factory to keep out? what getters
*/
class method 
Library #leftrightleft(Library that) }
DataFromToS: {/* in the future we can add also hashCode and > =>
*/
class method 
Library #leftrightleft(Library that) exception This1.DecorationUnfeasable }
Equals: {
class method 
Library #leftrightleft(Library that) exception This1.DecorationUnfeasable }}
Collections: {
class method 
Library vector(class Any of) 
class method 
Library minimal(class Any that) 
class method 
Library eq(class Any that) 
IterationFailure: {implements This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
CollectionErrors: {
class method 
Any negBound(This2.Size that, This1.MutListAny list) 
class method 
Any outBound(This2.Size that, This1.MutListAny list) 
class method 
Any cast() 
class method 
Any iterationTermination(This2.Size from, This2.Size minTo, This2.Size size) }
MutListAny: {implements This2.Concept.ToS
class method 
mut This0 #mutK(This0.Cell head, This2.Size size) 
class method 
mut This0 #apply(This0.Cell head, This2.Size size) 
mut method 
Void head(This0.Cell that) 
mut method 
This0.Cell #head() 
read method 
This0.Cell head() 
mut method 
Void size(This2.Size that) 
mut method 
This2.Size #size() 
read method 
This2.Size size() 
class method 
mut This0 empty() 
read method 
Any val(This2.Size that) 
mut method 
Void #apply(This2.Size that, Any val) 
mut method 
Void add(This2.Size that, Any val) 
mut method 
Void remove(This2.Size that) 
method 
This0 without(This2.Size that) 
method 
This0 withAlso(This2.Size that, Any val) 
method 
This0 with(This2.Size that, Any val) 
read method 
Void checkBound(This2.Size that) 
read method 
Void checkBoundAdd(This2.Size that) 
refine read method 
This2.S toS() 
Cell: {interface 
method 
Any get(This3.Size that) 
method 
This0 set(This3.Size that, Any val, This3.Bool add) 
method 
This0 remove(This3.Size that) }
CellNext: {implements This1.Cell
class method 
mut This0 #mutK(Any val, This1.Cell next) 
class method 
This0 #apply(Any val, This1.Cell next) 
mut method 
Any #val() 
read method 
Any val() 
mut method 
This1.Cell #next() 
read method 
This1.Cell next() 
refine method 
Any get(This3.Size that) 
refine method 
This1.Cell set(This3.Size that, Any val, This3.Bool add) 
refine method 
This1.Cell remove(This3.Size that) }
CellEnd: {implements This1.Cell
class method 
mut This0 #mutK() 
class method 
This0 #apply() 
refine method 
Any get(This3.Size that) 
refine method 
This1.Cell set(This3.Size that, Any val, This3.Bool add) 
refine method 
This1.Cell remove(This3.Size that) }}
VectorTrait: {
class method 
Library #apply() }
CodeEq: {
class method 
Library #apply() }}
K: {
class method 
This0.$#from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
Library #leftrightleft(Library that) 
$: {
class method 
mut This0 #mutK(This2.S names, This2.Bool isFwd, This2.S mutK, This2.S lentK, This2.S readK, This2.S immK) 
class method 
This0 #apply(This2.S names, This2.Bool isFwd, This2.S mutK, This2.S lentK, This2.S readK, This2.S immK) 
mut method 
This2.S #names() 
read method 
This2.S names() 
mut method 
This2.Bool #isFwd() 
read method 
This2.Bool isFwd() 
mut method 
This2.S #mutK() 
read method 
This2.S mutK() 
mut method 
This2.S #lentK() 
read method 
This2.S lentK() 
mut method 
This2.S #readK() 
read method 
This2.S readK() 
mut method 
This2.S #immK() 
read method 
This2.S immK() 
method 
This0 fwd() 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.MethodUnavailable }}
Alphanumeric: {
class method 
Library #leftrightleft(Library that) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
DeployTowel: {
class method 
mut This0 #mutK(This1.Url fileName) 
class method 
This0 #apply(This1.Url fileName) 
mut method 
This1.Url #fileName() 
read method 
This1.Url fileName() 
class method 
Library binaryReprFrom(Library lib) 
method 
Library #leftrightleft(Library that) }
PreferentialComposition: {/*members of PreferentialComposition
*/
class method 
This0.SrcDests renameMap(Library that, This1.S prefix, This1.Path path, This1.Introspection.Methods ms) 
class method 
This1.Bool needRename(This1.Introspection.NestedClass that, This1.Introspection.Method meth) 
class method 
Library #leftrightleft(Library that) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash 
$: {interface 
method 
Library solveConflict(Library that, This1.SrcDest location) }
SrcDest: {
class method 
mut This0 #mutK(This2.Path path, This2.Selector src, This2.Selector dest) 
class method 
This0 #apply(This2.Path path, This2.Selector src, This2.Selector dest) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Selector #src() 
read method 
This2.Selector src() 
mut method 
This2.Selector #dest() 
read method 
This2.Selector dest() }
SrcDests: {implements This2.Concept.ToS, This2.Concept.Classable
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.SrcDest that) 
class method 
This1.SrcDest cast(Any that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.SrcDest val(This2.Size that) 
read method 
This1.SrcDest left() 
read method 
This1.SrcDest right() 
mut method 
Void #apply(This2.Size that, This1.SrcDest val) 
mut method 
Void left(This1.SrcDest that) 
mut method 
Void right(This1.SrcDest that) 
mut method 
Void add(This2.Size that, This1.SrcDest val) 
mut method 
Void add(This1.SrcDest right) 
mut method 
Void add(This1.SrcDest left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(This1.SrcDest that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This2.Size that, This1.SrcDest val) 
method 
This0 withLeft(This1.SrcDest that) 
method 
This0 withRight(This1.SrcDest that) 
method 
This0 withAlso(This2.Size that, This1.SrcDest val) 
method 
This0 withAlsoLeft(This1.SrcDest that) 
method 
This0 withAlsoRight(This1.SrcDest that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.SrcDest filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.SrcDest filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.SrcDest filled) 
read method 
lent This0.IteratorValFill vals(This1.SrcDest filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.SrcDest filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.SrcDest #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() }
IteratorValFill: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.SrcDest filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.SrcDest #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.SrcDest filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.SrcDest filled) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
This2.SrcDest #filled() }
IteratorVar: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
This2.SrcDest filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.SrcDest #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Void inner(This2.SrcDest that) }}
Libs: {implements This2.Concept.ToS, This2.Concept.Classable
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(Library that) 
class method 
Library cast(Any that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
Library val(This2.Size that) 
read method 
Library left() 
read method 
Library right() 
mut method 
Void #apply(This2.Size that, Library val) 
mut method 
Void left(Library that) 
mut method 
Void right(Library that) 
mut method 
Void add(This2.Size that, Library val) 
mut method 
Void add(Library right) 
mut method 
Void add(Library left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus(Library that) 
method 
This0 #plusplus(This0 that) 
method 
This0 with(This2.Size that, Library val) 
method 
This0 withLeft(Library that) 
method 
This0 withRight(Library that) 
method 
This0 withAlso(This2.Size that, Library val) 
method 
This0 withAlsoLeft(Library that) 
method 
This0 withAlsoRight(Library that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, Library filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, Library filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, Library filled) 
read method 
lent This0.IteratorValFill vals(Library filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
refine class method 
This2.Bool is(class Any subtype) 
refine read method 
class This0 class() 
refine class method 
This2.S readableName() 
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
Library filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() }
IteratorValFill: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
Library filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, Library filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, Library filled) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Library #filled() }
IteratorVar: {
read method 
read This3.Collections.MutListAny that() 
read method 
This3.Size from() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Bool isFill() 
read method 
Library filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.Size #from() 
mut method 
This3.Size #maxTo() 
mut method 
This3.Size #minTo() 
mut method 
Void inner(Library that) }}}
Load: {/*shape of a loadable library:
 This contains actual library, but
 Abstract:{} contains abstract classes, and
 Abstract.ConceptMap mapps concepts names to abstract classes
*/
class method 
Library #leftrightleft(Library that) exception This0.ConceptMapMismatch, This0.ConceptMapUnavailable 
ConceptMapMismatch: {implements This2.MetaGuard, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
ConceptMapUnavailable: {implements This2.MetaGuard, This2.Guard, This2.Message, This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable
refine class method 
This2.S kind() 
refine method 
This2.S text() 
refine method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
refine read method 
This2.S toS() 
refine read method 
This2.Bool equals(read Any that) 
refine class method 
This2.S readableName() 
refine class method 
This2.Bool is(class Any subtype) 
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
DeployLibrary: {
class method 
mut This0 #mutK(This2.Path path, This2.Url url) 
class method 
This0 #apply(This2.Path path, This2.Url url) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Url #url() 
read method 
This2.Url url() 
class method 
Library moveToAbstract(This2.Path that, Library of) 
class method 
Library exposeAsLibrary(Library that, This2.Path path) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.PrivacyCoupuled 
class method 
Void checkTargetExists(Library that, This2.Path path) exception This2.MetaGuard.NestedClassUnavailable 
method 
Library #leftrightleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.PrivacyCoupuled }}}
class method 
mut This0 #mutK(This0.Abstract.S id) 
class method 
This0 #apply(This0.Abstract.S id) This0.#mutK(id:id)
mut method 
This0.Abstract.S #id() 
read method 
This0.Abstract.S id() 
class method 
This0.Abstract.S jsEscape(This0.Abstract.S that) (
  This0.Abstract.S tmp=that
  mut This0.Vartmp_$%$%$%$%$%$%$%$%$%$%$%$%$%$%134_1__175_1 vartmp=This0.Vartmp_$%$%$%$%$%$%$%$%$%$%$%$%$%$%134_1__175_1.#apply(inner:tmp)
  Void unused=vartmp.inner(that:vartmp.#inner().replace(that:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b=This0.Abstract.S.#builder()
    Void unused2=b.#backslash()
    b
    )), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b0=This0.Abstract.S.#builder()
    Void unused3=b0.#backslash()
    Void unused4=b0.#backslash()
    b0
    ))))
  Void unused0=vartmp.inner(that:vartmp.#inner().replace(that:This0.Abstract.S.doubleQuote(), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b1=This0.Abstract.S.#builder()
    Void unused5=b1.#backslash()
    b1
    )).#plusplus(that:This0.Abstract.S.doubleQuote())))
  Void unused1=vartmp.inner(that:(//tmp:=tmp.replace(S"\u" into:S"\u005cu")
vartmp.#inner().replace(that:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b2=This0.Abstract.S.#builder()
    Void unused6=b2.#sQuote()
    b2
    )), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b3=This0.Abstract.S.#builder()
    Void unused7=b3.#backslash()
    Void unused8=b3.#sQuote()
    b3
    )))))
  vartmp.#inner()
  )
method 
Void close() use This0.GuiPlugin check close(wName:this.id().binaryRepr()) error void
method 
Void open(This0.Abstract.S title, This0.Abstract.S body, This0.Abstract.Size x, This0.Abstract.Size y) this.open(html:(
  This0.Abstract.S.Continue rcv=(
    This0.Abstract.S rcv0=(
      This0.Abstract.S.Continue rcv1=(
        This0.Abstract.S rcv2=(
          This0.Abstract.S.Continue rcv3=(
            This0.Abstract.S rcv4=This0.Abstract.S.#from(builder:(
              mut This0.Abstract.S.SBuilder b=This0.Abstract.S.#builder()
              b
              ))
            rcv4.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b0=rcv4.#seqBuilder()
              Void unused=b0.#add(that:This0.htmlHeader())
              b0
              ))
            )
          rcv3.#from(builder:(
            mut This0.Abstract.S.SBuilder b1=rcv3.#builder()
            Void unused0=b1.#left()
            Void unused1=b1.#T()
            Void unused2=b1.#I()
            Void unused3=b1.#T()
            Void unused4=b1.#L()
            Void unused5=b1.#E()
            Void unused6=b1.#right()
            b1
            ))
          )
        rcv2.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b2=rcv2.#seqBuilder()
          Void unused7=b2.#add(that:title)
          b2
          ))
        )
      rcv1.#from(builder:(
        mut This0.Abstract.S.SBuilder b3=rcv1.#builder()
        Void unused8=b3.#left()
        Void unused9=b3.#divide()
        Void unused10=b3.#T()
        Void unused11=b3.#I()
        Void unused12=b3.#T()
        Void unused13=b3.#L()
        Void unused14=b3.#E()
        Void unused15=b3.#right()
        Void unused16=b3.#left()
        Void unused17=b3.#divide()
        Void unused18=b3.#H()
        Void unused19=b3.#T()
        Void unused20=b3.#M()
        Void unused21=b3.#L()
        Void unused22=b3.#right()
        Void unused23=b3.#left()
        Void unused24=b3.#B()
        Void unused25=b3.#O()
        Void unused26=b3.#D()
        Void unused27=b3.#Y()
        Void unused28=b3.#right()
        b3
        ))
      )
    rcv0.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b4=rcv0.#seqBuilder()
      Void unused29=b4.#add(that:body)
      b4
      ))
    )
  rcv.#from(builder:(
    mut This0.Abstract.S.SBuilder b5=rcv.#builder()
    Void unused30=b5.#left()
    Void unused31=b5.#divide()
    Void unused32=b5.#B()
    Void unused33=b5.#O()
    Void unused34=b5.#D()
    Void unused35=b5.#Y()
    Void unused36=b5.#right()
    Void unused37=b5.#left()
    Void unused38=b5.#divide()
    Void unused39=b5.#H()
    Void unused40=b5.#T()
    Void unused41=b5.#M()
    Void unused42=b5.#L()
    Void unused43=b5.#right()
    b5
    ))
  ), x:x, y:y)
class method 
This0.Abstract.S htmlHeader() (
  This0.Abstract.S.Continue rcv5=(
    This0.Abstract.S rcv6=This0.Abstract.S.#from(builder:(
      mut This0.Abstract.S.SBuilder b=This0.Abstract.S.#builder()
      Void unused=b.#left()
      Void unused0=b.#bang()
      Void unused1=b.#D()
      Void unused2=b.#O()
      Void unused3=b.#C()
      Void unused4=b.#T()
      Void unused5=b.#Y()
      Void unused6=b.#P()
      Void unused7=b.#E()
      Void unused8=b.#space()
      Void unused9=b.#h()
      Void unused10=b.#t()
      Void unused11=b.#m()
      Void unused12=b.#l()
      Void unused13=b.#right()
      Void unused14=b.#left()
      Void unused15=b.#h()
      Void unused16=b.#t()
      Void unused17=b.#m()
      Void unused18=b.#l()
      Void unused19=b.#right()
      Void unused20=b.#left()
      Void unused21=b.#h()
      Void unused22=b.#e()
      Void unused23=b.#a()
      Void unused24=b.#d()
      Void unused25=b.#right()
      Void unused26=b.#left()
      Void unused27=b.#m()
      Void unused28=b.#e()
      Void unused29=b.#t()
      Void unused30=b.#a()
      Void unused31=b.#space()
      Void unused32=b.#h()
      Void unused33=b.#t()
      Void unused34=b.#t()
      Void unused35=b.#p()
      Void unused36=b.#less()
      Void unused37=b.#e()
      Void unused38=b.#q()
      Void unused39=b.#u()
      Void unused40=b.#i()
      Void unused41=b.#v()
      Void unused42=b.#equal()
      Void unused43=b.#dQuote()
      Void unused44=b.#c()
      Void unused45=b.#o()
      Void unused46=b.#n()
      Void unused47=b.#t()
      Void unused48=b.#e()
      Void unused49=b.#n()
      Void unused50=b.#t()
      Void unused51=b.#less()
      Void unused52=b.#c()
      Void unused53=b.#l()
      Void unused54=b.#a()
      Void unused55=b.#s()
      Void unused56=b.#s()
      Void unused57=b.#dQuote()
      Void unused58=b.#space()
      Void unused59=b.#c()
      Void unused60=b.#o()
      Void unused61=b.#n()
      Void unused62=b.#t()
      Void unused63=b.#e()
      Void unused64=b.#n()
      Void unused65=b.#t()
      Void unused66=b.#equal()
      Void unused67=b.#dQuote()
      Void unused68=b.#t()
      Void unused69=b.#e()
      Void unused70=b.#x()
      Void unused71=b.#t()
      Void unused72=b.#divide()
      Void unused73=b.#h()
      Void unused74=b.#t()
      Void unused75=b.#m()
      Void unused76=b.#l()
      Void unused77=b.#semicolon()
      Void unused78=b.#space()
      Void unused79=b.#c()
      Void unused80=b.#h()
      Void unused81=b.#a()
      Void unused82=b.#r()
      Void unused83=b.#s()
      Void unused84=b.#e()
      Void unused85=b.#t()
      Void unused86=b.#equal()
      Void unused87=b.#U()
      Void unused88=b.#T()
      Void unused89=b.#F()
      Void unused90=b.#less()
      Void unused91=b.#8()
      Void unused92=b.#dQuote()
      Void unused93=b.#right()
      Void unused94=b.#newline()
      Void unused95=b.#left()
      Void unused96=b.#s()
      Void unused97=b.#c()
      Void unused98=b.#r()
      Void unused99=b.#i()
      Void unused100=b.#p()
      Void unused101=b.#t()
      Void unused102=b.#right()
      Void unused103=b.#newline()
      Void unused104=b.#newline()
      b
      ))
    rcv6.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b0=rcv6.#seqBuilder()
      Void unused105=b0.#add(that:This0.Abstract.Debug.readFile(fileName:This0.Abstract.Debug.localToAbsolute(fileName:This0.Abstract.S.#from(builder:(
        mut This0.Abstract.S.SBuilder b1=This0.Abstract.S.#builder()
        Void unused106=b1.#e()
        Void unused107=b1.#x()
        Void unused108=b1.#a()
        Void unused109=b1.#m()
        Void unused110=b1.#p()
        Void unused111=b1.#l()
        Void unused112=b1.#e()
        Void unused113=b1.#s()
        Void unused114=b1.#divide()
        Void unused115=b1.#r()
        Void unused116=b1.#e()
        Void unused117=b1.#s()
        Void unused118=b1.#o()
        Void unused119=b1.#u()
        Void unused120=b1.#r()
        Void unused121=b1.#c()
        Void unused122=b1.#e()
        Void unused123=b1.#s()
        Void unused124=b1.#divide()
        Void unused125=b1.#j()
        Void unused126=b1.#s()
        Void unused127=b1.#dot()
        Void unused128=b1.#j()
        Void unused129=b1.#s()
        b1
        )))))
      b0
      ))
    )
  rcv5.#from(builder:(
    mut This0.Abstract.S.SBuilder b2=rcv5.#builder()
    Void unused130=b2.#newline()
    Void unused131=b2.#left()
    Void unused132=b2.#divide()
    Void unused133=b2.#s()
    Void unused134=b2.#c()
    Void unused135=b2.#r()
    Void unused136=b2.#i()
    Void unused137=b2.#p()
    Void unused138=b2.#t()
    Void unused139=b2.#right()
    Void unused140=b2.#newline()
    b2
    ))
  )
method 
Void open(This0.Abstract.S html, This0.Abstract.Size x, This0.Abstract.Size y) (
  Void unused=This0.Abstract.Debug.#apply(that:html)
  use This0.GuiPlugin check open(wName:this.id().binaryRepr(), html:html.binaryRepr(), x:x.binaryRepr(), y:y.binaryRepr()) error void
  )
method 
Void set(This0.Abstract.S that, This0.Abstract.S id) (
  Void unused=(/*$('#Alpha').replaceWith('htmlstring')
*/
    This0.Abstract.S cmd=This0.Abstract.S.#from(builder:(
      mut This0.Abstract.S.SBuilder b=This0.Abstract.S.#builder()
      Void unused3=b.#$()
      Void unused4=b.#oRound()
      Void unused5=b.#sQuote()
      Void unused6=b.#hash()
      b
      )).#plusplus(that:This0.jsEscape(that:id).#plusplus(that:This0.Abstract.S.#from(builder:(
      mut This0.Abstract.S.SBuilder b0=This0.Abstract.S.#builder()
      Void unused7=b0.#sQuote()
      Void unused8=b0.#cRound()
      Void unused9=b0.#dot()
      Void unused10=b0.#r()
      Void unused11=b0.#e()
      Void unused12=b0.#p()
      Void unused13=b0.#l()
      Void unused14=b0.#a()
      Void unused15=b0.#c()
      Void unused16=b0.#e()
      Void unused17=b0.#W()
      Void unused18=b0.#i()
      Void unused19=b0.#t()
      Void unused20=b0.#h()
      Void unused21=b0.#oRound()
      Void unused22=b0.#sQuote()
      b0
      )).#plusplus(that:This0.jsEscape(that:that).#plusplus(that:This0.Abstract.S.#from(builder:(
      mut This0.Abstract.S.SBuilder b1=This0.Abstract.S.#builder()
      Void unused23=b1.#sQuote()
      Void unused24=b1.#cRound()
      Void unused25=b1.#semicolon()
      b1
      ))))))
    This0.Abstract.S x=this.executeJs(that:cmd)
    Void unused0=This0.Abstract.Debug.#apply(that:cmd)
    Void unused1=(
      This0.Abstract.Bool cond=x.#equalequal(that:This0.Abstract.S.#from(builder:(
        mut This0.Abstract.S.SBuilder b2=This0.Abstract.S.#builder()
        b2
        ))).#bang()
      (
        Void unused26=cond.#checkTrue()
        
        catch exception Void catched4 void
        
        (This0.Abstract.Debug.#apply(that:x))
        )
      )
    Void unused2=return void
    void
    )
  
  catch return Void result result
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0.Abstract.S executeJs(This0.Abstract.S that) This0.Abstract.S.#from(binaryRepr:use This0.GuiPlugin check executeJs(wName:this.id().binaryRepr(), command:that.binaryRepr()) error void)
method 
mut This0.Iterator events() This0.Iterator.#apply(id:this.id(), current:This0.Abstract.S.#from(builder:(
  mut This0.Abstract.S.SBuilder b=This0.Abstract.S.#builder()
  b
  )))
GuiPlugin: {/*@plugin
L42.is/connected/withHtml
*/}
Iterator: {
class method 
mut This0 #mutK(This1.Abstract.S id, This1.Abstract.S current) 
class method 
mut This0 #apply(This1.Abstract.S id, This1.Abstract.S current) This0.#mutK(id:id, current:current)
mut method 
This1.Abstract.S #id() 
read method 
This1.Abstract.S id() 
mut method 
Void current(This1.Abstract.S that) 
mut method 
This1.Abstract.S #current() 
read method 
This1.Abstract.S current() 
class method 
This1.Abstract.S auxFetchEvent(This1.Abstract.S id) exception Void (
  Void unused=(
    Library s=use This1.GuiPlugin check eventPending(wName:id.binaryRepr()) exception void
    
    catch error Library x exception void
    
    (
      Void unused0=return This1.Abstract.S.#from(binaryRepr:s)
      void
      )
    )
  
  catch return This1.Abstract.S result result
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void #next() exception Void (
  Void unused=(
    This1.Abstract.S s=This0.auxFetchEvent(id:this.id())
    Void unused0=return this.current(that:s)
    void
    )
  
  catch return Void result result
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #checkEnd() void
read method 
This1.Abstract.S #inner() (this.current())
read method 
Void #close() void}
Vartmp_$%$%$%$%$%$%$%$%$%$%$%$%$%$%134_1__175_1:/*@private*/ {
class method 
mut This0 #mutK(This1.Abstract.S inner) 
class method 
mut This0 #apply(This1.Abstract.S inner) This0.#mutK(inner:inner)
mut method 
Void inner(This1.Abstract.S that) 
mut method 
This1.Abstract.S #inner() 
read method 
This1.Abstract.S inner() }}