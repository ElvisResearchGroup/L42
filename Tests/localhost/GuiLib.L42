{
Abstract:{
Alu:{/*@plugin
L42.is/connected/withAlu
*/}
ExitCode:{
class method 
Library normal() 
class method 
Library failure() }
Bool:{implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named
method 
Void #checkTrue() exception Void 
class method 
This0 true() 
class method 
This0 false() 
method 
This0 #and(This0 that) 
method 
This0 #or(This0 that) 
method 
This0 #bang() 
class method 
This0 fromS(read This1.Concept.ToS that) 
method 
This0 #equalequal(This0 that) 
method 
This0 #bangequal(This0 that) 
class method 
Any parseError(This1.S that) 
ParseFail:{implements This2.Guard.ParseFail, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This1 #bangequal(This0 that) 
method 
This1 #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }}
N:{implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(Library binaryRepr) 
method 
Library binaryRepr() 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
Any parseError(This1.S that) 
method 
This0 #plus(This0 that) 
method 
This0 #less(This0 that) 
method 
This0 #times(This0 that) 
method 
This0 #divide(This0 that) 
method 
This1.Bool #equalequal(This0 that) 
method 
This1.Bool #left(This0 that) 
method 
This1.Bool #leftequal(This0 that) 
method 
This1.Bool #bangequal(This0 that) 
method 
This1.Bool #right(This0 that) 
method 
This1.Bool #rightequal(This0 that) 
method 
mut This0.Iterator vals() 
method 
mut This0.Iterator vals(This0 upTo) 
Iterator:{
class method 
mut This0 #mutK(This1 start, This1 end) 
class method 
mut This0 #apply(This1 start, This1 end) 
mut method 
Void start(This1 that) 
mut method 
This1 #start() 
read method 
This1 start() 
mut method 
This1 #end() 
read method 
This1 end() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This1 #inner() 
read method 
Void #close() }
ParseFail:{implements This2.Guard.ParseFail, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }}
S:{implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named, This1.Concept.Classable
class method /* will be private
*/mut This0 #mutK(Library _binaryRepr) 
class method /* will be private
*/This0 _private(Library _binaryRepr) 
mut method /* will be private
*/Library #_binaryRepr() 
read method /* will be private
*/Library _binaryRepr() 
class method 
This0 #from(Library binaryRepr) 
method 
Library binaryRepr() 
method 
This0 #plusplus(This0 that) 
method 
This1.Bool #bangequal(This0 that) 
method 
This1.Bool #equalequal(This0 that) 
method 
This0 #apply(This1.N start, This1.N end) 
method 
This0 #apply(This1.N that) 
method 
This0 #apply(This1.N start) 
method 
This0 #apply(This1.N end) 
method 
This1.Bool beginsWith(This0 that) 
method 
This1.N firstIndexOf(This0 that) 
class method 
Void subStringNotPresent(This0 string, This0 subString) 
method 
This1.Bool contains(This0 that) 
method 
This1.Bool isASCIILowerCase(This1.N that) 
method 
This1.Bool isASCIIUpperCase(This1.N that) 
method 
This1.N size() 
class method 
This0 doubleQuote() 
class method 
This0 nl() 
method 
This0 replace(This0 that, This0 into) 
method 
This0.Continue #from(This0.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This1 that) 
class method 
This0 #apply(This1 that) 
mut method 
This1 #that() 
read method 
This1 that() 
method 
mut This1.SBuilder #builder() 
method 
This1 #from(This1.SBuilder builder) }
method 
mut This0.SConcat #seqBuilder() 
SConcat:{
class method 
mut This0 #mutK(This1 old, This1 accumulator) 
class method 
mut This0 #apply(This1 old, This1 accumulator) 
mut method 
This1 #old() 
read method 
This1 old() 
mut method 
Void accumulator(This1 that) 
mut method 
This1 #accumulator() 
read method 
This1 accumulator() 
mut method 
Void #add(This2.Concept.ToS that) 
mut method 
Void #add(This2.Concept.ToS that, This2.Concept.ToS sep) }
SBuilder:{
read method 
Library binaryRepr() 
mut method 
Void acc(Library that) 
class method 
mut This0 empty() 
mut method 
Void #0() 
mut method 
Void #1() 
mut method 
Void #2() 
mut method 
Void #3() 
mut method 
Void #4() 
mut method 
Void #5() 
mut method 
Void #6() 
mut method 
Void #7() 
mut method 
Void #8() 
mut method 
Void #9() 
mut method 
Void #q() 
mut method 
Void #w() 
mut method 
Void #e() 
mut method 
Void #r() 
mut method 
Void #t() 
mut method 
Void #y() 
mut method 
Void #u() 
mut method 
Void #i() 
mut method 
Void #o() 
mut method 
Void #p() 
mut method 
Void #a() 
mut method 
Void #s() 
mut method 
Void #d() 
mut method 
Void #f() 
mut method 
Void #g() 
mut method 
Void #h() 
mut method 
Void #j() 
mut method 
Void #k() 
mut method 
Void #l() 
mut method 
Void #z() 
mut method 
Void #x() 
mut method 
Void #c() 
mut method 
Void #v() 
mut method 
Void #b() 
mut method 
Void #n() 
mut method 
Void #m() 
mut method 
Void #Q() 
mut method 
Void #W() 
mut method 
Void #E() 
mut method 
Void #R() 
mut method 
Void #T() 
mut method 
Void #Y() 
mut method 
Void #U() 
mut method 
Void #I() 
mut method 
Void #O() 
mut method 
Void #P() 
mut method 
Void #A() 
mut method 
Void #S() 
mut method 
Void #D() 
mut method 
Void #F() 
mut method 
Void #G() 
mut method 
Void #H() 
mut method 
Void #J() 
mut method 
Void #K() 
mut method 
Void #L() 
mut method 
Void #Z() 
mut method 
Void #X() 
mut method 
Void #C() 
mut method 
Void #V() 
mut method 
Void #B() 
mut method 
Void #N() 
mut method 
Void #M() 
mut method 
Void #%() 
mut method 
Void #$() 
mut method 
Void #left() 
mut method 
Void #right() 
mut method 
Void #bang() 
mut method 
Void #tilde() 
mut method 
Void #plus() 
mut method 
Void #times() 
mut method 
Void #divide() 
mut method 
Void #less() 
mut method 
Void #and() 
mut method 
Void #or() 
mut method 
Void #oRound() 
mut method 
Void #cRound() 
mut method 
Void #oSquare() 
mut method 
Void #cSquare() 
mut method 
Void #oCurly() 
mut method 
Void #cCurly() 
mut method 
Void #dQuote() 
mut method 
Void #sQuote() 
mut method 
Void #hQuote() 
mut method 
Void #equal() 
mut method 
Void #qMark() 
mut method 
Void #hat() 
mut method 
Void #comma() 
mut method 
Void #semicolon() 
mut method 
Void #colon() 
mut method 
Void #dot() 
mut method 
Void #underscore() 
mut method 
Void #hash() 
mut method 
Void #at() 
mut method 
Void #backslash() 
mut method 
Void #space() 
mut method 
Void #newline() }
class method 
This0 #from(This0.SBuilder builder) 
class method 
mut This0.SBuilder #builder() 
SubStringNotPresent:{implements This2.Guard, This2.Message
class method 
mut This0 #mutK(This1 _text, This2.Message.Opt cause) 
class method 
This0 #apply(This1 _text, This2.Message.Opt cause) 
mut method 
This1 #_text() 
read method 
This1 _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This1 text) 
class method 
This0 #apply(This1 text, This2.Message cause) 
class method 
mut This1.SBuilder #builder() 
class method 
This0 #from(This1.SBuilder builder) 
method 
This0.Continue #from(This1.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This2 that) 
class method 
This0 #apply(This2 that) 
mut method 
This2 #that() 
read method 
This2 that() 
method 
mut This2.SBuilder #builder() 
method 
This1 #from(This2.SBuilder builder) }
method 
mut This1.SConcat #seqBuilder() }}
Concept:{
ToS:{interface 
read method 
This2.S toS() }
Classable:{interface 
read method 
class Any classAny() }
Named:{interface 
class method 
This2.S myName() }
Wrapper:{interface 
read method 
Any inner() }
TypeWrapper:{interface 
read method 
class Any inner() }
ReadWrapper:{interface 
read method 
read Any inner() }
MutWrapper:{interface implements This1.ReadWrapper
mut method 
mut Any #inner() }
LentWrapper:{interface implements This1.ReadWrapper
mut method 
lent Any #inner() }
Equals:{interface 
read method 
This2.Bool equals(read Any that) }
Comparable:{interface 
read method 
This2.Bool greater(read Any that) }
Boollable:{interface 
read method 
Void #checkTrue() exception Void }
Decorator:{interface /*method Library>>(Library that) exception MetaGuard(specific)
method Library decorate(Library that) exception MetaGuard I can link metaguard for circularity
*/}
Contains:{interface /*read method Bool >>(read Elem that)
*/
read method 
This2.Bool contains(read Any that) }
Parsable:{interface /*class method capsule This fromS(S that) exception Guard.Parameter(specific) invalid string
////class method capsule This #fromS(S that) exception Guard.Parameter
*/}
Invariant:{interface 
read method /* can throw error or return false, as more opportune
*/This2.Bool invariant() }
RandomAccess:{interface /*read method read Elem (N that)
mut method mut Elem #(N that)
*/
read method 
read Any get(This2.N that) 
mut method 
mut Any #get(This2.N that) }
Sizable:{interface 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() }
Iterator:{interface 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Void #close() }}
Message:{interface implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable, This1.Concept.Named
class method 
This1.S kind() 
method 
This1.S text() 
method 
This0.Opt responseOf() 
read method 
class This0 class() 
Opt:{
class method 
mut This0 #mutK(This0.TOpt that) 
class method 
This0 #new(This0.TOpt that) 
mut method 
This0.TOpt #that() 
read method 
This0.TOpt that() 
TOpt:{interface 
method 
This2 get() }
TEmpty:{implements This1.TOpt, This1.TOpt
class method 
mut This0 #mutK() 
class method 
This0 #apply() }
TOf:{implements This1.TOpt
class method 
mut This0 #mutK(This2 that) 
class method 
This0 #apply(This2 that) 
mut method 
This2 #that() 
read method 
This2 that() }
method 
This1 #tilde() 
method 
This2.Bool isPresent() 
class method 
This0 #apply() 
class method 
This0 #apply(This1 that) }
EqualMessages:{
class method 
This2.Bool #apply(This1 that, This1 other) }
$:{
class method 
mut This0 #mutK() 
class method 
This0 #apply() 
class method 
Library #leftleft(Library that) 
class method 
Library messageTrait() }}
Guard:{/* exception as Guard bureocracy, error as Guard detection
-is a check guarenteed to be performed, program logic can rely on this being enforced.
  as exceptions, Guards objects are a way to report/guard complex operations,
 where checking the shape of the input can be unconvenient.
as errors, they represent precondition violations.
Turning an exception Guard into an error Guard
 is equivalent of declaring that such misuse should not happen (blame on the caller),
 still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed
*/interface implements This1.Message/*all other guards should implement this one
*/
Operation:{implements This1, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
Parameter:{implements This1, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
Precondition:{implements This1, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
ParseFail:{interface implements This1, This1}}
System:{
Guard:{/* implements Outer.Guard soon (remove "interface" for a bad translation bug: This1_System_Guard is not abstract and does not override abstract method MtoS()
*/interface implements This2.Guard
PluginFailure:{implements This1, This3.Message
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #bangequal(This0 that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }
method 
mut This3.S.SConcat #seqBuilder() }}}
Assert:{interface implements This1.Message
NotImplementedYet:{implements This1, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
ObservedBug:{implements This1, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
CodeNotReachable:{implements This1, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
AssertMessage:{implements This1, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }}
Strings:{implements This1.Concept.Equals
class method 
mut This0 #mutK(mut This1.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This1.Collections.MutListAny inner) 
mut method 
mut This1.Collections.MutListAny #inner() 
read method 
read This1.Collections.MutListAny inner() 
class method 
This0 #immK(This1.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1.S that) 
class method 
This1.S cast(Any that) 
read method 
This1.S val(This1.N that) 
read method 
This1.S left() 
read method 
This1.S right() 
mut method 
Void #apply(This1.N that, This1.S val) 
mut method 
Void add(This1.N that, This1.S val) 
mut method 
Void add(This1.S right) 
mut method 
Void add(This1.S left) 
mut method 
Void remove(This1.N that) 
mut method 
Void left(This1.S that) 
mut method 
Void right(This1.S that) 
method 
This0 without(This1.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This1.N that, This1.S val) 
method 
This0 with(This1.N that, This1.S val) 
read method 
mut This0 reverse() 
read method 
This1.N size() 
read method 
This1.Bool isEmpty() 
method 
This0 #plus(This1.S that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This1.N from, This1.N to, This1.N stopOk) 
read method 
lent This0.IteratorVal vals(This1.N stopOk) 
read method 
lent This0.IteratorVal vals(This1.N from, This1.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This2.Collections.MutListAny that() 
read method 
This2.N from() 
mut method 
Void from(This2.N that) 
read method 
This2.N to() 
read method 
This2.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This2.Collections.MutListAny that, This2.N from, This2.N to, This2.N stopOk) 
class method 
lent This0 #apply(read This2.Collections.MutListAny that, This2.N from, This2.N to, This2.N stopOk) 
mut method 
read This2.Collections.MutListAny #that() 
mut method 
This2.N #from() 
mut method 
This2.N #to() 
mut method 
This2.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This1.N from, This1.N to, This1.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This1.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This1.N from, This1.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This2.Collections.MutListAny that() 
read method 
This2.N from() 
mut method 
Void from(This2.N that) 
read method 
This2.N to() 
read method 
This2.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This2.Collections.MutListAny that, This2.N from, This2.N to, This2.N stopOk) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny that, This2.N from, This2.N to, This2.N stopOk) 
mut method 
mut This2.Collections.MutListAny #that() 
mut method 
This2.N #from() 
mut method 
This2.N #to() 
mut method 
This2.N #stopOk() 
mut method 
Void inner(This2.S that) }
read method 
This1.Bool contains(This1.S that) 
method 
This0 withoutAll(This1.S that) 
method 
This0 #less(This1.S that) 
method 
This0 #lessless(This0 that) 
read method 
This1.Bool #bangequal(read This0 that) 
read method 
This1.Bool #equalequal(read This0 that) }
Debug:{
class method 
Void #apply(read This1.Concept.ToS that) 
class method 
Void #apply(Library lib) 
class method 
Void #apply(This1.Concept.ToS fileName, This1.Concept.ToS content) 
class method 
This1.S readFile(This1.Concept.ToS fileName) 
class method 
This1.S localToAbsolute(This1.Concept.ToS fileName) 
class method 
Void test(This1.Concept.ToS that, This1.Concept.ToS expected, This1.S message) 
class method 
Void test(This1.Concept.ToS that, This1.Concept.ToS expected) }
ConceptMap:{interface 
method 
This1.Alu _Alu() 
method 
This1.ExitCode _ExitCode() 
method 
This1.Bool _Bool() 
method 
This1.N _N() 
method 
This1.S _S() 
method 
This1.Concept _Concept() 
method 
This1.Message _Message() 
method 
This1.Guard _Guard() 
method 
This1.System _System() 
method 
This1.Assert _Assert() 
method 
This1.Strings _Strings() 
method 
This1.Debug _Debug() 
method 
This0 _ConceptMap() 
method 
This1.Url _Url() 
method 
This1.Path _Path() 
method 
This1.Selector _Selector() 
method 
This1.MetaGuard _MetaGuard() 
method 
This1.Introspection _Introspection() 
method 
This1.Refactor _Refactor() 
method 
This1.Optimize _Optimize() 
method 
This1.Opt _Opt() 
method 
This1.Extends _Extends() 
method 
This1.Use _Use() 
method 
This1.Default _Default() 
method 
This1.Collections _Collections() 
method 
This1.K _K() 
method 
This1.DeployTowel _DeployTowel() 
method 
This1.PreferentialComposition _PreferentialComposition() 
method 
This1.Load _Load() }
Url:{/*ParseFailure:Message:S[]<<{ implements Guard} no need, related to invariant?
*/implements This1.Concept.ToS
class method /* if you do not implement it, it is a constructor?
*/This0 fromS(read This1.Concept.ToS that) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
mut This0 #mutK(This1.S inner) 
class method 
This0 #apply(This1.S inner) 
mut method 
This1.S #inner() 
read method 
This1.S inner() 
method 
Library binaryRepr() }
Path:{implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named
class method 
This0 fromDocInternalizedS(This1.S that) 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(Library binaryRepr) 
class method 
Any parseError(This1.S that) 
class method 
Any parseError(This1.S that, This1.Message cause) 
method 
Library binaryRepr() 
method 
This1.Bool #bangequal(This0 that) 
method 
This1.Bool #equalequal(This0 that) 
method 
This0 #plusplus(This0 that) 
method 
mut This1.Strings names() 
class method 
This0 from(read This1.Strings names) 
class method 
This0 fresh(This1.S name) 
class method 
This0 fresh() 
class method 
This0 fresh(This0 path) 
ParseFail:{implements This2.Guard.ParseFail, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }}
Selector:{implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(Library binaryRepr) 
class method 
Any parseError(This1.S that) 
class method 
This0 from(This1.S name, This1.Strings names) 
method 
This1.S nameAsField() 
method 
This1.S prefixAsField() 
method 
Library binaryRepr() 
method 
This1.Bool #bangequal(This0 that) 
method 
This1.Bool #equalequal(This0 that) 
method 
This1.Bool isOperator() 
method 
This1.S name() 
method 
This1.Strings names() 
class method 
This0 fresh(This0 that) 
ParseFail:{implements This2.Guard.ParseFail, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }}
MetaGuard:{interface implements This1.Guard
RecordWrapper:/* can not be private, I need to Patch it.
*/{
class method 
This2.S libToS(Library that) 
class method 
Library recordWrapperToSTrait() 
class method 
Library recordWrapperTrait() 
class method 
Library #leftleft(Library that) }
SourceUnfit:{implements This1, This1
class method 
This2.S libName() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
IncoherentRedirectMapping:{implements This1, This1
class method 
This2.S libName() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
ClassClash:{implements This1, This1
class method 
This2.S libName() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
MethodClash:{implements This1, This1
class method 
This2.S libName() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
InvalidOnTopLevel:{implements This1, This1
class method 
This2.S libName() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
PrivacyCoupuled:{implements This1, This1
class method 
This2.S libName() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
ParameterMismatch:{implements This1, This1
class method 
This2.S libName() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 
method 
Library lib() 
class method 
mut This0 #mut(fwd This2.Introspection.Record record, fwd Library lib) }
MemberUnavailable:{interface implements This1}
DispatchMemberUnavailable:{
class method 
Void #apply(Library that) exception This1.MemberUnavailable }
NestedClassUnavailable:{implements This1.MemberUnavailable, This1
class method 
mut This0 #mutK(This2.Path path, This2.Bool isPrivate) 
class method 
This0 #apply(This2.Path path, This2.Bool isPrivate) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Bool #isPrivate() 
read method 
This2.Bool isPrivate() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
class method 
This2.S libName() 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 }
MethodUnavailable:{implements This1.MemberUnavailable, This1
class method 
mut This0 #mutK(This2.Path path, This2.Selector selector, This2.Bool isPrivate) 
class method 
This0 #apply(This2.Path path, This2.Selector selector, This2.Bool isPrivate) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Selector #selector() 
read method 
This2.Selector selector() 
mut method 
This2.Bool #isPrivate() 
read method 
This2.Bool isPrivate() 
class method 
This0 #apply(This2.Introspection.Record record, Library lib) 
class method 
This2.S libName() 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
Void #apply(Library lift) exception This0 }}
Introspection:{/*findMeIntrospection
*/
class method 
This0.NestedClass #apply(Library lib) 
class method 
This0.NestedClass #apply(Library lib, This1.Path path) exception This1.MetaGuard.NestedClassUnavailable 
class method 
This0.NestedClass #apply(class Any clazz) 
class method 
This0.NestedClass #apply(class Any clazz, This1.Path path) 
MirrorPr:{interface implements This2.Concept.ToS
method 
This1.NestedClass introspectReport(fwd This1.NestedClass root, This2.Path path) exception This2.MetaGuard.NestedClassUnavailable 
method 
This1.Member introspectReportMember(fwd This1.NestedClass root, This2.Path path, This2.N memberN) exception This2.MetaGuard.MemberUnavailable, Void 
method 
This1.Type introspectReportType(fwd This1.NestedClass root, This2.Path path, This2.N memberN, This2.N typeN) exception This2.MetaGuard.MemberUnavailable, Void 
method 
This2.S introspectDocAsString(This2.Path path) exception This2.MetaGuard.NestedClassUnavailable 
method 
This2.S introspectDocAsString(This2.Path path, This2.N annotationN) exception This2.MetaGuard.NestedClassUnavailable, Void 
method 
class Any introspectDocPath(This2.Path path, This2.N annotationN) exception This2.MetaGuard.NestedClassUnavailable, Void 
Lib:{implements This1
class method 
mut This0 #mutK(Library lib) 
class method 
This0 #apply(Library lib) 
mut method 
Library #lib() 
read method 
Library lib() }
Class:{implements This1
class method 
mut This0 #mutK(class Any lib) 
class method 
This0 #apply(class Any lib) 
mut method 
class Any #lib() 
read method 
class Any lib() }}
Doc:{implements This2.Concept.ToS, This2.Concept.Named
Annotation:{implements This3.Concept.ToS, This3.Concept.Named
class method 
mut This0 #mutK(Library _binaryRepr, This3.S text, This3.N index) 
class method 
This0 #apply(Library _binaryRepr, This3.S text, This3.N index) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
mut method 
This3.S #text() 
read method 
This3.S text() 
mut method 
This3.N #index() 
read method 
This3.N index() 
method 
class Any referredClass() 
method 
This3.Bool hasReferredClass() }
Annotations:{
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1.Annotation that) 
class method 
This1.Annotation cast(Any that) 
read method 
This1.Annotation val(This3.N that) 
read method 
This1.Annotation left() 
read method 
This1.Annotation right() 
mut method 
Void #apply(This3.N that, This1.Annotation val) 
mut method 
Void add(This3.N that, This1.Annotation val) 
mut method 
Void add(This1.Annotation right) 
mut method 
Void add(This1.Annotation left) 
mut method 
Void remove(This3.N that) 
mut method 
Void left(This1.Annotation that) 
mut method 
Void right(This1.Annotation that) 
method 
This0 without(This3.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This3.N that, This1.Annotation val) 
method 
This0 with(This3.N that, This1.Annotation val) 
read method 
mut This0 reverse() 
read method 
This3.N size() 
read method 
This3.Bool isEmpty() 
method 
This0 #plus(This1.Annotation that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to, This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Annotation #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to, This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Annotation #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() 
mut method 
Void inner(This2.Annotation that) }}
class method 
This0 #apply(Library that) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
Library binaryRepr() 
method 
This0.Annotations annotations() }
Record:{
class method 
mut This0 #mutK(This1.MirrorPr that) 
class method 
This0 #apply(This1.MirrorPr that) 
mut method 
This1.MirrorPr #that() 
read method 
This1.MirrorPr that() 
class method 
This0 #apply(class Any clazz) 
class method 
This0 #apply(Library lib) 
method 
Void dbg() 
method 
mut This2.S.SBuilder #builder() 
method 
This2.S #from(This2.S.SBuilder builder) 
method 
This1.Doc docOf(This2.Path path) 
RootForMember:/* toPutAs private
*/{interface 
method 
This2.Member #apply(fwd This2.NestedClass root) }
RootForNested:/* toPutAs private
*/{implements This1.RootForMember
class method 
mut This0 #mutK(This3.Path path, This2.MirrorPr mirror, This1 _report) 
class method 
This0 #apply(This3.Path path, This2.MirrorPr mirror, This1 _report) 
mut method 
This3.Path #path() 
read method 
This3.Path path() 
mut method 
This2.MirrorPr #mirror() 
read method 
This2.MirrorPr mirror() 
mut method 
This1 #_report() 
read method 
This1 _report() }
RootForMethod:/* toPutAs private
*/{implements This1.RootForMember
class method 
mut This0 #mutK(This3.Path path, This3.N memberN, This1 _report) 
class method 
This0 #apply(This3.Path path, This3.N memberN, This1 _report) 
mut method 
This3.Path #path() 
read method 
This3.Path path() 
mut method 
This3.N #memberN() 
read method 
This3.N memberN() 
mut method 
This1 #_report() 
read method 
This1 _report() }
class method 
This1.Member dispatch(fwd This1.NestedClass root, This2.Path path, This1.MirrorPr mirror, This2.N memberN, Library record) }
Member:{interface implements This2.Concept.ToS, This2.Concept.Named, This2.Concept.Equals}
Members:{implements This2.Concept.Equals
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1.Member that) 
class method 
This1.Member cast(Any that) 
read method 
This1.Member val(This2.N that) 
read method 
This1.Member left() 
read method 
This1.Member right() 
mut method 
Void #apply(This2.N that, This1.Member val) 
mut method 
Void add(This2.N that, This1.Member val) 
mut method 
Void add(This1.Member right) 
mut method 
Void add(This1.Member left) 
mut method 
Void remove(This2.N that) 
mut method 
Void left(This1.Member that) 
mut method 
Void right(This1.Member that) 
method 
This0 without(This2.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This2.N that, This1.Member val) 
method 
This0 with(This2.N that, This1.Member val) 
read method 
mut This0 reverse() 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() 
method 
This0 #plus(This1.Member that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to, This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Member #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to, This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Member #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() 
mut method 
Void inner(This2.Member that) }
read method 
This2.Bool contains(This1.Member that) 
method 
This0 withoutAll(This1.Member that) 
method 
This0 #less(This1.Member that) 
method 
This0 #lessless(This0 that) 
read method 
This2.Bool #bangequal(read This0 that) 
read method 
This2.Bool #equalequal(read This0 that) }
Method:{implements This1.Member, This2.Concept.Equals
method 
This2.Bool #equalequal(This0 that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This1.Doc doc() 
method 
This1.Mdf thisMdf() 
method /* invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
*/This2.Path pathFromRoot() 
method 
This2.Selector selector() 
method 
This1.MethodKind methodKind() 
method 
This2.S allAsString() 
method 
This1.Type returnType() 
method 
This1.Types exceptions() 
method 
This1.Types parameterTypes() 
method 
This2.Bool isPrivate() 
method 
This1.NestedClass root() }
Methods:{implements This2.Concept.Equals
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1.Method that) 
class method 
This1.Method cast(Any that) 
read method 
This1.Method val(This2.N that) 
read method 
This1.Method left() 
read method 
This1.Method right() 
mut method 
Void #apply(This2.N that, This1.Method val) 
mut method 
Void add(This2.N that, This1.Method val) 
mut method 
Void add(This1.Method right) 
mut method 
Void add(This1.Method left) 
mut method 
Void remove(This2.N that) 
mut method 
Void left(This1.Method that) 
mut method 
Void right(This1.Method that) 
method 
This0 without(This2.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This2.N that, This1.Method val) 
method 
This0 with(This2.N that, This1.Method val) 
read method 
mut This0 reverse() 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() 
method 
This0 #plus(This1.Method that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to, This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Method #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to, This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Method #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() 
mut method 
Void inner(This2.Method that) }
read method 
This2.Bool contains(This1.Method that) 
method 
This0 withoutAll(This1.Method that) 
method 
This0 #less(This1.Method that) 
method 
This0 #lessless(This0 that) 
read method 
This2.Bool #bangequal(read This0 that) 
read method 
This2.Bool #equalequal(read This0 that) }
NestedClass:{/*findMeNestedClass
*/implements This1.Member, This2.Concept.Equals
method 
This2.Bool #equalequal(This0 that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This0 root() 
method /*error for This
*/This1.Doc nestedDoc() 
method /*of the library literal
*/This1.Doc doc() 
method 
This2.Path pathFromRoot() 
method 
This2.Bool hasExternalType() 
method 
class Any externalType() 
method 
This2.S externalTypeToS() 
method 
This1.ClassKind classKind() 
method 
This2.S allAsString() 
method 
This1.Members members() 
method 
This1.Methods methods() 
method 
This1.NestedClasses nestedClasses() 
method 
This1.NestedClasses transitivelyNestedClasses() 
method 
This1.Types implementedInterfaces() 
method 
This1.Types transitivelyImplementedInterfaces() 
method 
This2.Bool implements(This0 that) 
method 
This1.Methods stateCandidate() 
method 
This1.Methods state() 
method 
This1.Method method(This2.Selector that) exception This2.MetaGuard.MethodUnavailable 
method 
This2.Bool has(This2.Selector selector) 
method 
This0 nestedClassFromRoot(This2.Path that) exception This2.MetaGuard.NestedClassUnavailable 
method 
This2.Bool has(This2.Path fromRoot) 
method 
This2.Bool isPrivate() }
NestedClasses:{implements This2.Concept.Equals
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1.NestedClass that) 
class method 
This1.NestedClass cast(Any that) 
read method 
This1.NestedClass val(This2.N that) 
read method 
This1.NestedClass left() 
read method 
This1.NestedClass right() 
mut method 
Void #apply(This2.N that, This1.NestedClass val) 
mut method 
Void add(This2.N that, This1.NestedClass val) 
mut method 
Void add(This1.NestedClass right) 
mut method 
Void add(This1.NestedClass left) 
mut method 
Void remove(This2.N that) 
mut method 
Void left(This1.NestedClass that) 
mut method 
Void right(This1.NestedClass that) 
method 
This0 without(This2.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This2.N that, This1.NestedClass val) 
method 
This0 with(This2.N that, This1.NestedClass val) 
read method 
mut This0 reverse() 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() 
method 
This0 #plus(This1.NestedClass that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to, This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.NestedClass #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to, This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.NestedClass #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() 
mut method 
Void inner(This2.NestedClass that) }
read method 
This2.Bool contains(This1.NestedClass that) 
method 
This0 withoutAll(This1.NestedClass that) 
method 
This0 #less(This1.NestedClass that) 
method 
This0 #lessless(This0 that) 
read method 
This2.Bool #bangequal(read This0 that) 
read method 
This2.Bool #equalequal(read This0 that) }
Type:{implements This2.Concept.ToS, This2.Concept.Named
method 
This2.S allAsString() 
method 
This2.S strRepr() 
method 
This1.TypeKind typeKind() 
method 
This1.Mdf mdf() 
method 
This1.NestedClass referencedPath() 
method 
This1.NestedClass resolvedReferencedPath() 
method 
This2.Bool partial() 
method 
This2.Bool resolvedPartial() 
method 
This2.S suffix() 
method 
This1.Doc doc() 
method 
This2.Bool isInterface() 
method 
This2.Bool isAny() 
method 
This2.Bool isVoid() 
method 
This2.Bool isLibrary() 
method 
This2.Bool isPrimitive() }
Types:{
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1.Type that) 
class method 
This1.Type cast(Any that) 
read method 
This1.Type val(This2.N that) 
read method 
This1.Type left() 
read method 
This1.Type right() 
mut method 
Void #apply(This2.N that, This1.Type val) 
mut method 
Void add(This2.N that, This1.Type val) 
mut method 
Void add(This1.Type right) 
mut method 
Void add(This1.Type left) 
mut method 
Void remove(This2.N that) 
mut method 
Void left(This1.Type that) 
mut method 
Void right(This1.Type that) 
method 
This0 without(This2.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This2.N that, This1.Type val) 
method 
This0 with(This2.N that, This1.Type val) 
read method 
mut This0 reverse() 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() 
method 
This0 #plus(This1.Type that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to, This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Type #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to, This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Type #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() 
mut method 
Void inner(This2.Type that) }}
Mdf:{/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
*/implements This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable, This2.Concept.Named, This2.Concept.ToS/*may be Parsable?
*/
ParseFail:{implements This3.Guard.ParseFail, This3.Message
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #bangequal(This0 that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }
method 
mut This3.S.SConcat #seqBuilder() }
List:{implements This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
This1 val(This3.N that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.N that, This1 val) 
mut method 
Void add(This3.N that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void remove(This3.N that) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
method 
This0 without(This3.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This3.N that, This1 val) 
method 
This0 with(This3.N that, This1 val) 
read method 
mut This0 reverse() 
read method 
This3.N size() 
read method 
This3.Bool isEmpty() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to, This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to, This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() 
mut method 
Void inner(This2 that) }
read method 
This3.Bool contains(This1 that) 
method 
This0 withoutAll(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
read method 
This3.Bool #bangequal(read This0 that) 
read method 
This3.Bool #equalequal(read This0 that) }
read method 
class This0 class() 
read method 
This2.Bool #equalequal(read This0 that) 
read method 
This2.Bool #bangequal(read This0 that) 
class method 
mut This0 #mutK(This2.N that) 
class method 
This0 #apply(This2.N that) 
mut method 
This2.N #that() 
read method 
This2.N that() 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _Capsule() 
class method 
This0 _Mutable() 
class method 
This0 _Lent() 
class method 
This0 _Readable() 
class method 
This0 _Immutable() 
class method 
This0 _Class() 
method 
This2.Bool isCapsule() 
method 
This2.Bool isMutable() 
method 
This2.Bool isLent() 
method 
This2.Bool isReadable() 
method 
This2.Bool isImmutable() 
method 
This2.Bool isClass() }
MethodKind:{/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
*/implements This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable, This2.Concept.Named, This2.Concept.ToS/*may be Parsable?
*/
ParseFail:{implements This3.Guard.ParseFail, This3.Message
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #bangequal(This0 that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }
method 
mut This3.S.SConcat #seqBuilder() }
List:{implements This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
This1 val(This3.N that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.N that, This1 val) 
mut method 
Void add(This3.N that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void remove(This3.N that) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
method 
This0 without(This3.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This3.N that, This1 val) 
method 
This0 with(This3.N that, This1 val) 
read method 
mut This0 reverse() 
read method 
This3.N size() 
read method 
This3.Bool isEmpty() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to, This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to, This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() 
mut method 
Void inner(This2 that) }
read method 
This3.Bool contains(This1 that) 
method 
This0 withoutAll(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
read method 
This3.Bool #bangequal(read This0 that) 
read method 
This3.Bool #equalequal(read This0 that) }
read method 
class This0 class() 
read method 
This2.Bool #equalequal(read This0 that) 
read method 
This2.Bool #bangequal(read This0 that) 
class method 
mut This0 #mutK(This2.N that) 
class method 
This0 #apply(This2.N that) 
mut method 
This2.N #that() 
read method 
This2.N that() 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _InterfaceImplementedMethod() 
class method 
This0 _ImplementedMethod() 
class method 
This0 _AbstractMethod() }
ClassKind:{/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
*/implements This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable, This2.Concept.Named, This2.Concept.ToS/*may be Parsable?
*/
ParseFail:{implements This3.Guard.ParseFail, This3.Message
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #bangequal(This0 that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }
method 
mut This3.S.SConcat #seqBuilder() }
List:{implements This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
This1 val(This3.N that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.N that, This1 val) 
mut method 
Void add(This3.N that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void remove(This3.N that) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
method 
This0 without(This3.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This3.N that, This1 val) 
method 
This0 with(This3.N that, This1 val) 
read method 
mut This0 reverse() 
read method 
This3.N size() 
read method 
This3.Bool isEmpty() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to, This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to, This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() 
mut method 
Void inner(This2 that) }
read method 
This3.Bool contains(This1 that) 
method 
This0 withoutAll(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
read method 
This3.Bool #bangequal(read This0 that) 
read method 
This3.Bool #equalequal(read This0 that) }
read method 
class This0 class() 
read method 
This2.Bool #equalequal(read This0 that) 
read method 
This2.Bool #bangequal(read This0 that) 
class method 
mut This0 #mutK(This2.N that) 
class method 
This0 #apply(This2.N that) 
mut method 
This2.N #that() 
read method 
This2.N that() 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _Interface() 
class method 
This0 _ClosedClass() 
class method 
This0 _OpenClass() 
class method 
This0 _Template() 
class method 
This0 _FreeTemplate() }
TypeKind:{/*Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
may disappear
*/implements This2.Concept.ToS, This2.Concept.Equals, This2.Concept.Classable, This2.Concept.Named, This2.Concept.ToS/*may be Parsable?
*/
ParseFail:{implements This3.Guard.ParseFail, This3.Message
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #bangequal(This0 that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }
method 
mut This3.S.SConcat #seqBuilder() }
List:{implements This3.Concept.Equals
class method 
mut This0 #mutK(mut This3.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny inner) 
mut method 
mut This3.Collections.MutListAny #inner() 
read method 
read This3.Collections.MutListAny inner() 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1 that) 
class method 
This1 cast(Any that) 
read method 
This1 val(This3.N that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.N that, This1 val) 
mut method 
Void add(This3.N that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void remove(This3.N that) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
method 
This0 without(This3.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This3.N that, This1 val) 
method 
This0 with(This3.N that, This1 val) 
read method 
mut This0 reverse() 
read method 
This3.N size() 
read method 
This3.Bool isEmpty() 
method 
This0 #plus(This1 that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to, This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N stopOk) 
read method 
lent This0.IteratorVal vals(This3.N from, This3.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
read This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to, This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This3.N from, This3.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This4.Collections.MutListAny that() 
read method 
This4.N from() 
mut method 
Void from(This4.N that) 
read method 
This4.N to() 
read method 
This4.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.N from, This4.N to, This4.N stopOk) 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
This4.N #from() 
mut method 
This4.N #to() 
mut method 
This4.N #stopOk() 
mut method 
Void inner(This2 that) }
read method 
This3.Bool contains(This1 that) 
method 
This0 withoutAll(This1 that) 
method 
This0 #less(This1 that) 
method 
This0 #lessless(This0 that) 
read method 
This3.Bool #bangequal(read This0 that) 
read method 
This3.Bool #equalequal(read This0 that) }
read method 
class This0 class() 
read method 
This2.Bool #equalequal(read This0 that) 
read method 
This2.Bool #bangequal(read This0 that) 
class method 
mut This0 #mutK(This2.N that) 
class method 
This0 #apply(This2.N that) 
mut method 
This2.N #that() 
read method 
This2.N that() 
method 
This2.S name() 
class method 
This2.Strings names() 
class method 
This0 fromS(This2.S that) 
class method 
This0 _Normal() 
class method 
This0 _Alias() 
class method 
This0 _AliasUnresolvable() }}
Refactor:{
class method 
Library compose(Library left, Library right) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash 
class method 
Void checkTargetExists(Library that, This1.Path path) exception This1.MetaGuard.NestedClassUnavailable 
RedirectType:{
class method 
mut This0 #mutK(This2.Path that, This2.Introspection.Type to) 
class method 
This0 #apply(This2.Path that, This2.Introspection.Type to) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
This2.Introspection.Type #to() 
read method 
This2.Introspection.Type to() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.InvalidOnTopLevel, This2.MetaGuard.SourceUnfit, This2.MetaGuard.MethodClash, This2.MetaGuard.ClassClash, This2.MetaGuard.IncoherentRedirectMapping }
Redirect:{
class method 
mut This0 #mutK(This2.Path that, class Any to) 
class method 
This0 #apply(This2.Path that, class Any to) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
class Any #to() 
read method 
class Any to() 
class method 
This1.RedirectType #apply(This2.Path that, This2.Introspection.Type toType) 
method 
Library #leftleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.InvalidOnTopLevel, This2.MetaGuard.SourceUnfit, This2.MetaGuard.MethodClash, This2.MetaGuard.IncoherentRedirectMapping }
RenameSelector:{
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Selector to) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Selector to) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Selector #to() 
read method 
This2.Selector to() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.MethodClash }
RenamePath:{
class method 
mut This0 #mutK(This2.Path that, This2.Path to) 
class method 
This0 #apply(This2.Path that, This2.Path to) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
This2.Path #to() 
read method 
This2.Path to() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.MethodClash, This2.MetaGuard.ClassClash }
RemoveImplementationSelector:{
class method 
mut This0 #mutK(This2.Selector that, This2.Path of) 
class method 
This0 #apply(This2.Selector that, This2.Path of) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MemberUnavailable }
MoveImplementationSelector:{
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Selector to) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Selector to) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Selector #to() 
read method 
This2.Selector to() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.MethodClash }
RemoveImplementationPath:{
class method 
mut This0 #mutK(This2.Path that) 
class method 
This0 #apply(This2.Path that) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.PrivacyCoupuled }
AddDocumentationSelector:{
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Introspection.Doc doc) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Introspection.Doc doc) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Introspection.Doc #doc() 
read method 
This2.Introspection.Doc doc() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MemberUnavailable }
AddDocumentationPath:{
class method 
mut This0 #mutK(This2.Path that, This2.Introspection.Doc doc) 
class method 
This0 #apply(This2.Path that, This2.Introspection.Doc doc) 
mut method 
This2.Path #that() 
read method 
This2.Path that() 
mut method 
This2.Introspection.Doc #doc() 
read method 
This2.Introspection.Doc doc() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.InvalidOnTopLevel }
MakePrivatePath:{
class method /*Can be called Hide
*/mut This0 #mutK(This2.Path that) 
class method /*Can be called Hide
*/This0 #apply(This2.Path that) 
mut method /*Can be called Hide
*/This2.Path #that() 
read method /*Can be called Hide
*/This2.Path that() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.InvalidOnTopLevel }
MakePrivateSelector:{
class method 
mut This0 #mutK(This2.Selector that, This2.Path of) 
class method 
This0 #apply(This2.Selector that, This2.Path of) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MemberUnavailable }
SumMethods:{
class method 
mut This0 #mutK(This2.Selector that, This2.Selector and, This2.Path of, This2.S over, This2.Selector to) 
class method 
This0 #apply(This2.Selector that, This2.Selector and, This2.Path of, This2.S over, This2.Selector to) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Selector #and() 
read method 
This2.Selector and() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.S #over() 
read method 
This2.S over() 
mut method 
This2.Selector #to() 
read method 
This2.Selector to() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MemberUnavailable, This2.MetaGuard.MethodClash, This2.MetaGuard.ParameterMismatch }
MakeMethod:{
class method 
mut This0 #mutK(This2.Selector that, This2.Path of, This2.Introspection.Mdf.List mdfs, This2.N exceptionN) 
class method 
This0 #apply(This2.Selector that, This2.Path of, This2.Introspection.Mdf.List mdfs, This2.N exceptionN) 
mut method 
This2.Selector #that() 
read method 
This2.Selector that() 
mut method 
This2.Path #of() 
read method 
This2.Path of() 
mut method 
This2.Introspection.Mdf.List #mdfs() 
read method 
This2.Introspection.Mdf.List mdfs() 
mut method 
This2.N #exceptionN() 
read method 
This2.N exceptionN() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.MethodClash }
Tools:{
class method 
This2.S getToSOrName(read Any that) 
CanNotSpecializeOperation:{implements This3.MetaGuard, This3.Message
class method 
mut This0 #mutK(This3.S _text, This3.Message.Opt cause) 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
mut method 
This3.S #_text() 
read method 
This3.S _text() 
mut method 
This3.Message.Opt #cause() 
read method 
This3.Message.Opt cause() 
method 
This0 #apply(This3.Message that) 
method 
This3.Bool #bangequal(This0 that) 
method 
This3.Bool #equalequal(This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This4.S that) 
class method 
This0 #apply(This4.S that) 
mut method 
This4.S #that() 
read method 
This4.S that() 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }
method 
mut This3.S.SConcat #seqBuilder() }
class method 
Library specializeField(This2.Selector selector, This2.Introspection.Type type, Library forReadable, Library forClass) exception This0.CanNotSpecializeOperation 
class method /* maybe private
*/Library specialize(Library that, This2.Selector selector, This2.Introspection.Type type) exception This0.CanNotSpecializeOperation 
class method /* maybe private
*/Library readToImm(Library that) exception This0.CanNotSpecializeOperation }}
Optimize:{
RemoveUnreachableCode:{
class method 
Library #leftleft(Library that) }}
Opt:{
class method 
Library #apply(class Any that) }
Extends:{/*members of each produced class
*/implements This1.PreferentialComposition.$, This1.PreferentialComposition.$
class method 
mut This1.PreferentialComposition.Libs #seqBuilder() 
class method 
This0 #from(This1.PreferentialComposition.Libs seqBuilder) 
method 
Library #leftleft(Library that) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash 
method 
This0 #plusplus(This0 that) 
method 
Library foldLeft(Library resolver) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash }
Use:{/*members of each produced class
*/implements This1.PreferentialComposition.$, This1.PreferentialComposition.$
class method 
mut This1.PreferentialComposition.Libs #seqBuilder() 
class method 
This0 #from(This1.PreferentialComposition.Libs seqBuilder) 
method 
Library #leftleft(Library that) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash 
method 
This0 #plusplus(This0 that) 
method 
Library foldLeft(Library resolver) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash }
Default:{
DecorationUnfeasable:{implements This2.MetaGuard, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
Parsable:{
class method 
Library #leftleft(Library that) exception This1.DecorationUnfeasable }
SealState:{/* how to specify which factory to keep out? what getters
*/
class method 
Library #leftleft(Library that) }
DataFromToS:{/* in the future we can add also hashCode and > =>
*/
class method 
Library #leftleft(Library that) exception This1.DecorationUnfeasable }
Equals:{
class method 
Library #leftleft(Library that) exception This1.DecorationUnfeasable }
Named:{
class method 
Library #leftleft(Library that) exception This1.DecorationUnfeasable }}
Collections:{
IterationFailure:{implements This2.Guard, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
CollectionErrors:{
class method 
Any negBound(This2.N that, This1.MutListAny list) 
class method 
Any outBound(This2.N that, This1.MutListAny list) 
class method 
Any cast() 
class method 
Any iterationTermination(This2.N from, This2.N stopOk, This2.N size) }
MutListAny:{
class method 
mut This0 #mutK(This0.Cell head, This2.N size) 
class method 
mut This0 #apply(This0.Cell head, This2.N size) 
mut method 
Void head(This0.Cell that) 
mut method 
This0.Cell #head() 
read method 
This0.Cell head() 
mut method 
Void size(This2.N that) 
mut method 
This2.N #size() 
read method 
This2.N size() 
Cell:{interface implements Any
method 
Any get(This3.N that) 
method 
This0 set(This3.N that, Any val, This3.Bool add) 
method 
This0 remove(This3.N that) }
CellNext:{implements This1.Cell
class method 
mut This0 #mutK(Any val, This1.Cell next) 
class method 
This0 #apply(Any val, This1.Cell next) 
mut method 
Any #val() 
read method 
Any val() 
mut method 
This1.Cell #next() 
read method 
This1.Cell next() }
CellEnd:{implements This1.Cell
class method 
mut This0 #mutK() 
class method 
This0 #apply() }
class method 
mut This0 empty() 
read method 
Any val(This2.N that) 
mut method 
Void #apply(This2.N that, Any val) 
mut method 
Void add(This2.N that, Any val) 
mut method 
Void remove(This2.N that) 
method 
This0 without(This2.N that) 
method 
This0 withAlso(This2.N that, Any val) 
method 
This0 with(This2.N that, Any val) 
read method 
Void checkBound(This2.N that) 
read method 
Void checkBoundAdd(This2.N that) }
class method 
Library vector(class Any of) 
class method 
Library vector(class Any ofEq) 
VectorTrait:{
class method 
Library #apply() }
CodeEq:{
class method 
Library #apply() }}
K:{
$:{
class method 
mut This0 #mutK(This2.S names, This2.Bool isFwd, This2.S mutK, This2.S lentK, This2.S readK, This2.S immK) 
class method 
This0 #apply(This2.S names, This2.Bool isFwd, This2.S mutK, This2.S lentK, This2.S readK, This2.S immK) 
mut method 
This2.S #names() 
read method 
This2.S names() 
mut method 
This2.Bool #isFwd() 
read method 
This2.Bool isFwd() 
mut method 
This2.S #mutK() 
read method 
This2.S mutK() 
mut method 
This2.S #lentK() 
read method 
This2.S lentK() 
mut method 
This2.S #readK() 
read method 
This2.S readK() 
mut method 
This2.S #immK() 
read method 
This2.S immK() 
method 
This0 fwd() 
method 
Library #leftleft(Library that) exception This2.MetaGuard.MethodUnavailable/*if names are wrong
MetaGuard.NestedClassUnavailable//no since we use Path"This"
*/ }
class method 
This0.$#from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
Library #leftleft(Library that) }
DeployTowel:{
class method /*(Any fileName)
*/mut This0 #mutK(This1.Url fileName) 
class method /*(Any fileName)
*/This0 #apply(This1.Url fileName) 
mut method /*(Any fileName)
*/This1.Url #fileName() 
read method /*(Any fileName)
*/This1.Url fileName() 
class method 
Library binaryReprFrom(Library lib) 
method 
Library #leftleft(Library that) }
PreferentialComposition:{/*members of PreferentialComposition
*/
$:{interface 
method 
Library solveConflict(Library that, This1.SrcDest location) }
SrcDest:{
class method 
mut This0 #mutK(This2.Path path, This2.Selector src, This2.Selector dest) 
class method 
This0 #apply(This2.Path path, This2.Selector src, This2.Selector dest) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Selector #src() 
read method 
This2.Selector src() 
mut method 
This2.Selector #dest() 
read method 
This2.Selector dest() }
SrcDests:{
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(This1.SrcDest that) 
class method 
This1.SrcDest cast(Any that) 
read method 
This1.SrcDest val(This2.N that) 
read method 
This1.SrcDest left() 
read method 
This1.SrcDest right() 
mut method 
Void #apply(This2.N that, This1.SrcDest val) 
mut method 
Void add(This2.N that, This1.SrcDest val) 
mut method 
Void add(This1.SrcDest right) 
mut method 
Void add(This1.SrcDest left) 
mut method 
Void remove(This2.N that) 
mut method 
Void left(This1.SrcDest that) 
mut method 
Void right(This1.SrcDest that) 
method 
This0 without(This2.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This2.N that, This1.SrcDest val) 
method 
This0 with(This2.N that, This1.SrcDest val) 
read method 
mut This0 reverse() 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() 
method 
This0 #plus(This1.SrcDest that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to, This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.SrcDest #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to, This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.SrcDest #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() 
mut method 
Void inner(This2.SrcDest that) }}
Libs:{
class method 
mut This0 #mutK(mut This2.Collections.MutListAny inner) 
class method 
mut This0 #apply(mut This2.Collections.MutListAny inner) 
mut method 
mut This2.Collections.MutListAny #inner() 
read method 
read This2.Collections.MutListAny inner() 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
This0 #from(This0 seqBuilder) 
mut method 
Void #add(Library that) 
class method 
Library cast(Any that) 
read method 
Library val(This2.N that) 
read method 
Library left() 
read method 
Library right() 
mut method 
Void #apply(This2.N that, Library val) 
mut method 
Void add(This2.N that, Library val) 
mut method 
Void add(Library right) 
mut method 
Void add(Library left) 
mut method 
Void remove(This2.N that) 
mut method 
Void left(Library that) 
mut method 
Void right(Library that) 
method 
This0 without(This2.N that) 
method 
This0 withoutLeft() 
method 
This0 withAlso(This2.N that, Library val) 
method 
This0 with(This2.N that, Library val) 
read method 
mut This0 reverse() 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() 
method 
This0 #plus(Library that) 
method 
This0 #plusplus(This0 that) 
IteratorTrait:{
class method 
Library #apply() }
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to, This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N stopOk) 
read method 
lent This0.IteratorVal vals(This2.N from, This2.N to) 
read method 
lent This0.IteratorVal vals() 
IteratorVal:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
class method 
lent This0 #lentK(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
read This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() }
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to, This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N stopOk) 
mut method 
lent This0.IteratorVar #vals(This2.N from, This2.N to) 
mut method 
lent This0.IteratorVar #vals() 
IteratorVar:{
read method 
read This3.Collections.MutListAny that() 
read method 
This3.N from() 
mut method 
Void from(This3.N that) 
read method 
This3.N to() 
read method 
This3.N stopOk() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
class method 
mut This0 #mutK(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.N from, This3.N to, This3.N stopOk) 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
This3.N #from() 
mut method 
This3.N #to() 
mut method 
This3.N #stopOk() 
mut method 
Void inner(Library that) }}
class method 
This0.SrcDests renameMap(Library that, This1.S prefix, This1.Path path, This1.Introspection.Methods ms) 
class method 
This1.Bool needRename(This1.Introspection.NestedClass that, This1.Introspection.Method meth) 
class method 
Library #leftleft(Library that) exception This1.MetaGuard.ClassClash, This1.MetaGuard.MethodClash }
Load:{/*shape of a loadable library:
 This contains actual library, but
 Abstract:{} contains abstract classes, and
 Abstract.ConceptMap mapps concepts names to abstract classes
*/
ConceptMapMismatch:{implements This2.MetaGuard, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
ConceptMapUnavailable:{implements This2.MetaGuard, This2.Message
class method 
mut This0 #mutK(This2.S _text, This2.Message.Opt cause) 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
mut method 
This2.S #_text() 
read method 
This2.S _text() 
mut method 
This2.Message.Opt #cause() 
read method 
This2.Message.Opt cause() 
method 
This0 #apply(This2.Message that) 
method 
This2.Bool #bangequal(This0 that) 
method 
This2.Bool #equalequal(This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
Continue:{
class method 
mut This0 #mutK(This3.S that) 
class method 
This0 #apply(This3.S that) 
mut method 
This3.S #that() 
read method 
This3.S that() 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }
method 
mut This2.S.SConcat #seqBuilder() }
class method 
Library #leftleft(Library that) exception This0.ConceptMapMismatch, This0.ConceptMapUnavailable 
DeployLibrary:{
class method 
mut This0 #mutK(This2.Path path, This2.Url url) 
class method 
This0 #apply(This2.Path path, This2.Url url) 
mut method 
This2.Path #path() 
read method 
This2.Path path() 
mut method 
This2.Url #url() 
read method 
This2.Url url() 
class method 
Library moveToAbstract(This2.Path that, Library of) 
class method 
Library exposeAsLibrary(Library that, This2.Path path) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.PrivacyCoupuled 
class method 
Void checkTargetExists(Library that, This2.Path path) exception This2.MetaGuard.NestedClassUnavailable 
method 
Library #leftleft(Library that) exception This2.MetaGuard.NestedClassUnavailable, This2.MetaGuard.PrivacyCoupuled }}}
class method 
mut This0 #mutK(This0.Abstract.S id) 
class method 
This0 #apply(This0.Abstract.S id) This0.#mutK(id:id)
mut method 
This0.Abstract.S #id() 
read method 
This0.Abstract.S id() 
GuiPlugin:{/*@plugin
L42.is/connected/withHtml
*/}
class method 
This0.Abstract.S jsEscape(This0.Abstract.S that) (
  This0.Abstract.S::replace(that into ) tmp=that.replace(that:This0.Abstract.S.doubleQuote(), into:This0.Abstract.S.#from(builder:(
    This0.Abstract.S::#builder() b=This0.Abstract.S.#builder()
    Void unused=b.#backslash()
    b
    )).#plusplus(that:This0.Abstract.S.doubleQuote()))
  tmp.replace(that:This0.Abstract.S.#from(builder:(
    This0.Abstract.S::#builder() b0=This0.Abstract.S.#builder()
    Void unused0=b0.#sQuote()
    b0
    )), into:This0.Abstract.S.#from(builder:(
    This0.Abstract.S::#builder() b1=This0.Abstract.S.#builder()
    Void unused1=b1.#backslash()
    Void unused2=b1.#sQuote()
    b1
    )))
  )
method 
Void close() use This0.GuiPlugin check close(wName:this.id().binaryRepr()) error void
method 
Void open(This0.Abstract.S title, This0.Abstract.S basePath, This0.Abstract.S body, This0.Abstract.N x, This0.Abstract.N y) this.open(html:(
  This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) rcv=(
    This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) rcv0=(
      This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) rcv1=(
        This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) rcv2=(
          This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) rcv3=(
            This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) rcv4=(
              This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) rcv5=(
                This0.Abstract.S::#from(builder ) rcv6=This0.Abstract.S.#from(builder:(
                  This0.Abstract.S::#builder() b=This0.Abstract.S.#builder()
                  b
                  ))
                rcv6.#from(seqBuilder:(
                  This0.Abstract.S::#from(builder ) ::#seqBuilder() b0=rcv6.#seqBuilder()
                  Void unused=b0.#add(that:This0.htmlHeader())
                  b0
                  ))
                )
              rcv5.#from(builder:(
                This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#builder() b1=rcv5.#builder()
                Void unused0=b1.#left()
                Void unused1=b1.#T()
                Void unused2=b1.#I()
                Void unused3=b1.#T()
                Void unused4=b1.#L()
                Void unused5=b1.#E()
                Void unused6=b1.#right()
                b1
                ))
              )
            rcv4.#from(seqBuilder:(
              This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#seqBuilder() b2=rcv4.#seqBuilder()
              Void unused7=b2.#add(that:title)
              b2
              ))
            )
          rcv3.#from(builder:(
            This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#builder() b3=rcv3.#builder()
            Void unused8=b3.#left()
            Void unused9=b3.#divide()
            Void unused10=b3.#T()
            Void unused11=b3.#I()
            Void unused12=b3.#T()
            Void unused13=b3.#L()
            Void unused14=b3.#E()
            Void unused15=b3.#right()
            Void unused16=b3.#left()
            Void unused17=b3.#b()
            Void unused18=b3.#a()
            Void unused19=b3.#s()
            Void unused20=b3.#e()
            Void unused21=b3.#space()
            Void unused22=b3.#h()
            Void unused23=b3.#r()
            Void unused24=b3.#e()
            Void unused25=b3.#f()
            Void unused26=b3.#equal()
            Void unused27=b3.#sQuote()
            b3
            ))
          )
        rcv2.#from(seqBuilder:(
          This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#seqBuilder() b4=rcv2.#seqBuilder()
          Void unused28=b4.#add(that:basePath)
          b4
          ))
        )
      rcv1.#from(builder:(
        This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#builder() b5=rcv1.#builder()
        Void unused29=b5.#sQuote()
        Void unused30=b5.#space()
        Void unused31=b5.#divide()
        Void unused32=b5.#right()
        Void unused33=b5.#left()
        Void unused34=b5.#divide()
        Void unused35=b5.#H()
        Void unused36=b5.#T()
        Void unused37=b5.#M()
        Void unused38=b5.#L()
        Void unused39=b5.#right()
        Void unused40=b5.#left()
        Void unused41=b5.#B()
        Void unused42=b5.#O()
        Void unused43=b5.#D()
        Void unused44=b5.#Y()
        Void unused45=b5.#right()
        b5
        ))
      )
    rcv0.#from(seqBuilder:(
      This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#seqBuilder() b6=rcv0.#seqBuilder()
      Void unused46=b6.#add(that:body)
      b6
      ))
    )
  rcv.#from(builder:(
    This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#from(builder ) ::#from(seqBuilder ) ::#builder() b7=rcv.#builder()
    Void unused47=b7.#left()
    Void unused48=b7.#divide()
    Void unused49=b7.#B()
    Void unused50=b7.#O()
    Void unused51=b7.#D()
    Void unused52=b7.#Y()
    Void unused53=b7.#right()
    Void unused54=b7.#left()
    Void unused55=b7.#divide()
    Void unused56=b7.#H()
    Void unused57=b7.#T()
    Void unused58=b7.#M()
    Void unused59=b7.#L()
    Void unused60=b7.#right()
    b7
    ))
  ), x:x, y:y)
class method 
This0.Abstract.S htmlHeader() (
  This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) rcv7=(
    This0.Abstract.S::#from(builder ) rcv8=This0.Abstract.S.#from(builder:(
      This0.Abstract.S::#builder() b=This0.Abstract.S.#builder()
      Void unused=b.#left()
      Void unused0=b.#bang()
      Void unused1=b.#D()
      Void unused2=b.#O()
      Void unused3=b.#C()
      Void unused4=b.#T()
      Void unused5=b.#Y()
      Void unused6=b.#P()
      Void unused7=b.#E()
      Void unused8=b.#space()
      Void unused9=b.#h()
      Void unused10=b.#t()
      Void unused11=b.#m()
      Void unused12=b.#l()
      Void unused13=b.#right()
      Void unused14=b.#left()
      Void unused15=b.#h()
      Void unused16=b.#t()
      Void unused17=b.#m()
      Void unused18=b.#l()
      Void unused19=b.#right()
      Void unused20=b.#left()
      Void unused21=b.#h()
      Void unused22=b.#e()
      Void unused23=b.#a()
      Void unused24=b.#d()
      Void unused25=b.#right()
      Void unused26=b.#left()
      Void unused27=b.#m()
      Void unused28=b.#e()
      Void unused29=b.#t()
      Void unused30=b.#a()
      Void unused31=b.#space()
      Void unused32=b.#h()
      Void unused33=b.#t()
      Void unused34=b.#t()
      Void unused35=b.#p()
      Void unused36=b.#less()
      Void unused37=b.#e()
      Void unused38=b.#q()
      Void unused39=b.#u()
      Void unused40=b.#i()
      Void unused41=b.#v()
      Void unused42=b.#equal()
      Void unused43=b.#dQuote()
      Void unused44=b.#c()
      Void unused45=b.#o()
      Void unused46=b.#n()
      Void unused47=b.#t()
      Void unused48=b.#e()
      Void unused49=b.#n()
      Void unused50=b.#t()
      Void unused51=b.#less()
      Void unused52=b.#c()
      Void unused53=b.#l()
      Void unused54=b.#a()
      Void unused55=b.#s()
      Void unused56=b.#s()
      Void unused57=b.#dQuote()
      Void unused58=b.#space()
      Void unused59=b.#c()
      Void unused60=b.#o()
      Void unused61=b.#n()
      Void unused62=b.#t()
      Void unused63=b.#e()
      Void unused64=b.#n()
      Void unused65=b.#t()
      Void unused66=b.#equal()
      Void unused67=b.#dQuote()
      Void unused68=b.#t()
      Void unused69=b.#e()
      Void unused70=b.#x()
      Void unused71=b.#t()
      Void unused72=b.#divide()
      Void unused73=b.#h()
      Void unused74=b.#t()
      Void unused75=b.#m()
      Void unused76=b.#l()
      Void unused77=b.#semicolon()
      Void unused78=b.#space()
      Void unused79=b.#c()
      Void unused80=b.#h()
      Void unused81=b.#a()
      Void unused82=b.#r()
      Void unused83=b.#s()
      Void unused84=b.#e()
      Void unused85=b.#t()
      Void unused86=b.#equal()
      Void unused87=b.#U()
      Void unused88=b.#T()
      Void unused89=b.#F()
      Void unused90=b.#less()
      Void unused91=b.#8()
      Void unused92=b.#dQuote()
      Void unused93=b.#right()
      Void unused94=b.#newline()
      Void unused95=b.#left()
      Void unused96=b.#s()
      Void unused97=b.#c()
      Void unused98=b.#r()
      Void unused99=b.#i()
      Void unused100=b.#p()
      Void unused101=b.#t()
      Void unused102=b.#right()
      Void unused103=b.#newline()
      Void unused104=b.#newline()
      b
      ))
    rcv8.#from(seqBuilder:(
      This0.Abstract.S::#from(builder ) ::#seqBuilder() b0=rcv8.#seqBuilder()
      Void unused105=b0.#add(that:This0.Abstract.Debug.readFile(fileName:This0.Abstract.Debug.localToAbsolute(fileName:This0.Abstract.S.#from(builder:(
        This0.Abstract.S::#builder() b1=This0.Abstract.S.#builder()
        Void unused106=b1.#e()
        Void unused107=b1.#x()
        Void unused108=b1.#a()
        Void unused109=b1.#m()
        Void unused110=b1.#p()
        Void unused111=b1.#l()
        Void unused112=b1.#e()
        Void unused113=b1.#s()
        Void unused114=b1.#divide()
        Void unused115=b1.#r()
        Void unused116=b1.#e()
        Void unused117=b1.#s()
        Void unused118=b1.#o()
        Void unused119=b1.#u()
        Void unused120=b1.#r()
        Void unused121=b1.#c()
        Void unused122=b1.#e()
        Void unused123=b1.#s()
        Void unused124=b1.#divide()
        Void unused125=b1.#j()
        Void unused126=b1.#s()
        Void unused127=b1.#dot()
        Void unused128=b1.#j()
        Void unused129=b1.#s()
        b1
        )))))
      b0
      ))
    )
  rcv7.#from(builder:(
    This0.Abstract.S::#from(builder ) ::#from(seqBuilder ) ::#builder() b2=rcv7.#builder()
    Void unused130=b2.#newline()
    Void unused131=b2.#left()
    Void unused132=b2.#divide()
    Void unused133=b2.#s()
    Void unused134=b2.#c()
    Void unused135=b2.#r()
    Void unused136=b2.#i()
    Void unused137=b2.#p()
    Void unused138=b2.#t()
    Void unused139=b2.#right()
    Void unused140=b2.#newline()
    b2
    ))
  )
method 
Void open(This0.Abstract.S html, This0.Abstract.N x, This0.Abstract.N y) (
  Void unused=This0.Abstract.Debug.#apply(that:html)
  use This0.GuiPlugin check open(wName:this.id().binaryRepr(), html:html.binaryRepr(), x:x.binaryRepr(), y:y.binaryRepr()) error void
  )
method 
Void set(This0.Abstract.S that, This0.Abstract.S id) (
  Void unused=(/*$('#Alpha').replaceWith('htmlstring')
*/
    This0.Abstract.S::#from(builder ) ::#plusplus(that ) cmd=This0.Abstract.S.#from(builder:(
      This0.Abstract.S::#builder() b=This0.Abstract.S.#builder()
      Void unused3=b.#$()
      Void unused4=b.#oRound()
      Void unused5=b.#sQuote()
      Void unused6=b.#hash()
      b
      )).#plusplus(that:This0.jsEscape(that:id).#plusplus(that:This0.Abstract.S.#from(builder:(
      This0.Abstract.S::#builder() b0=This0.Abstract.S.#builder()
      Void unused7=b0.#sQuote()
      Void unused8=b0.#cRound()
      Void unused9=b0.#dot()
      Void unused10=b0.#r()
      Void unused11=b0.#e()
      Void unused12=b0.#p()
      Void unused13=b0.#l()
      Void unused14=b0.#a()
      Void unused15=b0.#c()
      Void unused16=b0.#e()
      Void unused17=b0.#W()
      Void unused18=b0.#i()
      Void unused19=b0.#t()
      Void unused20=b0.#h()
      Void unused21=b0.#oRound()
      Void unused22=b0.#sQuote()
      b0
      )).#plusplus(that:This0.jsEscape(that:that).#plusplus(that:This0.Abstract.S.#from(builder:(
      This0.Abstract.S::#builder() b1=This0.Abstract.S.#builder()
      Void unused23=b1.#sQuote()
      Void unused24=b1.#cRound()
      Void unused25=b1.#semicolon()
      b1
      ))))))
    This0::executeJs(that ) x=this.executeJs(that:cmd)
    Void unused0=This0.Abstract.Debug.#apply(that:cmd)
    Void unused1=(
      This0::executeJs(that ) ::#bangequal(that ) cond=x.#bangequal(that:This0.Abstract.S.#from(builder:(
        This0.Abstract.S::#builder() b2=This0.Abstract.S.#builder()
        b2
        )))
      (
        Void unused26=cond.#checkTrue()
        
        catch exception Void catched4 void
        
        This0.Abstract.Debug.#apply(that:x)
        )
      )
    Void unused2=return void
    void
    )
  
  catch return Void result result
  
  error {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0.Abstract.S executeJs(This0.Abstract.S that) This0.Abstract.S.#from(binaryRepr:use This0.GuiPlugin check executeJs(wName:this.id().binaryRepr(), command:that.binaryRepr()) error void)
method 
mut This0.Iterator events() This0.Iterator.#apply(id:this.id(), current:This0.Abstract.S.#from(builder:(
  This0.Abstract.S::#builder() b=This0.Abstract.S.#builder()
  b
  )))
Iterator:{
class method 
mut This0 #mutK(This1.Abstract.S id, This1.Abstract.S current) 
class method 
mut This0 #apply(This1.Abstract.S id, This1.Abstract.S current) This0.#mutK(id:id, current:current)
mut method 
This1.Abstract.S #id() 
read method 
This1.Abstract.S id() 
mut method 
Void current(This1.Abstract.S that) 
mut method 
This1.Abstract.S #current() 
read method 
This1.Abstract.S current() 
class method 
This1.Abstract.S auxFetchEvent(This1.Abstract.S id) exception Void (
  Void unused=(
    Library s=use This1.GuiPlugin check eventPending(wName:id.binaryRepr()) exception void
    
    catch error Library x exception void
    
    (
      Void unused0=return This1.Abstract.S.#from(binaryRepr:s)
      void
      )
    )
  
  catch return This1.Abstract.S result result
  
  error {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void #next() exception Void (
  Void unused=(
    This0::auxFetchEvent(id ) s=This0.auxFetchEvent(id:this.id())
    Void unused0=return this.current(that:s)
    void
    )
  
  catch return Void result result
  
  error {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #checkEnd() void
read method 
This1.Abstract.S #inner() this.current()
read method 
Void #close() void}}