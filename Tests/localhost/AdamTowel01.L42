{'--layer-- Bool N S -     and first layer of unsafe operators

Alu:{'@plugin
'L42.is/connected/withAlu
}
ExitCode:{
type method 
Library normal() {'@exitStatus
'0
}
type method 
Library failure() {'@exitStatus
'42000
}}
Bool:{<:Outer1::Concept::ToS, Outer1::Concept::Equals, Outer1::Concept::Named
type method '@private
Outer0 #apply__39_0(Library binaryRepr__39_0) 
mut method '@private
Library #binaryRepr__39_0() 
read method '@private
Library binaryRepr__39_0() 
method myName() Outer1::GetMyName.#apply(that:Outer0)
method 
Void #checkTrue() exception Void use Outer1::Alu check ifInt32EqualDo(n1:this.binaryRepr__39_0(), n2:Outer1::N.#numberParser(that:{'@stringU
'0
}).binaryRepr()) exception void
type method 
Outer0 true() Outer0.#apply__39_0(binaryRepr__39_0:Outer1::N.#numberParser(that:{'@stringU
'1
}).binaryRepr())
type method 
Outer0 false() Outer0.#apply__39_0(binaryRepr__39_0:Outer1::N.#numberParser(that:{'@stringU
'0
}).binaryRepr())
method 
Outer0 #and(Outer0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return that
      )
    Void unused1=return this
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #or(Outer0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return this
      )
    Void unused1=return that
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #bang() (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return Outer0.false()
      )
    Void unused1=return Outer0.true()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method toS() (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return Outer1::S.#from(builder:Outer1::S.#builder().#t().#r().#u().#e())
      )
    Void unused1=return Outer1::S.#from(builder:Outer1::S.#builder().#f().#a().#l().#s().#e())
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 fromS(read Outer1::Concept::ToS that) (
  Void unused=(
    Void unused0=(
      Outer1::Concept::ToS::toS() ::#equalequal(that ) cond=that.toS().#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#t().#r().#u().#e()))
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.true()
        )
      )
    Void unused1=(
      Outer1::Concept::ToS::toS() ::#equalequal(that ) cond0=that.toS().#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#f().#a().#l().#s().#e()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return Outer0.false()
        )
      )
    Void unused2=error Outer0.parseError(that:that.toS())
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return that
      )
    Void unused1=return that.#bang()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Any parseError(Outer1::S that) Outer1::S.#from(builder:Outer1::S.#builder().#U().#n().#s().#a().#t().#i().#s().#f().#a().#c().#t().#o().#r().#y().#E().#r().#r().#o().#r().#T().#o().#A().#v().#o().#i().#d().#C().#y().#c().#l().#e().#comma().#space().#r().#e().#p().#l().#a().#c().#e().#space().#i().#n().#space().#A().#d().#a().#m().#T().#2())}
N:{<:Outer1::Concept::ToS, Outer1::Concept::Equals, Outer1::Concept::Named
type method '@private
Outer0 #apply__40_0(Library _binaryRepr__40_0) 
mut method '@private
Library #_binaryRepr__40_0() 
read method '@private
Library _binaryRepr__40_0() 
method myName() Outer1::GetMyName.#apply(that:Outer0)
type method 
Outer0 fromS(Outer1::Concept::ToS that) Outer0.#numberParser(that:that.toS().binaryRepr())
method 
Library binaryRepr() this._binaryRepr__40_0()
type method 
Outer1::N #numberParser(Library that) Outer1::N.#apply__40_0(_binaryRepr__40_0:use Outer1::Alu check stringToInt32(that:that) error Outer0.parseError(that:Outer1::S.#stringParser(that:that)))
type method 
Any parseError(Outer1::S that) Outer1::S.#from(builder:Outer1::S.#builder().#U().#n().#s().#a().#t().#i().#s().#f().#a().#c().#t().#o().#r().#y().#E().#r().#r().#o().#r().#T().#o().#A().#v().#o().#i().#d().#C().#y().#c().#l().#e().#comma().#space().#r().#e().#p().#l().#a().#c().#e().#space().#i().#n().#space().#A().#d().#a().#m().#T().#2())
method toS() Outer1::S.#stringParser(that:use Outer1::Alu check int32ToString(that:this.binaryRepr()) error void)
method 
Outer1::N #plus(Outer1::N that) Outer1::N.#apply__40_0(_binaryRepr__40_0:use Outer1::Alu check sumInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer1::N #less(Outer1::N that) Outer1::N.#apply__40_0(_binaryRepr__40_0:use Outer1::Alu check subInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer1::N #times(Outer1::N that) Outer1::N.#apply__40_0(_binaryRepr__40_0:use Outer1::Alu check mulInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer1::N #divide(Outer1::N that) Outer1::N.#apply__40_0(_binaryRepr__40_0:use Outer1::Alu check divInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer1::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=use Outer1::Alu check ifInt32EqualDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool #left(Outer1::N that) (
  Void unused=(
    Void unused0=use Outer1::Alu check ifInt32GrtDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool #leftequal(Outer1::N that) (
  Void unused=(
    Void unused0=use Outer1::Alu check ifInt32GEqDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #right(Outer1::N that) this.#leftequal(that:that).#bang()
method 
Outer1::Bool #rightequal(Outer1::N that) this.#left(that:that).#bang()
method 
mut Outer0::Iterator vals() Outer0::Iterator.#apply(start:this, end:Outer1::N.#numberParser(that:{'@stringU
'-1
}))
method 
mut Outer0::Iterator vals(Outer1::N upTo) Outer0::Iterator.#apply(start:this, end:upTo)
Iterator:{
type method 
mut Outer0 #apply(Outer1 start, Outer1 end) 
mut method 
Void start(Outer1 that) 
mut method 
Outer1 #start() 
read method 
Outer1 start() 
mut method 
Outer1 #end() 
read method 
Outer1 end() 
mut method 
Void #next() exception Void (
  Outer0::end() ::#left(that ) ::#or(that ) cond=this.end().#left(that:Outer2::N.#numberParser(that:{'@stringU
  '0
  })).#or(that:this.start().#left(that:this.end()))
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 exception void
    this.start(that:this.start().#plus(that:Outer2::N.#numberParser(that:{'@stringU
    '1
    })))
    )
  )
read method 
Void #checkEnd() void
read method 
Outer1 #inner() this.start()
read method 
Void #close() void}}
S:{<:Outer1::Concept::ToS, Outer1::Concept::Equals, Outer1::Concept::Named
Varcurrent__60_0:'@private
{
type method 
mut Outer0 #apply(Outer2::N::#numberParser(that ) inner) 
mut method 
Void inner(Outer2::N::#numberParser(that ) that) 
mut method 
Outer2::N::#numberParser(that ) #inner() }
type method '@private
Outer0 _private__41_0(Library _binaryRepr__41_0) 
mut method '@private
Library #_binaryRepr__41_0() 
read method '@private
Library _binaryRepr__41_0() 
method myName() Outer1::GetMyName.#apply(that:Outer0)
type method 
Outer0 #stringParser(Library that) Outer0._private__41_0(_binaryRepr__41_0:that)
method 
Library binaryRepr() this._binaryRepr__41_0()
method toS() this
method 
Outer1::S #plusplus(Outer1::S that) Outer1::S.#stringParser(that:use Outer1::Alu check stringConcat(s1:this.binaryRepr(), s2:that.toS().binaryRepr()) error void)
method 
Outer1::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=use Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::S #apply(Outer1::N start, Outer1::N end) Outer1::S.#stringParser(that:use Outer1::Alu check stringSubstring(that:this.binaryRepr(), start:start.binaryRepr(), end:end.binaryRepr()) error void)
method 
Outer1::S #apply(Outer1::N that) this.#apply(start:that, end:that.#plus(that:Outer1::N.#numberParser(that:{'@stringU
'1
})))
method 
Outer1::S #apply(Outer1::N start) this.#apply(start:start, end:this.size())
method 
Outer1::S #apply(Outer1::N end) this.#apply(start:Outer1::N.#numberParser(that:{'@stringU
'0
}), end:end)
method 
Outer1::Bool beginsWith(Outer1::S that) this.#apply(end:that.size()).#equalequal(that:that)
method '@private
Outer1::N auxFirstIndexOf__42_0(Outer1::S that) (
  Void unused=(
    Outer1::N::#numberParser(that ) current=Outer1::N.#numberParser(that:{'@stringU
    '0
    })
    mut Outer0::Varcurrent__60_0 varcurrent=Outer0::Varcurrent__60_0.#apply(inner:current)
    Void unused0=(
      Void unused3=loop (
        Void unused4=varcurrent.#inner().#left(that:this.size()).#checkTrue()
        (
          Void unused5=(
            Outer0::#apply(start ) ::beginsWith(that ) cond=this.#apply(start:varcurrent.#inner()).beginsWith(that:that)
            (
              Void unused6=cond.#checkTrue()
              
              catch exception Void catched1 void
              return varcurrent.#inner()
              )
            )
          varcurrent.inner(that:varcurrent.#inner().#plus(that:Outer1::N.#numberParser(that:{'@stringU
          '1
          })))
          )
        )
      
      catch exception Void catched3 void
      void
      )
    Void unused1=return Outer1::N.#numberParser(that:{'@stringU
    '0
    }).#less(that:Outer1::N.#numberParser(that:{'@stringU
    '1
    }))
    Void unused2=error Outer0.subStringNotPresent(string:this, subString:that)
    void
    )
  
  catch return Outer1::N result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::N firstIndexOf(Outer1::S that) (
  Void unused=('TODO: discuss if should be exception or error
  
    Outer0::auxFirstIndexOf__42_0(that ) res=this.auxFirstIndexOf__42_0(that:that)
    Void unused0=(
      Outer0::auxFirstIndexOf__42_0(that ) ::#rightequal(that ) cond=res.#rightequal(that:Outer1::N.#numberParser(that:{'@stringU
      '0
      }))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return res
        )
      )
    Void unused1=error Outer0.subStringNotPresent(string:this, subString:that)
    void
    )
  
  catch return Outer1::N result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Void subStringNotPresent(Outer1::S string, Outer1::S subString) void
method 
Outer1::Bool contains(Outer1::S that) (
  Void unused=(
    Outer0::auxFirstIndexOf__42_0(that ) res=this.auxFirstIndexOf__42_0(that:that)
    Void unused0=(
      Outer0::auxFirstIndexOf__42_0(that ) ::#rightequal(that ) cond=res.#rightequal(that:Outer1::N.#numberParser(that:{'@stringU
      '0
      }))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer1::Bool.true()
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool isASCIILowerCase(Outer1::N that) Outer1::S.#from(builder:Outer1::S.#builder().#q().#w().#e().#r().#t().#y().#u().#i().#o().#p().#a().#s().#d().#f().#g().#h().#j().#k().#l().#z().#x().#c().#v().#b().#n().#m()).contains(that:this.#apply(that:that))
method 
Outer1::Bool isASCIIUpperCase(Outer1::N that) Outer1::S.#from(builder:Outer1::S.#builder().#Q().#W().#E().#R().#T().#Y().#U().#I().#O().#P().#A().#S().#D().#F().#G().#H().#J().#K().#L().#Z().#X().#C().#V().#B().#N().#M()).contains(that:this.#apply(that:that))
method 
Outer1::N size() Outer1::N.#apply__40_0(_binaryRepr__40_0:use Outer1::Alu check stringSize(that:this.binaryRepr()) error void)
type method 
Outer1::S doubleQuote() Outer1::S.#from(builder:Outer1::S.#builder().#dQuote().#newline()).#apply(that:Outer1::N.#numberParser(that:{'@stringU
'0
}))
type method 
Outer1::S nl() Outer1::S.#from(builder:Outer1::S.#builder().#newline())
method 
Outer1::S replace(Outer1::S that, Outer1::S into) Outer1::S.#stringParser(that:use Outer1::Alu check stringReplace(that:this.binaryRepr(), src:that.binaryRepr(), dest:into.binaryRepr()) error void)
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer1::S.#from(builder:Outer1::S.#builder()))
SConcat:{
VarnewAcc__61_0:'@private
{
type method 
mut Outer0 #apply(Outer3::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer3::Concept::ToS::toS() that) 
mut method 
Outer3::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer2::S old, Outer2::S accumulator) 
mut method 
Outer2::S #old() 
read method 
Outer2::S old() 
mut method 
Outer2::S #accumulator() 
read method 
Outer2::S accumulator() 
method 
Outer1::SConcat #add(Outer2::Concept::ToS that) Outer1::SConcat.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer1::SConcat #add(Outer2::Concept::ToS that, Outer2::Concept::ToS separedBy) (
  Outer2::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc__61_0 varnewAcc=Outer0::VarnewAcc__61_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer1::SConcat.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer1::SConcat #end() this
method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
method 
Outer2::S #from(Outer2::S::SBuilder builder) this.old().#plusplus(that:this.accumulator().#plusplus(that:Outer2::S.#from(builder:builder)))}
SBuilder:{
type method '@private
Outer0 _private__43_0(Library _binaryRepr__43_0) 
mut method '@private
Library #_binaryRepr__43_0() 
read method '@private
Library _binaryRepr__43_0() 
type method 
Outer0 #stringParser(Library that) Outer0._private__43_0(_binaryRepr__43_0:that)
method 
Library binaryRepr() this._binaryRepr__43_0()
method 
Outer0 #plusplus(Library that) Outer0._private__43_0(_binaryRepr__43_0:use Outer2::Alu check stringConcat(s1:this.binaryRepr(), s2:that) error void)
type method 
Outer0 empty() Outer0._private__43_0(_binaryRepr__43_0:{'@stringU
'
})
method 
Outer0 #0() this.#plusplus(that:{'@stringU
'0
})
method 
Outer0 #1() this.#plusplus(that:{'@stringU
'1
})
method 
Outer0 #2() this.#plusplus(that:{'@stringU
'2
})
method 
Outer0 #3() this.#plusplus(that:{'@stringU
'3
})
method 
Outer0 #4() this.#plusplus(that:{'@stringU
'4
})
method 
Outer0 #5() this.#plusplus(that:{'@stringU
'5
})
method 
Outer0 #6() this.#plusplus(that:{'@stringU
'6
})
method 
Outer0 #7() this.#plusplus(that:{'@stringU
'7
})
method 
Outer0 #8() this.#plusplus(that:{'@stringU
'8
})
method 
Outer0 #9() this.#plusplus(that:{'@stringU
'9
})
method 
Outer0 #q() this.#plusplus(that:{'@stringU
'q
})
method 
Outer0 #w() this.#plusplus(that:{'@stringU
'w
})
method 
Outer0 #e() this.#plusplus(that:{'@stringU
'e
})
method 
Outer0 #r() this.#plusplus(that:{'@stringU
'r
})
method 
Outer0 #t() this.#plusplus(that:{'@stringU
't
})
method 
Outer0 #y() this.#plusplus(that:{'@stringU
'y
})
method 
Outer0 #u() this.#plusplus(that:{'@stringU
'u
})
method 
Outer0 #i() this.#plusplus(that:{'@stringU
'i
})
method 
Outer0 #o() this.#plusplus(that:{'@stringU
'o
})
method 
Outer0 #p() this.#plusplus(that:{'@stringU
'p
})
method 
Outer0 #a() this.#plusplus(that:{'@stringU
'a
})
method 
Outer0 #s() this.#plusplus(that:{'@stringU
's
})
method 
Outer0 #d() this.#plusplus(that:{'@stringU
'd
})
method 
Outer0 #f() this.#plusplus(that:{'@stringU
'f
})
method 
Outer0 #g() this.#plusplus(that:{'@stringU
'g
})
method 
Outer0 #h() this.#plusplus(that:{'@stringU
'h
})
method 
Outer0 #j() this.#plusplus(that:{'@stringU
'j
})
method 
Outer0 #k() this.#plusplus(that:{'@stringU
'k
})
method 
Outer0 #l() this.#plusplus(that:{'@stringU
'l
})
method 
Outer0 #z() this.#plusplus(that:{'@stringU
'z
})
method 
Outer0 #x() this.#plusplus(that:{'@stringU
'x
})
method 
Outer0 #c() this.#plusplus(that:{'@stringU
'c
})
method 
Outer0 #v() this.#plusplus(that:{'@stringU
'v
})
method 
Outer0 #b() this.#plusplus(that:{'@stringU
'b
})
method 
Outer0 #n() this.#plusplus(that:{'@stringU
'n
})
method 
Outer0 #m() this.#plusplus(that:{'@stringU
'm
})
method 
Outer0 #Q() this.#plusplus(that:{'@stringU
'Q
})
method 
Outer0 #W() this.#plusplus(that:{'@stringU
'W
})
method 
Outer0 #E() this.#plusplus(that:{'@stringU
'E
})
method 
Outer0 #R() this.#plusplus(that:{'@stringU
'R
})
method 
Outer0 #T() this.#plusplus(that:{'@stringU
'T
})
method 
Outer0 #Y() this.#plusplus(that:{'@stringU
'Y
})
method 
Outer0 #U() this.#plusplus(that:{'@stringU
'U
})
method 
Outer0 #I() this.#plusplus(that:{'@stringU
'I
})
method 
Outer0 #O() this.#plusplus(that:{'@stringU
'O
})
method 
Outer0 #P() this.#plusplus(that:{'@stringU
'P
})
method 
Outer0 #A() this.#plusplus(that:{'@stringU
'A
})
method 
Outer0 #S() this.#plusplus(that:{'@stringU
'S
})
method 
Outer0 #D() this.#plusplus(that:{'@stringU
'D
})
method 
Outer0 #F() this.#plusplus(that:{'@stringU
'F
})
method 
Outer0 #G() this.#plusplus(that:{'@stringU
'G
})
method 
Outer0 #H() this.#plusplus(that:{'@stringU
'H
})
method 
Outer0 #J() this.#plusplus(that:{'@stringU
'J
})
method 
Outer0 #K() this.#plusplus(that:{'@stringU
'K
})
method 
Outer0 #L() this.#plusplus(that:{'@stringU
'L
})
method 
Outer0 #Z() this.#plusplus(that:{'@stringU
'Z
})
method 
Outer0 #X() this.#plusplus(that:{'@stringU
'X
})
method 
Outer0 #C() this.#plusplus(that:{'@stringU
'C
})
method 
Outer0 #V() this.#plusplus(that:{'@stringU
'V
})
method 
Outer0 #B() this.#plusplus(that:{'@stringU
'B
})
method 
Outer0 #N() this.#plusplus(that:{'@stringU
'N
})
method 
Outer0 #M() this.#plusplus(that:{'@stringU
'M
})
method 
Outer0 #%() this.#plusplus(that:{'@stringU
'%
})
method 
Outer0 #$() this.#plusplus(that:{'@stringU
'$
})
method 
Outer0 #left() this.#plusplus(that:{'@stringU
'<
})
method 
Outer0 #right() this.#plusplus(that:{'@stringU
'>
})
method 
Outer0 #bang() this.#plusplus(that:{'@stringU
'!
})
method 
Outer0 #tilde() this.#plusplus(that:{'@stringU
'~
})
method 
Outer0 #plus() this.#plusplus(that:{'@stringU
'+
})
method 
Outer0 #times() this.#plusplus(that:{'@stringU
'*
})
method 
Outer0 #divide() this.#plusplus(that:{'@stringU
'/
})
method 
Outer0 #less() this.#plusplus(that:{'@stringU
'-
})
method 
Outer0 #and() this.#plusplus(that:{'@stringU
'&
})
method 
Outer0 #or() this.#plusplus(that:{'@stringU
'|
})
method 
Outer0 #oRound() this.#plusplus(that:{'@stringU
'(
})
method 
Outer0 #cRound() this.#plusplus(that:{'@stringU
')
})
method 
Outer0 #oSquare() this.#plusplus(that:{'@stringU
'[
})
method 
Outer0 #cSquare() this.#plusplus(that:{'@stringU
']
})
method 
Outer0 #oCurly() this.#plusplus(that:{'@stringU
'{
})
method 
Outer0 #cCurly() this.#plusplus(that:{'@stringU
'}
})
method 
Outer0 #dQuote() this.#plusplus(that:{'@stringU
'"
})
method 
Outer0 #sQuote() this.#plusplus(that:{'@stringU
''
})
method 
Outer0 #hQuote() this.#plusplus(that:{'@stringU
'`
})
method 
Outer0 #equal() this.#plusplus(that:{'@stringU
'=
})
method 
Outer0 #qMark() this.#plusplus(that:{'@stringU
'?
})
method 
Outer0 #hat() this.#plusplus(that:{'@stringU
'^
})
method 
Outer0 #comma() this.#plusplus(that:{'@stringU
',
})
method 
Outer0 #semicolon() this.#plusplus(that:{'@stringU
';
})
method 
Outer0 #colon() this.#plusplus(that:{'@stringU
':
})
method 
Outer0 #dot() this.#plusplus(that:{'@stringU
'.
})
method 
Outer0 #underscore() this.#plusplus(that:{'@stringU
'_
})
method 
Outer0 #hash() this.#plusplus(that:{'@stringU
'#
})
method 
Outer0 #at() this.#plusplus(that:{'@stringU
'\u0040
})
method 
Outer0 #backslash() this.#plusplus(that:{'@stringU
'\
})
method 
Outer0 #space() this.#plusplus(that:{'@stringU
' 
})
method 
Outer0 #newline() this.#plusplus(that:{'@stringU
'
'
})}
type method 
Outer0 #from(Outer1::S::SBuilder builder) Outer0._private__41_0(_binaryRepr__41_0:builder.binaryRepr())
type method 
Outer1::S::SBuilder #builder() Outer1::S::SBuilder.empty()}
Debug:{
type method 
Void #apply(Outer1::Concept::ToS that) use Outer1::Alu check stringDebug(that:that.toS().binaryRepr()) void
type method 
Void #apply(Library lib) error Outer1::S.#from(builder:Outer1::S.#builder().#t().#o().#space().#f().#i().#x().#space().#i().#n().#space().#A().#d().#a().#m().#T().#o().#w().#e().#l().#2())
type method 
Void #apply(Outer1::Concept::ToS fileName, Outer1::Concept::ToS content) use Outer1::Alu check fileDebug(fileName:fileName.toS().binaryRepr(), content:content.toS().binaryRepr()) void}
Count:{
type method '@private
Outer0 #apply__44_0(Outer1::N counter__44_0) 
mut method '@private
Outer1::N #counter__44_0() 
read method '@private
Outer1::N counter__44_0() 
type method 
Outer0 #begin() Outer0.#apply__44_0(counter__44_0:Outer1::N.#numberParser(that:{'@stringU
'0
}))
method 
Outer1::N #end() this.counter__44_0()
method 
Outer0 #add(Outer1::Bool that) (
  Void unused=(
    Void unused0=(
      Outer1::Bool::#bang() cond=that.#bang()
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return this
        )
      )
    Void unused1=return Outer0.#apply__44_0(counter__44_0:this.counter__44_0().#plus(that:Outer1::N.#numberParser(that:{'@stringU
    '1
    })))
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
SafeOperatorsAccess__62_0:'@private
{'@plugin
'L42.is/connected/withSafeOperators

type method 
Library compose(Library left, Library right) use Outer0 check compose(left:left, right:right) error Outer1::S.#from(builder:Outer1::S.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#A().#c().#c().#e().#s().#s().#dot().#c().#o().#m().#p().#o().#s().#e())
type method 
Library redirect(Library that, Library srcBinaryRepr, type Any dest) use Outer1::SafeOperatorsAccess__62_0 check redirect(that:that, src:srcBinaryRepr, dest:dest) error Outer1::S.#from(builder:Outer1::S.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#A().#c().#c().#e().#s().#s().#dot().#r().#e().#d().#i().#r().#e().#c().#t())}
Concept:{
ToS:{interface 
read method 
Outer2::S toS() }
Classable:{interface 
read method 
type Any classAny() }
Named:{interface 
type method 
Outer2::S myName() }
Wrapper:{interface 
read method 
Any inner() }
TypeWrapper:{interface 
read method 
type Any inner() }
ReadWrapper:{interface 
read method 
read Any inner() }
MutWrapper:{interface <:Outer1::ReadWrapper
mut method 
mut Any #inner() }
LentWrapper:{interface <:Outer1::ReadWrapper
mut method 
lent Any #inner() }
Equals:{interface 
read method 
Outer2::Bool equals(read Any that) }
Comparable:{interface 
read method 
Outer2::Bool greater(read Any that) }
Boollable:{interface 
read method 
Void #checkTrue() exception Void }
Decorator:{interface 'method Library>>(Library that) exception MetaGuard(specific)
'method Library decorate(Library that) exception MetaGuard I can link metaguard for circularity
}
Contains:{interface 'read method Bool >>(read Elem that)

read method 
Outer2::Bool contains(read Any that) }
Parsable:{interface 'type method capsule Outer0 fromS(S that) exception Guard::Parameter(specific) invalid string
'''type method capsule Outer0 #fromS(S that) exception Guard::Parameter
}
Invariant:{interface 
read method ' can throw error or return false, as more opportune
Outer2::Bool invariant() }
RandomAccess:{interface 'read method read Elem (N that)
'mut method mut Elem #(N that)

read method 
read Any get(Outer2::N that) 
mut method 
mut Any #get(Outer2::N that) }
Sizable:{interface 
read method 
Outer2::N size() 
read method 
Outer2::Bool isEmpty() }
Iterator:{interface 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Void #close() }}
GetMyName:{
type method 
Outer1::S #apply(type Any that) Outer1::S.#from(builder:Outer1::S.#builder().#less().#less().#N().#a().#m().#e().#S().#t().#i().#l().#l().#T().#o().#F().#i().#x().#less().#less())}
Message:{interface <:Outer1::Concept::ToS, Outer1::Concept::Equals, Outer1::Concept::Classable, Outer1::Concept::Named
type method 
Outer1::S kind() 
method 
Outer1::S text() 
method 
Outer0::Opt responseOf() 
read method 
type Outer0 clazz() 
Opt:{
type method 
Outer0 #new(Outer0::TOpt that) 
mut method 
Outer0::TOpt #that() 
read method 
Outer0::TOpt that() 
TOpt:{interface 
method 
Outer2 get() }
TEmpty:{<:Outer1::TOpt
type method 
Outer0 #apply() 
method get() error Outer3::S.#from(builder:Outer3::S.#builder().#U().#n().#s().#a().#t().#i().#s().#f().#a().#c().#t().#o().#r().#y().#E().#r().#r().#o().#r().#T().#o().#A().#v().#o().#i().#d().#C().#y().#c().#l().#e().#comma().#space().#r().#e().#p().#l().#a().#c().#e().#space().#i().#n().#space().#A().#d().#a().#m().#2())}
TOf:{<:Outer1::TOpt
type method 
Outer0 #apply(Outer2 that) 
mut method 
Outer2 #that() 
read method 
Outer2 that() 
method get() this.that()}
method 
Outer1 #tilde() this.that().get()
method 
Outer2::Bool isPresent() (
  Void unused0=(
    Outer0::#tilde() unused=this.#tilde()
    Void unused1=return Outer2::Bool.true()
    
    catch error Any catched return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #apply() Outer0.#new(that:Outer0::TEmpty.#apply())
type method 
Outer0 #apply(Outer1 that) Outer0.#new(that:Outer0::TOf.#apply(that:that))}
EqualMessages:{
type method 
Outer2::Bool #apply(Outer2::Message that, Outer2::Message other) (
  Void unused=('assuming they have the same type
  
    Outer2::Message::clazz() ::kind() ::#equalequal(that ) ::#and(that ) ::#and(that ) res=that.clazz().kind().#equalequal(that:other.clazz().kind()).#and(that:that.text().#equalequal(that:other.text())).#and(that:that.responseOf().isPresent().#equalequal(that:other.responseOf().isPresent()))
    Void unused0=(
      Outer2::Message::clazz() ::kind() ::#equalequal(that ) ::#and(that ) ::#and(that ) ::#bang() cond=res.#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer2::Bool.false()
        )
      )
    Void unused1=(
      Outer2::Message::responseOf() ::isPresent() ::#bang() cond0=that.responseOf().isPresent().#bang()
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return Outer2::Bool.true()
        )
      )
    Void unused2=return that.responseOf().#tilde().equals(that:other.responseOf().#tilde())
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
$:{
type method 
Outer0 #apply() 
type method 
Library #leftleft(Library that) Outer2::SafeOperatorsAccess__62_0.compose(left:that, right:Outer0.messageTrait())
type method 
Library messageTrait() {<:Outer3::Message
Varres__63_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer3::S _text, Outer3::Message::Opt cause) 
mut method 
Outer3::S #_text() 
read method 
Outer3::S _text() 
mut method 
Outer3::Message::Opt #cause() 
read method 
Outer3::Message::Opt cause() 
method myName() Outer3::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer3::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer3::S.#stringParser(that:that))
method 
Outer0 #apply(Outer3::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer3::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer3::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres__63_0 varres=Outer0::Varres__63_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer3::S.#from(builder:Outer3::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer3::S.#from(builder:Outer3::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer3::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer3::S.doubleQuote().#plusplus(that:Outer3::S.#from(builder:Outer3::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres__63_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer3::Bool #equalequal(Outer0 that) Outer3::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer3::S text) Outer0.#apply(_text:text, cause:Outer3::Message::Opt.#apply())
type method 
Outer0 #apply(Outer3::S text, Outer3::Message cause) Outer0.#apply(_text:text, cause:Outer3::Message::Opt.#apply(that:cause))
type method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
type method 
Outer0 #from(Outer3::S::SBuilder builder) Outer0.#apply(text:Outer3::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer3::S.#from(builder:Outer3::S.#builder()))
SConcat:{
VarnewAcc0__64_0:'@private
{
type method 
mut Outer0 #apply(Outer5::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer5::Concept::ToS::toS() that) 
mut method 
Outer5::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer4::Concept::ToS old, Outer4::S accumulator) 
mut method 
Outer4::Concept::ToS #old() 
read method 
Outer4::Concept::ToS old() 
mut method 
Outer4::S #accumulator() 
read method 
Outer4::S accumulator() 
method 
Outer1::SConcat #add(Outer4::Concept::ToS that) Outer1::SConcat.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer1::SConcat #add(Outer4::Concept::ToS that, Outer4::Concept::ToS separedBy) (
  Outer4::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0__64_0 varnewAcc=Outer0::VarnewAcc0__64_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer4::S.#from(builder:Outer4::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer1::SConcat.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer1::SConcat #end() this
method 
Outer4::S::SBuilder #builder() Outer4::S::SBuilder.empty()
method 
Outer1 #from(Outer4::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer4::S.#from(builder:builder))))}}}}
Guard:{' exception as Guard bureocracy, error as Guard detection
'-is a check guarenteed to be performed, program logic can rely on this being enforced.
'  as exceptions, Guards objects are a way to report/guard complex operations,
' where checking the shape of the input can be unconvenient.
'as errors, they represent precondition violations. 
'Turning an exception Guard into an error Guard
' is equivalent of declaring that such misuse should not happen (blame on the caller),
' still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed
interface <:Outer1::Message'all other guards should implement this one

Operation:{<:Outer2::Guard, Outer2::Message
Varres_$%0_0__65_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%0_0__65_0 varres=Outer0::Varres_$%0_0__65_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%0_0__65_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%1_0__66_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%1_0__66_0 varnewAcc=Outer0::VarnewAcc0_$%1_0__66_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}
Parameter:{<:Outer2::Guard, Outer2::Message
Varres_$%2_0__67_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%2_0__67_0 varres=Outer0::Varres_$%2_0__67_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%2_0__67_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%3_0__68_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%3_0__68_0 varnewAcc=Outer0::VarnewAcc0_$%3_0__68_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}
Precondition:{<:Outer2::Guard, Outer2::Message
Varres_$%4_0__69_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%4_0__69_0 varres=Outer0::Varres_$%4_0__69_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%4_0__69_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%5_0__70_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%5_0__70_0 varnewAcc=Outer0::VarnewAcc0_$%5_0__70_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}}
System:{
Guard:{'<:Outer::Guard soon (remove "interface" for a bad translation bug: Outer1_System_Guard is not abstract and does not override abstract method MtoS()
interface <:Outer2::Guard
PluginFailure:{<:Outer2::Guard, Outer3::Message
Varres_$%6_0__71_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer3::S _text, Outer3::Message::Opt cause) 
mut method 
Outer3::S #_text() 
read method 
Outer3::S _text() 
mut method 
Outer3::Message::Opt #cause() 
read method 
Outer3::Message::Opt cause() 
method myName() Outer3::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer3::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer3::S.#stringParser(that:that))
method 
Outer0 #apply(Outer3::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer3::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer3::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%6_0__71_0 varres=Outer0::Varres_$%6_0__71_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer3::S.#from(builder:Outer3::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer3::S.#from(builder:Outer3::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer3::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer3::S.doubleQuote().#plusplus(that:Outer3::S.#from(builder:Outer3::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%6_0__71_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer3::Bool #equalequal(Outer0 that) Outer3::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer3::S text) Outer0.#apply(_text:text, cause:Outer3::Message::Opt.#apply())
type method 
Outer0 #apply(Outer3::S text, Outer3::Message cause) Outer0.#apply(_text:text, cause:Outer3::Message::Opt.#apply(that:cause))
type method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
type method 
Outer0 #from(Outer3::S::SBuilder builder) Outer0.#apply(text:Outer3::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer3::S.#from(builder:Outer3::S.#builder()))
SConcat:{
VarnewAcc0_$%7_0__72_0:'@private
{
type method 
mut Outer0 #apply(Outer5::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer5::Concept::ToS::toS() that) 
mut method 
Outer5::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer4::Concept::ToS old, Outer4::S accumulator) 
mut method 
Outer4::Concept::ToS #old() 
read method 
Outer4::Concept::ToS old() 
mut method 
Outer4::S #accumulator() 
read method 
Outer4::S accumulator() 
method 
Outer0 #add(Outer4::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer4::Concept::ToS that, Outer4::Concept::ToS separedBy) (
  Outer4::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%7_0__72_0 varnewAcc=Outer0::VarnewAcc0_$%7_0__72_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer4::S.#from(builder:Outer4::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer4::S::SBuilder #builder() Outer4::S::SBuilder.empty()
method 
Outer1 #from(Outer4::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer4::S.#from(builder:builder))))}}}}
Assert:{interface <:Outer1::Message
NotImplementedYet:{<:Outer1, Outer2::Message
Varres_$%8_0__73_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%8_0__73_0 varres=Outer0::Varres_$%8_0__73_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%8_0__73_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%9_0__74_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%9_0__74_0 varnewAcc=Outer0::VarnewAcc0_$%9_0__74_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}
ObservedBug:{<:Outer1, Outer2::Message
Varres_$%10_0__75_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%10_0__75_0 varres=Outer0::Varres_$%10_0__75_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%10_0__75_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%11_0__76_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%11_0__76_0 varnewAcc=Outer0::VarnewAcc0_$%11_0__76_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}
CodeNotReachable:{<:Outer1, Outer2::Message
Varres_$%12_0__77_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%12_0__77_0 varres=Outer0::Varres_$%12_0__77_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%12_0__77_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%13_0__78_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%13_0__78_0 varnewAcc=Outer0::VarnewAcc0_$%13_0__78_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}
$:{
type method 
Outer0 #apply(Outer2::N that) 
mut method 
Outer2::N #that() 
read method 
Outer2::N that() 
type method 
Outer0 #begin() Outer0.#apply(that:Outer2::N.#numberParser(that:{'@stringU
'0
}))
method 
Void #end() void
method 
Outer0 #add(Outer2::Bool that) (
  Void unused=(
    Void unused0=(
      Void unused2=that.#checkTrue()
      
      catch exception Void catched void
      return Outer0.#apply(that:this.that().#plus(that:Outer2::N.#numberParser(that:{'@stringU
      '1
      })))
      )
    Void unused1=error (
      Outer1::AssertMessage::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer1::AssertMessage.#from(builder:Outer1::AssertMessage.#builder().#C().#o().#n().#d().#i().#t().#i().#o().#n().#space().#n().#u().#m().#b().#e().#r().#space()).#begin().#add(that:this.that()).#end()
      listKind.#from(builder:listKind.#builder().#space().#f().#a().#i().#l().#e().#d())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #add(Outer2::Bool that, Outer2::Concept::ToS msg) (
  Void unused=(
    Void unused0=(
      Void unused2=that.#checkTrue()
      
      catch exception Void catched void
      return Outer0.#apply(that:this.that().#plus(that:Outer2::N.#numberParser(that:{'@stringU
      '1
      })))
      )
    Void unused1=error (
      Outer1::AssertMessage::#from(builder ) ::#begin() ::#add(that ) ::#add(that ) ::#end() ::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=(
        Outer1::AssertMessage::#from(builder ) ::#begin() ::#add(that ) ::#add(that ) ::#end() listKind0=Outer1::AssertMessage.#from(builder:Outer1::AssertMessage.#builder()).#begin().#add(that:msg).#add(that:Outer2::S.nl()).#end()
        listKind0.#from(builder:listKind0.#builder().#n().#u().#m().#b().#e().#r().#colon())
        ).#begin().#add(that:this.that()).#end()
      listKind.#from(builder:listKind.#builder().#space().#f().#a().#i().#l().#e().#d())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
AssertMessage:{<:Outer1, Outer2::Message
Varres_$%14_0__79_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%14_0__79_0 varres=Outer0::Varres_$%14_0__79_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%14_0__79_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%15_0__80_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%15_0__80_0 varnewAcc=Outer0::VarnewAcc0_$%15_0__80_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}}
LinkedList:{
ListCode:{
type method 
Library #apply() {' generic linked list class, elements of type Elem
<:Outer3::Concept::Named
Varres0__81_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1__82_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer3::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer3::Bool.false()
        (
          Void unused2=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer3::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0::Elem top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer3::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Guard::Operation.#from(builder:Outer3::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0__81_0 varres=Outer0::Varres0__81_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer0::Elem that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1__82_0 varres=Outer0::Varres1__82_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Elem:{}
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer1::Cell #next() exception Void 
method 
Outer1::Elem #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer4::Assert::ObservedBug.#from(builder:Outer4::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer1::Elem elem, Outer1::Cell nextCell) 
mut method 
Outer1::Elem #elem() 
read method 
Outer1::Elem elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer1::CellNext::#apply(elem nextCell ) startPoint=Outer1::CellNext.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer1::CellNext cell0=(
      Void unused=return cell
      
      catch return Outer1::CellNext casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer4::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer4::Assert::ObservedBug.#from(builder:Outer4::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer4::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer4::Bool #terminate() 
read method 
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer1::Elem #inner() this.that().#inner()
read method 
Void #close() void}}}
type method 
Library list(type Any that) Outer1::SafeOperatorsAccess__62_0.redirect(that:Outer0::ListCode.#apply(), srcBinaryRepr:Outer1::S.#from(builder:Outer1::S.#builder().#E().#l().#e().#m()).binaryRepr(), dest:that)
type method 
Library eqList(type Any that) (
  Outer1::SafeOperatorsAccess__62_0::compose(left right ) lib=Outer1::SafeOperatorsAccess__62_0.compose(left:Outer0::ListCode.#apply(), right:Outer0::ListCodeEq.#apply())
  Outer1::SafeOperatorsAccess__62_0.redirect(that:lib, srcBinaryRepr:Outer1::S.#from(builder:Outer1::S.#builder().#E().#l().#e().#m()).binaryRepr(), dest:that)
  )
ListCodeEq:{
type method 
Library #apply() {
Varaccumulator__83_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#begin() inner) 
mut method 
Void inner(Outer1::#begin() that) 
mut method 
Outer1::#begin() #inner() }
Elem:{<:Outer4::Concept::Equals}
type method 
Outer0 #begin() 
method 
Outer0 #add(Outer0::Elem that) 
method 
Outer0 #end() 
method 
mut Outer0::Iterator vals() 
Iterator:{
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Outer1::Elem #inner() 
read method 
Void #close() }
method 
Outer3::Bool contains(Outer0::Elem that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::vals() ::#inner() ::equals(that ) cond=e.#inner().equals(that:that)
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return Outer3::Bool.true()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer3::Bool propagated0 (
          Void unused10=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return Outer3::Bool.false()
    void
    )
  
  catch return Outer3::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 remove(Outer0::Elem that) (
  Outer0::#begin() accumulator=Outer0.#begin()
  mut Outer0::Varaccumulator__83_0 varaccumulator=Outer0::Varaccumulator__83_0.#apply(inner:accumulator)
  Void unused=(
    Outer0::vals() e=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=e.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=e.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e.#inner().equals(that:that).#bang()
              (
                Void unused6=cond.#checkTrue()
                
                catch exception Void catched4 void
                varaccumulator.inner(that:varaccumulator.#inner().#add(that:e.#inner()))
                )
              )
            )
          
          catch exception Void catched5 void
          void
          )
        
        catch exception Any propagated (
          Void unused7=e.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused8=e.#close()
        return propagated0
        )
      e.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer3::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e1=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Outer0::vals() e2=that.vals()
            (
              Void unused4=(
                Void unused5=(
                  Void unused6=loop (
                    Void unused7=e1.#next()
                    
                    catch exception Void catched1 (
                      Void unused8=(
                        Void unused11=e2.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused9=(
                        Void unused12=e1.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused10=(
                        Void unused13=e2.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused14=e2.#next()
                      
                      catch exception Void catched6 (
                        Void unused15=(
                          Void unused17=e1.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused16=(
                          Void unused18=e2.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e1.#inner().equals(that:e2.#inner()).#bang()
                        (
                          Void unused19=cond.#checkTrue()
                          
                          catch exception Void catched11 void
                          return Outer3::Bool.false()
                          )
                        )
                      )
                    )
                  
                  catch exception Void catched12 void
                  void
                  )
                
                catch exception Any propagated (
                  Void unused20=e2.#close()
                  exception propagated
                  )
                void
                )
              
              catch return Outer3::Bool propagated0 (
                Void unused21=e2.#close()
                return propagated0
                )
              e2.#close()
              )
            )
          
          catch exception Any propagated1 (
            Void unused22=e1.#close()
            exception propagated1
            )
          void
          )
        
        catch return Outer3::Bool propagated2 (
          Void unused23=e1.#close()
          return propagated2
          )
        e1.#close()
        )
      )
    Void unused1=return Outer3::Bool.true()
    void
    )
  
  catch return Outer3::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool equals(Any that) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer3::Bool.false()
    void
    )
  
  catch return Outer3::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}}}
Strings:{' generic linked list class, elements of type Elem
<:Outer1::Concept::Named
Varres0_$%16_0__84_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1_$%17_0__85_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer1::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer1::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer1::Bool.false()
        (
          Void unused2=return Outer1::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::S top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer1::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer1::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer1::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer1::Guard::Operation.#from(builder:Outer1::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0_$%16_0__84_0 varres=Outer0::Varres0_$%16_0__84_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::S that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1_$%17_0__85_0 varres=Outer0::Varres1_$%17_0__85_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer2::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::S #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer2::Assert::ObservedBug.#from(builder:Outer2::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::S elem, Outer1::Cell nextCell) 
mut method 
Outer2::S #elem() 
read method 
Outer2::S elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      
      catch return Outer0 casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer2::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Assert::ObservedBug.#from(builder:Outer2::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer2::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer2::Bool #terminate() 
read method 
Outer2::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer2::S #inner() this.that().#inner()
read method 
Void #close() void}
Varaccumulator_$%18_0__86_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#begin() inner) 
mut method 
Void inner(Outer1::#begin() that) 
mut method 
Outer1::#begin() #inner() }
method 
Outer1::Bool contains(Outer1::S that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::vals() ::#inner() ::equals(that ) cond=e.#inner().equals(that:that)
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return Outer1::Bool.true()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer1::Bool propagated0 (
          Void unused10=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 remove(Outer1::S that) (
  Outer0::#begin() accumulator=Outer0.#begin()
  mut Outer0::Varaccumulator_$%18_0__86_0 varaccumulator=Outer0::Varaccumulator_$%18_0__86_0.#apply(inner:accumulator)
  Void unused=(
    Outer0::vals() e=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=e.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=e.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e.#inner().equals(that:that).#bang()
              (
                Void unused6=cond.#checkTrue()
                
                catch exception Void catched4 void
                varaccumulator.inner(that:varaccumulator.#inner().#add(that:e.#inner()))
                )
              )
            )
          
          catch exception Void catched5 void
          void
          )
        
        catch exception Any propagated (
          Void unused7=e.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused8=e.#close()
        return propagated0
        )
      e.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer1::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e1=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Outer0::vals() e2=that.vals()
            (
              Void unused4=(
                Void unused5=(
                  Void unused6=loop (
                    Void unused7=e1.#next()
                    
                    catch exception Void catched1 (
                      Void unused8=(
                        Void unused11=e2.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused9=(
                        Void unused12=e1.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused10=(
                        Void unused13=e2.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused14=e2.#next()
                      
                      catch exception Void catched6 (
                        Void unused15=(
                          Void unused17=e1.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused16=(
                          Void unused18=e2.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e1.#inner().equals(that:e2.#inner()).#bang()
                        (
                          Void unused19=cond.#checkTrue()
                          
                          catch exception Void catched11 void
                          return Outer1::Bool.false()
                          )
                        )
                      )
                    )
                  
                  catch exception Void catched12 void
                  void
                  )
                
                catch exception Any propagated (
                  Void unused20=e2.#close()
                  exception propagated
                  )
                void
                )
              
              catch return Outer1::Bool propagated0 (
                Void unused21=e2.#close()
                return propagated0
                )
              e2.#close()
              )
            )
          
          catch exception Any propagated1 (
            Void unused22=e1.#close()
            exception propagated1
            )
          void
          )
        
        catch return Outer1::Bool propagated2 (
          Void unused23=e1.#close()
          return propagated2
          )
        e1.#close()
        )
      )
    Void unused1=return Outer1::Bool.true()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool equals(Any that) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Path:{<:Outer1::Concept::ToS, Outer1::Concept::Equals, Outer1::Concept::Named
Varresult__87_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Strings::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Strings::#begin() ::#end() that) 
mut method 
Outer2::Strings::#begin() ::#end() #inner() }
Varstr__88_0:'@private
{
type method 
mut Outer0 #apply(Outer1::toS() inner) 
mut method 
Void inner(Outer1::toS() that) 
mut method 
Outer1::toS() #inner() }
Varaccumulator0__89_0:'@private
{
type method 
mut Outer0 #apply(Outer2::S::#from(builder ) ::#begin() inner) 
mut method 
Void inner(Outer2::S::#from(builder ) ::#begin() that) 
mut method 
Outer2::S::#from(builder ) ::#begin() #inner() }
Varacc__90_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Path inner) 
mut method 
Void inner(Outer2::Path that) 
mut method 
Outer2::Path #inner() 
read method 
Outer2::Path inner() }
type method '@private
Outer0 _private__45_0(Library _binaryRepr__45_0) 
mut method '@private
Library #_binaryRepr__45_0() 
read method '@private
Library _binaryRepr__45_0() 
method myName() Outer1::GetMyName.#apply(that:Outer0)
type method 
Outer0 fromDocInternalizedS(Outer1::S that) (
  Void unused=(
    Void unused0=(
      Outer1::S::#equalequal(that ) cond=that.#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#at().#colon().#colon()).#plusplus(that:Outer1::S.nl()))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.fromS(that:Outer1::S.#from(builder:Outer1::S.#builder().#O().#u().#t().#e().#r().#0()))
        )
      )
    Void unused1=return Outer0.fromS(that:that.#apply(start:Outer1::N.#numberParser(that:{'@stringU
    '3
    }), end:that.size().#less(that:Outer1::N.#numberParser(that:{'@stringU
    '1
    }))))
    
    catch error Outer1::Message x error Outer0.parseError(that:that, cause:x)
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 fromS(Outer1::Concept::ToS that) Outer0.#stringParser(that:that.toS().binaryRepr())
type method 
Outer0 #from(Outer1::S::SBuilder builder) Outer0.#stringParser(that:builder.binaryRepr())
type method 
Outer1::S::SBuilder #builder() Outer1::S::SBuilder.empty()
type method 
Outer0 #stringParser(Library that) (
  Void unused=use Outer1::SafeOperators check ifInvalidDo(path:that) error Outer0.parseError(that:Outer1::S.#stringParser(that:that))
  Outer0._private__45_0(_binaryRepr__45_0:that)
  )
type method 
Any parseError(Outer1::S that) Outer1::S.#from(builder:Outer1::S.#builder().#U().#n().#s().#a().#t().#i().#s().#f().#a().#c().#t().#o().#r().#y().#E().#r().#r().#o().#r().#T().#o().#A().#v().#o().#i().#d().#C().#y().#c().#l().#e().#comma().#space().#r().#e().#p().#l().#a().#c().#e().#space().#i().#n().#space().#A().#d().#a().#m().#T().#2())
type method 
Any parseError(Outer1::S that, Outer1::Message cause) Outer1::S.#from(builder:Outer1::S.#builder().#U().#n().#s().#a().#t().#i().#s().#f().#a().#c().#t().#o().#r().#y().#E().#r().#r().#o().#r().#T().#o().#A().#v().#o().#i().#d().#C().#y().#c().#l().#e().#comma().#space().#r().#e().#p().#l().#a().#c().#e().#space().#i().#n().#space().#A().#d().#a().#m().#T().#2())
method 
Library binaryRepr() this._binaryRepr__45_0()
method toS() Outer1::S.#stringParser(that:this._binaryRepr__45_0())
method 
Outer1::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=use Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Path #plusplus(Outer1::Path that) (
  Void unused=(
    Void unused0=(
      Outer0::#equalequal(that ) cond=this.#equalequal(that:Outer1::Path.#from(builder:Outer1::Path.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return that
        )
      )
    Void unused1=(
      Outer1::Path::#equalequal(that ) cond0=that.#equalequal(that:Outer1::Path.#from(builder:Outer1::Path.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return this
        )
      )
    Void unused2=return Outer1::Path.#stringParser(that:(
      Outer0::toS() ::#begin() ::#add(that ) ::#add(that ) ::#end() listKind=this.toS().#begin().#add(that:Outer1::S.#from(builder:Outer1::S.#builder().#colon().#colon())).#add(that:that).#end()
      listKind.#from(builder:listKind.#builder())
      ).binaryRepr())
    void
    )
  
  catch return Outer1::Path result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Strings names() (
  Void unused=(
    Outer0::toS() str=this.toS()
    Void unused0=(
      Outer0::toS() ::#equalequal(that ) cond=str.#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused4=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer1::Strings.#begin().#end()
        )
      )
    mut Outer0::Varstr__88_0 varstr=Outer0::Varstr__88_0.#apply(inner:str)
    Void unused1=varstr.inner(that:varstr.#inner().#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#colon().#colon())))
    Outer1::Strings::#begin() ::#end() result=Outer1::Strings.#begin().#end()
    mut Outer0::Varresult__87_0 varresult=Outer0::Varresult__87_0.#apply(inner:result)
    Void unused2=(
      Void unused5=loop (
        Void unused6=varstr.#inner().#bangequal(that:Outer1::S.#from(builder:Outer1::S.#builder())).#checkTrue()
        (
          Outer0::Varstr__88_0::#inner() ::firstIndexOf(that ) pos=varstr.#inner().firstIndexOf(that:Outer1::S.#from(builder:Outer1::S.#builder().#colon().#colon()))
          Void unused7=varresult.inner(that:varresult.#inner().#add(that:varstr.#inner().#apply(end:pos)))
          varstr.inner(that:varstr.#inner().#apply(start:pos.#plus(that:Outer1::N.#numberParser(that:{'@stringU
          '2
          }))))
          )
        )
      
      catch exception Void catched3 void
      void
      )
    Void unused3=return varresult.#inner().#end()
    void
    )
  
  catch return Outer1::Strings result0 result0
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer1::Path from(Outer1::Strings names) (
  Void unused=(
    Void unused0=(
      Outer1::Strings::isEmpty() cond=names.isEmpty()
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer1::Path.#from(builder:Outer1::Path.#builder().#O().#u().#t().#e().#r().#0())
        )
      )
    Outer1::S::#from(builder ) ::#begin() ::#end() ::#from(builder ) s=(
      Outer1::S::#from(builder ) ::#begin() ::#end() listKind=(
        Outer1::S::#from(builder ) ::#begin() accumulator=Outer1::S.#from(builder:Outer1::S.#builder()).#begin()
        mut Outer0::Varaccumulator0__89_0 varaccumulator=Outer0::Varaccumulator0__89_0.#apply(inner:accumulator)
        Void unused3=(
          Outer1::Strings::vals() n=names.vals()
          (
            Void unused4=(
              Void unused5=(
                Void unused6=loop (
                  Void unused7=n.#next()
                  
                  catch exception Void catched2 (
                    Void unused8=(
                      Void unused9=n.#checkEnd()
                      
                      catch exception Void catched3 void
                      void
                      )
                    exception void
                    )
                  varaccumulator.inner(that:varaccumulator.#inner().#add(that:n.#inner(), separedBy:Outer1::S.#from(builder:Outer1::S.#builder().#colon().#colon())))
                  )
                
                catch exception Void catched5 void
                void
                )
              
              catch exception Any propagated (
                Void unused10=n.#close()
                exception propagated
                )
              void
              )
            
            catch return Outer1::Path propagated0 (
              Void unused11=n.#close()
              return propagated0
              )
            n.#close()
            )
          )
        varaccumulator.#inner().#end()
        )
      listKind.#from(builder:listKind.#builder())
      )
    Void unused1=return Outer0.fromS(that:s)
    void
    )
  
  catch return Outer1::Path result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer1::Path fresh(Outer1::S name) Outer1::Path.fromS(that:Outer1::SafeOperators.freshName(that:name))
type method 
Outer1::Path fresh() this.fresh(name:Outer1::S.#from(builder:Outer1::S.#builder().#F().#r().#e().#s().#h()))
type method 
Outer1::Path fresh(Outer1::Path path) (
  Void unused=(
    Outer1::Path::names() ::#end() names=path.names().#end()
    Void unused0=(
      Outer1::Path::names() ::#end() ::isEmpty() cond=names.isEmpty()
      (
        Void unused4=cond.#checkTrue()
        
        catch exception Void catched0 void
        return this.fresh()
        )
      )
    Outer1::Path last=this.fresh(name:names.top())
    Outer1::Path acc=Outer1::Path.#from(builder:Outer1::Path.#builder().#O().#u().#t().#e().#r().#0())
    mut Outer0::Varacc__90_0 varacc=Outer0::Varacc__90_0.#apply(inner:acc)
    Void unused1=(
      Outer1::Path::names() ::#end() ::pop() ::#end() ::vals() n=names.pop().#end().vals()
      (
        Void unused5=(
          Void unused6=(
            Void unused7=loop (
              Void unused8=n.#next()
              
              catch exception Void catched2 (
                Void unused9=(
                  Void unused10=n.#checkEnd()
                  
                  catch exception Void catched3 void
                  void
                  )
                exception void
                )
              varacc.inner(that:varacc.#inner().#plusplus(that:Outer1::Path.fromS(that:n.#inner())))
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused11=n.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer1::Path propagated0 (
          Void unused12=n.#close()
          return propagated0
          )
        n.#close()
        )
      )
    Void unused2=varacc.inner(that:varacc.#inner().#plusplus(that:last))
    Void unused3=return varacc.#inner()
    void
    )
  
  catch return Outer1::Path result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Selector:{<:Outer1::Concept::ToS, Outer1::Concept::Equals, Outer1::Concept::Named
Varaccumulator1__91_0:'@private
{
type method 
mut Outer0 #apply(Outer2::S::#from(builder ) ::#begin() inner) 
mut method 
Void inner(Outer2::S::#from(builder ) ::#begin() that) 
mut method 
Outer2::S::#from(builder ) ::#begin() #inner() }
Varresult0__92_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Strings::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Strings::#begin() ::#end() that) 
mut method 
Outer2::Strings::#begin() ::#end() #inner() }
Varstr0__93_0:'@private
{
type method 
mut Outer0 #apply(Outer1::toS() inner) 
mut method 
Void inner(Outer1::toS() that) 
mut method 
Outer1::toS() #inner() }
Vartot__94_0:'@private
{
type method 
mut Outer0 #apply(Outer2::SafeOperators::freshName(that ) ::#plusplus(that ) inner) 
mut method 
Void inner(Outer2::SafeOperators::freshName(that ) ::#plusplus(that ) that) 
mut method 
Outer2::SafeOperators::freshName(that ) ::#plusplus(that ) #inner() }
Varname__95_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Selector::name() inner) 
mut method 
Void inner(Outer2::Selector::name() that) 
mut method 
Outer2::Selector::name() #inner() }
type method '@private
Outer0 _private__46_0(Library _binaryRepr__46_0) 
mut method '@private
Library #_binaryRepr__46_0() 
read method '@private
Library _binaryRepr__46_0() 
method myName() Outer1::GetMyName.#apply(that:Outer0)
type method 
Outer0 fromS(Outer1::Concept::ToS that) Outer0.#stringParser(that:that.toS().binaryRepr())
type method 
Outer0 #from(Outer1::S::SBuilder builder) Outer0.#stringParser(that:builder.binaryRepr())
type method 
Outer1::S::SBuilder #builder() Outer1::S::SBuilder.empty()
type method 
Outer0 #stringParser(Library that) (
  Void unused=use Outer1::SafeOperators check ifInvalidDo(selector:that) error Outer0.parseError(that:Outer1::S.#stringParser(that:that))
  Outer0._private__46_0(_binaryRepr__46_0:that)
  )
type method 
Any parseError(Outer1::S that) Outer1::S.#from(builder:Outer1::S.#builder().#U().#n().#s().#a().#t().#i().#s().#f().#a().#c().#t().#o().#r().#y().#E().#r().#r().#o().#r().#T().#o().#A().#v().#o().#i().#d().#C().#y().#c().#l().#e().#comma().#space().#r().#e().#p().#l().#a().#c().#e().#space().#i().#n().#space().#A().#d().#a().#m().#T().#2())
type method 
Outer0 from(Outer1::S name, Outer1::Strings names) (
  Void unused=(
    Void unused0=(
      Outer1::Strings::isEmpty() cond=names.isEmpty()
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.fromS(that:name.#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#oRound().#cRound())))
        )
      )
    Outer1::S::#from(builder ) ::#begin() ::#end() ::#from(builder ) pars=(
      Outer1::S::#from(builder ) ::#begin() ::#end() listKind=(
        Outer1::S::#from(builder ) ::#begin() accumulator=Outer1::S.#from(builder:Outer1::S.#builder().#oRound()).#begin()
        mut Outer0::Varaccumulator1__91_0 varaccumulator=Outer0::Varaccumulator1__91_0.#apply(inner:accumulator)
        Void unused3=(
          Outer1::Strings::vals() n=names.vals()
          (
            Void unused4=(
              Void unused5=(
                Void unused6=loop (
                  Void unused7=n.#next()
                  
                  catch exception Void catched2 (
                    Void unused8=(
                      Void unused9=n.#checkEnd()
                      
                      catch exception Void catched3 void
                      void
                      )
                    exception void
                    )
                  varaccumulator.inner(that:varaccumulator.#inner().#add(that:n.#inner().#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#comma()))))
                  )
                
                catch exception Void catched5 void
                void
                )
              
              catch exception Any propagated (
                Void unused10=n.#close()
                exception propagated
                )
              void
              )
            
            catch return Outer0 propagated0 (
              Void unused11=n.#close()
              return propagated0
              )
            n.#close()
            )
          )
        varaccumulator.#inner().#end()
        )
      listKind.#from(builder:listKind.#builder())
      )
    Void unused1=return Outer0.fromS(that:name.#plusplus(that:pars.#apply(end:pars.size().#less(that:Outer1::N.#numberParser(that:{'@stringU
    '1
    }))).#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#cRound()))))
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::S nameAsField() (
  Void unused=(
    Outer0::name() n=this.name()
    Void unused0=(
      Outer0::name() ::#apply(that ) ::#equalequal(that ) cond=n.#apply(that:Outer1::N.#numberParser(that:{'@stringU
      '0
      })).#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#hash()))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return n.#apply(start:Outer1::N.#numberParser(that:{'@stringU
        '1
        }))
        )
      )
    Void unused1=return n
    void
    )
  
  catch return Outer1::S result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::S prefixAsField() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::#apply(that ) ::#equalequal(that ) cond=this.toS().#apply(that:Outer1::N.#numberParser(that:{'@stringU
      '0
      })).#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#hash()))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer1::S.#from(builder:Outer1::S.#builder().#hash())
        )
      )
    Void unused1=return Outer1::S.#from(builder:Outer1::S.#builder())
    void
    )
  
  catch return Outer1::S result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Library binaryRepr() this._binaryRepr__46_0()
method toS() Outer1::S.#stringParser(that:this._binaryRepr__46_0())
method 
Outer1::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=use Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer1::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool isOperator() (
  Void unused=(
    Void unused0=(
      Outer0::name() ::size() ::#equalequal(that ) cond=this.name().size().#equalequal(that:Outer1::N.#numberParser(that:{'@stringU
      '0
      }))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer1::Bool.true()
        )
      )
    Void unused1=return this.name().#apply(that:Outer1::N.#numberParser(that:{'@stringU
    '0
    })).#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#hash()))
    void
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::S name() (
  Outer0::toS() str=this.toS()
  str.#apply(end:str.firstIndexOf(that:Outer1::S.#from(builder:Outer1::S.#builder().#oRound())))
  )
method 
Outer1::Strings names() (
  Void unused=(
    Outer0::toS() str=this.toS()
    mut Outer0::Varstr0__93_0 varstr=Outer0::Varstr0__93_0.#apply(inner:str)
    Void unused0=varstr.inner(that:varstr.#inner().#apply(start:varstr.#inner().firstIndexOf(that:Outer1::S.#from(builder:Outer1::S.#builder().#oRound())).#plus(that:Outer1::N.#numberParser(that:{'@stringU
    '1
    })), end:varstr.#inner().size().#less(that:Outer1::N.#numberParser(that:{'@stringU
    '1
    }))).#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#comma())))
    Outer1::Strings::#begin() ::#end() result=Outer1::Strings.#begin().#end()
    Void unused1=(
      Outer0::Varstr0__93_0::#inner() ::#equalequal(that ) cond=varstr.#inner().#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#comma()))
      (
        Void unused4=cond.#checkTrue()
        
        catch exception Void catched0 void
        return result
        )
      )
    mut Outer0::Varresult0__92_0 varresult=Outer0::Varresult0__92_0.#apply(inner:result)
    Void unused2=(
      Void unused5=loop (
        Void unused6=varstr.#inner().#bangequal(that:Outer1::S.#from(builder:Outer1::S.#builder())).#checkTrue()
        (
          Outer0::Varstr0__93_0::#inner() ::firstIndexOf(that ) pos=varstr.#inner().firstIndexOf(that:Outer1::S.#from(builder:Outer1::S.#builder().#comma()))
          Void unused7=varresult.inner(that:varresult.#inner().#add(that:varstr.#inner().#apply(end:pos)))
          varstr.inner(that:varstr.#inner().#apply(start:pos.#plus(that:Outer1::N.#numberParser(that:{'@stringU
          '1
          }))))
          )
        )
      
      catch exception Void catched3 void
      void
      )
    Void unused3=return varresult.#inner().#end()
    void
    )
  
  catch return Outer1::Strings result0 result0
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer1::Selector fresh(Outer1::Selector that) (
  Void unused=(
    Outer1::Selector::name() name=that.name()
    mut Outer0::Varname__95_0 varname=Outer0::Varname__95_0.#apply(inner:name)
    Void unused0=(
      Outer0::Varname__95_0::#inner() ::#equalequal(that ) cond=varname.#inner().#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder()))
      (
        Void unused4=cond.#checkTrue()
        
        catch exception Void catched0 void
        varname.inner(that:Outer1::S.#from(builder:Outer1::S.#builder().#f().#r().#e().#s().#h()))
        )
      )
    Outer1::SafeOperators::freshName(that ) fName=Outer1::SafeOperators.freshName(that:varname.#inner())
    Outer1::SafeOperators::freshName(that ) ::#plusplus(that ) tot=fName.#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#oRound()))
    mut Outer0::Vartot__94_0 vartot=Outer0::Vartot__94_0.#apply(inner:tot)
    Void unused1=(
      Outer1::Selector::names() ::vals() n=that.names().vals()
      (
        Void unused5=(
          Void unused6=(
            Void unused7=loop (
              Void unused8=n.#next()
              
              catch exception Void catched2 (
                Void unused9=(
                  Void unused10=n.#checkEnd()
                  
                  catch exception Void catched3 void
                  void
                  )
                exception void
                )
              vartot.inner(that:vartot.#inner().#plusplus(that:n.#inner().#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#comma()))))
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused11=n.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer1::Selector propagated0 (
          Void unused12=n.#close()
          return propagated0
          )
        n.#close()
        )
      )
    Void unused2=vartot.inner(that:vartot.#inner().#apply(start:Outer1::N.#numberParser(that:{'@stringU
    '0
    }), end:vartot.#inner().size().#less(that:Outer1::N.#numberParser(that:{'@stringU
    '1
    }))).#plusplus(that:Outer1::S.#from(builder:Outer1::S.#builder().#cRound())))
    Void unused3=return Outer1::Selector.fromS(that:vartot.#inner())
    void
    )
  
  catch return Outer1::Selector result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
SafeOperators:{'@plugin
'L42.is/connected/withSafeOperators

type method 
Library compose(Library left, Library right) use Outer0 check compose(left:left, right:right) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#c().#o().#m().#p().#o().#s().#e())
type method 
Library renameClass(Library that, Outer1::Path src, Outer1::Path dest) use Outer0 check renameClass(that:that, src:src.binaryRepr(), dest:dest.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#r().#e().#n().#a().#m().#e().#C().#l().#a().#s().#s())
type method 
Library renameMethod(Library that, Outer1::Path path, Outer1::Selector src, Outer1::Selector dest) use Outer0 check renameMethod(that:that, path:path.binaryRepr(), src:src.binaryRepr(), dest:dest.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#r().#e().#n().#a().#m().#e().#M().#e().#t().#h().#o().#d())
type method 
Library sumMethods(Library that, Outer1::Path path, Outer1::Selector src1, Outer1::Selector src2, Outer1::Selector dest, Outer1::S name) use Outer0 check sumMethods(that:that, path:path.binaryRepr(), src1:src1.binaryRepr(), src2:src2.binaryRepr(), dest:dest.binaryRepr(), name:name.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#r().#e().#n().#a().#m().#e().#M().#e().#t().#h().#o().#d())
type method 
Library redirect(Library that, Outer1::Path src, type Any dest) use Outer0 check redirect(that:that, src:src.binaryRepr(), dest:dest) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#r().#e().#d().#i().#r().#e().#c().#t())
type method 
Library removeImplementation(Library that, Outer1::Path path) use Outer0 check removeImplementation(that:that, path:path.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#r().#e().#m().#o().#v().#e().#I().#m().#p().#l().#e().#m().#e().#n().#t().#a().#t().#i().#o().#n().#oRound().#p().#a().#t().#h().#cRound())
type method 
Library moveImplementation(Library that, Outer1::Path path, Outer1::Selector src, Outer1::Selector dest) use Outer0 check moveImplementation(that:that, path:path.binaryRepr(), src:src.binaryRepr(), dest:dest.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#m().#o().#v().#e().#I().#m().#p().#l().#e().#m().#e().#n().#t().#a().#t().#i().#o().#n())
type method 
Library removeImplementation(Library that, Outer1::Path path, Outer1::Selector selector) use Outer0 check removeImplementation(that:that, path:path.binaryRepr(), selector:selector.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#r().#e().#m().#o().#v().#e().#I().#m().#p().#l().#e().#m().#e().#n().#t().#a().#t().#i().#o().#n().#oRound().#p().#a().#t().#h().#comma().#s().#e().#l().#e().#c().#t().#o().#r().#cRound())
type method 
Library addDocumentation(Library that, Outer1::Path path, Outer1::Introspection::Doc doc) use Outer0 check addDocumentation(that:that, path:path.binaryRepr(), doc:doc.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#a().#d().#d().#D().#o().#c().#u().#m().#e().#n().#t().#a().#t().#i().#o().#n().#oRound().#p().#a().#t().#h().#cRound())
type method 
Library addDocumentation(Library that, Outer1::Path path, Outer1::Selector selector, Outer1::Introspection::Doc doc) use Outer0 check addDocumentation(that:that, path:path.binaryRepr(), selector:selector.binaryRepr(), doc:doc.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#a().#d().#d().#D().#o().#c().#u().#m().#e().#n().#t().#a().#t().#i().#o().#n().#oRound().#p().#a().#t().#h().#comma().#s().#e().#l().#e().#c().#t().#o().#r().#cRound())
type method 
Outer1::S freshName(Outer1::S that) Outer1::S.#stringParser(that:use Outer0 check freshName(that:that.binaryRepr()) error Outer1::System::Guard::PluginFailure.#from(builder:Outer1::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#f().#r().#e().#s().#h().#N().#a().#m().#e().#oRound().#t().#h().#a().#t().#cRound()))}
MetaGuard:{interface <:Outer1::Guard
RecordWrapper:' can not be private, I need to Patch it.
{
type method 
Outer2::S libToS(Library that) Outer2::S.#from(builder:Outer2::S.#builder().#T().#O().#space().#F().#I().#X())
type method 
Library recordWrapperToSTrait() {<:Outer3::MetaGuard
method toS() Outer0.myName().#plusplus(that:Outer1.libToS(that:this.lib()))
method 
Library lib() }
type method 
Library recordWrapperTrait() {<:Outer3::MetaGuard
method kind() Outer0.myName()
method text() Outer3::S.#from(builder:Outer3::S.#builder())
method responseOf() Outer3::Message::Opt.#apply()
method myName() Outer3::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer3::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer3::Introspection::Record record, Library lib) 
method 
Outer3::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer3::Bool #equalequal(Outer0 that) Outer3::Message::EqualMessages.#apply(that:this, other:that)
type method 
Outer3::S libName() 
type method 
Void #apply(Library lift) exception Outer0 (
  Outer3::Introspection::Record::#apply(lib ) record=Outer3::Introspection::Record.#apply(lib:lift)
  Outer3::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer3::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )}
type method 
Library #leftleft(Library that) ('either that provides a toS, or I have a default impl, that requires lib()

  Outer2::SafeOperatorsAccess__62_0::compose(left right ) res=Outer2::SafeOperatorsAccess__62_0.compose(left:that, right:Outer0.recordWrapperTrait())
  (
    Void unused=(
      Void unused0=return Outer2::SafeOperatorsAccess__62_0.compose(left:res, right:Outer0.recordWrapperToSTrait())
      
      catch error Library catched0 return res
      void
      )
    
    catch return Library result result
    error {'@stringU
    'CurlyBlock-Should be unreachable code
    }
    )
  )}
SourceUnfit:{<:Outer2::MetaGuard, Outer2::MetaGuard
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#S().#o().#u().#r().#c().#e().#U().#n().#f().#i().#t())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) 
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )
method toS() Outer0.myName().#plusplus(that:Outer1::RecordWrapper.libToS(that:this.lib()))
method 
Library lib() }
IncoherentRedirectMapping:{<:Outer2::MetaGuard, Outer2::MetaGuard
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#I().#n().#c().#o().#h().#e().#r().#e().#n().#t().#R().#e().#d().#i().#r().#e().#c().#t().#M().#a().#p().#p().#i().#n().#g())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) 
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )
method toS() Outer0.myName().#plusplus(that:Outer1::RecordWrapper.libToS(that:this.lib()))
method 
Library lib() }
ClassClash:{<:Outer2::MetaGuard, Outer2::MetaGuard
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#C().#l().#a().#s().#s().#C().#l().#a().#s().#h())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) 
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )
method toS() Outer0.myName().#plusplus(that:Outer1::RecordWrapper.libToS(that:this.lib()))
method 
Library lib() }
MethodClash:{<:Outer2::MetaGuard, Outer2::MetaGuard
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#M().#e().#t().#h().#o().#d().#C().#l().#a().#s().#h())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) 
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )
method toS() Outer0.myName().#plusplus(that:Outer1::RecordWrapper.libToS(that:this.lib()))
method 
Library lib() }
InvalidOnTopLevel:{<:Outer2::MetaGuard, Outer2::MetaGuard
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#I().#n().#v().#a().#l().#i().#d().#O().#n().#T().#o().#p().#L().#e().#v().#e().#l())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) 
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )
method toS() Outer0.myName().#plusplus(that:Outer1::RecordWrapper.libToS(that:this.lib()))
method 
Library lib() }
PrivacyCoupuled:{<:Outer2::MetaGuard, Outer2::MetaGuard
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#P().#r().#i().#v().#a().#c().#y().#C().#o().#u().#p().#u().#l().#e().#d())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) 
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )
method toS() Outer0.myName().#plusplus(that:Outer1::RecordWrapper.libToS(that:this.lib()))
method 
Library lib() }
ParameterMismatch:{<:Outer2::MetaGuard, Outer2::MetaGuard
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#P().#a().#r().#a().#m().#e().#t().#e().#r().#M().#i().#s().#m().#a().#t().#c().#h())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) 
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )
method toS() Outer0.myName().#plusplus(that:Outer1::RecordWrapper.libToS(that:this.lib()))
method 
Library lib() }
MemberUnavailable:{interface <:Outer2::MetaGuard}
DispatchMemberUnavailable:{
type method 
Void #apply(Library that) exception Outer1::MemberUnavailable (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:that)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#M().#e().#m().#b().#e().#r().#U().#n().#a().#v().#a().#i().#l().#a().#b().#l().#e()))
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      (
        Void unused0=(
          Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::contains(that ) cond0=record.#from(builder:record.#builder().#I().#n().#v().#a().#l().#i().#d().#K().#i().#n().#d()).contains(that:Outer2::S.#from(builder:Outer2::S.#builder().#M().#e().#t().#h().#o().#d()))
          (
            Void unused1=cond0.#checkTrue()
            
            catch exception Void catched3 void
            exception Outer1::MethodUnavailable.#apply(record:record, lib:that)
            )
          )
        exception Outer1::NestedClassUnavailable.#apply(record:record, lib:that)
        )
      )
    )
  )}
NestedClassUnavailable:{<:Outer1::MemberUnavailable, Outer2::MetaGuard
type method 
Outer0 #apply(Outer2::Path path, Outer2::Bool isPrivate) 
mut method 
Outer2::Path #path() 
read method 
Outer2::Path path() 
mut method 
Outer2::Bool #isPrivate() 
read method 
Outer2::Bool isPrivate() 
method toS() Outer0.myName().#plusplus(that:(
  Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() ::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=(
    Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind0=Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#p().#a().#t().#h().#colon()).#begin().#add(that:this.path()).#end()
    listKind0.#from(builder:listKind0.#builder().#comma().#i().#s().#P().#r().#i().#v().#a().#t().#e().#colon())
    ).#begin().#add(that:this.isPrivate()).#end()
  listKind.#from(builder:listKind.#builder().#cSquare())
  ))
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) Outer0.#apply(path:Outer2::Path.fromDocInternalizedS(that:record.#from(builder:record.#builder().#P().#a().#t().#h())), isPrivate:Outer2::Bool.fromS(that:record.#from(builder:record.#builder().#I().#s().#P().#r().#i().#v().#a().#t().#e())))
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#M().#e().#m().#b().#e().#r().#U().#n().#a().#v().#a().#i().#l().#a().#b().#l().#e())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )}
MethodUnavailable:{<:Outer1::MemberUnavailable, Outer2::MetaGuard
type method 
Outer0 #apply(Outer2::Path path, Outer2::Selector selector, Outer2::Bool isPrivate) 
mut method 
Outer2::Path #path() 
read method 
Outer2::Path path() 
mut method 
Outer2::Selector #selector() 
read method 
Outer2::Selector selector() 
mut method 
Outer2::Bool #isPrivate() 
read method 
Outer2::Bool isPrivate() 
method toS() Outer0.myName().#plusplus(that:(
  Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() ::#from(builder ) ::#begin() ::#add(that ) ::#end() ::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=(
    Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() ::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind0=(
      Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind1=Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#p().#a().#t().#h().#colon()).#begin().#add(that:this.path()).#end()
      listKind1.#from(builder:listKind1.#builder().#comma().#space().#s().#e().#l().#e().#c().#t().#o().#r().#colon())
      ).#begin().#add(that:this.selector()).#end()
    listKind0.#from(builder:listKind0.#builder().#comma().#i().#s().#P().#r().#i().#v().#a().#t().#e().#colon())
    ).#begin().#add(that:this.isPrivate()).#end()
  listKind.#from(builder:listKind.#builder().#cSquare())
  ))
type method 
Outer0 #apply(Outer2::Introspection::Record record, Library lib) Outer0.#apply(path:Outer2::Path.fromDocInternalizedS(that:record.#from(builder:record.#builder().#P().#a().#t().#h())), selector:Outer2::Selector.fromS(that:record.#from(builder:record.#builder().#S().#e().#l().#e().#c().#t().#o().#r())), isPrivate:Outer2::Bool.fromS(that:record.#from(builder:record.#builder().#I().#s().#P().#r().#i().#v().#a().#t().#e())))
type method 
Outer2::S libName() Outer2::S.#from(builder:Outer2::S.#builder().#M().#e().#m().#b().#e().#r().#U().#n().#a().#v().#a().#i().#l().#a().#b().#l().#e())
method kind() Outer0.myName()
method text() Outer2::S.#from(builder:Outer2::S.#builder())
method responseOf() Outer2::Message::Opt.#apply()
method myName() Outer2::GetMyName.#apply(that:Outer0)
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method clazz() Outer0
method classAny() Outer0
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
type method 
Void #apply(Library lift) exception Outer0 (
  Outer2::Introspection::Record::#apply(lib ) record=Outer2::Introspection::Record.#apply(lib:lift)
  Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) x=record.#from(builder:record.#builder().#K().#i().#n().#d())
  (
    Outer2::Introspection::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer0.libName())
    (
      Void unused=cond.#checkTrue()
      
      catch exception Void catched1 void
      exception Outer0.#apply(record:record, lib:lift)
      )
    )
  )}}
Introspection:{'findMeIntrospection

type method 
Outer0::NestedClass #apply(Library lib) (
  Outer0::MirrorPr::Lib::#apply(lib ) ::introspectReport(root path ) root=Outer0::MirrorPr::Lib.#apply(lib:lib).introspectReport(root:root, path:Outer1::Path.#from(builder:Outer1::Path.#builder().#O().#u().#t().#e().#r().#0()))
  
  catch exception Outer1::MetaGuard::NestedClassUnavailable x error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder().#I().#n().#t().#r().#o().#s().#p().#e().#c().#t().#i().#o().#n().#1())
  root
  )
type method 
Outer0::NestedClass #apply(Library lib, Outer1::Path path) exception Outer1::MetaGuard::NestedClassUnavailable (
  Outer0::#apply(lib ) root=Outer0.#apply(lib:lib)
  root.mirror__49_0().introspectReport(root:root, path:path)
  )
type method 
Outer0::NestedClass #apply(type Any clazz) (
  Outer0::MirrorPr::Class::#apply(lib ) ::introspectReport(root path ) root=Outer0::MirrorPr::Class.#apply(lib:clazz).introspectReport(root:root, path:Outer1::Path.#from(builder:Outer1::Path.#builder().#O().#u().#t().#e().#r().#0()))
  
  catch exception Outer1::MetaGuard::NestedClassUnavailable x error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder().#I().#n().#t().#r().#o().#s().#p().#e().#c().#t().#i().#o().#n().#2())
  root
  )
type method 
Outer0::NestedClass #apply(type Any clazz, Outer1::Path path) (
  Outer0::MirrorPr::Class::#apply(lib ) ::introspectReport(root path ) root=Outer0::MirrorPr::Class.#apply(lib:clazz).introspectReport(root:root, path:path)
  
  catch exception Outer1::MetaGuard::NestedClassUnavailable x error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder().#I().#n().#t().#r().#o().#s().#p().#e().#c().#t().#i().#o().#n().#3())
  root
  )
MirrorPr:{interface <:Outer2::Concept::ToS
method 
Outer1::NestedClass introspectReport(fwd Outer1::NestedClass root, Outer2::Path path) exception Outer2::MetaGuard::NestedClassUnavailable 
method 
Outer1::Member introspectReportMember(fwd Outer1::NestedClass root, Outer2::Path path, Outer2::N memberN) exception Outer2::MetaGuard::MemberUnavailable, Void 
method 
Outer1::Type introspectReportType(fwd Outer1::NestedClass root, Outer2::Path path, Outer2::N memberN, Outer2::N typeN) exception Outer2::MetaGuard::MemberUnavailable, Void 
method 
Outer2::S introspectDocAsString(Outer2::Path path) exception Outer2::MetaGuard::NestedClassUnavailable 
method 
Outer2::S introspectDocAsString(Outer2::Path path, Outer2::N annotationN) exception Outer2::MetaGuard::NestedClassUnavailable, Void 
method 
type Any introspectDocPath(Outer2::Path path, Outer2::N annotationN) exception Outer2::MetaGuard::NestedClassUnavailable, Void 
Lib:{<:Outer1
type method 
Outer0 #apply(Library lib) 
mut method 
Library #lib() 
read method 
Library lib() 
method toS() Outer3::Introspection.#apply(lib:this.lib()).toS()
method introspectReport(root path ) (
  Outer2::NestedClass::#apply__49_0(_root__49_0 path__49_0 mirror__49_0 record__49_0 ) result=Outer2::NestedClass.#apply__49_0(_root__49_0:root, path__49_0:path, mirror__49_0:this, record__49_0:Outer2::Record.#apply(that:Outer1::Lib.#apply(lib:use Outer3::SafeOperators check introspectLibraryReport(that:this.lib(), path:path.binaryRepr()) error Outer3::System::Guard::PluginFailure.#from(builder:Outer3::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#i().#n().#t().#r().#o().#s().#p().#e().#c().#t().#L().#i().#b().#r().#a().#r().#y().#R().#e().#p().#o().#r().#t()))))
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )
method introspectReportMember(root path memberN ) (
  Outer2::Record::dispatch(root path mirror memberN record ) result=Outer2::Record.dispatch(root:root, path:path, mirror:this, memberN:memberN, record:use Outer3::SafeOperators check introspectLibraryReportMember(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr()) exception void)
  
  catch error Library x exception Outer3::MetaGuard::DispatchMemberUnavailable.#apply(that:x)
  result
  )
method introspectReportType(root path memberN typeN ) (
  Outer2::Type::#apply__53_0(root__53_0 path__53_0 memberN__53_0 typeN__53_0 record__53_0 ) result=Outer2::Type.#apply__53_0(root__53_0:root, path__53_0:path, memberN__53_0:memberN, typeN__53_0:typeN, record__53_0:Outer2::Record.#apply(that:Outer1::Lib.#apply(lib:use Outer3::SafeOperators check introspectLibraryReportType(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr(), typeN:typeN.binaryRepr()) exception void)))
  
  catch error Library x exception Outer3::MetaGuard::DispatchMemberUnavailable.#apply(that:x)
  result
  )
method introspectDocAsString(path annotationN ) (
  Outer3::S::#stringParser(that ) result=Outer3::S.#stringParser(that:use Outer3::SafeOperators check introspectLibraryDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) exception void)
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )
method introspectDocAsString(path ) (
  Outer3::S::#stringParser(that ) result=Outer3::S.#stringParser(that:use Outer3::SafeOperators check introspectLibraryDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:Outer3::N.#numberParser(that:{'@stringU
  '0
  }).binaryRepr()) error Outer3::System::Guard::PluginFailure.#from(builder:Outer3::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#i().#n().#t().#r().#o().#s().#p().#e().#c().#t().#L().#i().#b().#r().#a().#r().#y().#D().#o().#c().#A().#s().#S().#t().#r().#i().#n().#g()))
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )
method introspectDocPath(path annotationN ) (
  type Any result=use Outer3::SafeOperators check introspectLibraryDocPath(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) error Outer3::System::Guard::PluginFailure.#from(builder:Outer3::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#i().#n().#t().#r().#o().#s().#p().#e().#c().#t().#L().#i().#b().#r().#a().#r().#y().#D().#o().#c().#P().#a().#t().#h())
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )}
Class:{<:Outer1
type method 
Outer0 #apply(type Any lib) 
mut method 
type Any #lib() 
read method 
type Any lib() 
method toS() Outer3::Introspection.#apply(clazz:this.lib()).toS()
method introspectReport(root path ) (
  Outer2::Record::#apply(lib ) record=Outer2::Record.#apply(lib:use Outer3::SafeOperators check introspectTypeReport(that:this.lib(), path:path.binaryRepr()) error Outer3::System::Guard::PluginFailure.#from(builder:Outer3::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#i().#n().#t().#r().#o().#s().#p().#e().#c().#t().#T().#y().#p().#e().#R().#e().#p().#o().#r().#t()))
  Outer2::Record::#apply(lib ) ::docOf(path ) ::annotations() ::top() ::referredClass() realRootType=record.docOf(path:Outer3::Path.#from(builder:Outer3::Path.#builder().#M().#y().#C().#l().#a().#s().#s())).annotations().top().referredClass()
  Outer2::NestedClass::#apply__49_0(_root__49_0 path__49_0 mirror__49_0 record__49_0 ) result=Outer2::NestedClass.#apply__49_0(_root__49_0:result, path__49_0:Outer3::Path.#from(builder:Outer3::Path.#builder().#O().#u().#t().#e().#r().#0()), mirror__49_0:Outer0.#apply(lib:realRootType), record__49_0:record)
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )
method introspectReportMember(root path memberN ) (
  Outer2::Record::dispatch(root path mirror memberN record ) result=Outer2::Record.dispatch(root:root, path:path, mirror:this, memberN:memberN, record:use Outer3::SafeOperators check introspectTypeReportMember(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr()) exception void)
  
  catch error Library x exception Outer3::MetaGuard::DispatchMemberUnavailable.#apply(that:x)
  result
  )
method introspectReportType(root path memberN typeN ) (
  Outer2::Type::#apply__53_0(root__53_0 path__53_0 memberN__53_0 typeN__53_0 record__53_0 ) result=Outer2::Type.#apply__53_0(root__53_0:root, path__53_0:path, memberN__53_0:memberN, typeN__53_0:typeN, record__53_0:Outer2::Record.#apply(that:Outer1::Lib.#apply(lib:use Outer3::SafeOperators check introspectTypeReportType(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr(), typeN:typeN.binaryRepr()) exception void)))
  
  catch error Library x exception Outer3::MetaGuard::DispatchMemberUnavailable.#apply(that:x)
  result
  )
method introspectDocAsString(path annotationN ) (
  Outer3::S::#stringParser(that ) result=Outer3::S.#stringParser(that:use Outer3::SafeOperators check introspectTypeDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) exception void)
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )
method introspectDocAsString(path ) (
  Outer3::S::#stringParser(that ) result=Outer3::S.#stringParser(that:use Outer3::SafeOperators check introspectTypeDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:Outer3::N.#numberParser(that:{'@stringU
  '0
  }).binaryRepr()) error Outer3::System::Guard::PluginFailure.#from(builder:Outer3::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#i().#n().#t().#r().#o().#s().#p().#e().#c().#t().#T().#y().#p().#e().#D().#o().#c().#A().#s().#S().#t().#r().#i().#n().#g()))
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )
method introspectDocPath(path annotationN ) (
  type Any result=use Outer3::SafeOperators check introspectTypeDocPath(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) error Outer3::System::Guard::PluginFailure.#from(builder:Outer3::System::Guard::PluginFailure.#builder().#S().#a().#f().#e().#O().#p().#e().#r().#a().#t().#o().#r().#s().#dot().#i().#n().#t().#r().#o().#s().#p().#e().#c().#t().#T().#y().#p().#e().#D().#o().#c().#P().#a().#t().#h())
  
  catch error Library x exception Outer3::MetaGuard::NestedClassUnavailable.#apply(record:Outer2::Record.#apply(lib:x), lib:x)
  result
  )}}
Doc:{<:Outer2::Concept::ToS, Outer2::Concept::Named
VaraN__96_0:'@private
{
type method 
mut Outer0 #apply(Outer3::N::#numberParser(that ) inner) 
mut method 
Void inner(Outer3::N::#numberParser(that ) that) 
mut method 
Outer3::N::#numberParser(that ) #inner() }
Varresult1__97_0:'@private
{
type method 
mut Outer0 #apply(Outer1::Annotations::#begin() ::#end() inner) 
mut method 
Void inner(Outer1::Annotations::#begin() ::#end() that) 
mut method 
Outer1::Annotations::#begin() ::#end() #inner() }
type method '@private
Outer0 _private__47_0(Library _binaryRepr__47_0, Outer0::Annotations _annotations__47_0) 
mut method '@private
Library #_binaryRepr__47_0() 
read method '@private
Library _binaryRepr__47_0() 
mut method '@private
Outer0::Annotations #_annotations__47_0() 
read method '@private
Outer0::Annotations _annotations__47_0() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
Annotation:{<:Outer3::Concept::ToS, Outer3::Concept::Named
type method 
Outer0 #apply(Library _binaryRepr, Outer3::S text, Outer3::N index) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
mut method 
Outer3::S #text() 
read method 
Outer3::S text() 
mut method 
Outer3::N #index() 
read method 
Outer3::N index() 
method myName() Outer3::GetMyName.#apply(that:Outer0)
method toS() this.text()
method 
type Any referredClass() (
  Void unused=(
    Void unused0=return Outer3::Introspection::Record.#apply(lib:this._binaryRepr()).that().introspectDocPath(path:Outer3::Path.#from(builder:Outer3::Path.#builder().#O().#u().#t().#e().#r().#0()), annotationN:this.index())
    
    catch exception Outer3::MetaGuard::NestedClassUnavailable x error Outer3::Assert::CodeNotReachable.#from(builder:Outer3::Assert::CodeNotReachable.#builder().#D().#o().#c().#1()).#apply(that:x)
    catch exception Void x error Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder().#P().#l().#u().#g().#i().#n().#space().#i().#n().#t().#r().#o().#s().#p().#e().#c().#t().#i().#o().#n().#space().#b().#u().#g())
    void
    )
  
  catch return type Any result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool hasReferredClass() (
  Outer0::text() ::#bangequal(that ) ::#and(that ) res=this.text().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder())).#and(that:this.text().isASCIIUpperCase(that:Outer3::N.#numberParser(that:{'@stringU
  '0
  })))
  res
  )}
Annotations:{' generic linked list class, elements of type Elem
<:Outer3::Concept::Named
Varres0__98_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1__99_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer3::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer3::Bool.false()
        (
          Void unused2=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer3::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Annotation top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer3::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Guard::Operation.#from(builder:Outer3::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0__98_0 varres=Outer0::Varres0__98_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Annotation that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1__99_0 varres=Outer0::Varres1__99_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer1::Cell #next() exception Void 
method 
Outer2::Annotation #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer4::Assert::ObservedBug.#from(builder:Outer4::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Annotation elem, Outer1::Cell nextCell) 
mut method 
Outer2::Annotation #elem() 
read method 
Outer2::Annotation elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer1::CellNext::#apply(elem nextCell ) startPoint=Outer1::CellNext.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer1::CellNext cell0=(
      Void unused=return cell
      
      catch return Outer1::CellNext casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer4::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer4::Assert::ObservedBug.#from(builder:Outer4::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer4::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer4::Bool #terminate() 
read method 
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Annotation #inner() this.that().#inner()
read method 
Void #close() void}}
type method 
Outer0 #apply(Library that) (
  Outer0::Annotations::#begin() ::#end() result=Outer0::Annotations.#begin().#end()
  Outer2::N::#numberParser(that ) aN=Outer2::N.#numberParser(that:{'@stringU
  '1
  })
  mut Outer0::Varresult1__97_0 varresult=Outer0::Varresult1__97_0.#apply(inner:result)
  mut Outer0::VaraN__96_0 varaN=Outer0::VaraN__96_0.#apply(inner:aN)
  Void unused=(
    Void unused0=loop (
      Void unused1=Outer2::Bool.true().#checkTrue()
      (' to be able to break
      
        Void unused2=varresult.inner(that:varresult.#inner().#add(that:Outer0::Annotation.#apply(_binaryRepr:that, text:Outer2::Introspection::Record.#apply(lib:that).that().introspectDocAsString(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()), annotationN:varaN.#inner()), index:varaN.#inner())))
        varaN.inner(that:varaN.#inner().#plus(that:Outer2::N.#numberParser(that:{'@stringU
        '1
        })))
        )
      )
    
    catch exception Void catched1 void
    void
    )
  
  catch exception Outer2::MetaGuard::NestedClassUnavailable x error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#D().#o().#c().#2()).#apply(that:x)
  (
    Void unused3=varresult.inner(that:varresult.#inner().#end())
    Outer0._private__47_0(_binaryRepr__47_0:that, _annotations__47_0:varresult.#inner())
    )
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(that:that)
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(that:builder.binaryRepr())
method 
Library binaryRepr() this._binaryRepr__47_0()
method toS() (
  Void unused=(
    Void unused0=return Outer2::Introspection::Record.#apply(lib:this._binaryRepr__47_0()).that().introspectDocAsString(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()))
    
    catch exception Outer2::MetaGuard::NestedClassUnavailable x error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#D().#o().#c().#3()).#apply(that:x)
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0::Annotations annotations() this._annotations__47_0()}
Record:{
type method 
Outer0 #apply(Outer1::MirrorPr that) 
mut method 
Outer1::MirrorPr #that() 
read method 
Outer1::MirrorPr that() 
type method 
Outer0 #apply(type Any clazz) Outer0.#apply(that:Outer1::MirrorPr::Class.#apply(lib:clazz))
type method 
Outer0 #apply(Library lib) Outer0.#apply(that:Outer1::MirrorPr::Lib.#apply(lib:lib))
method 
Void dbg() (
  Outer0::that() x=this.that()
  (
    Outer1::MirrorPr::Lib x0=(
      Void unused=return x
      
      catch return Outer1::MirrorPr::Lib casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 Outer2::Debug.#apply(that:Outer2::S.#from(builder:Outer2::S.#builder().#S().#o().#r().#r().#y().#comma().#space().#c().#a().#n().#space().#n().#o().#t().#space().#p().#r().#i().#n().#t().#space().#c().#l().#a().#s().#s().#space().#m().#i().#r().#r().#o().#r().#s()))
    (
      Void unused0=Outer2::Debug.#apply(lib:x0.lib())
      void
      )
    )
  )
method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
method 
Outer2::S #from(Outer2::S::SBuilder builder) (
  Void unused=(
    Outer2::Path::#from(builder ) path=Outer2::Path.#from(builder:builder)
    Void unused0=return this.that().introspectDocAsString(path:path)
    
    catch exception Outer2::MetaGuard::MemberUnavailable catched error (
      Outer2::Assert::CodeNotReachable::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#R().#e().#c().#o().#r().#d().#1()).#begin().#add(that:this.that()).#end()
      listKind.#from(builder:listKind.#builder())
      ).#apply(that:catched)
    void
    )
  
  catch return Outer2::S result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Doc docOf(Outer2::Path path) (
  Void unused=(
    Void unused0=(
      Outer0::that() mirror=this.that()
      (
        Outer1::MirrorPr::Lib mirror0=(
          Void unused2=return mirror
          
          catch return Outer1::MirrorPr::Lib casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 void
        (
          Void unused3=return Outer1::Doc.#apply(that:Outer2::SafeOperators.renameClass(that:mirror0.lib(), src:path, dest:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0())))
          void
          )
        )
      )
    Void unused1=error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#R().#e().#c().#o().#r().#d().#2())
    void
    )
  
  catch return Outer1::Doc result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
RootForMember:' toPutAs private
{interface 
method 
Outer2::Member #apply(fwd Outer2::NestedClass root) }
RootForNested:' toPutAs private
{<:Outer1::RootForMember
type method 
Outer0 #apply(Outer3::Path path, Outer2::MirrorPr mirror, Outer2::Record _report) 
mut method 
Outer3::Path #path() 
read method 
Outer3::Path path() 
mut method 
Outer2::MirrorPr #mirror() 
read method 
Outer2::MirrorPr mirror() 
mut method 
Outer2::Record #_report() 
read method 
Outer2::Record _report() 
method #apply(root ) (
  Outer3::Path::#stringParser(that ) path=Outer3::Path.#stringParser(that:(
    Outer0::#apply(root ) ::this::_report() listKind=this._report()
    listKind.#from(builder:listKind.#builder().#K().#e().#y())
    ).binaryRepr())
  Outer2::NestedClass.#apply__49_0(_root__49_0:root, path__49_0:path, mirror__49_0:this.mirror(), record__49_0:this._report())
  )}
RootForMethod:' toPutAs private
{<:Outer1::RootForMember
type method 
Outer0 #apply(Outer3::Path path, Outer3::N memberN, Outer2::Record _report) 
mut method 
Outer3::Path #path() 
read method 
Outer3::Path path() 
mut method 
Outer3::N #memberN() 
read method 
Outer3::N memberN() 
mut method 
Outer2::Record #_report() 
read method 
Outer2::Record _report() 
method #apply(root ) Outer2::Method.#apply__48_0(_root__48_0:root, path__48_0:this.path(), memberN__48_0:this.memberN(), record__48_0:this._report())}
type method 
Outer1::Member dispatch(fwd Outer1::NestedClass root, Outer2::Path path, Outer1::MirrorPr mirror, Outer2::N memberN, Library record) (
  Outer1::Record::#apply(lib ) _report=Outer1::Record.#apply(lib:record)
  Outer0::RootForMember result=(
    Void unused=(
      Outer1::Record::#apply(lib ) ::#from(builder ) x=_report.#from(builder:_report.#builder().#M().#e().#m().#b().#e().#r().#K().#i().#n().#d())
      Void unused0=(
        Outer1::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond=x.#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#I().#n().#t().#e().#r().#f().#a().#c().#e().#I().#m().#p().#l().#e().#m().#e().#n().#t().#e().#d().#M().#e().#t().#h().#o().#d()))
        (
          Void unused5=cond.#checkTrue()
          
          catch exception Void catched0 void
          return Outer0::RootForMethod.#apply(path:path, memberN:memberN, _report:_report)
          )
        )
      Void unused1=(
        Outer1::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond0=x.#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#I().#m().#p().#l().#e().#m().#e().#n().#t().#e().#d().#M().#e().#t().#h().#o().#d()))
        (
          Void unused6=cond0.#checkTrue()
          
          catch exception Void catched2 void
          return Outer0::RootForMethod.#apply(path:path, memberN:memberN, _report:_report)
          )
        )
      Void unused2=(
        Outer1::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond1=x.#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#A().#b().#s().#t().#r().#a().#c().#t().#M().#e().#t().#h().#o().#d()))
        (
          Void unused7=cond1.#checkTrue()
          
          catch exception Void catched4 void
          return Outer0::RootForMethod.#apply(path:path, memberN:memberN, _report:_report)
          )
        )
      Void unused3=(
        Outer1::Record::#apply(lib ) ::#from(builder ) ::#equalequal(that ) cond2=x.#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s()))
        (
          Void unused8=cond2.#checkTrue()
          
          catch exception Void catched6 void
          return Outer0::RootForNested.#apply(path:path, mirror:mirror, _report:_report)
          )
        )
      Void unused4=error Outer2::Assert::ObservedBug.#apply(text:(
        Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::S.#from(builder:Outer2::S.#builder().#i().#n().#v().#a().#l().#i().#d().#space().#m().#e().#m().#b().#e().#r().#space().#k().#i().#n().#d().#space()).#begin().#add(that:x).#end()
        listKind.#from(builder:listKind.#builder())
        ))
      void
      )
    
    catch return Outer0::RootForMember result0 result0
    error {'@stringU
    'CurlyBlock-Should be unreachable code
    }
    )
  result.#apply(root:root)
  )}
Member:{interface <:Outer2::Concept::ToS, Outer2::Concept::Named, Outer2::Concept::Equals}
Members:{' generic linked list class, elements of type Elem
<:Outer2::Concept::Named
Varres0_$%19_0__100_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1_$%20_0__101_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer2::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer2::Bool.false()
        (
          Void unused2=return Outer2::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Member top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer2::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer2::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer2::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0_$%19_0__100_0 varres=Outer0::Varres0_$%19_0__100_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Member that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1_$%20_0__101_0 varres=Outer0::Varres1_$%20_0__101_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer3::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::Member #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Member elem, Outer1::Cell nextCell) 
mut method 
Outer2::Member #elem() 
read method 
Outer2::Member elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      
      catch return Outer0 casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer3::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer3::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer3::Bool #terminate() 
read method 
Outer3::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Member #inner() this.that().#inner()
read method 
Void #close() void}
Varaccumulator_$%21_0__102_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#begin() inner) 
mut method 
Void inner(Outer1::#begin() that) 
mut method 
Outer1::#begin() #inner() }
method 
Outer2::Bool contains(Outer1::Member that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::vals() ::#inner() ::equals(that ) cond=e.#inner().equals(that:that)
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return Outer2::Bool.true()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer2::Bool propagated0 (
          Void unused10=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 remove(Outer1::Member that) (
  Outer0::#begin() accumulator=Outer0.#begin()
  mut Outer0::Varaccumulator_$%21_0__102_0 varaccumulator=Outer0::Varaccumulator_$%21_0__102_0.#apply(inner:accumulator)
  Void unused=(
    Outer0::vals() e=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=e.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=e.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e.#inner().equals(that:that).#bang()
              (
                Void unused6=cond.#checkTrue()
                
                catch exception Void catched4 void
                varaccumulator.inner(that:varaccumulator.#inner().#add(that:e.#inner()))
                )
              )
            )
          
          catch exception Void catched5 void
          void
          )
        
        catch exception Any propagated (
          Void unused7=e.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused8=e.#close()
        return propagated0
        )
      e.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer2::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e1=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Outer0::vals() e2=that.vals()
            (
              Void unused4=(
                Void unused5=(
                  Void unused6=loop (
                    Void unused7=e1.#next()
                    
                    catch exception Void catched1 (
                      Void unused8=(
                        Void unused11=e2.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused9=(
                        Void unused12=e1.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused10=(
                        Void unused13=e2.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused14=e2.#next()
                      
                      catch exception Void catched6 (
                        Void unused15=(
                          Void unused17=e1.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused16=(
                          Void unused18=e2.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e1.#inner().equals(that:e2.#inner()).#bang()
                        (
                          Void unused19=cond.#checkTrue()
                          
                          catch exception Void catched11 void
                          return Outer2::Bool.false()
                          )
                        )
                      )
                    )
                  
                  catch exception Void catched12 void
                  void
                  )
                
                catch exception Any propagated (
                  Void unused20=e2.#close()
                  exception propagated
                  )
                void
                )
              
              catch return Outer2::Bool propagated0 (
                Void unused21=e2.#close()
                return propagated0
                )
              e2.#close()
              )
            )
          
          catch exception Any propagated1 (
            Void unused22=e1.#close()
            exception propagated1
            )
          void
          )
        
        catch return Outer2::Bool propagated2 (
          Void unused23=e1.#close()
          return propagated2
          )
        e1.#close()
        )
      )
    Void unused1=return Outer2::Bool.true()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool equals(Any that) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Method:{<:Outer1::Member, Outer2::Concept::Equals
VarpN__103_0:'@private
{
type method 
mut Outer0 #apply(Outer3::N::#numberParser(that ) inner) 
mut method 
Void inner(Outer3::N::#numberParser(that ) that) 
mut method 
Outer3::N::#numberParser(that ) #inner() }
Varresult2__104_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Types::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Types::#begin() ::#end() that) 
mut method 
Outer2::Types::#begin() ::#end() #inner() }
type method '@private
Outer0 #apply__48_0(fwd Outer1::NestedClass _root__48_0, Outer2::Path path__48_0, Outer2::N memberN__48_0, Outer1::Record record__48_0) 
mut method '@private
Outer1::NestedClass #_root__48_0() 
read method '@private
Outer1::NestedClass _root__48_0() 
mut method '@private
Outer2::Path #path__48_0() 
read method '@private
Outer2::Path path__48_0() 
mut method '@private
Outer2::N #memberN__48_0() 
read method '@private
Outer2::N memberN__48_0() 
mut method '@private
Outer1::Record #record__48_0() 
read method '@private
Outer1::Record record__48_0() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method toS() Outer0.myName().#plusplus(that:(
  Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::S.#from(builder:Outer2::S.#builder().#oSquare()).#begin().#add(that:this.allAsString()).#end()
  listKind.#from(builder:listKind.#builder().#cSquare())
  ))
method 
Outer2::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::path__48_0() ::#bangequal(that ) cond=this.path__48_0().#bangequal(that:that.path__48_0())
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer2::Bool.false()
        )
      )
    Void unused1=(
      Outer0::memberN__48_0() ::#bangequal(that ) cond0=this.memberN__48_0().#bangequal(that:this.memberN__48_0())
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return Outer2::Bool.false()
        )
      )
    Void unused2=return this.root().#equalequal(that:that.root())
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Doc doc() this.record__48_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#M().#e().#m().#b().#e().#r().#D().#o().#c()))
method 
Outer2::S thisMdf() (
  Outer0::record__48_0() listKind=this.record__48_0()
  listKind.#from(builder:listKind.#builder().#T().#h().#i().#s().#M().#d().#f())
  )
method ' invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
Outer2::Path pathFromRoot() this.path__48_0()
method 
Outer2::Selector selector() Outer2::Selector.#stringParser(that:(
  Outer0::record__48_0() listKind=this.record__48_0()
  listKind.#from(builder:listKind.#builder().#K().#e().#y())
  ).binaryRepr())
method 
Outer2::S methodKind() (
  Outer0::record__48_0() listKind=this.record__48_0()
  listKind.#from(builder:listKind.#builder().#M().#e().#m().#b().#e().#r().#K().#i().#n().#d())
  )
method 
Outer2::S allAsString() (
  Outer0::record__48_0() listKind=this.record__48_0()
  listKind.#from(builder:listKind.#builder().#A().#l().#l().#A().#s().#S().#t().#r().#i().#n().#g())
  )
method 
Outer1::Type returnType() (
  Void unused=(
    Void unused0=return this.root().mirror__49_0().introspectReportType(root:this.root(), path:this.path__48_0(), memberN:this.memberN__48_0(), typeN:Outer2::N.#numberParser(that:{'@stringU
    '0
    }))
    
    catch exception Outer2::MetaGuard::MemberUnavailable x error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#M().#e().#t().#h().#o().#d().#1()).#apply(that:x)
    catch exception Void catched error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#v().#o().#i().#d().#space().#w().#a().#s().#space().#t().#h().#r().#o().#w().#n())
    void
    )
  
  catch return Outer1::Type result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Types exceptions() error Outer2::Assert::NotImplementedYet.#from(builder:Outer2::Assert::NotImplementedYet.#builder())
method 
Outer1::Types parameterTypes() (
  Void unused=(
    Outer1::Types::#begin() ::#end() result=Outer1::Types.#begin().#end()
    Outer2::N::#numberParser(that ) pN=Outer2::N.#numberParser(that:{'@stringU
    '1
    })
    mut Outer0::Varresult2__104_0 varresult=Outer0::Varresult2__104_0.#apply(inner:result)
    mut Outer0::VarpN__103_0 varpN=Outer0::VarpN__103_0.#apply(inner:pN)
    Void unused0=(
      Void unused2=loop (
        Void unused3=Outer2::Bool.true().#checkTrue()
        (' to be able to break
        
          Outer1::Type ti=this.root().mirror__49_0().introspectReportType(root:this.root(), path:this.pathFromRoot(), memberN:this.memberN__48_0(), typeN:varpN.#inner())
          Void unused4=varresult.inner(that:varresult.#inner().#add(that:ti))
          varpN.inner(that:varpN.#inner().#plus(that:Outer2::N.#numberParser(that:{'@stringU
          '1
          })))
          )
        )
      
      catch exception Void catched1 void
      void
      )
    Void unused1=return varresult.#inner().#end()
    
    catch exception Outer2::MetaGuard::MemberUnavailable err error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#M().#e().#t().#h().#o().#d().#2()).#apply(that:err)
    void
    )
  
  catch return Outer1::Types result0 result0
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool isPrivate() (
  Void unused=(
    Void unused0=(
      Outer0::doc() ::annotations() ::vals() ann=this.doc().annotations().vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=ann.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=ann.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::doc() ::annotations() ::vals() ::#inner() ::toS() ::#equalequal(that ) cond=ann.#inner().toS().#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#p().#r().#i().#v().#a().#t().#e()))
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return Outer2::Bool.true()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=ann.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer2::Bool propagated0 (
          Void unused10=ann.#close()
          return propagated0
          )
        ann.#close()
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::NestedClass root() this._root__48_0()}
Methods:{' generic linked list class, elements of type Elem
<:Outer2::Concept::Named
Varres0_$%22_0__105_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1_$%23_0__106_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer2::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer2::Bool.false()
        (
          Void unused2=return Outer2::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Method top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer2::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer2::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer2::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0_$%22_0__105_0 varres=Outer0::Varres0_$%22_0__105_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Method that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1_$%23_0__106_0 varres=Outer0::Varres1_$%23_0__106_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer3::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::Method #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Method elem, Outer1::Cell nextCell) 
mut method 
Outer2::Method #elem() 
read method 
Outer2::Method elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      
      catch return Outer0 casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer3::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer3::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer3::Bool #terminate() 
read method 
Outer3::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Method #inner() this.that().#inner()
read method 
Void #close() void}
Varaccumulator_$%24_0__107_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#begin() inner) 
mut method 
Void inner(Outer1::#begin() that) 
mut method 
Outer1::#begin() #inner() }
method 
Outer2::Bool contains(Outer1::Method that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::vals() ::#inner() ::equals(that ) cond=e.#inner().equals(that:that)
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return Outer2::Bool.true()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer2::Bool propagated0 (
          Void unused10=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 remove(Outer1::Method that) (
  Outer0::#begin() accumulator=Outer0.#begin()
  mut Outer0::Varaccumulator_$%24_0__107_0 varaccumulator=Outer0::Varaccumulator_$%24_0__107_0.#apply(inner:accumulator)
  Void unused=(
    Outer0::vals() e=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=e.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=e.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e.#inner().equals(that:that).#bang()
              (
                Void unused6=cond.#checkTrue()
                
                catch exception Void catched4 void
                varaccumulator.inner(that:varaccumulator.#inner().#add(that:e.#inner()))
                )
              )
            )
          
          catch exception Void catched5 void
          void
          )
        
        catch exception Any propagated (
          Void unused7=e.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused8=e.#close()
        return propagated0
        )
      e.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer2::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e1=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Outer0::vals() e2=that.vals()
            (
              Void unused4=(
                Void unused5=(
                  Void unused6=loop (
                    Void unused7=e1.#next()
                    
                    catch exception Void catched1 (
                      Void unused8=(
                        Void unused11=e2.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused9=(
                        Void unused12=e1.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused10=(
                        Void unused13=e2.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused14=e2.#next()
                      
                      catch exception Void catched6 (
                        Void unused15=(
                          Void unused17=e1.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused16=(
                          Void unused18=e2.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e1.#inner().equals(that:e2.#inner()).#bang()
                        (
                          Void unused19=cond.#checkTrue()
                          
                          catch exception Void catched11 void
                          return Outer2::Bool.false()
                          )
                        )
                      )
                    )
                  
                  catch exception Void catched12 void
                  void
                  )
                
                catch exception Any propagated (
                  Void unused20=e2.#close()
                  exception propagated
                  )
                void
                )
              
              catch return Outer2::Bool propagated0 (
                Void unused21=e2.#close()
                return propagated0
                )
              e2.#close()
              )
            )
          
          catch exception Any propagated1 (
            Void unused22=e1.#close()
            exception propagated1
            )
          void
          )
        
        catch return Outer2::Bool propagated2 (
          Void unused23=e1.#close()
          return propagated2
          )
        e1.#close()
        )
      )
    Void unused1=return Outer2::Bool.true()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool equals(Any that) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
NestedClass:{'findMeNestedClass
<:Outer1::Member, Outer2::Concept::Equals
VarmN__108_0:'@private
{
type method 
mut Outer0 #apply(Outer3::N::#numberParser(that ) inner) 
mut method 
Void inner(Outer3::N::#numberParser(that ) that) 
mut method 
Outer3::N::#numberParser(that ) #inner() }
Varresult3__109_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Members::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Members::#begin() ::#end() that) 
mut method 
Outer2::Members::#begin() ::#end() #inner() }
Varaccumulator2__110_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Methods::#begin() inner) 
mut method 
Void inner(Outer2::Methods::#begin() that) 
mut method 
Outer2::Methods::#begin() #inner() }
Varaccumulator3__111_0:'@private
{
type method 
mut Outer0 #apply(Outer2::NestedClasses::#begin() inner) 
mut method 
Void inner(Outer2::NestedClasses::#begin() that) 
mut method 
Outer2::NestedClasses::#begin() #inner() }
Varresult4__112_0:'@private
{
type method 
mut Outer0 #apply(Outer2::NestedClasses::#begin() ::#add(that ) ::#end() inner) 
mut method 
Void inner(Outer2::NestedClasses::#begin() ::#add(that ) ::#end() that) 
mut method 
Outer2::NestedClasses::#begin() ::#add(that ) ::#end() #inner() }
VartN__113_0:'@private
{
type method 
mut Outer0 #apply(Outer3::N::#numberParser(that ) inner) 
mut method 
Void inner(Outer3::N::#numberParser(that ) that) 
mut method 
Outer3::N::#numberParser(that ) #inner() }
Varresult5__114_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Types::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Types::#begin() ::#end() that) 
mut method 
Outer2::Types::#begin() ::#end() #inner() }
Varnew__115_0:'@private
{
type method 
mut Outer0 #apply(Outer1::removeDup__50_0(that ) inner) 
mut method 
Void inner(Outer1::removeDup__50_0(that ) that) 
mut method 
Outer1::removeDup__50_0(that ) #inner() }
Varresult6__116_0:'@private
{
type method 
mut Outer0 #apply(Outer1::removeDup__50_0(that ) inner) 
mut method 
Void inner(Outer1::removeDup__50_0(that ) that) 
mut method 
Outer1::removeDup__50_0(that ) #inner() }
Varextra__117_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Types::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Types::#begin() ::#end() that) 
mut method 
Outer2::Types::#begin() ::#end() #inner() }
Varresult7__118_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Types::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Types::#begin() ::#end() that) 
mut method 
Outer2::Types::#begin() ::#end() #inner() }
Varaccumulator4__119_0:'@private
{
type method 
mut Outer0 #apply(Outer3::Count::#begin() inner) 
mut method 
Void inner(Outer3::Count::#begin() that) 
mut method 
Outer3::Count::#begin() #inner() }
Varaccumulator5__120_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Types::#begin() inner) 
mut method 
Void inner(Outer2::Types::#begin() that) 
mut method 
Outer2::Types::#begin() #inner() }
VarabsMethods__121_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Methods::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Methods::#begin() ::#end() that) 
mut method 
Outer2::Methods::#begin() ::#end() #inner() }
VarhavePrivate__122_0:'@private
{
type method 
mut Outer0 #apply(Outer3::Bool::false() inner) 
mut method 
Void inner(Outer3::Bool::false() that) 
mut method 
Outer3::Bool::false() #inner() }
Varaccumulator6__123_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Methods::#begin() inner) 
mut method 
Void inner(Outer2::Methods::#begin() that) 
mut method 
Outer2::Methods::#begin() #inner() }
Varaccumulator7__124_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Methods::#begin() inner) 
mut method 
Void inner(Outer2::Methods::#begin() that) 
mut method 
Outer2::Methods::#begin() #inner() }
Varresult8__125_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Methods::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::Methods::#begin() ::#end() that) 
mut method 
Outer2::Methods::#begin() ::#end() #inner() }
Varaccumulator8__126_0:'@private
{
type method 
mut Outer0 #apply(Outer2::Methods::#begin() inner) 
mut method 
Void inner(Outer2::Methods::#begin() that) 
mut method 
Outer2::Methods::#begin() #inner() }
type method '@private
Outer0 #apply__49_0(fwd Outer1::NestedClass _root__49_0, Outer2::Path path__49_0, Outer1::MirrorPr mirror__49_0, Outer1::Record record__49_0) 
mut method '@private
Outer1::NestedClass #_root__49_0() 
read method '@private
Outer1::NestedClass _root__49_0() 
mut method '@private
Outer2::Path #path__49_0() 
read method '@private
Outer2::Path path__49_0() 
mut method '@private
Outer1::MirrorPr #mirror__49_0() 
read method '@private
Outer1::MirrorPr mirror__49_0() 
mut method '@private
Outer1::Record #record__49_0() 
read method '@private
Outer1::Record record__49_0() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method toS() Outer0.myName().#plusplus(that:(
  Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::S.#from(builder:Outer2::S.#builder().#oSquare()).#begin().#add(that:this.allAsString()).#end()
  listKind.#from(builder:listKind.#builder().#cSquare())
  ))
method 
Outer2::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::path__49_0() ::#bangequal(that ) cond=this.path__49_0().#bangequal(that:that.path__49_0())
      (
        Void unused5=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer2::Bool.false()
        )
      )
    Void unused1=(
      Outer0::path__49_0() ::#bangequal(that ) cond0=this.path__49_0().#bangequal(that:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused6=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return this.root().#equalequal(that:that.root())
        )
      )
    Outer0::hasExternalType() ext=this.hasExternalType()
    Void unused2=(
      Outer0::hasExternalType() ::#bangequal(that ) cond1=ext.#bangequal(that:that.hasExternalType())
      (
        Void unused7=cond1.#checkTrue()
        
        catch exception Void catched4 void
        return Outer2::Bool.false()
        )
      )
    Void unused3=(
      Void unused8=ext.#checkTrue()
      
      catch exception Void catched5 void
      return this.externalTypeToS().#equalequal(that:that.externalTypeToS())
      )
    Void unused4=return this.allAsString().#equalequal(that:that.allAsString())
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 root() this._root__49_0()
method 'error for Outer0
Outer1::Doc nestedDoc() (
  Void unused=(
    Outer0::path__49_0() ::#equalequal(that ) cond=this.path__49_0().#equalequal(that:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      error Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#dot().#n().#e().#s().#t().#e().#d().#D().#o().#c().#oRound().#cRound().#space().#space().#T().#h().#e().#space().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#space().#O().#b().#j().#e().#c().#t().#space().#r().#e().#f().#e().#r().#s().#space().#t().#o().#space().#O().#u().#t().#e().#r().#0())
      )
    )
  this.record__49_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#M().#e().#m().#b().#e().#r().#D().#o().#c()))
  )
method 'of the library literal
Outer1::Doc doc() this.record__49_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#L().#i().#b().#r().#a().#r().#y().#D().#o().#c()))
method 
Outer2::Path pathFromRoot() this.path__49_0()
method 
Outer2::Bool hasExternalType() (
  Void unused=(
    Void unused0=(
      Outer0::path__49_0() ::#bangequal(that ) cond=this.path__49_0().#bangequal(that:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer2::Bool.false()
        )
      )
    Void unused1=(
      Outer0::mirror__49_0() mirror=this.mirror__49_0()
      (
        Outer1::MirrorPr::Class mirror0=(
          Void unused4=return mirror
          
          catch return Outer1::MirrorPr::Class casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched3 void
        (
          Void unused5=return Outer2::Bool.true()
          void
          )
        )
      )
    Void unused2=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
type Any externalType() (
  Void unused=(
    Void unused0=(
      Outer0::path__49_0() ::#bangequal(that ) cond=this.path__49_0().#bangequal(that:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        error Outer2::Guard::Operation.#apply(text:(
          Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::S.#from(builder:Outer2::S.#builder().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#dot().#e().#x().#t().#e().#r().#n().#a().#l().#T().#y().#p().#e().#oRound().#cRound().#space().#T().#h().#e().#space().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#space().#O().#b().#j().#e().#c().#t().#space().#r().#e().#f().#e().#r().#s().#space().#t().#o().#space()).#begin().#add(that:this.path__49_0()).#end()
          listKind.#from(builder:listKind.#builder())
          ))
        )
      )
    Void unused1=(
      Outer0::mirror__49_0() mirror=this.mirror__49_0()
      (
        Outer1::MirrorPr::Class mirror1=(
          Void unused3=return mirror
          
          catch return Outer1::MirrorPr::Class casted0 casted0
          catch return Any casted0 exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched4 (
          Outer1::MirrorPr::Lib mirror0=(
            Void unused4=return mirror
            
            catch return Outer1::MirrorPr::Lib casted casted
            catch return Any casted exception void
            error {'@stringU
            'CastT-Should be unreachable code
            }
            )
          
          catch exception Void catched6 error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#1())
          (
            Void unused5=error Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#dot().#e().#x().#t().#e().#r().#n().#a().#l().#T().#y().#p().#e().#oRound().#cRound().#space().#T().#h().#e().#space().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#space().#O().#b().#j().#e().#c().#t().#space().#i().#s().#space().#u().#n().#b().#o().#u().#n().#d())
            void
            )
          )
        (
          Void unused6=return mirror1.lib()
          void
          )
        )
      )
    void
    )
  
  catch return type Any result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::S externalTypeToS() (
  Void unused=(
    Void unused0=(
      Outer0::path__49_0() ::#bangequal(that ) cond=this.path__49_0().#bangequal(that:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        error Outer2::Guard::Operation.#apply(text:(
          Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::S.#from(builder:Outer2::S.#builder().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#dot().#e().#x().#t().#e().#r().#n().#a().#l().#T().#y().#p().#e().#T().#o().#S().#oRound().#cRound().#space().#T().#h().#e().#space().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#space().#O().#b().#j().#e().#c().#t().#space().#r().#e().#f().#e().#r().#s().#space().#t().#o().#space()).#begin().#add(that:this.path__49_0()).#end()
          listKind.#from(builder:listKind.#builder())
          ))
        )
      )
    Outer0::record__49_0() ::docOf(path ) doc=this.record__49_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#M().#y().#C().#l().#a().#s().#s()))
    Outer0::record__49_0() ::docOf(path ) ::annotations() ::top() ::toS() nameAndPrefix=doc.annotations().top().toS()
    Outer0::record__49_0() ::docOf(path ) ::annotations() ::top() ::toS() ::firstIndexOf(that ) sep=nameAndPrefix.firstIndexOf(that:Outer2::S.#from(builder:Outer2::S.#builder().#colon().#colon()))
    Outer0::record__49_0() ::docOf(path ) ::annotations() ::top() ::toS() ::#apply(start ) name=nameAndPrefix.#apply(start:sep.#plus(that:Outer2::N.#numberParser(that:{'@stringU
    '2
    })))
    Outer2::N::fromS(that ) prefix=Outer2::N.fromS(that:nameAndPrefix.#apply(start:Outer2::N.#numberParser(that:{'@stringU
    '5
    }), end:sep))
    Void unused1=Outer2::Assert::$.#begin().#add(that:prefix.#right(that:Outer2::N.#numberParser(that:{'@stringU
    '0
    }))).#end()
    Void unused2=return (
      Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind0=Outer2::S.#from(builder:Outer2::S.#builder().#O().#u().#t().#e().#r()).#begin().#add(that:prefix.#less(that:Outer2::N.#numberParser(that:{'@stringU
      '1
      }))).#end()
      listKind0.#from(builder:listKind0.#builder().#colon().#colon())
      ).#plusplus(that:name)
    void
    )
  
  catch return Outer2::S result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::S classKind() (
  Outer0::record__49_0() listKind=this.record__49_0()
  listKind.#from(builder:listKind.#builder().#C().#l().#a().#s().#s().#K().#i().#n().#d())
  )
method 
Outer2::S allAsString() (
  Outer0::record__49_0() listKind=this.record__49_0()
  listKind.#from(builder:listKind.#builder().#A().#l().#l().#A().#s().#S().#t().#r().#i().#n().#g())
  )
method 
Outer1::Members members() (
  Outer1::Members::#begin() ::#end() result=Outer1::Members.#begin().#end()
  Outer2::N::#numberParser(that ) mN=Outer2::N.#numberParser(that:{'@stringU
  '1
  })
  mut Outer0::Varresult3__109_0 varresult=Outer0::Varresult3__109_0.#apply(inner:result)
  mut Outer0::VarmN__108_0 varmN=Outer0::VarmN__108_0.#apply(inner:mN)
  Void unused=(
    Void unused0=loop (
      Void unused1=Outer2::Bool.true().#checkTrue()
      (' to be able to break
      'Debug(S"Iteration "[mN]"")
      
        Void unused2=varresult.inner(that:varresult.#inner().#add(that:this.mirror__49_0().introspectReportMember(root:this, path:this.path__49_0(), memberN:varmN.#inner())))
        
        catch exception Outer2::MetaGuard::MemberUnavailable catched0 exception void
        varmN.inner(that:varmN.#inner().#plus(that:Outer2::N.#numberParser(that:{'@stringU
        '1
        })))
        )
      )
    
    catch exception Void catched1 void
    void
    )
  varresult.#inner()
  )
method 
Outer1::Methods methods() (
  Outer1::Methods::#begin() accumulator=Outer1::Methods.#begin()
  mut Outer0::Varaccumulator2__110_0 varaccumulator=Outer0::Varaccumulator2__110_0.#apply(inner:accumulator)
  Void unused=(
    Outer0::members() ::vals() m=this.members().vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=m.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=m.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer1::Method m0=(
                Void unused6=return m.#inner()
                
                catch return Outer1::Method casted casted
                catch return Any casted exception void
                error {'@stringU
                'CastT-Should be unreachable code
                }
                )
              
              catch exception Void catched4 void
              (
                Void unused7=varaccumulator.inner(that:varaccumulator.#inner().#add(that:m0))
                void
                )
              )
            )
          
          catch exception Void catched6 void
          void
          )
        
        catch exception Any propagated (
          Void unused8=m.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused9=m.#close()
        return propagated0
        )
      m.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer1::NestedClasses nestedClasses() (
  Outer1::NestedClasses::#begin() accumulator=Outer1::NestedClasses.#begin()
  mut Outer0::Varaccumulator3__111_0 varaccumulator=Outer0::Varaccumulator3__111_0.#apply(inner:accumulator)
  Void unused=(
    Outer0::members() ::vals() m=this.members().vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=m.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=m.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer1::NestedClass m0=(
                Void unused6=return m.#inner()
                
                catch return Outer1::NestedClass casted casted
                catch return Any casted exception void
                error {'@stringU
                'CastT-Should be unreachable code
                }
                )
              
              catch exception Void catched4 void
              (
                Void unused7=varaccumulator.inner(that:varaccumulator.#inner().#add(that:m0))
                void
                )
              )
            )
          
          catch exception Void catched6 void
          void
          )
        
        catch exception Any propagated (
          Void unused8=m.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused9=m.#close()
        return propagated0
        )
      m.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer1::NestedClasses transitivelyNestedClasses() (
  Outer1::NestedClasses::#begin() ::#add(that ) ::#end() result=Outer1::NestedClasses.#begin().#add(that:this).#end()
  mut Outer0::Varresult4__112_0 varresult=Outer0::Varresult4__112_0.#apply(inner:result)
  Void unused=(
    Outer0::nestedClasses() ::vals() nc=this.nestedClasses().vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=nc.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=nc.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varresult.inner(that:varresult.#inner().#plusplus(that:nc.#inner().transitivelyNestedClasses()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=nc.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=nc.#close()
        return propagated0
        )
      nc.#close()
      )
    )
  varresult.#inner()
  )
method 
Outer1::Types implementedInterfaces() (
  Outer1::Types::#begin() ::#end() result=Outer1::Types.#begin().#end()
  Outer2::N::#numberParser(that ) tN=Outer2::N.#numberParser(that:{'@stringU
  '1
  })
  mut Outer0::Varresult5__114_0 varresult=Outer0::Varresult5__114_0.#apply(inner:result)
  mut Outer0::VartN__113_0 vartN=Outer0::VartN__113_0.#apply(inner:tN)
  Void unused=(
    Void unused0=loop (
      Void unused1=Outer2::Bool.true().#checkTrue()
      (' to be able to break
      
        Void unused2=varresult.inner(that:varresult.#inner().#add(that:this.mirror__49_0().introspectReportType(root:this, path:this.path__49_0(), memberN:Outer2::N.#numberParser(that:{'@stringU
        '0
        }), typeN:vartN.#inner())))
        vartN.inner(that:vartN.#inner().#plus(that:Outer2::N.#numberParser(that:{'@stringU
        '1
        })))
        )
      )
    
    catch exception Void catched1 void
    void
    )
  
  catch exception Outer2::MetaGuard::MemberUnavailable x error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#N().#e().#s().#t().#e().#d().#C().#l().#a().#s().#s().#3()).#apply(that:x)
  varresult.#inner()
  )
method 
Outer1::Types transitivelyImplementedInterfaces() (
  Void unused=(
    Outer0::removeDup__50_0(that ) result=this.removeDup__50_0(that:this.implementedInterfaces())
    Outer0::removeDup__50_0(that ) new=result
    mut Outer0::Varresult6__116_0 varresult=Outer0::Varresult6__116_0.#apply(inner:result)
    mut Outer0::Varnew__115_0 varnew=Outer0::Varnew__115_0.#apply(inner:new)
    Void unused0=loop (
      Outer1::Types::#begin() ::#end() extra=Outer1::Types.#begin().#end()
      mut Outer0::Varextra__117_0 varextra=Outer0::Varextra__117_0.#apply(inner:extra)
      Void unused1=(
        Outer0::Varnew__115_0::#inner() ::vals() t=varnew.#inner().vals()
        (
          Void unused4=(
            Void unused5=(
              Void unused6=loop (
                Void unused7=t.#next()
                
                catch exception Void catched0 (
                  Void unused8=(
                    Void unused9=t.#checkEnd()
                    
                    catch exception Void catched1 void
                    void
                    )
                  exception void
                  )
                (
                  Outer0::Varnew__115_0::#inner() ::vals() ::#inner() ::referencedPath() ::implementedInterfaces() impl=t.#inner().referencedPath().implementedInterfaces()
                  varextra.inner(that:varextra.#inner().#plusplus(that:this.remove__52_0(that:impl, from:varresult.#inner())))
                  )
                )
              
              catch exception Void catched4 void
              void
              )
            
            catch exception Any propagated (
              Void unused10=t.#close()
              exception propagated
              )
            void
            )
          
          catch return Outer1::Types propagated0 (
            Void unused11=t.#close()
            return propagated0
            )
          t.#close()
          )
        )
      Void unused2=(
        Outer0::Varextra__117_0::#inner() ::isEmpty() cond=varextra.#inner().isEmpty()
        (
          Void unused12=cond.#checkTrue()
          
          catch exception Void catched10 void
          return varresult.#inner()
          )
        )
      Void unused3=varnew.inner(that:varextra.#inner())
      varresult.inner(that:varresult.#inner().#plusplus(that:varextra.#inner()))
      )
    void
    )
  
  catch return Outer1::Types result0 result0
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method '@private
Outer1::Types removeDup__50_0(Outer1::Types that) (
  Outer1::Types::#begin() ::#end() result=Outer1::Types.#begin().#end()
  mut Outer0::Varresult7__118_0 varresult=Outer0::Varresult7__118_0.#apply(inner:result)
  Void unused=(
    Outer1::Types::vals() t=that.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=t.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=t.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer0::select__51_0(that from ) cond=this.select__51_0(that:t.#inner(), from:varresult.#inner())
              (
                Void unused6=cond.#checkTrue()
                
                catch exception Void catched4 void
                varresult.inner(that:varresult.#inner().#add(that:t.#inner()))
                )
              )
            )
          
          catch exception Void catched5 void
          void
          )
        
        catch exception Any propagated (
          Void unused7=t.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused8=t.#close()
        return propagated0
        )
      t.#close()
      )
    )
  varresult.#inner()
  )
method '@private
Outer2::Bool select__51_0(Outer1::Type that, Outer1::Types from) (
  Outer1::Type::referencedPath() rp=that.referencedPath()
  (
    Outer2::Count::#begin() accumulator=Outer2::Count.#begin()
    mut Outer0::Varaccumulator4__119_0 varaccumulator=Outer0::Varaccumulator4__119_0.#apply(inner:accumulator)
    Void unused=(
      Outer1::Types::vals() t=from.vals()
      (
        Void unused0=(
          Void unused1=(
            Void unused2=loop (
              Void unused3=t.#next()
              
              catch exception Void catched1 (
                Void unused4=(
                  Void unused5=t.#checkEnd()
                  
                  catch exception Void catched2 void
                  void
                  )
                exception void
                )
              varaccumulator.inner(that:varaccumulator.#inner().#add(that:t.#inner().referencedPath().#equalequal(that:rp)))
              )
            
            catch exception Void catched4 void
            void
            )
          
          catch exception Any propagated (
            Void unused6=t.#close()
            exception propagated
            )
          void
          )
        
        catch return Any propagated0 (
          Void unused7=t.#close()
          return propagated0
          )
        t.#close()
        )
      )
    varaccumulator.#inner().#end()
    ).#equalequal(that:Outer2::N.#numberParser(that:{'@stringU
  '0
  }))
  )
method '@private
Outer1::Types remove__52_0(Outer1::Types that, Outer1::Types from) (
  Outer1::Types::#begin() accumulator=Outer1::Types.#begin()
  mut Outer0::Varaccumulator5__120_0 varaccumulator=Outer0::Varaccumulator5__120_0.#apply(inner:accumulator)
  Void unused=(
    Outer1::Types::vals() t=that.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=t.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=t.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer0::select__51_0(that from ) cond=this.select__51_0(that:t.#inner(), from:from)
              (
                Void unused6=cond.#checkTrue()
                
                catch exception Void catched4 void
                varaccumulator.inner(that:varaccumulator.#inner().#add(that:t.#inner()))
                )
              )
            )
          
          catch exception Void catched5 void
          void
          )
        
        catch exception Any propagated (
          Void unused7=t.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused8=t.#close()
        return propagated0
        )
      t.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer1::Methods stateCandidate() (
  Outer2::Bool::false() havePrivate=Outer2::Bool.false()
  mut Outer0::VarhavePrivate__122_0 varhavePrivate=Outer0::VarhavePrivate__122_0.#apply(inner:havePrivate)
  Outer1::Methods::#begin() ::#end() absMethods=(
    Outer1::Methods::#begin() accumulator=Outer1::Methods.#begin()
    mut Outer0::Varaccumulator6__123_0 varaccumulator=Outer0::Varaccumulator6__123_0.#apply(inner:accumulator)
    Void unused0=(
      Outer0::methods() ::vals() m=this.methods().vals()
      (
        Void unused1=(
          Void unused2=(
            Void unused3=loop (
              Void unused4=m.#next()
              
              catch exception Void catched0 (
                Void unused5=(
                  Void unused6=m.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::methods() ::vals() ::#inner() ::methodKind() ::#equalequal(that ) cond=m.#inner().methodKind().#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#A().#b().#s().#t().#r().#a().#c().#t().#M().#e().#t().#h().#o().#d()))
                (
                  Void unused7=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  (
                    Void unused8=varhavePrivate.inner(that:varhavePrivate.#inner().#or(that:m.#inner().isPrivate()))
                    varaccumulator.inner(that:varaccumulator.#inner().#add(that:m.#inner()))
                    )
                  )
                )
              )
            
            catch exception Void catched6 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=m.#close()
            exception propagated
            )
          void
          )
        
        catch return Any propagated0 (
          Void unused10=m.#close()
          return propagated0
          )
        m.#close()
        )
      )
    varaccumulator.#inner().#end()
    )
  mut Outer0::VarabsMethods__121_0 varabsMethods=Outer0::VarabsMethods__121_0.#apply(inner:absMethods)
  Void unused=(
    Outer0::VarhavePrivate__122_0::#inner() cond0=varhavePrivate.#inner()
    (
      Void unused11=cond0.#checkTrue()
      
      catch exception Void catched13 void
      varabsMethods.inner(that:(
        Outer1::Methods::#begin() accumulator0=Outer1::Methods.#begin()
        mut Outer0::Varaccumulator7__124_0 varaccumulator0=Outer0::Varaccumulator7__124_0.#apply(inner:accumulator0)
        Void unused12=(
          Outer0::VarabsMethods__121_0::#inner() ::vals() a=varabsMethods.#inner().vals()
          (
            Void unused13=(
              Void unused14=(
                Void unused15=loop (
                  Void unused16=a.#next()
                  
                  catch exception Void catched15 (
                    Void unused17=(
                      Void unused18=a.#checkEnd()
                      
                      catch exception Void catched16 void
                      void
                      )
                    exception void
                    )
                  (
                    Outer0::VarabsMethods__121_0::#inner() ::vals() ::#inner() ::isPrivate() cond1=a.#inner().isPrivate()
                    (
                      Void unused19=cond1.#checkTrue()
                      
                      catch exception Void catched19 void
                      varaccumulator0.inner(that:varaccumulator0.#inner().#add(that:a.#inner()))
                      )
                    )
                  )
                
                catch exception Void catched20 void
                void
                )
              
              catch exception Any propagated1 (
                Void unused20=a.#close()
                exception propagated1
                )
              void
              )
            
            catch return Any propagated2 (
              Void unused21=a.#close()
              return propagated2
              )
            a.#close()
            )
          )
        varaccumulator0.#inner().#end()
        ))
      )
    )
  varabsMethods.#inner()
  )
method 
Outer1::Methods state() (
  Void unused=(
    Outer1::Methods::#begin() ::#end() result=Outer1::Methods.#begin().#end()
    Outer0::stateCandidate() stateCandidate=this.stateCandidate()
    Outer1::Methods::#begin() ::#end() ::top() constr=(
      Outer1::Methods::#begin() ::#end() classMethods=(
        Outer1::Methods::#begin() accumulator=Outer1::Methods.#begin()
        mut Outer0::Varaccumulator8__126_0 varaccumulator=Outer0::Varaccumulator8__126_0.#apply(inner:accumulator)
        Void unused5=(
          Outer0::stateCandidate() ::vals() m=stateCandidate.vals()
          (
            Void unused6=(
              Void unused7=(
                Void unused8=loop (
                  Void unused9=m.#next()
                  
                  catch exception Void catched0 (
                    Void unused10=(
                      Void unused11=m.#checkEnd()
                      
                      catch exception Void catched1 void
                      void
                      )
                    exception void
                    )
                  (
                    Outer0::stateCandidate() ::vals() ::#inner() ::thisMdf() ::#equalequal(that ) cond=m.#inner().thisMdf().#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#t().#y().#p().#e()))
                    (
                      Void unused12=cond.#checkTrue()
                      
                      catch exception Void catched4 void
                      varaccumulator.inner(that:varaccumulator.#inner().#add(that:m.#inner()))
                      )
                    )
                  )
                
                catch exception Void catched5 void
                void
                )
              
              catch exception Any propagated (
                Void unused13=m.#close()
                exception propagated
                )
              void
              )
            
            catch return Outer1::Methods propagated0 (
              Void unused14=m.#close()
              return propagated0
              )
            m.#close()
            )
          )
        varaccumulator.#inner().#end()
        )
      Void unused3=(
        Outer1::Methods::#begin() ::#end() ::isEmpty() cond0=classMethods.isEmpty()
        (
          Void unused15=cond0.#checkTrue()
          
          catch exception Void catched12 void
          return result
          )
        )
      Void unused4=(
        Outer1::Methods::#begin() ::#end() ::pop() ::isEmpty() ::#bang() cond1=classMethods.pop().isEmpty().#bang()
        (
          Void unused16=cond1.#checkTrue()
          
          catch exception Void catched14 void
          return result
          )
        )
      classMethods.top()
      )
    mut Outer0::Varresult8__125_0 varresult=Outer0::Varresult8__125_0.#apply(inner:result)
    Void unused0=varresult.inner(that:varresult.#inner().#add(that:constr))
    Outer1::Methods::#begin() ::#end() ::top() ::selector() ::names() names=constr.selector().names()
    Void unused1=(
      Outer1::Methods::#begin() ::#end() ::top() ::selector() ::names() ::vals() name=names.vals()
      (
        Void unused17=(
          Void unused18=(
            Void unused19=loop (
              Void unused20=name.#next()
              
              catch exception Void catched17 (
                Void unused21=(
                  Void unused22=name.#checkEnd()
                  
                  catch exception Void catched18 void
                  void
                  )
                exception void
                )
              (
                Outer2::Selector::fromS(that ) getter=Outer2::Selector.fromS(that:name.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oRound().#cRound())))
                Outer2::Selector::fromS(that ) exposer=Outer2::Selector.fromS(that:Outer2::S.#from(builder:Outer2::S.#builder().#hash()).#plusplus(that:name.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oRound().#cRound()))))
                Outer2::Selector::fromS(that ) setter=Outer2::Selector.fromS(that:name.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oRound().#t().#h().#a().#t().#cRound())))
                (
                  Outer0::stateCandidate() ::vals() f=stateCandidate.vals()
                  (
                    Void unused23=(
                      Void unused24=(
                        Void unused25=loop (
                          Void unused26=f.#next()
                          
                          catch exception Void catched22 (
                            Void unused27=(
                              Void unused28=f.#checkEnd()
                              
                              catch exception Void catched23 void
                              void
                              )
                            exception void
                            )
                          (
                            Outer0::stateCandidate() ::vals() ::#inner() ::selector() ::#equalequal(that ) ::#or(that ) ::#or(that ) cond2=f.#inner().selector().#equalequal(that:getter).#or(that:f.#inner().selector().#equalequal(that:exposer)).#or(that:f.#inner().selector().#equalequal(that:setter))
                            (
                              Void unused29=cond2.#checkTrue()
                              
                              catch exception Void catched26 void
                              varresult.inner(that:varresult.#inner().#add(that:f.#inner()))
                              )
                            )
                          )
                        
                        catch exception Void catched27 void
                        void
                        )
                      
                      catch exception Any propagated1 (
                        Void unused30=f.#close()
                        exception propagated1
                        )
                      void
                      )
                    
                    catch return Outer1::Methods propagated2 (
                      Void unused31=f.#close()
                      return propagated2
                      )
                    f.#close()
                    )
                  )
                )
              )
            
            catch exception Void catched32 void
            void
            )
          
          catch exception Any propagated3 (
            Void unused32=name.#close()
            exception propagated3
            )
          void
          )
        
        catch return Outer1::Methods propagated4 (
          Void unused33=name.#close()
          return propagated4
          )
        name.#close()
        )
      )
    Void unused2=return varresult.#inner().#end()
    void
    )
  
  catch return Outer1::Methods result0 result0
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Method methodFromSelector(Outer2::Selector that) exception Outer2::MetaGuard::MethodUnavailable (
  Void unused=(
    Void unused0=(
      Outer0::methods() ::vals() meth=this.methods().vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=meth.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=meth.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::methods() ::vals() ::#inner() ::selector() ::#equalequal(that ) cond=meth.#inner().selector().#equalequal(that:that)
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return meth.#inner()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=meth.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer1::Method propagated0 (
          Void unused10=meth.#close()
          return propagated0
          )
        meth.#close()
        )
      )
    Void unused1=exception Outer2::MetaGuard::MethodUnavailable.#apply(path:this.pathFromRoot(), selector:that, isPrivate:Outer2::Bool.false())
    void
    )
  
  catch return Outer1::Method result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool has(Outer2::Selector selector) (
  Void unused0=(
    Outer0::methodFromSelector(that ) unused=this.methodFromSelector(that:selector)
    
    catch exception Outer2::MetaGuard::MemberUnavailable catched return Outer2::Bool.false()
    (
      Void unused1=return Outer2::Bool.true()
      void
      )
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::NestedClass nestedClassFromRoot(Outer2::Path that) exception Outer2::MetaGuard::NestedClassUnavailable (
  Void unused=(
    Void unused0=(
      Outer2::Path::#equalequal(that ) cond=that.#equalequal(that:Outer2::Path.#from(builder:Outer2::Path.#builder().#O().#u().#t().#e().#r().#0()))
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return this.root()
        )
      )
    Outer0::record__49_0() ::docOf(path ) ::annotations() ::top() myClass=this.record__49_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#M().#y().#C().#l().#a().#s().#s())).annotations().top()
    Void unused1=(
      Outer0::record__49_0() ::docOf(path ) ::annotations() ::top() ::hasReferredClass() ::#bang() cond0=myClass.hasReferredClass().#bang()
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return this.mirror__49_0().introspectReport(root:this.root(), path:that)
        )
      )
    Void unused2=return Outer2::Introspection.#apply(clazz:myClass.referredClass(), path:that)
    void
    )
  
  catch return Outer1::NestedClass result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool has(Outer2::Path fromRoot) (
  Outer0::nestedClassFromRoot(that ) unused=this.nestedClassFromRoot(that:fromRoot)
  
  catch exception Outer2::MetaGuard::MemberUnavailable catched Outer2::Bool.false()
  Outer2::Bool.true()
  )
method 
Outer2::Bool isPrivate() (
  Void unused=(
    Void unused0=(
      Outer0::nestedDoc() ::annotations() ::vals() ann=this.nestedDoc().annotations().vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=ann.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=ann.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::nestedDoc() ::annotations() ::vals() ::#inner() ::toS() ::#equalequal(that ) cond=ann.#inner().toS().#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#p().#r().#i().#v().#a().#t().#e()))
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return Outer2::Bool.true()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=ann.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer2::Bool propagated0 (
          Void unused10=ann.#close()
          return propagated0
          )
        ann.#close()
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
NestedClasses:{' generic linked list class, elements of type Elem
<:Outer2::Concept::Named
Varres0_$%25_0__127_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1_$%26_0__128_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer2::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer2::Bool.false()
        (
          Void unused2=return Outer2::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::NestedClass top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer2::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer2::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer2::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0_$%25_0__127_0 varres=Outer0::Varres0_$%25_0__127_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::NestedClass that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1_$%26_0__128_0 varres=Outer0::Varres1_$%26_0__128_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer3::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::NestedClass #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::NestedClass elem, Outer1::Cell nextCell) 
mut method 
Outer2::NestedClass #elem() 
read method 
Outer2::NestedClass elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      
      catch return Outer0 casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer3::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer3::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer3::Bool #terminate() 
read method 
Outer3::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer2::NestedClass #inner() this.that().#inner()
read method 
Void #close() void}
Varaccumulator_$%27_0__129_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#begin() inner) 
mut method 
Void inner(Outer1::#begin() that) 
mut method 
Outer1::#begin() #inner() }
method 
Outer2::Bool contains(Outer1::NestedClass that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer0::vals() ::#inner() ::equals(that ) cond=e.#inner().equals(that:that)
                (
                  Void unused8=cond.#checkTrue()
                  
                  catch exception Void catched4 void
                  return Outer2::Bool.true()
                  )
                )
              )
            
            catch exception Void catched5 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer2::Bool propagated0 (
          Void unused10=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 remove(Outer1::NestedClass that) (
  Outer0::#begin() accumulator=Outer0.#begin()
  mut Outer0::Varaccumulator_$%27_0__129_0 varaccumulator=Outer0::Varaccumulator_$%27_0__129_0.#apply(inner:accumulator)
  Void unused=(
    Outer0::vals() e=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=e.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=e.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            (
              Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e.#inner().equals(that:that).#bang()
              (
                Void unused6=cond.#checkTrue()
                
                catch exception Void catched4 void
                varaccumulator.inner(that:varaccumulator.#inner().#add(that:e.#inner()))
                )
              )
            )
          
          catch exception Void catched5 void
          void
          )
        
        catch exception Any propagated (
          Void unused7=e.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused8=e.#close()
        return propagated0
        )
      e.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer2::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::vals() e1=this.vals()
      (
        Void unused2=(
          Void unused3=(
            Outer0::vals() e2=that.vals()
            (
              Void unused4=(
                Void unused5=(
                  Void unused6=loop (
                    Void unused7=e1.#next()
                    
                    catch exception Void catched1 (
                      Void unused8=(
                        Void unused11=e2.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused9=(
                        Void unused12=e1.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused10=(
                        Void unused13=e2.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused14=e2.#next()
                      
                      catch exception Void catched6 (
                        Void unused15=(
                          Void unused17=e1.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused16=(
                          Void unused18=e2.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::vals() ::#inner() ::equals(that ) ::#bang() cond=e1.#inner().equals(that:e2.#inner()).#bang()
                        (
                          Void unused19=cond.#checkTrue()
                          
                          catch exception Void catched11 void
                          return Outer2::Bool.false()
                          )
                        )
                      )
                    )
                  
                  catch exception Void catched12 void
                  void
                  )
                
                catch exception Any propagated (
                  Void unused20=e2.#close()
                  exception propagated
                  )
                void
                )
              
              catch return Outer2::Bool propagated0 (
                Void unused21=e2.#close()
                return propagated0
                )
              e2.#close()
              )
            )
          
          catch exception Any propagated1 (
            Void unused22=e1.#close()
            exception propagated1
            )
          void
          )
        
        catch return Outer2::Bool propagated2 (
          Void unused23=e1.#close()
          return propagated2
          )
        e1.#close()
        )
      )
    Void unused1=return Outer2::Bool.true()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool equals(Any that) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Type:{<:Outer2::Concept::ToS, Outer2::Concept::Named
type method '@private
Outer0 #apply__53_0(fwd Outer1::NestedClass root__53_0, Outer2::Path path__53_0, Outer2::N memberN__53_0, Outer2::N typeN__53_0, Outer1::Record record__53_0) 
mut method '@private
Outer1::NestedClass #root__53_0() 
read method '@private
Outer1::NestedClass root__53_0() 
mut method '@private
Outer2::Path #path__53_0() 
read method '@private
Outer2::Path path__53_0() 
mut method '@private
Outer2::N #memberN__53_0() 
read method '@private
Outer2::N memberN__53_0() 
mut method '@private
Outer2::N #typeN__53_0() 
read method '@private
Outer2::N typeN__53_0() 
mut method '@private
Outer1::Record #record__53_0() 
read method '@private
Outer1::Record record__53_0() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method toS() Outer0.myName().#plusplus(that:(
  Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::S.#from(builder:Outer2::S.#builder().#oSquare()).#begin().#add(that:this.allAsString()).#end()
  listKind.#from(builder:listKind.#builder().#cSquare())
  ))
method 
Outer2::S allAsString() (
  Outer0::record__53_0() listKind=this.record__53_0()
  listKind.#from(builder:listKind.#builder().#A().#l().#l().#A().#s().#S().#t().#r().#i().#n().#g())
  )
method 
Outer2::S typeKind() (
  Outer0::record__53_0() listKind=this.record__53_0()
  listKind.#from(builder:listKind.#builder().#T().#y().#p().#e().#K().#i().#n().#d())
  )
method 
Outer2::S mdf() (
  Void unused=('error on AliasUnresolvable
  
    Void unused0=(
      Outer0::typeKind() ::#bangequal(that ) cond=this.typeKind().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#A().#l().#i().#a().#s().#U().#n().#r().#e().#s().#o().#l().#v().#a().#b().#l().#e()))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return (
          Outer0::record__53_0() listKind=this.record__53_0()
          listKind.#from(builder:listKind.#builder().#M().#d().#f())
          )
        )
      )
    Void unused1=error Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder().#A().#l().#i().#a().#s().#U().#n().#r().#e().#s().#o().#l().#v().#a().#b().#l().#e().#space().#t().#y().#p().#e().#comma().#space().#m().#d().#f().#space().#u().#n().#k().#n().#o().#w().#n())
    void
    )
  
  catch return Outer2::S result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method '@private
Outer1::NestedClass referencedPath__54_0(Outer1::Doc::Annotation ann) (
  Void unused=(
    Void unused0=(
      Outer1::Doc::Annotation::hasReferredClass() cond=ann.hasReferredClass()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer2::Introspection.#apply(clazz:ann.referredClass())
        )
      )
    Outer2::S sPath=ann.toS().#apply(start:Outer2::N.#numberParser(that:{'@stringU
    '2
    }))
    Void unused1=(
      Outer2::S::#equalequal(that ) cond0=sPath.#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return this.root__53_0()
        )
      )
    Outer2::Path path=Outer2::Path.fromS(that:sPath)
    Void unused2=return this.root__53_0().nestedClassFromRoot(that:path)
    
    catch exception Outer2::MetaGuard::NestedClassUnavailable x error Outer2::Assert::ObservedBug.#from(builder:Outer2::Assert::ObservedBug.#builder().#T().#y().#p().#e().#space().#r().#e().#f().#e().#r().#s().#space().#t().#o().#space().#u().#n().#e().#x().#i().#s().#t().#e().#n().#t().#space().#p().#a().#t().#h())
    void
    )
  
  catch return Outer1::NestedClass result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::NestedClass referencedPath() this.referencedPath__54_0(ann:this.record__53_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#P().#a().#t().#h())).annotations().top())
method 
Outer1::NestedClass resolvedReferencedPath() (
  Void unused=('error on AliasUnresolvable
  
    Void unused0=(
      Outer0::typeKind() ::#bangequal(that ) cond=this.typeKind().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#A().#l().#i().#a().#s().#U().#n().#r().#e().#s().#o().#l().#v().#a().#b().#l().#e()))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return this.referencedPath__54_0(ann:this.record__53_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#R().#e().#s().#o().#l().#v().#e().#d().#P().#a().#t().#h())).annotations().top())
        )
      )
    Void unused1=error Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder().#A().#l().#i().#a().#s().#U().#n().#r().#e().#s().#o().#l().#v().#a().#b().#l().#e().#space().#t().#y().#p().#e().#comma().#space().#m().#d().#f().#space().#u().#n().#k().#n().#o().#w().#n())
    void
    )
  
  catch return Outer1::NestedClass result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool partial() (
  Outer0::record__53_0() listKind=this.record__53_0()
  listKind.#from(builder:listKind.#builder().#P().#h())
  ).#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#t().#r().#u().#e()))
method 
Outer2::Bool resolvedPartial() (
  Outer0::record__53_0() listKind=this.record__53_0()
  listKind.#from(builder:listKind.#builder().#R().#e().#s().#o().#l().#v().#e().#d().#P().#h())
  ).#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#t().#r().#u().#e()))
method 
Outer2::S suffix() (
  Void unused=('error on Normal
  
    Void unused0=(
      Outer0::typeKind() ::#equalequal(that ) cond=this.typeKind().#equalequal(that:Outer2::S.#from(builder:Outer2::S.#builder().#N().#o().#r().#m().#a().#l()))
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        error Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder().#N().#o().#r().#m().#a().#l().#space().#t().#y().#p().#e().#s().#space().#h().#a().#v().#e().#space().#n().#o().#space().#s().#u().#f().#f().#i().#x())
        )
      )
    Void unused1=return (
      Outer0::record__53_0() listKind=this.record__53_0()
      listKind.#from(builder:listKind.#builder().#P().#h())
      )
    void
    )
  
  catch return Outer2::S result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Doc doc() this.record__53_0().docOf(path:Outer2::Path.#from(builder:Outer2::Path.#builder().#D().#o().#c()))}
Types:{' generic linked list class, elements of type Elem
<:Outer2::Concept::Named
Varres0__130_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1__131_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer2::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer2::Bool.false()
        (
          Void unused2=return Outer2::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Type top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer2::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer2::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer2::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0__130_0 varres=Outer0::Varres0__130_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Type that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1__131_0 varres=Outer0::Varres1__131_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer3::Bool terminate) 
method 
Outer1::Cell #next() exception Void 
method 
Outer2::Type #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Type elem, Outer1::Cell nextCell) 
mut method 
Outer2::Type #elem() 
read method 
Outer2::Type elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer1::CellNext::#apply(elem nextCell ) startPoint=Outer1::CellNext.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer1::CellNext cell0=(
      Void unused=return cell
      
      catch return Outer1::CellNext casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer3::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer3::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer3::Bool #terminate() 
read method 
Outer3::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Type #inner() this.that().#inner()
read method 
Void #close() void}}}
Refactor:{
type method 
Library compose(Library left, Library right) exception Outer1::MetaGuard::ClassClash, Outer1::MetaGuard::MethodClash (
  Void unused=(
    Void unused0=return Outer1::SafeOperators.compose(left:left, right:right)
    
    catch error Library err (
      Void unused1=Outer1::MetaGuard::ClassClash.#apply(lift:err)
      Void unused2=Outer1::MetaGuard::MethodClash.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Void checkTargetExists(Library that, Outer1::Path path) exception Outer1::MetaGuard::NestedClassUnavailable (
  Outer0::AddDocumentationPath::#apply(that doc ) ::#leftleft(that ) unused=Outer0::AddDocumentationPath.#apply(that:path, doc:Outer1::Introspection::Doc.#from(builder:Outer1::Introspection::Doc.#builder().#J().#u().#s().#t().#T().#o().#S().#e().#e().#I().#f().#I().#t().#I().#s().#T().#h().#e().#r().#e())).#leftleft(that:that)
  
  catch exception Outer1::MetaGuard::InvalidOnTopLevel x error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder().#R().#e().#f().#a().#c().#t().#o().#r().#4())
  void
  )
Redirect:{
type method 
Outer0 #apply(Outer2::Path that, type Any to) 
mut method 
Outer2::Path #that() 
read method 
Outer2::Path that() 
mut method 
type Any #to() 
read method 
type Any to() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::NestedClassUnavailable, Outer2::MetaGuard::InvalidOnTopLevel, Outer2::MetaGuard::SourceUnfit, Outer2::MetaGuard::MethodClash, Outer2::MetaGuard::IncoherentRedirectMapping (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.redirect(that:that, src:this.that(), dest:this.to())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::NestedClassUnavailable.#apply(lift:err)
      Void unused2=Outer2::MetaGuard::InvalidOnTopLevel.#apply(lift:err)
      Void unused3=Outer2::MetaGuard::SourceUnfit.#apply(lift:err)
      Void unused4=Outer2::MetaGuard::MethodClash.#apply(lift:err)
      Void unused5=Outer2::MetaGuard::IncoherentRedirectMapping.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
RenameSelector:{
type method 
Outer0 #apply(Outer2::Selector that, Outer2::Path of, Outer2::Selector to) 
mut method 
Outer2::Selector #that() 
read method 
Outer2::Selector that() 
mut method 
Outer2::Path #of() 
read method 
Outer2::Path of() 
mut method 
Outer2::Selector #to() 
read method 
Outer2::Selector to() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::MemberUnavailable, Outer2::MetaGuard::MethodClash (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.renameMethod(that:that, path:this.of(), src:this.that(), dest:this.to())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::DispatchMemberUnavailable.#apply(that:err)
      Void unused2=Outer2::MetaGuard::MethodClash.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
RenamePath:{
type method 
Outer0 #apply(Outer2::Path that, Outer2::Path to) 
mut method 
Outer2::Path #that() 
read method 
Outer2::Path that() 
mut method 
Outer2::Path #to() 
read method 
Outer2::Path to() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::NestedClassUnavailable, Outer2::MetaGuard::MethodClash, Outer2::MetaGuard::ClassClash (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.renameClass(that:that, src:this.that(), dest:this.to())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::NestedClassUnavailable.#apply(lift:err)
      Void unused2=Outer2::MetaGuard::MethodClash.#apply(lift:err)
      Void unused3=Outer2::MetaGuard::ClassClash.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
RemoveImplementationSelector:{
type method 
Outer0 #apply(Outer2::Selector that, Outer2::Path of) 
mut method 
Outer2::Selector #that() 
read method 
Outer2::Selector that() 
mut method 
Outer2::Path #of() 
read method 
Outer2::Path of() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::MemberUnavailable (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.removeImplementation(that:that, path:this.of(), selector:this.that())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::DispatchMemberUnavailable.#apply(that:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
MoveImplementationSelector:{
type method 
Outer0 #apply(Outer2::Selector that, Outer2::Path of, Outer2::Selector to) 
mut method 
Outer2::Selector #that() 
read method 
Outer2::Selector that() 
mut method 
Outer2::Path #of() 
read method 
Outer2::Path of() 
mut method 
Outer2::Selector #to() 
read method 
Outer2::Selector to() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::MemberUnavailable, Outer2::MetaGuard::MethodClash (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.moveImplementation(that:that, path:this.of(), src:this.that(), dest:this.to())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::DispatchMemberUnavailable.#apply(that:err)
      Void unused2=Outer2::MetaGuard::MethodClash.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
RemoveImplementationPath:{
type method 
Outer0 #apply(Outer2::Path that) 
mut method 
Outer2::Path #that() 
read method 
Outer2::Path that() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::NestedClassUnavailable, Outer2::MetaGuard::PrivacyCoupuled (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.removeImplementation(that:that, path:this.that())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::NestedClassUnavailable.#apply(lift:err)
      Void unused2=Outer2::MetaGuard::PrivacyCoupuled.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
AddDocumentationSelector:{
type method 
Outer0 #apply(Outer2::Selector that, Outer2::Path of, Outer2::Introspection::Doc doc) 
mut method 
Outer2::Selector #that() 
read method 
Outer2::Selector that() 
mut method 
Outer2::Path #of() 
read method 
Outer2::Path of() 
mut method 
Outer2::Introspection::Doc #doc() 
read method 
Outer2::Introspection::Doc doc() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::MemberUnavailable (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.addDocumentation(that:that, path:this.of(), selector:this.that(), doc:this.doc())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::DispatchMemberUnavailable.#apply(that:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
AddDocumentationPath:{
type method 
Outer0 #apply(Outer2::Path that, Outer2::Introspection::Doc doc) 
mut method 
Outer2::Path #that() 
read method 
Outer2::Path that() 
mut method 
Outer2::Introspection::Doc #doc() 
read method 
Outer2::Introspection::Doc doc() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::NestedClassUnavailable, Outer2::MetaGuard::InvalidOnTopLevel (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.addDocumentation(that:that, path:this.that(), doc:this.doc())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::NestedClassUnavailable.#apply(lift:err)
      Void unused2=Outer2::MetaGuard::InvalidOnTopLevel.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
MakePrivatePath:{
type method 
Outer0 #apply(Outer2::Path that) 
mut method 
Outer2::Path #that() 
read method 
Outer2::Path that() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::MemberUnavailable, Outer2::MetaGuard::InvalidOnTopLevel Outer1::AddDocumentationPath.#apply(that:this.that(), doc:Outer2::Introspection::Doc.#stringParser(that:{'@private
})).#leftleft(that:that)}
MakePrivateSelector:{
type method 
Outer0 #apply(Outer2::Selector that, Outer2::Path of) 
mut method 
Outer2::Selector #that() 
read method 
Outer2::Selector that() 
mut method 
Outer2::Path #of() 
read method 
Outer2::Path of() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::MemberUnavailable Outer1::AddDocumentationSelector.#apply(that:this.that(), of:this.of(), doc:Outer2::Introspection::Doc.#stringParser(that:{'@private
})).#leftleft(that:that)}
SumMethods:{
type method 
Outer0 #apply(Outer2::Selector that, Outer2::Selector and, Outer2::Path of, Outer2::S over, Outer2::Selector to) 
mut method 
Outer2::Selector #that() 
read method 
Outer2::Selector that() 
mut method 
Outer2::Selector #and() 
read method 
Outer2::Selector and() 
mut method 
Outer2::Path #of() 
read method 
Outer2::Path of() 
mut method 
Outer2::S #over() 
read method 
Outer2::S over() 
mut method 
Outer2::Selector #to() 
read method 
Outer2::Selector to() 
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::MemberUnavailable, Outer2::MetaGuard::MethodClash, Outer2::MetaGuard::ParameterMismatch (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.sumMethods(that:that, path:this.of(), src1:this.that(), src2:this.and(), dest:this.to(), name:this.over())
    
    catch error Library err (
      Void unused1=Outer2::MetaGuard::DispatchMemberUnavailable.#apply(that:err)
      Void unused2=Outer2::MetaGuard::MethodClash.#apply(lift:err)
      Void unused3=Outer2::MetaGuard::ParameterMismatch.#apply(lift:err)
      error err
      )
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Tools:{
type method 
Outer2::S getToSOrName(read Any that) (
  Void unused=(
    Void unused0=(
      Outer2::Concept::ToS that1=(
        Void unused1=return that
        
        catch return Outer2::Concept::ToS casted0 casted0
        catch return Any casted0 exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 (
        Outer2::Concept::Classable that0=(
          Void unused2=return that
          
          catch return Outer2::Concept::Classable casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched2 return Outer2::S.#from(builder:Outer2::S.#builder().#i().#n().#s().#t().#a().#n().#c().#e().#space().#n().#o().#t().#space().#T().#o().#S().#space().#o().#r().#space().#C().#l().#a().#s().#s().#a().#b().#l().#e())
        (
          Void unused3=return Outer2::GetMyName.#apply(that:that0.classAny()).#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#space().#i().#n().#s().#t().#a().#n().#c().#e()))
          void
          )
        )
      (
        Void unused4=return that1.toS()
        void
        )
      )
    void
    )
  
  catch return Outer2::S result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}}
Opt:{
type method 
Library #apply(type Any that) Outer1::SafeOperators.redirect(that:{
type method 
Outer0 #new(Outer0::TOpt that) 
mut method 
Outer0::TOpt #that() 
read method 
Outer0::TOpt that() 
T:{}
TOpt:{interface 
method 
Outer1::T get() }
TEmpty:{<:Outer1::TOpt
type method 
Outer0 #apply() 
method get() error Outer3::Guard::Operation.#from(builder:Outer3::Guard::Operation.#builder().#T().#E().#m().#p().#t().#y().#dot().#g().#e().#t().#oRound().#cRound().#space().#V().#a().#l().#u().#e().#space().#n().#o().#t().#space().#p().#r().#e().#s().#e().#n().#t().#space().#i().#n().#space().#O().#p().#t().#i().#o().#n().#a().#l())}
TOf:{<:Outer1::TOpt
type method 
Outer0 #apply(Outer1::T that) 
mut method 
Outer1::T #that() 
read method 
Outer1::T that() 
method get() this.that()}
method 
Outer0::T #tilde() this.that().get()
method 
Outer2::Bool isPresent() (
  Void unused=(
    Outer0::#tilde() aux=this.#tilde()
    Void unused0=return Outer2::Bool.true()
    
    catch error Any catched return Outer2::Bool.false()
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #apply() Outer0.#new(that:Outer0::TEmpty.#apply())
type method 
Outer0 #apply(Outer0::T that) Outer0.#new(that:Outer0::TOf.#apply(that:that))}, src:Outer1::Path.#from(builder:Outer1::Path.#builder().#T()), dest:that)}
PreferentialComposition:{'members of PreferentialComposition

Varacc0__132_0:'@private
{
type method 
mut Outer0 #apply(Outer1::SrcDests::#begin() ::#end() inner) 
mut method 
Void inner(Outer1::SrcDests::#begin() ::#end() that) 
mut method 
Outer1::SrcDests::#begin() ::#end() #inner() }
Varaccumulator9__133_0:'@private
{
type method 
mut Outer0 #apply(Outer1::SrcDests::#begin() inner) 
mut method 
Void inner(Outer1::SrcDests::#begin() that) 
mut method 
Outer1::SrcDests::#begin() #inner() }
$:{interface 
method 
Library solveConflict(Library that, Outer1::SrcDest location) }
SrcDest:{
type method 
Outer0 #apply(Outer2::Path path, Outer2::Selector src, Outer2::Selector dest) 
mut method 
Outer2::Path #path() 
read method 
Outer2::Path path() 
mut method 
Outer2::Selector #src() 
read method 
Outer2::Selector src() 
mut method 
Outer2::Selector #dest() 
read method 
Outer2::Selector dest() }
SrcDests:{' generic linked list class, elements of type Elem
<:Outer2::Concept::Named
Varres0__134_0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1__135_0:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer2::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer2::Bool.false()
        (
          Void unused2=return Outer2::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::SrcDest top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer2::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer2::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer2::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0__134_0 varres=Outer0::Varres0__134_0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::SrcDest that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1__135_0 varres=Outer0::Varres1__135_0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer3::Bool terminate) 
method 
Outer1::Cell #next() exception Void 
method 
Outer2::SrcDest #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::SrcDest elem, Outer1::Cell nextCell) 
mut method 
Outer2::SrcDest #elem() 
read method 
Outer2::SrcDest elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer1::CellNext::#apply(elem nextCell ) startPoint=Outer1::CellNext.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer1::CellNext cell0=(
      Void unused=return cell
      
      catch return Outer1::CellNext casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer3::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer3::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer3::Bool #terminate() 
read method 
Outer3::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Outer2::SrcDest #inner() this.that().#inner()
read method 
Void #close() void}}
Libs__136_0:'@private
{' generic linked list class, elements of type Elem
<:Outer2::Concept::Named
Varres0:'@private
{
type method 
mut Outer0 #apply(Outer1 inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Varres1:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer2::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          
          catch return Outer0::CellEnd casted casted
          catch return Any casted exception void
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        
        catch exception Void catched1 return Outer2::Bool.false()
        (
          Void unused2=return Outer2::Bool.true()
          void
          )
        )
      )
    void
    )
  
  catch return Outer2::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Library top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer2::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer2::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    
    catch exception Void catched error (
      Outer2::Guard::Operation::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::Guard::Operation.#from(builder:Outer2::Guard::Operation.#builder()).#begin().#add(that:Outer0.myName()).#end()
      listKind.#from(builder:listKind.#builder().#colon().#P().#o().#p().#O().#n().#E().#m().#p().#y().#L().#i().#s().#t())
      )
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres0 varres=Outer0::Varres0.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=e.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=e.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0 propagated0 (
          Void unused9=e.#close()
          return propagated0
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  
  catch return Outer0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Library that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres1 varres=Outer0::Varres1.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            
            catch exception Void catched0 (
              Void unused4=(
                Void unused5=elem.#checkEnd()
                
                catch exception Void catched1 void
                void
                )
              exception void
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          
          catch exception Void catched3 void
          void
          )
        
        catch exception Any propagated (
          Void unused6=elem.#close()
          exception propagated
          )
        void
        )
      
      catch return Any propagated0 (
        Void unused7=elem.#close()
        return propagated0
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer3::Bool terminate) 
method 
Outer1::Cell #next() exception Void 
method 
Library #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder().#I().#n().#n().#e().#r().#O().#n().#C().#e().#l().#l().#E().#n().#d())
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Library elem, Outer1::Cell nextCell) 
mut method 
Library #elem() 
read method 
Library elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer1::CellNext::#apply(elem nextCell ) startPoint=Outer1::CellNext.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  
  catch return Outer0::vals(terminate )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer1::CellNext cell0=(
      Void unused=return cell
      
      catch return Outer1::CellNext casted casted
      catch return Any casted exception void
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    
    catch exception Void catched1 void
    (
      Void unused0=error (
        Outer3::Assert::ObservedBug::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer3::Assert::ObservedBug.#from(builder:Outer3::Assert::ObservedBug.#builder()).#begin().#add(that:Outer1.myName()).#end()
        listKind.#from(builder:listKind.#builder().#colon().#I().#t().#e().#r().#a().#t().#i().#o().#n().#N().#o().#t().#C().#o().#m().#p().#l().#e().#t().#e().#comma().#newline().#space().#space().#u().#s().#e().#space().#v().#a().#l().#s().#C().#u().#t().#oRound().#cRound().#space().#t().#o().#space().#a().#l().#l().#o().#w().#s().#space().#i().#n().#c().#o().#m().#p().#l().#e().#t().#e().#space().#i().#t().#e().#r().#a().#t().#i().#o().#n().#s().#newline())
        )
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell that, Outer3::Bool terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer3::Bool #terminate() 
read method 
Outer3::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        
        catch return Outer1::CellEnd casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  
  catch return Void result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    
    catch exception Void catched0 void
    this.that().#checkEnd()
    )
  )
read method 
Library #inner() this.that().#inner()
read method 
Void #close() void}}
type method '@private
Outer0::SrcDests renameMap__55_0(Library that, Outer1::S prefix, Outer1::Introspection::NestedClasses intros) (
  Void unused=(
    Outer0::SrcDests::#begin() ::#end() acc=Outer0::SrcDests.#begin().#end()
    mut Outer0::Varacc0__132_0 varacc=Outer0::Varacc0__132_0.#apply(inner:acc)
    Void unused0=(
      Outer1::Introspection::NestedClasses::vals() intro=intros.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=intro.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=intro.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              varacc.inner(that:varacc.#inner().#plusplus(that:this.renameMap(that:that, prefix:prefix, path:intro.#inner().pathFromRoot(), ms:intro.#inner().methods())))
              )
            
            catch exception Void catched3 void
            void
            )
          
          catch exception Any propagated (
            Void unused8=intro.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer0::SrcDests propagated0 (
          Void unused9=intro.#close()
          return propagated0
          )
        intro.#close()
        )
      )
    Void unused1=return varacc.#inner()
    void
    )
  
  catch return Outer0::SrcDests result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0::SrcDests renameMap(Library that, Outer1::S prefix, Outer1::Path path, Outer1::Introspection::Methods ms) (
  Void unused=(
    Outer1::Introspection::#apply(lib path ) thatI=Outer1::Introspection.#apply(lib:that, path:path)
    
    catch exception Outer1::MetaGuard::MemberUnavailable catched return Outer0::SrcDests.#begin().#end()
    (
      Void unused0=return (
        Outer0::SrcDests::#begin() accumulator=Outer0::SrcDests.#begin()
        mut Outer0::Varaccumulator9__133_0 varaccumulator=Outer0::Varaccumulator9__133_0.#apply(inner:accumulator)
        Void unused1=(
          Outer1::Introspection::Methods::vals() meth=ms.vals()
          (
            Void unused2=(
              Void unused3=(
                Void unused4=loop (
                  Void unused5=meth.#next()
                  
                  catch exception Void catched1 (
                    Void unused6=(
                      Void unused7=meth.#checkEnd()
                      
                      catch exception Void catched2 void
                      void
                      )
                    exception void
                    )
                  (
                    Outer0::needRename(that meth ) cond=this.needRename(that:thatI, meth:meth.#inner())
                    (
                      Void unused8=cond.#checkTrue()
                      
                      catch exception Void catched5 void
                      (
                        Outer1::Selector::fromS(that ) destSel=Outer1::Selector.fromS(that:prefix.#plusplus(that:meth.#inner().selector().toS()))
                        varaccumulator.inner(that:varaccumulator.#inner().#add(that:Outer0::SrcDest.#apply(path:path, src:meth.#inner().selector(), dest:destSel)))
                        )
                      )
                    )
                  )
                
                catch exception Void catched7 void
                void
                )
              
              catch exception Any propagated (
                Void unused9=meth.#close()
                exception propagated
                )
              void
              )
            
            catch return Outer0::SrcDests propagated0 (
              Void unused10=meth.#close()
              return propagated0
              )
            meth.#close()
            )
          )
        varaccumulator.#inner().#end()
        )
      void
      )
    )
  
  catch return Outer0::SrcDests result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer1::Bool needRename(Outer1::Introspection::NestedClass that, Outer1::Introspection::Method meth) (
  Void unused=(
    Void unused0=(
      Outer1::Introspection::Method::isPrivate() cond=meth.isPrivate()
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer1::Bool.false()
        )
      )
    Void unused1=(
      Outer1::Introspection::Method::methodKind() ::#equalequal(that ) cond0=meth.methodKind().#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#A().#b().#s().#t().#r().#a().#c().#t().#M().#e().#t().#h().#o().#d()))
      (
        Void unused3=cond0.#checkTrue()
        
        catch exception Void catched2 void
        return Outer1::Bool.false()
        )
      )
    Outer1::Introspection::NestedClass::methodFromSelector(that ) meth2=that.methodFromSelector(that:meth.selector())
    
    catch exception Outer1::MetaGuard::MemberUnavailable catched3 return Outer1::Bool.false()
    (
      Void unused4=(
        Outer1::Introspection::NestedClass::methodFromSelector(that ) ::isPrivate() cond1=meth2.isPrivate()
        (
          Void unused7=cond1.#checkTrue()
          
          catch exception Void catched5 void
          return Outer1::Bool.false()
          )
        )
      Void unused5=(
        Outer1::Introspection::NestedClass::methodFromSelector(that ) ::methodKind() ::#equalequal(that ) cond2=meth2.methodKind().#equalequal(that:Outer1::S.#from(builder:Outer1::S.#builder().#A().#b().#s().#t().#r().#a().#c().#t().#M().#e().#t().#h().#o().#d()))
        (
          Void unused8=cond2.#checkTrue()
          
          catch exception Void catched7 void
          return Outer1::Bool.false()
          )
        )
      Void unused6=return Outer1::Bool.true()
      void
      )
    )
  
  catch return Outer1::Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Library #leftleft(Library that) exception Outer1::MetaGuard::ClassClash, Outer1::MetaGuard::MethodClash Outer1::Refactor.compose(left:that, right:{'members of each produced class
<:Outer1::$
Varacc1__139_0:'@private
{
type method 
mut Outer0 #apply(Library inner) 
mut method 
Void inner(Library that) 
mut method 
Library #inner() 
read method 
Library inner() }
Varmap__140_0:'@private
{
type method 
mut Outer0 #apply(Outer2::SrcDests::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::SrcDests::#begin() ::#end() that) 
mut method 
Outer2::SrcDests::#begin() ::#end() #inner() }
Varlibi__141_0:'@private
{
type method 
mut Outer0 #apply(Outer1::myLibs__56_0() ::vals() ::#inner() inner) 
mut method 
Void inner(Outer1::myLibs__56_0() ::vals() ::#inner() that) 
mut method 
Outer1::myLibs__56_0() ::vals() ::#inner() #inner() }
type method '@private
Outer0 #apply__56_0(Outer1::Libs__136_0 myLibs__56_0) 
mut method '@private
Outer1::Libs__136_0 #myLibs__56_0() 
read method '@private
Outer1::Libs__136_0 myLibs__56_0() 
method 
Outer0 #add(Library that) Outer0.#apply__56_0(myLibs__56_0:this.myLibs__56_0().#add(that:that))
type method 
Outer0 #begin() Outer0.#apply__56_0(myLibs__56_0:Outer1::Libs__136_0.#begin().#end())
method 
Outer0 #end() Outer0.#apply__56_0(myLibs__56_0:this.myLibs__56_0().#end())
method 
Library #leftleft(Library that) exception Outer2::MetaGuard::ClassClash, Outer2::MetaGuard::MethodClash (
  Void unused=(
    Outer2::Introspection::#apply(lib ) i=Outer2::Introspection.#apply(lib:that)
    Outer1::SrcDests::#begin() ::#end() map=Outer1::SrcDests.#begin().#end()
    Library acc={}
    mut Outer0::Varmap__140_0 varmap=Outer0::Varmap__140_0.#apply(inner:map)
    mut Outer0::Varacc1__139_0 varacc=Outer0::Varacc1__139_0.#apply(inner:acc)
    Void unused0=(
      Outer0::myLibs__56_0() ::vals() lib=this.myLibs__56_0().vals()
      (
        Void unused4=(
          Void unused5=(
            Outer2::N::#numberParser(that ) ::vals() index=Outer2::N.#numberParser(that:{'@stringU
            '0
            }).vals()
            (
              Void unused6=(
                Void unused7=(
                  Void unused8=loop (
                    Void unused9=lib.#next()
                    
                    catch exception Void catched1 (
                      Void unused10=(
                        Void unused13=index.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused11=(
                        Void unused14=lib.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused12=(
                        Void unused15=index.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused16=index.#next()
                      
                      catch exception Void catched6 (
                        Void unused17=(
                          Void unused19=lib.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused18=(
                          Void unused20=index.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::myLibs__56_0() ::vals() ::#inner() libi=lib.#inner()
                        Outer1::renameMap__55_0(that prefix intros ) rens=Outer1.renameMap__55_0(that:lib.#inner(), prefix:(
                          Outer2::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer2::S.#from(builder:Outer2::S.#builder().#hash()).#begin().#add(that:index.#inner()).#end()
                          listKind.#from(builder:listKind.#builder())
                          ), intros:i.transitivelyNestedClasses())
                        mut Outer0::Varlibi__141_0 varlibi=Outer0::Varlibi__141_0.#apply(inner:libi)
                        Void unused21=(
                          Outer1::renameMap__55_0(that prefix intros ) ::vals() ren=rens.vals()
                          (
                            Void unused22=(
                              Void unused23=(
                                Void unused24=loop (
                                  Void unused25=ren.#next()
                                  
                                  catch exception Void catched12 (
                                    Void unused26=(
                                      Void unused27=ren.#checkEnd()
                                      
                                      catch exception Void catched13 void
                                      void
                                      )
                                    exception void
                                    )
                                  (
                                    Void unused28=varmap.inner(that:varmap.#inner().#add(that:ren.#inner()))
                                    varlibi.inner(that:this.solveConflict(that:varlibi.#inner(), location:ren.#inner()))
                                    )
                                  )
                                
                                catch exception Void catched16 void
                                void
                                )
                              
                              catch exception Any propagated (
                                Void unused29=ren.#close()
                                exception propagated
                                )
                              void
                              )
                            
                            catch return Library propagated0 (
                              Void unused30=ren.#close()
                              return propagated0
                              )
                            ren.#close()
                            )
                          )
                        varacc.inner(that:Outer2::Refactor.compose(left:varacc.#inner(), right:varlibi.#inner()))
                        )
                      )
                    )
                  
                  catch exception Void catched22 void
                  void
                  )
                
                catch exception Any propagated1 (
                  Void unused31=index.#close()
                  exception propagated1
                  )
                void
                )
              
              catch return Library propagated2 (
                Void unused32=index.#close()
                return propagated2
                )
              index.#close()
              )
            )
          
          catch exception Any propagated3 (
            Void unused33=lib.#close()
            exception propagated3
            )
          void
          )
        
        catch return Library propagated4 (
          Void unused34=lib.#close()
          return propagated4
          )
        lib.#close()
        )
      )
    Void unused1=varacc.inner(that:Outer2::Refactor.compose(left:varacc.#inner(), right:that))
    Void unused2=(
      Outer0::Varmap__140_0::#inner() ::vals() mapi=varmap.#inner().vals()
      (
        Void unused35=(
          Void unused36=(
            Void unused37=loop (
              Void unused38=mapi.#next()
              
              catch exception Void catched32 (
                Void unused39=(
                  Void unused40=mapi.#checkEnd()
                  
                  catch exception Void catched33 void
                  void
                  )
                exception void
                )
              varacc.inner(that:Outer2::Refactor::MakePrivateSelector.#apply(that:mapi.#inner().dest(), of:mapi.#inner().path()).#leftleft(that:varacc.#inner()))
              )
            
            catch exception Void catched35 void
            void
            )
          
          catch exception Any propagated5 (
            Void unused41=mapi.#close()
            exception propagated5
            )
          void
          )
        
        catch return Library propagated6 (
          Void unused42=mapi.#close()
          return propagated6
          )
        mapi.#close()
        )
      )
    Void unused3=return varacc.#inner()
    
    catch exception Outer2::MetaGuard::MemberUnavailable catched40 error Outer2::Assert::CodeNotReachable.#from(builder:Outer2::Assert::CodeNotReachable.#builder().#P().#r().#e().#f().#e().#r().#e().#n().#t().#i().#a().#l().#C().#o().#m().#p().#o().#s().#i().#t().#i().#o().#n().#1()).#apply(that:catched40)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) Outer0.#apply__56_0(myLibs__56_0:this.myLibs__56_0().#plusplus(that:that.myLibs__56_0()))})}
Extends:{'members of each produced class
<:Outer1::PreferentialComposition::$, Outer1::PreferentialComposition::$
method solveConflict(that location ) (
  Void unused=(
    Void unused0=return Outer1::Refactor::MoveImplementationSelector.#apply(that:location.src(), of:location.path(), to:location.dest()).#leftleft(that:that)
    
    catch exception Outer1::MetaGuard catched error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder()).#apply(that:catched)
    void
    )
  
  catch return Outer0::solveConflict(that location )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
Varacc1_$%29_0__142_0:'@private
{
type method 
mut Outer0 #apply(Library inner) 
mut method 
Void inner(Library that) 
mut method 
Library #inner() 
read method 
Library inner() }
Varmap_$%30_0__143_0:'@private
{
type method 
mut Outer0 #apply(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() that) 
mut method 
Outer2::PreferentialComposition::SrcDests::#begin() ::#end() #inner() }
Varlibi_$%31_0__144_0:'@private
{
type method 
mut Outer0 #apply(Outer1::myLibs_$%28_0__57_0() ::vals() ::#inner() inner) 
mut method 
Void inner(Outer1::myLibs_$%28_0__57_0() ::vals() ::#inner() that) 
mut method 
Outer1::myLibs_$%28_0__57_0() ::vals() ::#inner() #inner() }
type method '@private
Outer0 #apply_$%28_0__57_0(Outer1::PreferentialComposition::Libs__136_0 myLibs_$%28_0__57_0) 
mut method '@private
Outer1::PreferentialComposition::Libs__136_0 #myLibs_$%28_0__57_0() 
read method '@private
Outer1::PreferentialComposition::Libs__136_0 myLibs_$%28_0__57_0() 
method 
Outer0 #add(Library that) Outer0.#apply_$%28_0__57_0(myLibs_$%28_0__57_0:this.myLibs_$%28_0__57_0().#add(that:that))
type method 
Outer0 #begin() Outer0.#apply_$%28_0__57_0(myLibs_$%28_0__57_0:Outer1::PreferentialComposition::Libs__136_0.#begin().#end())
method 
Outer0 #end() Outer0.#apply_$%28_0__57_0(myLibs_$%28_0__57_0:this.myLibs_$%28_0__57_0().#end())
method 
Library #leftleft(Library that) exception Outer1::MetaGuard::ClassClash, Outer1::MetaGuard::MethodClash (
  Void unused=(
    Outer1::Introspection::#apply(lib ) i=Outer1::Introspection.#apply(lib:that)
    Outer1::PreferentialComposition::SrcDests::#begin() ::#end() map=Outer1::PreferentialComposition::SrcDests.#begin().#end()
    Library acc={}
    mut Outer0::Varmap_$%30_0__143_0 varmap=Outer0::Varmap_$%30_0__143_0.#apply(inner:map)
    mut Outer0::Varacc1_$%29_0__142_0 varacc=Outer0::Varacc1_$%29_0__142_0.#apply(inner:acc)
    Void unused0=(
      Outer0::myLibs_$%28_0__57_0() ::vals() lib=this.myLibs_$%28_0__57_0().vals()
      (
        Void unused4=(
          Void unused5=(
            Outer1::N::#numberParser(that ) ::vals() index=Outer1::N.#numberParser(that:{'@stringU
            '0
            }).vals()
            (
              Void unused6=(
                Void unused7=(
                  Void unused8=loop (
                    Void unused9=lib.#next()
                    
                    catch exception Void catched1 (
                      Void unused10=(
                        Void unused13=index.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused11=(
                        Void unused14=lib.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused12=(
                        Void unused15=index.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused16=index.#next()
                      
                      catch exception Void catched6 (
                        Void unused17=(
                          Void unused19=lib.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused18=(
                          Void unused20=index.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::myLibs_$%28_0__57_0() ::vals() ::#inner() libi=lib.#inner()
                        Outer1::PreferentialComposition::renameMap__55_0(that prefix intros ) rens=Outer1::PreferentialComposition.renameMap__55_0(that:lib.#inner(), prefix:(
                          Outer1::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer1::S.#from(builder:Outer1::S.#builder().#hash()).#begin().#add(that:index.#inner()).#end()
                          listKind.#from(builder:listKind.#builder())
                          ), intros:i.transitivelyNestedClasses())
                        mut Outer0::Varlibi_$%31_0__144_0 varlibi=Outer0::Varlibi_$%31_0__144_0.#apply(inner:libi)
                        Void unused21=(
                          Outer1::PreferentialComposition::renameMap__55_0(that prefix intros ) ::vals() ren=rens.vals()
                          (
                            Void unused22=(
                              Void unused23=(
                                Void unused24=loop (
                                  Void unused25=ren.#next()
                                  
                                  catch exception Void catched12 (
                                    Void unused26=(
                                      Void unused27=ren.#checkEnd()
                                      
                                      catch exception Void catched13 void
                                      void
                                      )
                                    exception void
                                    )
                                  (
                                    Void unused28=varmap.inner(that:varmap.#inner().#add(that:ren.#inner()))
                                    varlibi.inner(that:this.solveConflict(that:varlibi.#inner(), location:ren.#inner()))
                                    )
                                  )
                                
                                catch exception Void catched16 void
                                void
                                )
                              
                              catch exception Any propagated (
                                Void unused29=ren.#close()
                                exception propagated
                                )
                              void
                              )
                            
                            catch return Library propagated0 (
                              Void unused30=ren.#close()
                              return propagated0
                              )
                            ren.#close()
                            )
                          )
                        varacc.inner(that:Outer1::Refactor.compose(left:varacc.#inner(), right:varlibi.#inner()))
                        )
                      )
                    )
                  
                  catch exception Void catched22 void
                  void
                  )
                
                catch exception Any propagated1 (
                  Void unused31=index.#close()
                  exception propagated1
                  )
                void
                )
              
              catch return Library propagated2 (
                Void unused32=index.#close()
                return propagated2
                )
              index.#close()
              )
            )
          
          catch exception Any propagated3 (
            Void unused33=lib.#close()
            exception propagated3
            )
          void
          )
        
        catch return Library propagated4 (
          Void unused34=lib.#close()
          return propagated4
          )
        lib.#close()
        )
      )
    Void unused1=varacc.inner(that:Outer1::Refactor.compose(left:varacc.#inner(), right:that))
    Void unused2=(
      Outer0::Varmap_$%30_0__143_0::#inner() ::vals() mapi=varmap.#inner().vals()
      (
        Void unused35=(
          Void unused36=(
            Void unused37=loop (
              Void unused38=mapi.#next()
              
              catch exception Void catched32 (
                Void unused39=(
                  Void unused40=mapi.#checkEnd()
                  
                  catch exception Void catched33 void
                  void
                  )
                exception void
                )
              varacc.inner(that:Outer1::Refactor::MakePrivateSelector.#apply(that:mapi.#inner().dest(), of:mapi.#inner().path()).#leftleft(that:varacc.#inner()))
              )
            
            catch exception Void catched35 void
            void
            )
          
          catch exception Any propagated5 (
            Void unused41=mapi.#close()
            exception propagated5
            )
          void
          )
        
        catch return Library propagated6 (
          Void unused42=mapi.#close()
          return propagated6
          )
        mapi.#close()
        )
      )
    Void unused3=return varacc.#inner()
    
    catch exception Outer1::MetaGuard::MemberUnavailable catched40 error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder().#P().#r().#e().#f().#e().#r().#e().#n().#t().#i().#a().#l().#C().#o().#m().#p().#o().#s().#i().#t().#i().#o().#n().#1()).#apply(that:catched40)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) Outer0.#apply_$%28_0__57_0(myLibs_$%28_0__57_0:this.myLibs_$%28_0__57_0().#plusplus(that:that.myLibs_$%28_0__57_0()))}
Use:{'members of each produced class
<:Outer1::PreferentialComposition::$, Outer1::PreferentialComposition::$
method solveConflict(that location ) (
  Void unused=(
    Void unused0=return Outer1::Refactor::RenameSelector.#apply(that:location.src(), of:location.path(), to:location.dest()).#leftleft(that:that)
    
    catch exception Outer1::MetaGuard catched error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder()).#apply(that:catched)
    void
    )
  
  catch return Outer0::solveConflict(that location )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
Varacc1_$%33_0__145_0:'@private
{
type method 
mut Outer0 #apply(Library inner) 
mut method 
Void inner(Library that) 
mut method 
Library #inner() 
read method 
Library inner() }
Varmap_$%34_0__146_0:'@private
{
type method 
mut Outer0 #apply(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() that) 
mut method 
Outer2::PreferentialComposition::SrcDests::#begin() ::#end() #inner() }
Varlibi_$%35_0__147_0:'@private
{
type method 
mut Outer0 #apply(Outer1::myLibs_$%32_0__58_0() ::vals() ::#inner() inner) 
mut method 
Void inner(Outer1::myLibs_$%32_0__58_0() ::vals() ::#inner() that) 
mut method 
Outer1::myLibs_$%32_0__58_0() ::vals() ::#inner() #inner() }
type method '@private
Outer0 #apply_$%32_0__58_0(Outer1::PreferentialComposition::Libs__136_0 myLibs_$%32_0__58_0) 
mut method '@private
Outer1::PreferentialComposition::Libs__136_0 #myLibs_$%32_0__58_0() 
read method '@private
Outer1::PreferentialComposition::Libs__136_0 myLibs_$%32_0__58_0() 
method 
Outer0 #add(Library that) Outer0.#apply_$%32_0__58_0(myLibs_$%32_0__58_0:this.myLibs_$%32_0__58_0().#add(that:that))
type method 
Outer0 #begin() Outer0.#apply_$%32_0__58_0(myLibs_$%32_0__58_0:Outer1::PreferentialComposition::Libs__136_0.#begin().#end())
method 
Outer0 #end() Outer0.#apply_$%32_0__58_0(myLibs_$%32_0__58_0:this.myLibs_$%32_0__58_0().#end())
method 
Library #leftleft(Library that) exception Outer1::MetaGuard::ClassClash, Outer1::MetaGuard::MethodClash (
  Void unused=(
    Outer1::Introspection::#apply(lib ) i=Outer1::Introspection.#apply(lib:that)
    Outer1::PreferentialComposition::SrcDests::#begin() ::#end() map=Outer1::PreferentialComposition::SrcDests.#begin().#end()
    Library acc={}
    mut Outer0::Varmap_$%34_0__146_0 varmap=Outer0::Varmap_$%34_0__146_0.#apply(inner:map)
    mut Outer0::Varacc1_$%33_0__145_0 varacc=Outer0::Varacc1_$%33_0__145_0.#apply(inner:acc)
    Void unused0=(
      Outer0::myLibs_$%32_0__58_0() ::vals() lib=this.myLibs_$%32_0__58_0().vals()
      (
        Void unused4=(
          Void unused5=(
            Outer1::N::#numberParser(that ) ::vals() index=Outer1::N.#numberParser(that:{'@stringU
            '0
            }).vals()
            (
              Void unused6=(
                Void unused7=(
                  Void unused8=loop (
                    Void unused9=lib.#next()
                    
                    catch exception Void catched1 (
                      Void unused10=(
                        Void unused13=index.#next()
                        
                        catch exception Void catched2 void
                        void
                        )
                      Void unused11=(
                        Void unused14=lib.#checkEnd()
                        
                        catch exception Void catched3 void
                        void
                        )
                      Void unused12=(
                        Void unused15=index.#checkEnd()
                        
                        catch exception Void catched4 void
                        void
                        )
                      exception void
                      )
                    (
                      Void unused16=index.#next()
                      
                      catch exception Void catched6 (
                        Void unused17=(
                          Void unused19=lib.#checkEnd()
                          
                          catch exception Void catched7 void
                          void
                          )
                        Void unused18=(
                          Void unused20=index.#checkEnd()
                          
                          catch exception Void catched8 void
                          void
                          )
                        exception void
                        )
                      (
                        Outer0::myLibs_$%32_0__58_0() ::vals() ::#inner() libi=lib.#inner()
                        Outer1::PreferentialComposition::renameMap__55_0(that prefix intros ) rens=Outer1::PreferentialComposition.renameMap__55_0(that:lib.#inner(), prefix:(
                          Outer1::S::#from(builder ) ::#begin() ::#add(that ) ::#end() listKind=Outer1::S.#from(builder:Outer1::S.#builder().#hash()).#begin().#add(that:index.#inner()).#end()
                          listKind.#from(builder:listKind.#builder())
                          ), intros:i.transitivelyNestedClasses())
                        mut Outer0::Varlibi_$%35_0__147_0 varlibi=Outer0::Varlibi_$%35_0__147_0.#apply(inner:libi)
                        Void unused21=(
                          Outer1::PreferentialComposition::renameMap__55_0(that prefix intros ) ::vals() ren=rens.vals()
                          (
                            Void unused22=(
                              Void unused23=(
                                Void unused24=loop (
                                  Void unused25=ren.#next()
                                  
                                  catch exception Void catched12 (
                                    Void unused26=(
                                      Void unused27=ren.#checkEnd()
                                      
                                      catch exception Void catched13 void
                                      void
                                      )
                                    exception void
                                    )
                                  (
                                    Void unused28=varmap.inner(that:varmap.#inner().#add(that:ren.#inner()))
                                    varlibi.inner(that:this.solveConflict(that:varlibi.#inner(), location:ren.#inner()))
                                    )
                                  )
                                
                                catch exception Void catched16 void
                                void
                                )
                              
                              catch exception Any propagated (
                                Void unused29=ren.#close()
                                exception propagated
                                )
                              void
                              )
                            
                            catch return Library propagated0 (
                              Void unused30=ren.#close()
                              return propagated0
                              )
                            ren.#close()
                            )
                          )
                        varacc.inner(that:Outer1::Refactor.compose(left:varacc.#inner(), right:varlibi.#inner()))
                        )
                      )
                    )
                  
                  catch exception Void catched22 void
                  void
                  )
                
                catch exception Any propagated1 (
                  Void unused31=index.#close()
                  exception propagated1
                  )
                void
                )
              
              catch return Library propagated2 (
                Void unused32=index.#close()
                return propagated2
                )
              index.#close()
              )
            )
          
          catch exception Any propagated3 (
            Void unused33=lib.#close()
            exception propagated3
            )
          void
          )
        
        catch return Library propagated4 (
          Void unused34=lib.#close()
          return propagated4
          )
        lib.#close()
        )
      )
    Void unused1=varacc.inner(that:Outer1::Refactor.compose(left:varacc.#inner(), right:that))
    Void unused2=(
      Outer0::Varmap_$%34_0__146_0::#inner() ::vals() mapi=varmap.#inner().vals()
      (
        Void unused35=(
          Void unused36=(
            Void unused37=loop (
              Void unused38=mapi.#next()
              
              catch exception Void catched32 (
                Void unused39=(
                  Void unused40=mapi.#checkEnd()
                  
                  catch exception Void catched33 void
                  void
                  )
                exception void
                )
              varacc.inner(that:Outer1::Refactor::MakePrivateSelector.#apply(that:mapi.#inner().dest(), of:mapi.#inner().path()).#leftleft(that:varacc.#inner()))
              )
            
            catch exception Void catched35 void
            void
            )
          
          catch exception Any propagated5 (
            Void unused41=mapi.#close()
            exception propagated5
            )
          void
          )
        
        catch return Library propagated6 (
          Void unused42=mapi.#close()
          return propagated6
          )
        mapi.#close()
        )
      )
    Void unused3=return varacc.#inner()
    
    catch exception Outer1::MetaGuard::MemberUnavailable catched40 error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder().#P().#r().#e().#f().#e().#r().#e().#n().#t().#i().#a().#l().#C().#o().#m().#p().#o().#s().#i().#t().#i().#o().#n().#1()).#apply(that:catched40)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) Outer0.#apply_$%32_0__58_0(myLibs_$%32_0__58_0:this.myLibs_$%32_0__58_0().#plusplus(that:that.myLibs_$%32_0__58_0()))}
Patch:{
Varacc2__148_0:'@private
{
type method 
mut Outer0 #apply(Library inner) 
mut method 
Void inner(Library that) 
mut method 
Library #inner() 
read method 
Library inner() }
Varmap0__149_0:'@private
{
type method 
mut Outer0 #apply(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() that) 
mut method 
Outer2::PreferentialComposition::SrcDests::#begin() ::#end() #inner() }
Varacc3__150_0:'@private
{
type method 
mut Outer0 #apply(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() inner) 
mut method 
Void inner(Outer2::PreferentialComposition::SrcDests::#begin() ::#end() that) 
mut method 
Outer2::PreferentialComposition::SrcDests::#begin() ::#end() #inner() }
type method 
Outer0 #apply(Outer1::Path that) 
mut method 
Outer1::Path #that() 
read method 
Outer1::Path that() 
method 
Library #leftleft(Library that) exception Outer1::MetaGuard::ClassClash, Outer1::MetaGuard::MethodClash (
  Void unused=(
    Outer1::Introspection::#apply(lib path ) ip=Outer1::Introspection.#apply(lib:that, path:this.that())
    Outer1::Introspection::#apply(lib path ) ::transitivelyNestedClasses() itr=ip.transitivelyNestedClasses()
    Outer0::renameMap__59_0(that prefix intros ) rens=Outer0.renameMap__59_0(that:that, prefix:Outer1::S.#from(builder:Outer1::S.#builder().#hash().#1()), intros:itr)
    Outer1::PreferentialComposition::SrcDests::#begin() ::#end() map=Outer1::PreferentialComposition::SrcDests.#begin().#end()
    Library acc=that
    mut Outer0::Varmap0__149_0 varmap=Outer0::Varmap0__149_0.#apply(inner:map)
    mut Outer0::Varacc2__148_0 varacc=Outer0::Varacc2__148_0.#apply(inner:acc)
    Void unused0=(
      Outer0::renameMap__59_0(that prefix intros ) ::vals() ren=rens.vals()
      (
        Void unused4=(
          Void unused5=(
            Void unused6=loop (
              Void unused7=ren.#next()
              
              catch exception Void catched0 (
                Void unused8=(
                  Void unused9=ren.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Void unused10=varmap.inner(that:varmap.#inner().#add(that:ren.#inner()))
                Void unused11=varacc.inner(that:Outer1::Refactor::MoveImplementationSelector.#apply(that:ren.#inner().src(), of:ren.#inner().path(), to:ren.#inner().dest()).#leftleft(that:varacc.#inner()))
                
                catch exception Outer1::MetaGuard err error Outer1::Assert::ObservedBug.#from(builder:Outer1::Assert::ObservedBug.#builder().#P().#a().#t().#h().#dot().#hash().#l().#e().#s().#s().#l().#e().#s().#s().#oRound().#t().#h().#a().#t().#cRound()).#apply(that:err)
                void
                )
              )
            
            catch exception Void catched4 void
            void
            )
          
          catch exception Any propagated (
            Void unused12=ren.#close()
            exception propagated
            )
          void
          )
        
        catch return Library propagated0 (
          Void unused13=ren.#close()
          return propagated0
          )
        ren.#close()
        )
      )
    Void unused1=varacc.inner(that:Outer1::Refactor::RenamePath.#apply(that:this.that(), to:Outer1::Path.#from(builder:Outer1::Path.#builder().#O().#u().#t().#e().#r().#0())).#leftleft(that:varacc.#inner()))
    Void unused2=(
      Outer0::Varmap0__149_0::#inner() ::vals() mapi=varmap.#inner().vals()
      (
        Void unused14=(
          Void unused15=(
            Void unused16=loop (
              Void unused17=mapi.#next()
              
              catch exception Void catched10 (
                Void unused18=(
                  Void unused19=mapi.#checkEnd()
                  
                  catch exception Void catched11 void
                  void
                  )
                exception void
                )
              varacc.inner(that:Outer1::Refactor::MakePrivateSelector.#apply(that:mapi.#inner().dest(), of:mapi.#inner().path()).#leftleft(that:varacc.#inner()))
              )
            
            catch exception Void catched13 void
            void
            )
          
          catch exception Any propagated1 (
            Void unused20=mapi.#close()
            exception propagated1
            )
          void
          )
        
        catch return Library propagated2 (
          Void unused21=mapi.#close()
          return propagated2
          )
        mapi.#close()
        )
      )
    Void unused3=return varacc.#inner()
    
    catch exception Outer1::MetaGuard::MemberUnavailable err error Outer1::Assert::CodeNotReachable.#from(builder:Outer1::Assert::CodeNotReachable.#builder().#P().#a().#t().#h().#2()).#apply(that:err)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method '@private
Outer1::PreferentialComposition::SrcDests renameMap__59_0(Library that, Outer1::S prefix, Outer1::Introspection::NestedClasses intros) (
  Void unused=(
    Outer1::PreferentialComposition::SrcDests::#begin() ::#end() acc=Outer1::PreferentialComposition::SrcDests.#begin().#end()
    mut Outer0::Varacc3__150_0 varacc=Outer0::Varacc3__150_0.#apply(inner:acc)
    Void unused0=(
      Outer1::Introspection::NestedClasses::vals() intro=intros.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=intro.#next()
              
              catch exception Void catched0 (
                Void unused6=(
                  Void unused7=intro.#checkEnd()
                  
                  catch exception Void catched1 void
                  void
                  )
                exception void
                )
              (
                Outer1::Introspection::NestedClasses::vals() ::#inner() ::pathFromRoot() ::names() ns=intro.#inner().pathFromRoot().names()
                Void unused8=Outer1::Assert::$.#begin().#add(that:ns.isEmpty().#bang()).#end()
                varacc.inner(that:varacc.#inner().#plusplus(that:Outer1::PreferentialComposition.renameMap(that:that, prefix:prefix, path:Outer1::Path.from(names:ns.pop()), ms:intro.#inner().methods())))
                )
              )
            
            catch exception Void catched4 void
            void
            )
          
          catch exception Any propagated (
            Void unused9=intro.#close()
            exception propagated
            )
          void
          )
        
        catch return Outer1::PreferentialComposition::SrcDests propagated0 (
          Void unused10=intro.#close()
          return propagated0
          )
        intro.#close()
        )
      )
    Void unused1=return varacc.#inner()
    void
    )
  
  catch return Outer1::PreferentialComposition::SrcDests result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Default:{
DecorationUnfeasable:{<:Outer2::MetaGuard, Outer2::Message
Varres_$%36_0__151_0:'@private
{
type method 
mut Outer0 #apply(Outer1::kind() inner) 
mut method 
Void inner(Outer1::kind() that) 
mut method 
Outer1::kind() #inner() }
type method 
Outer0 #apply(Outer2::S _text, Outer2::Message::Opt cause) 
mut method 
Outer2::S #_text() 
read method 
Outer2::S _text() 
mut method 
Outer2::Message::Opt #cause() 
read method 
Outer2::Message::Opt cause() 
method myName() Outer2::GetMyName.#apply(that:Outer0)
method kind() this.myName()
method text() this._text()
method responseOf() this.cause()
method equals(that ) (
  Void unused=(
    Void unused0=(
      Outer0 that0=(
        Void unused2=return that
        
        catch return Outer0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return Outer2::Bool.false()
    void
    )
  
  catch return Outer0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(text:Outer2::S.#stringParser(that:that))
method 
Outer0 #apply(Outer2::Message that) Outer0.#apply(text:this.text(), cause:that)
method toS() (
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::cause() ::isPresent() ::#bang() cond=this.cause().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched0 void
        return Outer0.kind().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote())))
        )
      )
    Outer0::kind() res=Outer0.kind()
    mut Outer0::Varres_$%36_0__151_0 varres=Outer0::Varres_$%36_0__151_0.#apply(inner:res)
    Void unused1=(
      Outer0::toS() ::this::text() ::#bangequal(that ) cond0=this.text().#bangequal(that:Outer2::S.#from(builder:Outer2::S.#builder()))
      (
        Void unused4=cond0.#checkTrue()
        
        catch exception Void catched2 varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare())))
        varres.inner(that:varres.#inner().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#oSquare().#t().#e().#x().#t().#colon())).#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:this.text().#plusplus(that:Outer2::S.doubleQuote().#plusplus(that:Outer2::S.#from(builder:Outer2::S.#builder().#comma().#space().#c().#a().#u().#s().#e().#colon()))))))
        )
      )
    Void unused2=return (
      Outer0::Varres_$%36_0__151_0::#inner() ::#begin() ::#add(that ) ::#end() listKind=varres.#inner().#begin().#add(that:this.cause().#tilde()).#end()
      listKind.#from(builder:listKind.#builder().#cSquare())
      )
    void
    )
  
  catch return Outer0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) Outer2::Message::EqualMessages.#apply(that:this, other:that)
method classAny() Outer0
method clazz() Outer0
type method 
Outer0 #apply(Outer2::S text) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply())
type method 
Outer0 #apply(Outer2::S text, Outer2::Message cause) Outer0.#apply(_text:text, cause:Outer2::Message::Opt.#apply(that:cause))
type method 
Outer2::S::SBuilder #builder() Outer2::S::SBuilder.empty()
type method 
Outer0 #from(Outer2::S::SBuilder builder) Outer0.#apply(text:Outer2::S.#from(builder:builder))
method 
Outer0::SConcat #begin() Outer0::SConcat.#apply(old:this, accumulator:Outer2::S.#from(builder:Outer2::S.#builder()))
SConcat:{
VarnewAcc0_$%37_0__152_0:'@private
{
type method 
mut Outer0 #apply(Outer4::Concept::ToS::toS() inner) 
mut method 
Void inner(Outer4::Concept::ToS::toS() that) 
mut method 
Outer4::Concept::ToS::toS() #inner() }
type method 
Outer0 #apply(Outer3::Concept::ToS old, Outer3::S accumulator) 
mut method 
Outer3::Concept::ToS #old() 
read method 
Outer3::Concept::ToS old() 
mut method 
Outer3::S #accumulator() 
read method 
Outer3::S accumulator() 
method 
Outer0 #add(Outer3::Concept::ToS that) Outer0.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
Outer0 #add(Outer3::Concept::ToS that, Outer3::Concept::ToS separedBy) (
  Outer3::Concept::ToS::toS() newAcc=that.toS()
  mut Outer0::VarnewAcc0_$%37_0__152_0 varnewAcc=Outer0::VarnewAcc0_$%37_0__152_0.#apply(inner:newAcc)
  Void unused=(
    Outer0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:Outer3::S.#from(builder:Outer3::S.#builder()))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched0 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  Outer0.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
Outer0 #end() this
method 
Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
method 
Outer1 #from(Outer3::S::SBuilder builder) Outer1.#apply(text:this.old().toS().#plusplus(that:this.accumulator().#plusplus(that:Outer3::S.#from(builder:builder))))}}
Parsable:{
type method 
Library #leftleft(Library that) exception Outer1::DecorationUnfeasable (
  Void unused=(
    Void unused0=return Outer2::Extends.#begin().#add(that:{'ParseFailure:Message:S[]<<{<:Guard} no need, related to invariant?
    
    type method ' if you do not implement it, it is a constructor?
    Outer0 fromS(read Outer3::Concept::ToS that) 
    type method 
    Outer0 #from(Outer3::S::SBuilder builder) Outer0.#stringParser(that:builder.binaryRepr())
    type method 
    Outer3::S::SBuilder #builder() Outer3::S::SBuilder.empty()
    type method 
    Outer0 #stringParser(Library that) Outer0.fromS(that:Outer3::S.#stringParser(that:that))}).#end().#leftleft(that:that)
    
    catch exception Outer2::MetaGuard catched exception Outer1::DecorationUnfeasable.#from(builder:Outer1::DecorationUnfeasable.#builder().#P().#a().#r().#s().#a().#b().#l().#e()).#apply(that:catched)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
SealState:{' how to specify which factory to keep out? what getters

type method 
Library #leftleft(Library that) (
  Void unused=(
    Outer2::Introspection::#apply(lib ) i=Outer2::Introspection.#apply(lib:that)
    Void unused0=return that
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
DataFromToS:{' in the future we can add also hashCode and > =>

type method 
Library #leftleft(Library that) exception Outer1::DecorationUnfeasable (
  Void unused=(
    Void unused0=return Outer2::Extends.#begin().#add(that:{<:Outer3::Concept::ToS
    method 
    Outer3::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
    read method 
    Outer3::Bool #equalequal(read Outer0 that) this.toS().#equalequal(that:that.toS())}).#end().#leftleft(that:Outer1::Equals.#leftleft(that:that))
    
    catch exception Outer1::DecorationUnfeasable mg exception mg
    catch exception Outer2::MetaGuard catched exception Outer1::DecorationUnfeasable.#from(builder:Outer1::DecorationUnfeasable.#builder()).#apply(that:catched)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Equals:{
type method 
Library #leftleft(Library that) exception Outer1::DecorationUnfeasable (
  Void unused=(
    Void unused0=return Outer2::Extends.#begin().#add(that:{<:Outer3::Concept::Equals
    method equals(that ) (
      Void unused=(
        Void unused0=(
          Outer0 that0=(
            Void unused2=return that
            
            catch return Outer0 casted casted
            catch return Any casted exception void
            error {'@stringU
            'CastT-Should be unreachable code
            }
            )
          
          catch exception Void catched0 void
          (
            Void unused3=return this.#equalequal(that:that0)
            void
            )
          )
        Void unused1=return Outer3::Bool.false()
        void
        )
      
      catch return Outer0::equals(that )  result result
      error {'@stringU
      'CurlyBlock-Should be unreachable code
      }
      )
    read method 
    Outer3::Bool #equalequal(read Outer0 that) }).#end().#leftleft(that:that)
    
    catch exception Outer2::MetaGuard catched exception Outer1::DecorationUnfeasable.#from(builder:Outer1::DecorationUnfeasable.#builder().#E().#q().#u().#a().#l().#s()).#apply(that:catched)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Named:{
type method 
Library #leftleft(Library that) exception Outer1::DecorationUnfeasable (
  Void unused=(
    Void unused0=return Outer2::Extends.#begin().#add(that:{<:Outer3::Concept::Named
    method myName() Outer3::Introspection.#apply(clazz:Outer0).externalTypeToS()}).#end().#leftleft(that:that)
    
    catch exception Outer2::MetaGuard catched exception Outer1::DecorationUnfeasable.#from(builder:Outer1::DecorationUnfeasable.#builder().#N().#a().#m().#e().#d()).#apply(that:catched)
    void
    )
  
  catch return Library result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}}
Url:{'ParseFailure:Message:S[]<<{<:Guard} no need, related to invariant?
<:Outer1::Concept::ToS
type method ' if you do not implement it, it is a constructor?
Outer0 fromS(read Outer1::Concept::ToS that) Outer0.#apply(inner:that.toS())
type method 
Outer0 #from(Outer1::S::SBuilder builder) Outer0.#stringParser(that:builder.binaryRepr())
type method 
Outer1::S::SBuilder #builder() Outer1::S::SBuilder.empty()
type method 
Outer0 #stringParser(Library that) Outer0.fromS(that:Outer1::S.#stringParser(that:that))
type method 
Outer0 #apply(Outer1::S inner) 
mut method 
Outer1::S #inner() 
read method 
Outer1::S inner() 
method toS() this.inner()
method 
Library binaryRepr() this.inner().binaryRepr()}
DeployTowel:{
type method '(Any fileName)
Outer0 #apply(Outer1::Url fileName) 
mut method '(Any fileName)
Outer1::Url #fileName() 
read method '(Any fileName)
Outer1::Url fileName() 
type method 
Library binaryReprFrom(Library lib) (
  Library norm=use Outer0::SafeOperatorsAccess__153_0 check privateNormalize(that:lib) error {
  type method 
  Outer0 privateNormalize() }
  Library record=use Outer0::SafeOperatorsAccess__153_0 check introspectLibraryReport(that:norm, path:{'@stringU
  'Outer0
  }) error {
  type method 
  Outer0 introspectLibraryReport() }
  use Outer0::SafeOperatorsAccess__153_0 check introspectLibraryDocAsString(that:record, path:{'@stringU
  'AllAsString
  }, annotationN:{'@int32
  '0
  }) error {
  type method 
  Outer0 introspectLibraryDocAsString() }
  )
method 
Library #leftleft(Library that) (
  Void unused=use Outer1::Alu check fileDebug(fileName:this.fileName().binaryRepr(), content:Outer0.binaryReprFrom(lib:that)) error {
  type method 
  Outer0 fileDebug() }
  Outer1::ExitCode.normal()
  )
SafeOperatorsAccess__153_0:'@private
{'@plugin
'L42.is/connected/withSafeOperators
}}}