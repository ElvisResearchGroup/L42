{'--layer-- Bool N S -     and first layer of unsafe operators

Alu:{'@plugin
'L42.is/connected/withAlu
}
ExitCode:{
class method 
Library normal() {'@exitStatus
'0
}
class method 
Library failure() {'@exitStatus
'42000
}}
Bool:{<:This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named
class method '@private
mut This0 #mutK__1_0(Library binaryRepr__1_0) 
class method '@private
This0 #apply__2_0(Library binaryRepr) This0.#mutK__1_0(binaryRepr__1_0:binaryRepr)
mut method '@private
Library #binaryRepr__1_0() 
read method '@private
Library binaryRepr__1_0() 
method myName() This1.GetMyName.#apply(that:This0)
method 
Void #checkTrue() exception Void use This1.Alu check ifInt32EqualDo(n1:this.binaryRepr__1_0(), n2:This1.N.#from(builder:(
  This1.N::#builder() b=This1.N.#builder()
  Void unused=b.#0()
  b
  )).binaryRepr()) exception void
class method 
This0 true() This0.#apply__2_0(binaryRepr:This1.N.#from(builder:(
  This1.N::#builder() b=This1.N.#builder()
  Void unused=b.#1()
  b
  )).binaryRepr())
class method 
This0 false() This0.#apply__2_0(binaryRepr:This1.N.#from(builder:(
  This1.N::#builder() b=This1.N.#builder()
  Void unused=b.#0()
  b
  )).binaryRepr())
method 
This0 #and(This0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return that
      )
    Void unused1=return this
    void
    )
  
  catch return This0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This0 #or(This0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return this
      )
    Void unused1=return that
    void
    )
  
  catch return This0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This0 #bang() (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return This0.false()
      )
    Void unused1=return This0.true()
    void
    )
  
  catch return This0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method toS() (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return This1.S.#from(builder:(
        This1.S::#builder() b=This1.S.#builder()
        Void unused3=b.#t()
        Void unused4=b.#r()
        Void unused5=b.#u()
        Void unused6=b.#e()
        b
        ))
      )
    Void unused1=return This1.S.#from(builder:(
      This1.S::#builder() b0=This1.S.#builder()
      Void unused7=b0.#f()
      Void unused8=b0.#a()
      Void unused9=b0.#l()
      Void unused10=b0.#s()
      Void unused11=b0.#e()
      b0
      ))
    void
    )
  
  catch return This0::toS()  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
class method 
This0 fromS(read This1.Concept.ToS that) (
  Void unused=(
    Void unused0=(
      This1.Concept.ToS::toS() ::#equalequal(that ) cond=that.toS().#equalequal(that:This1.S.#from(builder:(
        This1.S::#builder() b=This1.S.#builder()
        Void unused3=b.#t()
        Void unused4=b.#r()
        Void unused5=b.#u()
        Void unused6=b.#e()
        b
        )))
      (
        Void unused7=cond.#checkTrue()
        
        catch exception Void catched1 void
        return This0.true()
        )
      )
    Void unused1=(
      This1.Concept.ToS::toS() ::#equalequal(that ) cond0=that.toS().#equalequal(that:This1.S.#from(builder:(
        This1.S::#builder() b0=This1.S.#builder()
        Void unused8=b0.#f()
        Void unused9=b0.#a()
        Void unused10=b0.#l()
        Void unused11=b0.#s()
        Void unused12=b0.#e()
        b0
        )))
      (
        Void unused13=cond0.#checkTrue()
        
        catch exception Void catched4 void
        return This0.false()
        )
      )
    Void unused2=error This0.parseError(that:that.toS())
    void
    )
  
  catch return This0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This0 #equalequal(This0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      
      catch exception Void catched void
      return that
      )
    Void unused1=return that.#bang()
    void
    )
  
  catch return This0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This0 #bangequal(This0 that) this.#equalequal(that:that).#bang()
method equals(that ) (
  Void unused=(
    Void unused0=(
      This0 that0=(
        Void unused2=return that
        
        catch return This0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
class method 
Any parseError(This1.S that) This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#B()
  Void unused0=b.#o()
  Void unused1=b.#o()
  Void unused2=b.#l()
  Void unused3=b.#dot()
  Void unused4=b.#U()
  Void unused5=b.#n()
  Void unused6=b.#s()
  Void unused7=b.#a()
  Void unused8=b.#t()
  Void unused9=b.#i()
  Void unused10=b.#s()
  Void unused11=b.#f()
  Void unused12=b.#a()
  Void unused13=b.#c()
  Void unused14=b.#t()
  Void unused15=b.#o()
  Void unused16=b.#r()
  Void unused17=b.#y()
  Void unused18=b.#E()
  Void unused19=b.#r()
  Void unused20=b.#r()
  Void unused21=b.#o()
  Void unused22=b.#r()
  Void unused23=b.#T()
  Void unused24=b.#o()
  Void unused25=b.#A()
  Void unused26=b.#v()
  Void unused27=b.#o()
  Void unused28=b.#i()
  Void unused29=b.#d()
  Void unused30=b.#C()
  Void unused31=b.#y()
  Void unused32=b.#c()
  Void unused33=b.#l()
  Void unused34=b.#e()
  Void unused35=b.#comma()
  Void unused36=b.#space()
  Void unused37=b.#r()
  Void unused38=b.#e()
  Void unused39=b.#p()
  Void unused40=b.#l()
  Void unused41=b.#a()
  Void unused42=b.#c()
  Void unused43=b.#e()
  Void unused44=b.#space()
  Void unused45=b.#i()
  Void unused46=b.#n()
  Void unused47=b.#space()
  Void unused48=b.#A()
  Void unused49=b.#d()
  Void unused50=b.#a()
  Void unused51=b.#m()
  Void unused52=b.#T()
  Void unused53=b.#2()
  b
  ))}
N:{<:This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named
class method '@private
mut This0 #mutK__3_0(Library _binaryRepr__3_0) 
class method '@private
This0 #apply__4_0(Library _binaryRepr) This0.#mutK__3_0(_binaryRepr__3_0:_binaryRepr)
mut method '@private
Library #_binaryRepr__3_0() 
read method '@private
Library _binaryRepr__3_0() 
method myName() This1.GetMyName.#apply(that:This0)
class method 
This0 fromS(This1.Concept.ToS that) (
  This1.Concept.ToS::toS() s=that.toS()
  This1.N.#apply__4_0(_binaryRepr:use This1.Alu check stringToInt32(that:s.binaryRepr()) error This0.parseError(that:s))
  )
class method 
This0 #from(Library binaryRepr) This1.N.#apply__4_0(_binaryRepr:binaryRepr)
method 
Library binaryRepr() this._binaryRepr__3_0()
class method 
mut This1.S.SBuilder #builder() This1.S.SBuilder.empty()
class method 
This1.N #from(This1.S.SBuilder builder) This1.N.#apply__4_0(_binaryRepr:use This1.Alu check stringToInt32(that:builder.binaryRepr()) error This0.parseError(that:This1.S.#from(builder:builder)))
class method 
Any parseError(This1.S that) This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#N()
  Void unused0=b.#dot()
  Void unused1=b.#U()
  Void unused2=b.#n()
  Void unused3=b.#s()
  Void unused4=b.#a()
  Void unused5=b.#t()
  Void unused6=b.#i()
  Void unused7=b.#s()
  Void unused8=b.#f()
  Void unused9=b.#a()
  Void unused10=b.#c()
  Void unused11=b.#t()
  Void unused12=b.#o()
  Void unused13=b.#r()
  Void unused14=b.#y()
  Void unused15=b.#E()
  Void unused16=b.#r()
  Void unused17=b.#r()
  Void unused18=b.#o()
  Void unused19=b.#r()
  Void unused20=b.#T()
  Void unused21=b.#o()
  Void unused22=b.#A()
  Void unused23=b.#v()
  Void unused24=b.#o()
  Void unused25=b.#i()
  Void unused26=b.#d()
  Void unused27=b.#C()
  Void unused28=b.#y()
  Void unused29=b.#c()
  Void unused30=b.#l()
  Void unused31=b.#e()
  Void unused32=b.#comma()
  Void unused33=b.#space()
  Void unused34=b.#r()
  Void unused35=b.#e()
  Void unused36=b.#p()
  Void unused37=b.#l()
  Void unused38=b.#a()
  Void unused39=b.#c()
  Void unused40=b.#e()
  Void unused41=b.#space()
  Void unused42=b.#i()
  Void unused43=b.#n()
  Void unused44=b.#space()
  Void unused45=b.#A()
  Void unused46=b.#d()
  Void unused47=b.#a()
  Void unused48=b.#m()
  Void unused49=b.#T()
  Void unused50=b.#2()
  b
  ))
method toS() This1.S.#from(binaryRepr:use This1.Alu check int32ToString(that:this.binaryRepr()) error void)
method 
This1.N #plus(This1.N that) This1.N.#apply__4_0(_binaryRepr:use This1.Alu check sumInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
This1.N #less(This1.N that) This1.N.#apply__4_0(_binaryRepr:use This1.Alu check subInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
This1.N #times(This1.N that) This1.N.#apply__4_0(_binaryRepr:use This1.Alu check mulInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
This1.N #divide(This1.N that) This1.N.#apply__4_0(_binaryRepr:use This1.Alu check divInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
This1.Bool #equalequal(This0 that) (
  Void unused=(
    Void unused0=use This1.Alu check ifInt32EqualDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return This1.Bool.true()
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This1.Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method equals(that ) (
  Void unused=(
    Void unused0=(
      This0 that0=(
        Void unused2=return that
        
        catch return This0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This1.Bool #left(This1.N that) (
  Void unused=(
    Void unused0=use This1.Alu check ifInt32GrtDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return This1.Bool.true()
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This1.Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This1.Bool #leftequal(This1.N that) (
  Void unused=(
    Void unused0=use This1.Alu check ifInt32GEqDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return This1.Bool.true()
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This1.Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This1.Bool #bangequal(This0 that) this.#equalequal(that:that).#bang()
method 
This1.Bool #right(This1.N that) this.#leftequal(that:that).#bang()
method 
This1.Bool #rightequal(This1.N that) this.#left(that:that).#bang()
method 
mut This0.Iterator vals() This0.Iterator.#apply(start:this, end:This1.N.#from(builder:(
  This1.N::#builder() b=This1.N.#builder()
  Void unused=b.#less()
  Void unused0=b.#1()
  b
  )))
method 
mut This0.Iterator vals(This1.N upTo) This0.Iterator.#apply(start:this, end:upTo)
Iterator:{
class method 
mut This0 #mutK(This1 start, This1 end) 
class method 
mut This0 #apply(This1 start, This1 end) This0.#mutK(start:start, end:end)
mut method 
Void start(This1 that) 
mut method 
This1 #start() 
read method 
This1 start() 
mut method 
This1 #end() 
read method 
This1 end() 
mut method 
Void #next() exception Void (
  This0::end() ::#left(that ) ::#or(that ) cond=this.end().#left(that:This2.N.#from(builder:(
    This2.N::#builder() b=This2.N.#builder()
    Void unused=b.#0()
    b
    ))).#or(that:this.start().#left(that:this.end()))
  (
    Void unused0=cond.#checkTrue()
    
    catch exception Void catched1 exception void
    this.start(that:this.start().#plus(that:This2.N.#from(builder:(
      This2.N::#builder() b0=This2.N.#builder()
      Void unused1=b0.#1()
      b0
      ))))
    )
  )
read method 
Void #checkEnd() void
read method 
This1 #inner() this.start().#less(that:This2.N.#from(builder:(
  This2.N::#builder() b=This2.N.#builder()
  Void unused=b.#1()
  b
  )))
read method 
Void #close() void}}
S:{<:This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Named
Varcurrent__12_0:'@private
{
class method 
mut This0 #mutK(fwd This2.N::#from(builder ) inner) 
class method 
mut This0 #apply(This2.N::#from(builder ) inner) This0.#mutK(inner:inner)
mut method 
Void inner(This2.N::#from(builder ) that) 
mut method 
This2.N::#from(builder ) #inner() }
class method '@private
mut This0 #mutK__5_0(Library _binaryRepr__5_0) 
class method '@private
This0 _private__6_0(Library _binaryRepr) This0.#mutK__5_0(_binaryRepr__5_0:_binaryRepr)
mut method '@private
Library #_binaryRepr__5_0() 
read method '@private
Library _binaryRepr__5_0() 
method myName() This1.GetMyName.#apply(that:This0)
class method 
This0 #from(Library binaryRepr) This0._private__6_0(_binaryRepr:binaryRepr)
method 
Library binaryRepr() this._binaryRepr__5_0()
method toS() this
method 
This1.S #plusplus(This1.S that) This1.S.#from(binaryRepr:use This1.Alu check stringConcat(s1:this.binaryRepr(), s2:that.toS().binaryRepr()) error void)
method 
This1.Bool #bangequal(This0 that) this.#equalequal(that:that).#bang()
method 
This1.Bool #equalequal(This0 that) (
  Void unused=(
    Void unused0=use This1.Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return This1.Bool.true()
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This1.Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method equals(that ) (
  Void unused=(
    Void unused0=(
      This0 that0=(
        Void unused2=return that
        
        catch return This0 casted casted
        catch return Any casted exception void
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      
      catch exception Void catched0 void
      (
        Void unused3=return this.#equalequal(that:that0)
        void
        )
      )
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This0::equals(that )  result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This1.S #apply(This1.N start, This1.N end) This1.S.#from(binaryRepr:use This1.Alu check stringSubstring(that:this.binaryRepr(), start:start.binaryRepr(), end:end.binaryRepr()) error void)
method 
This1.S #apply(This1.N that) this.#apply(start:that, end:that.#plus(that:This1.N.#from(builder:(
  This1.N::#builder() b=This1.N.#builder()
  Void unused=b.#1()
  b
  ))))
method 
This1.S #apply(This1.N start) this.#apply(start:start, end:this.size())
method 
This1.S #apply(This1.N end) this.#apply(start:This1.N.#from(builder:(
  This1.N::#builder() b=This1.N.#builder()
  Void unused=b.#0()
  b
  )), end:end)
method 
This1.Bool beginsWith(This1.S that) this.#apply(end:that.size()).#equalequal(that:that)
method '@private
This1.N auxFirstIndexOf__7_0(This1.S that) (
  Void unused=(
    This1.N::#from(builder ) current=This1.N.#from(builder:(
      This1.N::#builder() b=This1.N.#builder()
      Void unused3=b.#0()
      b
      ))
    mut This0.Varcurrent__12_0 varcurrent=This0.Varcurrent__12_0.#apply(inner:current)
    Void unused0=(
      Void unused4=loop (
        Void unused5=varcurrent.#inner().#left(that:this.size()).#checkTrue()
        (
          Void unused6=(
            This0::#apply(start ) ::beginsWith(that ) cond=this.#apply(start:varcurrent.#inner()).beginsWith(that:that)
            (
              Void unused7=cond.#checkTrue()
              
              catch exception Void catched2 void
              return varcurrent.#inner()
              )
            )
          varcurrent.inner(that:varcurrent.#inner().#plus(that:This1.N.#from(builder:(
            This1.N::#builder() b0=This1.N.#builder()
            Void unused8=b0.#1()
            b0
            ))))
          )
        )
      
      catch exception Void catched5 void
      void
      )
    Void unused1=return This1.N.#from(builder:(
      This1.N::#builder() b1=This1.N.#builder()
      Void unused9=b1.#0()
      b1
      )).#less(that:This1.N.#from(builder:(
      This1.N::#builder() b2=This1.N.#builder()
      Void unused10=b2.#1()
      b2
      )))
    Void unused2=error This0.subStringNotPresent(string:this, subString:that)
    void
    )
  
  catch return This1.N result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This1.N firstIndexOf(This1.S that) (
  Void unused=('TODO: discuss if should be exception or error
  
    This0::auxFirstIndexOf__7_0(that ) res=this.auxFirstIndexOf__7_0(that:that)
    Void unused0=(
      This0::auxFirstIndexOf__7_0(that ) ::#rightequal(that ) cond=res.#rightequal(that:This1.N.#from(builder:(
        This1.N::#builder() b=This1.N.#builder()
        Void unused2=b.#0()
        b
        )))
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched1 void
        return res
        )
      )
    Void unused1=error This0.subStringNotPresent(string:this, subString:that)
    void
    )
  
  catch return This1.N result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
class method 
Void subStringNotPresent(This1.S string, This1.S subString) void
method 
This1.Bool contains(This1.S that) (
  Void unused=(
    This0::auxFirstIndexOf__7_0(that ) res=this.auxFirstIndexOf__7_0(that:that)
    Void unused0=(
      This0::auxFirstIndexOf__7_0(that ) ::#rightequal(that ) cond=res.#rightequal(that:This1.N.#from(builder:(
        This1.N::#builder() b=This1.N.#builder()
        Void unused2=b.#0()
        b
        )))
      (
        Void unused3=cond.#checkTrue()
        
        catch exception Void catched1 void
        return This1.Bool.true()
        )
      )
    Void unused1=return This1.Bool.false()
    void
    )
  
  catch return This1.Bool result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
This1.Bool isASCIILowerCase(This1.N that) This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#q()
  Void unused0=b.#w()
  Void unused1=b.#e()
  Void unused2=b.#r()
  Void unused3=b.#t()
  Void unused4=b.#y()
  Void unused5=b.#u()
  Void unused6=b.#i()
  Void unused7=b.#o()
  Void unused8=b.#p()
  Void unused9=b.#a()
  Void unused10=b.#s()
  Void unused11=b.#d()
  Void unused12=b.#f()
  Void unused13=b.#g()
  Void unused14=b.#h()
  Void unused15=b.#j()
  Void unused16=b.#k()
  Void unused17=b.#l()
  Void unused18=b.#z()
  Void unused19=b.#x()
  Void unused20=b.#c()
  Void unused21=b.#v()
  Void unused22=b.#b()
  Void unused23=b.#n()
  Void unused24=b.#m()
  b
  )).contains(that:this.#apply(that:that))
method 
This1.Bool isASCIIUpperCase(This1.N that) This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#Q()
  Void unused0=b.#W()
  Void unused1=b.#E()
  Void unused2=b.#R()
  Void unused3=b.#T()
  Void unused4=b.#Y()
  Void unused5=b.#U()
  Void unused6=b.#I()
  Void unused7=b.#O()
  Void unused8=b.#P()
  Void unused9=b.#A()
  Void unused10=b.#S()
  Void unused11=b.#D()
  Void unused12=b.#F()
  Void unused13=b.#G()
  Void unused14=b.#H()
  Void unused15=b.#J()
  Void unused16=b.#K()
  Void unused17=b.#L()
  Void unused18=b.#Z()
  Void unused19=b.#X()
  Void unused20=b.#C()
  Void unused21=b.#V()
  Void unused22=b.#B()
  Void unused23=b.#N()
  Void unused24=b.#M()
  b
  )).contains(that:this.#apply(that:that))
method 
This1.N size() This1.N.#apply__4_0(_binaryRepr:use This1.Alu check stringSize(that:this.binaryRepr()) error void)
class method 
This1.S doubleQuote() This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#dQuote()
  Void unused0=b.#newline()
  b
  )).#apply(that:This1.N.#from(builder:(
  This1.N::#builder() b0=This1.N.#builder()
  Void unused1=b0.#0()
  b0
  )))
class method 
This1.S nl() This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#newline()
  b
  ))
method 
This1.S replace(This1.S that, This1.S into) This1.S.#from(binaryRepr:use This1.Alu check stringReplace(that:this.binaryRepr(), src:that.binaryRepr(), dest:into.binaryRepr()) error void)
method 
This0.SConcat #begin() This0.SConcat.#apply(old:this, accumulator:This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  b
  )))
SConcat:{
VarnewAcc__13_0:'@private
{
class method 
mut This0 #mutK(fwd This3.Concept.ToS::toS() inner) 
class method 
mut This0 #apply(This3.Concept.ToS::toS() inner) This0.#mutK(inner:inner)
mut method 
Void inner(This3.Concept.ToS::toS() that) 
mut method 
This3.Concept.ToS::toS() #inner() }
class method 
mut This0 #mutK(This2.S old, This2.S accumulator) 
class method 
This0 #apply(This2.S old, This2.S accumulator) This0.#mutK(old:old, accumulator:accumulator)
mut method 
This2.S #old() 
read method 
This2.S old() 
mut method 
This2.S #accumulator() 
read method 
This2.S accumulator() 
method 
This1.SConcat #add(This2.Concept.ToS that) This1.SConcat.#apply(old:this.old(), accumulator:this.accumulator().#plusplus(that:that.toS()))
method 
This1.SConcat #add(This2.Concept.ToS that, This2.Concept.ToS separedBy) (
  This2.Concept.ToS::toS() newAcc=that.toS()
  mut This0.VarnewAcc__13_0 varnewAcc=This0.VarnewAcc__13_0.#apply(inner:newAcc)
  Void unused=(
    This0::accumulator() ::#bangequal(that ) cond=this.accumulator().#bangequal(that:This2.S.#from(builder:(
      This2.S::#builder() b=This2.S.#builder()
      b
      )))
    (
      Void unused0=cond.#checkTrue()
      
      catch exception Void catched1 void
      varnewAcc.inner(that:this.accumulator().#plusplus(that:separedBy.toS().#plusplus(that:varnewAcc.#inner())))
      )
    )
  This1.SConcat.#apply(old:this.old(), accumulator:varnewAcc.#inner())
  )
method 
This1.SConcat #end() this
method 
mut This2.S.SBuilder #builder() This2.S.SBuilder.empty()
method 
This2.S #from(This2.S.SBuilder builder) this.old().#plusplus(that:this.accumulator().#plusplus(that:This2.S.#from(builder:builder)))}
SBuilder:{
class method '@private
mut This0 #mutK__8_0(Library _binaryRepr__8_0) 
class method '@private
mut This0 _private__9_0(Library _binaryRepr) This0.#mutK__8_0(_binaryRepr__8_0:_binaryRepr)
mut method '@private
Void _binaryRepr__8_0(Library that) 
mut method '@private
Library #_binaryRepr__8_0() 
read method '@private
Library _binaryRepr__8_0() 
read method 
Library binaryRepr() this._binaryRepr__8_0()
mut method 
Void acc(Library that) this._binaryRepr__8_0(that:use This2.Alu check stringConcat(s1:this.binaryRepr(), s2:that) error void)
class method 
mut This0 empty() This0._private__9_0(_binaryRepr:{'@stringU
'
})
mut method 
Void #0() this.acc(that:{'@stringU
'0
})
mut method 
Void #1() this.acc(that:{'@stringU
'1
})
mut method 
Void #2() this.acc(that:{'@stringU
'2
})
mut method 
Void #3() this.acc(that:{'@stringU
'3
})
mut method 
Void #4() this.acc(that:{'@stringU
'4
})
mut method 
Void #5() this.acc(that:{'@stringU
'5
})
mut method 
Void #6() this.acc(that:{'@stringU
'6
})
mut method 
Void #7() this.acc(that:{'@stringU
'7
})
mut method 
Void #8() this.acc(that:{'@stringU
'8
})
mut method 
Void #9() this.acc(that:{'@stringU
'9
})
mut method 
Void #q() this.acc(that:{'@stringU
'q
})
mut method 
Void #w() this.acc(that:{'@stringU
'w
})
mut method 
Void #e() this.acc(that:{'@stringU
'e
})
mut method 
Void #r() this.acc(that:{'@stringU
'r
})
mut method 
Void #t() this.acc(that:{'@stringU
't
})
mut method 
Void #y() this.acc(that:{'@stringU
'y
})
mut method 
Void #u() this.acc(that:{'@stringU
'u
})
mut method 
Void #i() this.acc(that:{'@stringU
'i
})
mut method 
Void #o() this.acc(that:{'@stringU
'o
})
mut method 
Void #p() this.acc(that:{'@stringU
'p
})
mut method 
Void #a() this.acc(that:{'@stringU
'a
})
mut method 
Void #s() this.acc(that:{'@stringU
's
})
mut method 
Void #d() this.acc(that:{'@stringU
'd
})
mut method 
Void #f() this.acc(that:{'@stringU
'f
})
mut method 
Void #g() this.acc(that:{'@stringU
'g
})
mut method 
Void #h() this.acc(that:{'@stringU
'h
})
mut method 
Void #j() this.acc(that:{'@stringU
'j
})
mut method 
Void #k() this.acc(that:{'@stringU
'k
})
mut method 
Void #l() this.acc(that:{'@stringU
'l
})
mut method 
Void #z() this.acc(that:{'@stringU
'z
})
mut method 
Void #x() this.acc(that:{'@stringU
'x
})
mut method 
Void #c() this.acc(that:{'@stringU
'c
})
mut method 
Void #v() this.acc(that:{'@stringU
'v
})
mut method 
Void #b() this.acc(that:{'@stringU
'b
})
mut method 
Void #n() this.acc(that:{'@stringU
'n
})
mut method 
Void #m() this.acc(that:{'@stringU
'm
})
mut method 
Void #Q() this.acc(that:{'@stringU
'Q
})
mut method 
Void #W() this.acc(that:{'@stringU
'W
})
mut method 
Void #E() this.acc(that:{'@stringU
'E
})
mut method 
Void #R() this.acc(that:{'@stringU
'R
})
mut method 
Void #T() this.acc(that:{'@stringU
'T
})
mut method 
Void #Y() this.acc(that:{'@stringU
'Y
})
mut method 
Void #U() this.acc(that:{'@stringU
'U
})
mut method 
Void #I() this.acc(that:{'@stringU
'I
})
mut method 
Void #O() this.acc(that:{'@stringU
'O
})
mut method 
Void #P() this.acc(that:{'@stringU
'P
})
mut method 
Void #A() this.acc(that:{'@stringU
'A
})
mut method 
Void #S() this.acc(that:{'@stringU
'S
})
mut method 
Void #D() this.acc(that:{'@stringU
'D
})
mut method 
Void #F() this.acc(that:{'@stringU
'F
})
mut method 
Void #G() this.acc(that:{'@stringU
'G
})
mut method 
Void #H() this.acc(that:{'@stringU
'H
})
mut method 
Void #J() this.acc(that:{'@stringU
'J
})
mut method 
Void #K() this.acc(that:{'@stringU
'K
})
mut method 
Void #L() this.acc(that:{'@stringU
'L
})
mut method 
Void #Z() this.acc(that:{'@stringU
'Z
})
mut method 
Void #X() this.acc(that:{'@stringU
'X
})
mut method 
Void #C() this.acc(that:{'@stringU
'C
})
mut method 
Void #V() this.acc(that:{'@stringU
'V
})
mut method 
Void #B() this.acc(that:{'@stringU
'B
})
mut method 
Void #N() this.acc(that:{'@stringU
'N
})
mut method 
Void #M() this.acc(that:{'@stringU
'M
})
mut method 
Void #%() this.acc(that:{'@stringU
'%
})
mut method 
Void #$() this.acc(that:{'@stringU
'$
})
mut method 
Void #left() this.acc(that:{'@stringU
'<
})
mut method 
Void #right() this.acc(that:{'@stringU
'>
})
mut method 
Void #bang() this.acc(that:{'@stringU
'!
})
mut method 
Void #tilde() this.acc(that:{'@stringU
'~
})
mut method 
Void #plus() this.acc(that:{'@stringU
'+
})
mut method 
Void #times() this.acc(that:{'@stringU
'*
})
mut method 
Void #divide() this.acc(that:{'@stringU
'/
})
mut method 
Void #less() this.acc(that:{'@stringU
'-
})
mut method 
Void #and() this.acc(that:{'@stringU
'&
})
mut method 
Void #or() this.acc(that:{'@stringU
'|
})
mut method 
Void #oRound() this.acc(that:{'@stringU
'(
})
mut method 
Void #cRound() this.acc(that:{'@stringU
')
})
mut method 
Void #oSquare() this.acc(that:{'@stringU
'[
})
mut method 
Void #cSquare() this.acc(that:{'@stringU
']
})
mut method 
Void #oCurly() this.acc(that:{'@stringU
'{
})
mut method 
Void #cCurly() this.acc(that:{'@stringU
'}
})
mut method 
Void #dQuote() this.acc(that:{'@stringU
'"
})
mut method 
Void #sQuote() this.acc(that:{'@stringU
''
})
mut method 
Void #hQuote() this.acc(that:{'@stringU
'`
})
mut method 
Void #equal() this.acc(that:{'@stringU
'=
})
mut method 
Void #qMark() this.acc(that:{'@stringU
'?
})
mut method 
Void #hat() this.acc(that:{'@stringU
'^
})
mut method 
Void #comma() this.acc(that:{'@stringU
',
})
mut method 
Void #semicolon() this.acc(that:{'@stringU
';
})
mut method 
Void #colon() this.acc(that:{'@stringU
':
})
mut method 
Void #dot() this.acc(that:{'@stringU
'.
})
mut method 
Void #underscore() this.acc(that:{'@stringU
'_
})
mut method 
Void #hash() this.acc(that:{'@stringU
'#
})
mut method 
Void #at() this.acc(that:{'@stringU
'\u0040
})
mut method 
Void #backslash() this.acc(that:{'@stringU
'\
})
mut method 
Void #space() this.acc(that:{'@stringU
' 
})
mut method 
Void #newline() this.acc(that:{'@stringU
'
'
})}
class method 
This0 #from(This1.S.SBuilder builder) This0._private__6_0(_binaryRepr:builder.binaryRepr())
class method 
mut This1.S.SBuilder #builder() This1.S.SBuilder.empty()}
Debug:{
class method 
Void #apply(This1.Concept.ToS that) use This1.Alu check stringDebug(that:that.toS().binaryRepr()) void
class method 
Void #apply(Library lib) error This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#t()
  Void unused0=b.#o()
  Void unused1=b.#space()
  Void unused2=b.#f()
  Void unused3=b.#i()
  Void unused4=b.#x()
  Void unused5=b.#space()
  Void unused6=b.#i()
  Void unused7=b.#n()
  Void unused8=b.#space()
  Void unused9=b.#A()
  Void unused10=b.#d()
  Void unused11=b.#a()
  Void unused12=b.#m()
  Void unused13=b.#T()
  Void unused14=b.#o()
  Void unused15=b.#w()
  Void unused16=b.#e()
  Void unused17=b.#l()
  Void unused18=b.#2()
  b
  ))
class method 
Void #apply(This1.Concept.ToS fileName, This1.Concept.ToS content) use This1.Alu check fileDebug(fileName:fileName.toS().binaryRepr(), content:content.toS().binaryRepr()) void}
Count:{
class method '@private
mut This0 #mutK__10_0(This1.N counter__10_0) 
class method '@private
This0 #apply__11_0(This1.N counter) This0.#mutK__10_0(counter__10_0:counter)
mut method '@private
This1.N #counter__10_0() 
read method '@private
This1.N counter__10_0() 
class method 
This0 #begin() This0.#apply__11_0(counter:This1.N.#from(builder:(
  This1.N::#builder() b=This1.N.#builder()
  Void unused=b.#0()
  b
  )))
method 
This1.N #end() this.counter__10_0()
method 
This0 #add(This1.Bool that) (
  Void unused=(
    Void unused0=(
      This1.Bool::#bang() cond=that.#bang()
      (
        Void unused2=cond.#checkTrue()
        
        catch exception Void catched0 void
        return this
        )
      )
    Void unused1=return This0.#apply__11_0(counter:this.counter__10_0().#plus(that:This1.N.#from(builder:(
      This1.N::#builder() b=This1.N.#builder()
      Void unused3=b.#1()
      b
      ))))
    void
    )
  
  catch return This0 result result
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
SafeOperatorsAccess:{'@plugin
'L42.is/connected/withSafeOperators

class method 
Library compose(Library left, Library right) use This0 check compose(left:left, right:right) error This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#S()
  Void unused0=b.#a()
  Void unused1=b.#f()
  Void unused2=b.#e()
  Void unused3=b.#O()
  Void unused4=b.#p()
  Void unused5=b.#e()
  Void unused6=b.#r()
  Void unused7=b.#a()
  Void unused8=b.#t()
  Void unused9=b.#o()
  Void unused10=b.#r()
  Void unused11=b.#s()
  Void unused12=b.#A()
  Void unused13=b.#c()
  Void unused14=b.#c()
  Void unused15=b.#e()
  Void unused16=b.#s()
  Void unused17=b.#s()
  Void unused18=b.#dot()
  Void unused19=b.#c()
  Void unused20=b.#o()
  Void unused21=b.#m()
  Void unused22=b.#p()
  Void unused23=b.#o()
  Void unused24=b.#s()
  Void unused25=b.#e()
  b
  ))
class method 
Library redirect(Library that, Library srcBinaryRepr, class Any dest) use This1.SafeOperatorsAccess check redirect(that:that, src:srcBinaryRepr, dest:dest) error This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#S()
  Void unused0=b.#a()
  Void unused1=b.#f()
  Void unused2=b.#e()
  Void unused3=b.#O()
  Void unused4=b.#p()
  Void unused5=b.#e()
  Void unused6=b.#r()
  Void unused7=b.#a()
  Void unused8=b.#t()
  Void unused9=b.#o()
  Void unused10=b.#r()
  Void unused11=b.#s()
  Void unused12=b.#A()
  Void unused13=b.#c()
  Void unused14=b.#c()
  Void unused15=b.#e()
  Void unused16=b.#s()
  Void unused17=b.#s()
  Void unused18=b.#dot()
  Void unused19=b.#r()
  Void unused20=b.#e()
  Void unused21=b.#d()
  Void unused22=b.#i()
  Void unused23=b.#r()
  Void unused24=b.#e()
  Void unused25=b.#c()
  Void unused26=b.#t()
  b
  ))}
Concept:{
ToS:{interface 
read method 
This2.S toS() }
Classable:{interface 
read method 
class Any classAny() }
Named:{interface 
class method 
This2.S myName() }
Wrapper:{interface 
read method 
Any inner() }
TypeWrapper:{interface 
read method 
class Any inner() }
ReadWrapper:{interface 
read method 
read Any inner() }
MutWrapper:{interface <:This1.ReadWrapper
mut method 
mut Any #inner() }
LentWrapper:{interface <:This1.ReadWrapper
mut method 
lent Any #inner() }
Equals:{interface 
read method 
This2.Bool equals(read Any that) }
Comparable:{interface 
read method 
This2.Bool greater(read Any that) }
Boollable:{interface 
read method 
Void #checkTrue() exception Void }
Decorator:{interface 'method Library>>(Library that) exception MetaGuard(specific)
'method Library decorate(Library that) exception MetaGuard I can link metaguard for circularity
}
Contains:{interface 'read method Bool >>(read Elem that)

read method 
This2.Bool contains(read Any that) }
Parsable:{interface 'class method capsule This fromS(S that) exception Guard.Parameter(specific) invalid string
'''class method capsule This #fromS(S that) exception Guard.Parameter
}
Invariant:{interface 
read method ' can throw error or return false, as more opportune
This2.Bool invariant() }
RandomAccess:{interface 'read method read Elem (N that)
'mut method mut Elem #(N that)

read method 
read Any get(This2.N that) 
mut method 
mut Any #get(This2.N that) }
Sizable:{interface 
read method 
This2.N size() 
read method 
This2.Bool isEmpty() }
Iterator:{interface 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Void #close() }}
GetMyName:{
class method 
This1.S #apply(class Any that) This1.S.#from(builder:(
  This1.S::#builder() b=This1.S.#builder()
  Void unused=b.#less()
  Void unused0=b.#less()
  Void unused1=b.#N()
  Void unused2=b.#a()
  Void unused3=b.#m()
  Void unused4=b.#e()
  Void unused5=b.#S()
  Void unused6=b.#t()
  Void unused7=b.#i()
  Void unused8=b.#l()
  Void unused9=b.#l()
  Void unused10=b.#T()
  Void unused11=b.#o()
  Void unused12=b.#F()
  Void unused13=b.#i()
  Void unused14=b.#x()
  Void unused15=b.#less()
  Void unused16=b.#less()
  b
  ))}}