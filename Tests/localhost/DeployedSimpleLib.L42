{'could be in another file

type method 
Void printHelloWorld() Outer0::Debug.#apply(that:Outer0::S.#stringParser(that:{'@stringU
'Hello World Deployed
}))
N:{<:Outer1::S::ToS
type method 
Outer0 #apply(Library _binaryRepr) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
type method 
Outer0 fromS(Outer1::S::ToS that) 
method 
Library binaryRepr() 
type method 
Outer0 #numberParser(Library that) 
method 
Outer0 #plus(Outer0 that) 
method 
Outer0 #less(Outer0 that) 
method 
Outer0 #times(Outer0 that) 
method 
Outer0 #divide(Outer0 that) 
method 
Outer1::Bool #equalequal(Outer0 that) 
method 
Outer1::Bool #left(Outer0 that) 
method 
Outer1::Bool #leftequal(Outer0 that) 
method 
Outer1::Bool #bangequal(Outer0 that) 
method 
Outer1::Bool #right(Outer0 that) 
method 
Outer1::Bool #rightequal(Outer0 that) 
method 
mut Outer0::Iterator vals() 
method 
mut Outer0::Iterator vals(Outer0 upTo) 
Iterator:{
type method 
mut Outer0 #apply(Outer1 start, Outer1 end) 
mut method 
Void start(Outer1 that) 
mut method 
Outer1 #start() 
read method 
Outer1 start() 
mut method 
Outer1 #end() 
read method 
Outer1 end() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Outer1 #inner() 
read method 
Void #close() }}
S:{<:Outer0::ToS
type method '  toPutAs private
Outer0 _private(Library _binaryRepr) 
mut method '  toPutAs private
Library #_binaryRepr() 
read method '  toPutAs private
Library _binaryRepr() 
type method 
Outer0 #stringParser(Library that) 
method 
Library binaryRepr() 
ToS:{interface 
method 
Outer1 toS() }
method 
Outer0 #plusplus(Outer0 that) 
method 
Outer1::Bool #bangequal(Outer0 that) 
method 
Outer1::Bool #equalequal(Outer0 that) 
method 
Outer0 #apply(Outer1::N start, Outer1::N end) 
method 
Outer0 #apply(Outer1::N that) 
method 
Outer0 #apply(Outer1::N start) 
method 
Outer0 #apply(Outer1::N end) 
method 
Outer1::Bool beginsWith(Outer0 that) 
method 
Outer1::N firstIndexOf(Outer0 that) 
SubstringNotPresent:{
type method 
Outer0 #apply(Outer1 string, Outer1 subString) 
mut method 
Outer1 #string() 
read method 
Outer1 string() 
mut method 
Outer1 #subString() 
read method 
Outer1 subString() }
method 
Outer1::Bool contains(Outer0 that) 
method 
Outer1::Bool isASCIILowerCase(Outer1::N that) 
method 
Outer1::Bool isASCIIUpperCase(Outer1::N that) 
method 
Outer1::N size() 
type method 
Outer0 doubleQuote() 
type method 
Outer0 nl() 
method 
Outer0 replace(Outer0 that, Outer0 into) 
method 
Outer0::SConcat #begin() 
SConcat:{
type method 
Outer0 #apply(Outer1 accumulator) 
mut method 
Outer1 #accumulator() 
read method 
Outer1 accumulator() 
method 
Outer0 #add(Outer1::ToS that) 
method 
Outer0 #end() 
method 
Outer1 #stringParser(Library that) }}
Bool:{<:Outer1::S::ToS, Outer1::PrImpl::Concept::Equals
method 
Void #checkTrue() exception Void 
type method 
Outer0 true() 
type method 
Outer0 false() 
method 
Outer0 #and(Outer0 that) 
method 
Outer0 #or(Outer0 that) 
method 
Outer0 #bang() 
type method 
Outer0 fromS(Outer1::S::ToS that) 
method 
Outer0 #equalequal(Outer0 that) 
method 
Outer0 #bangequal(Outer0 that) }
Debug:{
type method 
Void #apply(Outer1::S::ToS that) 
type method 
Void #apply(Library lib) 
type method 
Void #apply(Outer1::S::ToS fileName, Outer1::S::ToS content) 
type method 
Void #apply(type Any clazz) }
PrImpl:'@private
{
Concept:{
Equals:{interface 
read method 
Outer3::Bool equals(read Any that) }}}}