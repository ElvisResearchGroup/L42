{
Alu:{'@plugin
'L42.is/connected/withAlu
}
ExitCode:{
type method 
Library normal() {'@exitStatus
'0
}
type method 
Library failure() {'@exitStatus
'42000
}}
Bool:{<:Outer1::S::ToS
type method '@private
Outer0 #apply(Library^binaryRepr'@consistent
) 
mut method '@consistent
Library #binaryRepr() 
read method '@consistent
Library binaryRepr() 
method 
Void #checkTrue() exception Void using Outer1::Alu check ifInt32EqualDo(n1:this.binaryRepr(), n2:Outer1::N.#numberParser(that:{'@stringU
'0
}).binaryRepr()) exception void
type method 
Outer0 true() Outer0.#apply(binaryRepr:Outer1::N.#numberParser(that:{'@stringU
'1
}).binaryRepr())
type method 
Outer0 false() Outer0.#apply(binaryRepr:Outer1::N.#numberParser(that:{'@stringU
'0
}).binaryRepr())
method 
Outer0 #and(Outer0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      catch exception unused3 (
        on Void void
        )
      return that
      )
    Void unused1=return this
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #or(Outer0 that) (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      catch exception unused3 (
        on Void void
        )
      return this
      )
    Void unused1=return that
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #bang() (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      catch exception unused3 (
        on Void void
        )
      return Outer0.false()
      )
    Void unused1=return Outer0.true()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method toS() (
  Void unused=(
    Void unused0=(
      Void unused2=this.#checkTrue()
      catch exception unused3 (
        on Void void
        )
      return Outer1::S.#stringParser(that:{'@stringU
      'true
      })
      )
    Void unused1=return Outer1::S.#stringParser(that:{'@stringU
    'false
    })
    void
    )
  catch return result (
    on Outer0::toS() result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
N:{<:Outer1::S::ToS
type method 
Outer0 #apply(Library^binaryRepr'@consistent
) 
mut method '@consistent
Library #binaryRepr() 
read method '@consistent
Library binaryRepr() 
type method 
Outer0 #numberParser(Library that) Outer0.#apply(binaryRepr:using Outer1::Alu check stringToInt32(that:that) error void)
method toS() Outer1::S.#stringParser(that:using Outer1::Alu check int32ToString(that:this.binaryRepr()) error void)
method 
Outer0 #plus(Outer0 that) Outer0.#apply(binaryRepr:using Outer1::Alu check sumInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer0 #less(Outer0 that) Outer0.#apply(binaryRepr:using Outer1::Alu check subInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer0 #times(Outer0 that) Outer0.#apply(binaryRepr:using Outer1::Alu check mulInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer0 #divide(Outer0 that) Outer0.#apply(binaryRepr:using Outer1::Alu check divInt32(n1:this.binaryRepr(), n2:that.binaryRepr()) error void)
method 
Outer1::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifInt32EqualDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  catch return result (
    on Outer1::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool #left(Outer0 that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifInt32GrtDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  catch return result (
    on Outer1::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool #leftequal(Outer0 that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifInt32GEqDo(n1:this.binaryRepr(), n2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  catch return result (
    on Outer1::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #right(Outer0 that) this.#leftequal(that:that).#bang()
method 
Outer1::Bool #rightequal(Outer0 that) this.#left(that:that).#bang()}
S:{<:Outer0::ToS
type method '@private
Outer0 _private(Library^_binaryRepr'@consistent
) 
mut method '@consistent
Library #_binaryRepr() 
read method '@consistent
Library _binaryRepr() 
type method 
Outer0 #stringParser(Library that) Outer0._private(_binaryRepr:that)
method 
Library binaryRepr() this._binaryRepr()
ToS:{interface 
method 
Outer1 toS() }
method toS() this
method 
Outer0 #plusplus(Outer0::ToS that) Outer0.#stringParser(that:using Outer1::Alu check stringConcat(s1:this.binaryRepr(), s2:that.toS().binaryRepr()) error void)
method 
Outer1::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  catch return result (
    on Outer1::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #apply(Outer1::N that) Outer0.#stringParser(that:using Outer1::Alu check stringCharAt(that:this.binaryRepr(), pos:that.binaryRepr()) error void)
method 
Outer1::N size() Outer1::N.#apply(binaryRepr:using Outer1::Alu check stringSize(that:this.binaryRepr()) error void)
type method 
Outer0 doubleQuote() Outer0.#stringParser(that:{'@stringU
'"\u000a
}).#apply(that:Outer1::N.#numberParser(that:{'@stringU
'0
}))
method 
Outer0 replace(Outer0 that, Outer0 into) Outer0.#stringParser(that:using Outer1::Alu check stringReplace(that:this.binaryRepr(), src:that.binaryRepr(), dest:into.binaryRepr()) error void)}
LinkedList:{
ListCode:{
type method 
Library #apply() {' generic linked list class, elements of type Elem

Varres:{
type method 
mut Outer0 #apply(Outer1^inner'@consistent
) 
mut method '@consistent
Void inner(Outer1 that) 
mut method '@consistent
Outer1 #inner() 
read method '@consistent
Outer1 inner() }
Varres0:{
type method 
mut Outer0 #apply(Outer1::#apply() ^inner'@consistent
) 
mut method '@consistent
Void inner(Outer1::#apply() that) 
mut method '@consistent
Outer1::#apply() #inner() }
type method 
Outer0 _new(Outer0::Cell^head'@consistent
) 
mut method '@consistent
Outer0::Cell #head() 
read method '@consistent
Outer0::Cell head() 
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          catch return casted (
            on Outer0::CellEnd casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused2 (
          on Void return Outer3::Bool.false()
          )
        (
          Void unused3=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0::Elem top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    catch exception unused1 (
      on Void error Outer3::S.#stringParser(that:{'@stringU
      'PopOnEmpyList
      })
      )
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres varres=Outer0::Varres.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=e.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            catch exception unused10 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused11=e.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer0 (
            Void unused12=e.#close()
            return propagated0
            )
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer0::Elem that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres0 varres=Outer0::Varres0.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=elem.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          catch exception unused8 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused9=elem.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused10=elem.#close()
          return propagated0
          )
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Elem:{}
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer1::Elem #inner() 
method 
Void #checkEnd() }
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer4::S.#stringParser(that:{'@stringU
'InnerOnCellEnd, should not happen
})
method #checkEnd() void}
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer1::Elem^elem'@consistent
, Outer1::Cell^nextCell'@consistent
) 
mut method '@consistent
Outer1::Elem #elem() 
read method '@consistent
Outer1::Elem elem() 
mut method '@consistent
Outer1::Cell #nextCell() 
read method '@consistent
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  catch return result (
    on Outer0::vals(terminate ) result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      catch return casted (
        on Outer0 casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void void
      )
    (
      Void unused1=error Outer4::S.#stringParser(that:{'@stringU
      'IterationNotComplete,\u000a  use valsCut() to allows incomplete iterations\u000a
      })
      void
      )
    )
  )}
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell^that'@consistent
, Outer4::Bool^terminate'@consistent
) 
mut method '@consistent
Void that(Outer1::Cell that) 
mut method '@consistent
Outer1::Cell #that() 
read method '@consistent
Outer1::Cell that() 
mut method '@consistent
Outer4::Bool #terminate() 
read method '@consistent
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        catch return casted (
          on Outer1::CellEnd casted
          
          on Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void void
        )
      (
        Void unused4=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    this.that().#checkEnd()
    )
  )
read method 
Outer1::Elem #inner() this.that().#inner()
read method 
Void #close() void}}}
type method 
Library list(type Any that) using Outer0::SafeOperatorsAccess check redirect(that:Outer0::ListCode.#apply(), src:Outer1::S.#stringParser(that:{'@stringU
'Elem
}).binaryRepr(), dest:that) error Outer1::S.#stringParser(that:{'@stringU
'redirectNotResponsiveInsideLinkedList
})
SafeOperatorsAccess:'@private
{'@plugin
'L42.is/connected/withSafeOperators
}}
Debug:{
type method 
Void #apply(Outer1::S that) using Outer1::Alu check stringDebug(that:that.binaryRepr()) void
type method 
Void #apply(Outer1::S fileName, Outer1::S content) using Outer1::Alu check fileDebug(fileName:fileName.binaryRepr(), content:content.binaryRepr()) void}
Path:{<:Outer1::S::ToS
type method '@private
Outer0 _private(Library^_binaryRepr'@consistent
) 
mut method '@consistent
Library #_binaryRepr() 
read method '@consistent
Library _binaryRepr() 
type method 
Outer0 #stringParser(Library that) Outer0._private(_binaryRepr:that)
method 
Library binaryRepr() this._binaryRepr()
method toS() Outer1::S.#stringParser(that:this._binaryRepr())
method 
Outer1::Bool #bangequal(Outer1::S that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #equalequal(Outer1::S that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  catch return result (
    on Outer1::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Selector:{<:Outer1::S::ToS
type method '@private
Outer0 _private(Library^_binaryRepr'@consistent
) 
mut method '@consistent
Library #_binaryRepr() 
read method '@consistent
Library _binaryRepr() 
type method 
Outer0 #stringParser(Library that) Outer0._private(_binaryRepr:that)
method 
Library binaryRepr() this._binaryRepr()
method toS() Outer1::S.#stringParser(that:this._binaryRepr())
method 
Outer1::Bool #bangequal(Outer1::S that) this.#equalequal(that:that).#bang()
method 
Outer1::Bool #equalequal(Outer1::S that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer1::Bool.true()
    Void unused1=return Outer1::Bool.false()
    void
    )
  catch return result (
    on Outer1::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )}
Doc:{<:Outer1::S::ToS
type method '@private
Outer0 _private(Library^_binaryRepr'@consistent
) 
mut method '@consistent
Library #_binaryRepr() 
read method '@consistent
Library _binaryRepr() 
type method 
Outer0 #stringParser(Library that) Outer0._private(_binaryRepr:that)
method 
Library binaryRepr() this._binaryRepr()
method toS() Outer1::S.#stringParser(that:this._binaryRepr())}
SafeOperators:{'@plugin
'L42.is/connected/withSafeOperators

type method '@private
Outer1::S mkError(Outer1::S that) Outer1::S.#stringParser(that:{'@stringU
'Plugin SafeOperators not responsive: 
}).#plusplus(that:that)
type method 
Library compose(Library left, Library right) using Outer0 check compose(left:left, right:right) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'compose
}))
type method 
Library renameClass(Library that, Outer1::Path src, Outer1::Path dest) using Outer0 check renameClass(that:that, src:src.binaryRepr(), dest:dest.binaryRepr()) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'renameClass
}))
type method 
Library renameMethod(Library that, Outer1::Path path, Outer1::Selector src, Outer1::Selector dest) using Outer0 check renameMethod(that:that, path:path.binaryRepr(), src:src.binaryRepr(), dest:dest.binaryRepr()) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'renameMethod
}))
type method 
Library redirect(Library that, Outer1::Path src, type Any dest) using Outer0 check redirect(that:that, src:src.binaryRepr(), dest:dest) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'redirect
}))
type method 
Library removeImplementation(Library that, Outer1::Path path) using Outer0 check removeImplementation(that:that, path:path.binaryRepr()) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'removeImplementation(path)
}))
type method 
Library removeImplementation(Library that, Outer1::Path path, Outer1::Selector selector) using Outer0 check removeImplementation(that:that, path:path.binaryRepr(), selector:selector.binaryRepr()) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'removeImplementation(path,selector)
}))
type method 
Library addDocumentation(Library that, Outer1::Path path, Outer1::Doc doc) using Outer0 check addDocumentation(that:that, path:path.binaryRepr(), doc:doc.binaryRepr()) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'addDocumentation(path)
}))
type method 
Library addDocumentation(Library that, Outer1::Path path, Outer1::Selector selector, Outer1::Doc doc) using Outer0 check addDocumentation(that:that, path:path.binaryRepr(), selector:selector.binaryRepr(), doc:doc.binaryRepr()) error Outer0.mkError(that:Outer1::S.#stringParser(that:{'@stringU
'addDocumentation(path,selector)
}))}
SourceUnfit:{
type method 
Outer0 #apply(Outer1::Introspection::Mirror^mirror'@consistent
) 
mut method '@consistent
Outer1::Introspection::Mirror #mirror() 
read method '@consistent
Outer1::Introspection::Mirror mirror() }
ClassClash:{
type method 
Outer0 #apply(Outer1::Introspection::Mirror^mirror'@consistent
) 
mut method '@consistent
Outer1::Introspection::Mirror #mirror() 
read method '@consistent
Outer1::Introspection::Mirror mirror() }
MethodClash:{
type method 
Outer0 #apply(Outer1::Introspection::Mirror^mirror'@consistent
) 
mut method '@consistent
Outer1::Introspection::Mirror #mirror() 
read method '@consistent
Outer1::Introspection::Mirror mirror() }
InvalidOnTopLevel:{
type method 
Outer0 #apply(Outer1::Introspection::Mirror^mirror'@consistent
) 
mut method '@consistent
Outer1::Introspection::Mirror #mirror() 
read method '@consistent
Outer1::Introspection::Mirror mirror() }
SourceInvalid:{
type method 
Outer0 #apply(Outer1::Introspection::Mirror^mirror'@consistent
) 
mut method '@consistent
Outer1::Introspection::Mirror #mirror() 
read method '@consistent
Outer1::Introspection::Mirror mirror() }
PrivacyCoupuled:{
type method 
Outer0 #apply(Outer1::Introspection::Mirror^mirror'@consistent
) 
mut method '@consistent
Outer1::Introspection::Mirror #mirror() 
read method '@consistent
Outer1::Introspection::Mirror mirror() }
Introspection:{
type method 
Outer0 #apply(Outer0::Mirror^mirror'@consistent
) 
mut method '@consistent
Outer0::Mirror #mirror() 
read method '@consistent
Outer0::Mirror mirror() 
type method 
Outer0 #apply(Library lib) Outer0.#apply(mirror:Outer0::MirrorLibrary.#apply(lib:lib))
method 
Outer0::NodeReport query(Outer1::Path that) exception Outer1::SourceInvalid this.mirror().introspectionGiveInfo(path:that)
Mirror:{interface 
method 
Outer1::NodeReport introspectionGiveInfo(Outer2::Path path) exception Outer2::SourceInvalid 
method 
Outer1::MemberReport introspectionGiveInfoMember(Outer2::Path path, Outer2::N memberN) exception Outer2::SourceInvalid, Void 
method 
Outer1::TypeReport introspectionGiveInfoType(Outer2::Path path, Outer2::N memberN, Outer2::N typeN) exception Outer2::SourceInvalid, Void 
method 
Outer2::S introspectionDocAsString(Outer2::Path path) exception Outer2::SourceInvalid 
method 
Outer2::S introspectionDocAsString(Outer2::Path path, Outer2::N annotationN) exception Outer2::SourceInvalid, Void 
method 
type Any introspectionDocPath(Outer2::Path path, Outer2::N annotationN) exception Outer2::SourceInvalid, Void }
MirrorLibrary:{<:Outer1::Mirror
type method 
Outer0 #apply(Library^lib'@consistent
) 
mut method '@consistent
Library #lib() 
read method '@consistent
Library lib() 
method introspectionGiveInfo(path ) Outer1::NodeReport.#apply(report:Outer0.#apply(lib:using Outer2::SafeOperators check introspectionGiveInfo(that:this.lib(), path:path.binaryRepr()) error Outer2::SafeOperators.mkError(that:Outer2::S.#stringParser(that:{'@stringU
'introspectionGiveInfo
}))))
method introspectionGiveInfoMember(path memberN ) Outer1.dispatchReport(that:using Outer2::SafeOperators check introspectionGiveInfoMember(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr()) exception void)
method introspectionGiveInfoType(path memberN typeN ) Outer1::TypeReport.#apply(report:Outer0.#apply(lib:using Outer2::SafeOperators check introspectionGiveInfoType(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr(), typeN:typeN.binaryRepr()) exception void))
method introspectionDocAsString(path annotationN ) Outer2::S.#stringParser(that:using Outer2::SafeOperators check introspectionDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:Outer2::N.#numberParser(that:{'@stringU
'1
}).#plus(that:annotationN).binaryRepr()) exception void)
method introspectionDocAsString(path ) Outer2::S.#stringParser(that:using Outer2::SafeOperators check introspectionDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:Outer2::N.#numberParser(that:{'@stringU
'0
}).binaryRepr()) error Outer2::SafeOperators.mkError(that:Outer2::S.#stringParser(that:{'@stringU
'introspectionDocAsString
})))
method introspectionDocPath(path annotationN ) using Outer2::SafeOperators check introspectionDocPath(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) error Outer2::SafeOperators.mkError(that:Outer2::S.#stringParser(that:{'@stringU
'introspectionDocPath
}))}
NodeReport:{
type method 
Outer0 #apply(Outer1::Mirror^report'@consistent
) 
mut method '@consistent
Outer1::Mirror #report() 
read method '@consistent
Outer1::Mirror report() 
method 
Outer2::S classKind() Outer1.#apply(that:this.report(), p:Outer2::Path.#stringParser(that:{'@stringU
'ClassKind
}))}
TypeReport:{
type method 
Outer0 #apply(Outer1::Mirror^report'@consistent
) 
mut method '@consistent
Outer1::Mirror #report() 
read method '@consistent
Outer1::Mirror report() }
MemberReport:{interface }
MethodReport:{<:Outer1::MemberReport
type method 
Outer0 #apply(Outer1::Mirror^report'@consistent
) 
mut method '@consistent
Outer1::Mirror #report() 
read method '@consistent
Outer1::Mirror report() }
NestedClassReport:{<:Outer1::MemberReport
type method 
Outer0 #apply(Outer1::Mirror^report'@consistent
) 
mut method '@consistent
Outer1::Mirror #report() 
read method '@consistent
Outer1::Mirror report() }
type method 
Outer0::MemberReport dispatchReport(Library that) Outer0::MethodReport.#apply(report:Outer0::MirrorLibrary.#apply(lib:that))
type method 
Outer1::S #apply(Outer0::Mirror that, Outer1::Path p) (
  Outer0::Mirror::introspectionDocAsString(path ) result=that.introspectionDocAsString(path:p)
  catch exception x (
    on Outer1::SourceInvalid error x
    )
  result
  )}}