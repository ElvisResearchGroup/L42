{reuse L42.is/nanoBase2

Name:{
'(Bool isExternal, Library adapter)
'external is "pointing out"
'internal is " A.B.C"
'not external and not internal is a method name

  new(Bool externalPath, Bool internalPath,S repr, Library adapter)'@private
  method Bool isExternalPathName() this.externalPath()
  method Bool isInternalPathName() this.internalPath()
  method Bool isMethodName() !this.externalPath()  & !this.internalPath()
  
  type method
  Name #stringParser(Library that) {
    Library adapter=using IntrospectionPlugin 
      check nameToAdapter(that)
      error {nameToAdapter()}
    return Name.new(
      externalPath: Bool.false()
      internalPath: Outer0.computeIsInternalPath(adapter:adapter)
      repr:S.#stringParser(that)
      adapter: adapter
      )
    }
  type method
  Name (type Any that) {
    Library adapter=using IntrospectionPlugin 
      check typeNameToAdapter(that)
      error {typeNameToAdapter()}
    return Name.new(
      externalPath:Bool.true()
      internalPath:Bool.false()
      repr:S"ExternalPathName about "++Introspection(adapter).get()
      adapter:adapter
      )
    }
  type method Outer0 (Library adapter){
    internalName=Outer0.getInternalAdapterStringOrEmpty(adapter:adapter)
      isExternal=internalName.size()==0N
      S repr={
          if isExternal (return S"ExternalPathName about "++Introspection(adapter).get())
          return internalName
          }
      return Outer0.new(
        externalPath:isExternal
        internalPath:!isExternal 'can not be a methodName
        repr:repr 'try to put repr definition here
        adapter:adapter
        )}
  type method '@private
    S getInternalAdapterStringOrEmpty(Library adapter){
      Library result= using IntrospectionPlugin 
        check getInternalAdapterPathOrElse(adapter)
        return S""
      return S.#stringParser(result)
      }
    
  type method '@private
  Bool computeIsInternalPath(Library adapter) {
    ms=Introspection(adapter,node:S"%o_0%").methods()
    return ms.isEmpty()
    }
    
  method
  Bool ==(Any that){
    with that (on Outer0 return this.innerEquals(that))
    return Bool.false()
    }
    
  method
  Bool innerEquals(Outer0 that)
    Introspection(this.adapter()).get()==Introspection(that.adapter()).get()
  }
  
Introspection:{
  (Library that, S node)
  
  type method
  Outer0(Library that) Outer0(that,node:S"Outer0")
  
  method
  S get() 
    S.#stringParser(
      using IntrospectionPlugin
        check get(this.that(),node:this.node().binaryRepr())
        error {getThatNode()}
      )
      
  method
  Library getIfExists(N interfaceNum)exception Void 
    using IntrospectionPlugin
      check getOrElse(
        this.that(),
        interfaceNum:interfaceNum.binaryRepr(),
        node:this.node().binaryRepr()
        )
      exception void
      
  method
  Method get(N methodNum)exception Void {
    Library name= using IntrospectionPlugin 
      check getNameOrElse(
        this.that(),
        methodNum:methodNum.binaryRepr(),
        node:this.node().binaryRepr())
      exception void
    return Method(myClass:this,num:methodNum,name:S.#stringParser(name))
    }
  method
  Name get(N nestedClassNum)exception Void {
    Library name= using IntrospectionPlugin 
      check getNameOrElse(
        this.that(),
        nestedClassNum:nestedClassNum.binaryRepr(),
        node:this.node().binaryRepr())
      exception void
    return Name.#stringParser(name)
    }
  Method:{(Outer1 myClass, N num, S name)
    method
    S get() 
      S.#stringParser( using IntrospectionPlugin 
        check getOrElse(
          this.myClass().that(),
          methodNum:this.num().binaryRepr(),
          node:this.myClass().node().binaryRepr())
        error {invalidMethodNumber()}
      )
      
    method S getMdf() 
      S.#stringParser( using IntrospectionPlugin 
        check getMdfOrElse(
          this.myClass().that(),
          methodNum:this.num().binaryRepr(),
          node:this.myClass().node().binaryRepr())
        error {invalidMethodNumber()}
      )
    method
    Name returnClass() {
      Library adapter= using IntrospectionPlugin 
        check  getTypePathOrElse(
          this.myClass().that(),
          methodNum:this.num().binaryRepr(),
          node:this.myClass().node().binaryRepr())
        error {invalidMethodNumber()}
      return Name(adapter:adapter)
      }   
    method
    Name getName()
      Name.#stringParser('get name? unuseful! -- why unuseful?
        using IntrospectionPlugin 
          check getNameOrElse(
            this.myClass().that(),
            methodNum:this.num().binaryRepr(),
            node:this.myClass().node().binaryRepr())
          error {invalidMethodNumber()}
        )
        
    method
    Bool isAbstract() {
      using IntrospectionPlugin 
        check ifIsAbstractDo(
          this.myClass().that(),
          methodNum:this.num().binaryRepr(),
          node:this.myClass().node().binaryRepr())
        return Bool.true()
      return Bool.false()
      }
      
    method
    Parameter get(N parameterNum)exception Void {
      Library name= using IntrospectionPlugin 
        check getNameOrElse(
          this.myClass().that(),
          methodNum:this.num().binaryRepr(),
          parameterNum:parameterNum.binaryRepr()
          node:this.myClass().node().binaryRepr())
        exception void
      return Parameter(myMethod:this,num:parameterNum,name:S.#stringParser(name))
      }
      
    method
    Parameters parameters(){
      var ps=Parameters[]
      var pNum=0N
      while Bool.true() (
        ps:=ps.#add(this.get(parameterNum:pNum))
        pNum+=1N
        )
      return ps
      }
    }
    
  Parameter:{(Method myMethod, N num, S name)
    method
    Name class() {
      Library adapter= using IntrospectionPlugin 
        check  getTypePathOrElse(
          this.myMethod().myClass().that(),
          methodNum:this.myMethod().num().binaryRepr(),
          parameterNum:this.num().binaryRepr()
          node:this.myMethod().myClass().node().binaryRepr())
        error {invalidMethodNumber()}
      return Name(adapter:adapter)
      }
    }
    
  Parameters:Collections.list(Parameter)
  
  Methods:Collections.list(Method)
  Names:Collections.list(Name)
  
  method
  Names nestedClasses(){
    var Names ns=Names[]
    var N nNum=0N
    while Bool.true() (
      ns:=ns.#add(this.get(nestedClassNum:nNum))
      nNum+=1N
      )
    return ns
    }
  method
  Methods methods(){
    var Methods ms=Methods[]
    var N mNum=0N
    while Bool.true() (
      ms:=ms.#add(this.get(methodNum:mNum))
      mNum+=1N
      )
    return ms
    }
    
  method
  Parameters fields(){
    ms=this.methods()
    Method ctor= {
      with m in ms.vals() (
        case m.isAbstract() & (m.getMdf()==S"Type") return m 'still problems with precedence?
        )
      error S"Not an instantiable class"
      }
    return ctor.parameters()
    }
  }
}