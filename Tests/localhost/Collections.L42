{
type method 
Library generateVector(type Any that, Library lib) (
  Void unused=(
    Library res=lib
    mut Outer0::Varres1__39_1 varres=Outer0::Varres1__39_1.#apply(inner:res)
    Void unused0=varres.inner(that:Outer0::PrImpl::Refactor::RenamePath.#begin().#add(that:Outer0::PrImpl::Path.#stringParser(that:{'@stringU
    'VectorStruct
    }), to:Outer0::PrImpl::Path.#stringParser(that:{'@stringU
    'Outer0
    })).#end().#leftleft(that:varres.#inner()))
    Void unused1=varres.inner(that:Outer0::PrImpl::Refactor::Redirect.#begin().#add(that:Outer0::PrImpl::Path.#stringParser(that:{'@stringU
    'Elem
    }), to:that).#end().#leftleft(that:varres.#inner()))
    Void unused2=return varres.#inner()
    catch exception err (
      on Outer0::PrImpl::Report error err
      )
    void
    )
  catch return result (
    on Library result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Library vector(type Any that) Outer0.generateVector(that:that, lib:{
Elem:{}
Kind:' put it as private
{
type method 'read/lent/mut/type/capsule/
Outer1::Elem elem() error Outer2::PrImpl::Report::UnsupportedOperation.#stringParser(that:{'@stringU
'make it an interface?
})
type method 'read/lent/mut/type/capsule/
Outer1::Elem elemRead() error Outer2::PrImpl::Report::UnsupportedOperation.#stringParser(that:{'@stringU
'make it an interface?
})}
VectorStruct:{
type method ' size should be computed?
mut Outer0 #apply(mut Outer0::Cell^head, Outer2::N^size) 
mut method ' size should be computed?
Void head(mut Outer0::Cell that) 
mut method ' size should be computed?
mut Outer0::Cell #head() 
read method ' size should be computed?
read Outer0::Cell head() 
mut method ' size should be computed?
Void size(Outer2::N that) 
mut method ' size should be computed?
Outer2::N #size() 
read method ' size should be computed?
Outer2::N size() 
Cell:{interface }
CellNext:{<:Outer1::Cell
type method 
mut Outer0 #apply(Outer2::Kind::elem() ^val, mut Outer1::Cell^next) 
mut method 
Outer2::Kind::elem() #val() 
mut method 
mut Outer1::Cell #next() 
read method 
read Outer1::Cell next() 
read method 
Outer2::Kind::elemRead() val() }
CellEnd:{<:Outer1::Cell
type method 
mut Outer0 #apply() }
read method 
Void reportError(Outer2::N that) error Outer2::S.#stringParser(that:{'@stringU
'IndexOutOfBound: max is 
}).#begin().#add(that:this.size()).#end().#stringParser(that:{'@stringU
' proposed is 
}).#begin().#add(that:that).#end().#stringParser(that:{'@stringU
'
})
read method 
Void reportUnexpected(Outer2::N that) error Outer2::S.#stringParser(that:{'@stringU
'Unexpected failure like IndexOutOfBound: max is 
}).#begin().#add(that:this.size()).#end().#stringParser(that:{'@stringU
' proposed is 
}).#begin().#add(that:that).#end().#stringParser(that:{'@stringU
'
})
read method 
Outer1::Kind::elemRead() #apply(Outer2::N that) (
  Void unused=(
    Outer2::N::#rightequal(that ) cond=that.#rightequal(that:this.size())
    (
      Void unused0=cond.#checkTrue()
      catch exception unused1 (
        on Void void
        )
      this.reportError(that:that)
      )
    )
  Outer0.auxGet(that:that, cell:this.head())
  )
type method 
Outer1::Kind::elemRead() auxGet(Outer2::N that, read Outer0::Cell cell) (
  Void unused=(
    Void unused0=(
      Void unused2=(
        read Outer0::CellNext cell2=(
          Void unused3=return cell
          catch return casted1 (
            on read Outer0::CellNext casted1
            
            on read Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused4 (
          on Void void
          )
        (
          Void unused5=(
            Outer2::N::#equalequal(that ) cond=that.#equalequal(that:Outer2::N.#numberParser(that:{'@stringU
            '0
            }))
            (
              Void unused6=cond.#checkTrue()
              catch exception unused7 (
                on Void exception void
                )
              void
              )
            )
          void
          )
        )
      read Outer0::CellNext cell1=(
        Void unused8=return cell
        catch return casted0 (
          on read Outer0::CellNext casted0
          
          on read Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused9 (
        on Void (
          read Outer0::CellNext cell0=(
            Void unused10=return cell
            catch return casted (
              on read Outer0::CellNext casted
              
              on read Any exception void
              )
            error {'@stringU
            'CastT-Should be unreachable code
            }
            )
          catch exception unused11 (
            on Void void
            )
          (
            Void unused12=return Outer0.auxGet(that:that.#less(that:Outer2::N.#numberParser(that:{'@stringU
            '1
            })), cell:cell0.next())
            void
            )
          )
        )
      (
        Void unused13=return cell1.val()
        void
        )
      )
    Void unused1=error Outer2::S.#stringParser(that:{'@stringU
    'Unreachable
    })
    void
    )
  catch return result (
    on Outer1::Kind::elemRead() result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
mut method 
Void #apply(Outer2::N that, Outer1::Kind::elem() val) (
  Void unused=(
    Outer2::N::#rightequal(that ) cond=that.#rightequal(that:this.size())
    (
      Void unused0=cond.#checkTrue()
      catch exception unused1 (
        on Void void
        )
      this.reportError(that:that)
      )
    )
  this.head(that:Outer0.auxSet(that:that, val:val, cell:this.#head()))
  )
type method 
mut Outer0::CellNext auxSet(Outer2::N that, Outer1::Kind::elem() val, mut Outer0::Cell cell) (
  Void unused=(
    Void unused0=(
      Void unused2=(
        mut Outer0::CellNext cell2=(
          Void unused3=return cell
          catch return casted1 (
            on mut Outer0::CellNext casted1
            
            on mut Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused4 (
          on Void void
          )
        (
          Void unused5=(
            Outer2::N::#equalequal(that ) cond=that.#equalequal(that:Outer2::N.#numberParser(that:{'@stringU
            '0
            }))
            (
              Void unused6=cond.#checkTrue()
              catch exception unused7 (
                on Void exception void
                )
              void
              )
            )
          void
          )
        )
      mut Outer0::CellNext cell1=(
        Void unused8=return cell
        catch return casted0 (
          on mut Outer0::CellNext casted0
          
          on mut Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused9 (
        on Void (
          mut Outer0::CellNext cell0=(
            Void unused10=return cell
            catch return casted (
              on mut Outer0::CellNext casted
              
              on mut Any exception void
              )
            error {'@stringU
            'CastT-Should be unreachable code
            }
            )
          catch exception unused11 (
            on Void void
            )
          (
            Void unused12=return Outer0::CellNext.#apply(val:cell0.val(), next:Outer0.auxSet(that:that.#less(that:Outer2::N.#numberParser(that:{'@stringU
            '1
            })), val:val, cell:cell0.#next()))
            void
            )
          )
        )
      (
        Void unused13=return Outer0::CellNext.#apply(val:val, next:cell1.#next())
        void
        )
      )
    Void unused1=error Outer2::S.#stringParser(that:{'@stringU
    'Unreachable
    })
    void
    )
  catch return result (
    on mut Outer0::CellNext result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
mut Outer0 #apply() Outer0.#apply(head:Outer0::CellEnd.#apply(), size:Outer2::N.#numberParser(that:{'@stringU
'0
}))
mut method 
mut Outer0 add(Outer1::Kind::elem() that) (
  Void unused=this.size(that:this.size().#plus(that:Outer2::N.#numberParser(that:{'@stringU
  '1
  })))
  Void unused0=this.head(that:Outer0.auxAdd(that:that, cell:this.#head()))
  this
  )
type method 
mut Outer0::Cell auxAdd(Outer1::Kind::elem() that, mut Outer0::Cell cell) (
  Void unused=(
    Void unused0=(
      mut Outer0::CellEnd cell1=(
        Void unused2=return cell
        catch return casted0 (
          on mut Outer0::CellEnd casted0
          
          on mut Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void (
          mut Outer0::CellNext cell0=(
            Void unused4=return cell
            catch return casted (
              on mut Outer0::CellNext casted
              
              on mut Any exception void
              )
            error {'@stringU
            'CastT-Should be unreachable code
            }
            )
          catch exception unused5 (
            on Void void
            )
          (
            Void unused6=return Outer0::CellNext.#apply(val:cell0.val(), next:Outer0.auxAdd(that:that, cell:cell0.#next()))
            void
            )
          )
        )
      (
        Void unused7=return Outer0::CellNext.#apply(val:that, next:cell1)
        void
        )
      )
    Void unused1=error Outer2::S.#stringParser(that:{'@stringU
    'Unreachable
    })
    void
    )
  catch return result (
    on mut Outer0::Cell result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
mut Outer0 #begin() Outer0.#apply()
mut method 
mut Outer0 #end() this
mut method 
mut Outer0 #add(Outer1::Kind::elem() that) this.add(that:that)
OptMax:{
type method 
Outer0 #new(Outer0::TOpt^that) 
mut method 
Outer0::TOpt #that() 
read method 
Outer0::TOpt that() 
TOpt:{interface 
method 
Outer4::N get() }
TEmpty:{<:Outer1::TOpt
type method 
Outer0 #apply() 
method get() error Outer4::PrImpl::Report::UnsupportedOperation.#stringParser(that:{'@stringU
'TEmpty.get() Value not present in Optional
})}
TOf:{<:Outer1::TOpt
type method 
Outer0 #apply(Outer4::N^that) 
mut method 
Outer4::N #that() 
read method 
Outer4::N that() 
method get() this.that()}
method 
Outer3::N #tilde() this.that().get()
method 
Outer3::Bool isPresent() (
  Void unused=(
    Outer0::#tilde() aux=this.#tilde()
    Void unused0=return Outer3::Bool.true()
    catch error unused1 (
      on Any return Outer3::Bool.false()
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #apply() Outer0.#new(that:Outer0::TEmpty.#apply())
type method 
Outer0 #apply(Outer3::N that) Outer0.#new(that:Outer0::TOf.#apply(that:that))}
OptFill:{
type method 
Outer0 #new(Outer0::TOpt^that) 
mut method 
Outer0::TOpt #that() 
read method 
Outer0::TOpt that() 
TOpt:{interface 
method 
Outer3::Elem get() }
TEmpty:{<:Outer1::TOpt
type method 
Outer0 #apply() 
method get() error Outer4::PrImpl::Report::UnsupportedOperation.#stringParser(that:{'@stringU
'TEmpty.get() Value not present in Optional
})}
TOf:{<:Outer1::TOpt
type method 
Outer0 #apply(Outer3::Elem^that) 
mut method 
Outer3::Elem #that() 
read method 
Outer3::Elem that() 
method get() this.that()}
method 
Outer2::Elem #tilde() this.that().get()
method 
Outer3::Bool isPresent() (
  Void unused=(
    Outer0::#tilde() aux=this.#tilde()
    Void unused0=return Outer3::Bool.true()
    catch error unused1 (
      on Any return Outer3::Bool.false()
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #apply() Outer0.#new(that:Outer0::TEmpty.#apply())
type method 
Outer0 #apply(Outer2::Elem that) Outer0.#new(that:Outer0::TOf.#apply(that:that))}
read method 
lent Outer0::Iterator vals(Outer2::N min, Outer2::N ok, Outer2::N max, Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals(Outer2::N min, Outer2::N ok, Outer2::N max) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
read method 
lent Outer0::Iterator vals(Outer2::N min, Outer2::N ok, Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals(Outer2::N min, Outer2::N ok) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
read method 
lent Outer0::Iterator vals(Outer2::N min, Outer2::N max, Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals(Outer2::N min, Outer2::N max) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
read method 
lent Outer0::Iterator vals(Outer2::N min, Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals(Outer2::N min) Outer0::Iterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
read method 
lent Outer0::Iterator vals(Outer2::N ok, Outer2::N max, Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals(Outer2::N ok, Outer2::N max) Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
read method 
lent Outer0::Iterator vals(Outer2::N ok, Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals(Outer2::N ok) Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
read method 
lent Outer0::Iterator vals(Outer2::N max, Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals(Outer2::N max) Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
read method 
lent Outer0::Iterator vals(Outer1::Kind::elem() fill) Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
read method 
lent Outer0::Iterator vals() Outer0::Iterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
Iterator:{
type method 
lent Outer0 #apply(read Outer1^that, Outer3::N^min, Outer3::N^ok, Outer1::OptMax^max, Outer1::OptFill^fill) 
mut method 
read Outer1 #that() 
read method 
read Outer1 that() 
mut method 
Void min(Outer3::N that) 
mut method 
Outer3::N #min() 
read method 
Outer3::N min() 
mut method 
Outer3::N #ok() 
read method 
Outer3::N ok() 
mut method 
Outer1::OptMax #max() 
read method 
Outer1::OptMax max() 
mut method 
Outer1::OptFill #fill() 
read method 
Outer1::OptFill fill() 
mut method 
Void #next() exception Void (
  Void unused=(
    Void unused0=this.min(that:this.min().#plus(that:Outer3::N.#numberParser(that:{'@stringU
    '1
    })))
    Void unused1=(
      Outer0::fill() ::isPresent() cond=this.fill().isPresent()
      (
        Void unused5=cond.#checkTrue()
        catch exception unused6 (
          on Void void
          )
        (
          Void unused7=(
            Outer0::max() ::isPresent() ::#bang() cond0=this.max().isPresent().#bang()
            (
              Void unused9=cond0.#checkTrue()
              catch exception unused10 (
                on Void void
                )
              return void
              )
            )
          Void unused8=(
            Outer0::min() ::#rightequal(that ) cond1=this.min().#rightequal(that:this.max().#tilde())
            (
              Void unused11=cond1.#checkTrue()
              catch exception unused12 (
                on Void void
                )
              exception void
              )
            )
          return void
          )
        )
      )
    Void unused2=(
      Outer0::max() ::isPresent() cond2=this.max().isPresent()
      (
        Void unused13=cond2.#checkTrue()
        catch exception unused14 (
          on Void void
          )
        (
          Outer0::min() ::#rightequal(that ) cond3=this.min().#rightequal(that:this.max().#tilde())
          (
            Void unused15=cond3.#checkTrue()
            catch exception unused16 (
              on Void void
              )
            exception void
            )
          )
        )
      )
    Void unused3=(
      Outer0::min() ::#rightequal(that ) cond4=this.min().#rightequal(that:this.that().size())
      (
        Void unused17=cond4.#checkTrue()
        catch exception unused18 (
          on Void void
          )
        exception void
        )
      )
    Void unused4=return void
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::min() ::#left(that ) cond=this.min().#left(that:this.ok())
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    error Outer3::S.#stringParser(that:{'@stringU
    'Unexpected termination of iteration, reached 
    }).#begin().#add(that:this.min()).#end().#stringParser(that:{'@stringU
    ' instead of 
    }).#begin().#add(that:this.ok()).#end().#stringParser(that:{'@stringU
    '
    })
    )
  )
read method 
Outer2::Kind::elem() #inner() (
  Void unused=(
    Void unused0=(
      Outer0::fill() ::isPresent() ::#bang() cond=this.fill().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        catch exception unused4 (
          on Void void
          )
        return this.that().#apply(that:this.min())
        )
      )
    Void unused1=(
      Outer0::min() ::#left(that ) cond0=this.min().#left(that:this.that().size())
      (
        Void unused5=cond0.#checkTrue()
        catch exception unused6 (
          on Void void
          )
        return this.that().#apply(that:this.min())
        )
      )
    Void unused2=return this.fill().#tilde()
    void
    )
  catch return result (
    on Outer2::Kind::elem() result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #close() void}
mut method 
mut Outer0::VarIterator vars(Outer2::N min, Outer2::N ok, Outer2::N max, Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars(Outer2::N min, Outer2::N ok, Outer2::N max) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
mut method 
mut Outer0::VarIterator vars(Outer2::N min, Outer2::N ok, Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars(Outer2::N min, Outer2::N ok) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
mut method 
mut Outer0::VarIterator vars(Outer2::N min, Outer2::N max, Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars(Outer2::N min, Outer2::N max) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
mut method 
mut Outer0::VarIterator vars(Outer2::N min, Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars(Outer2::N min) Outer0::VarIterator.#apply(that:this, min:min.#less(that:Outer2::N.#numberParser(that:{'@stringU
'1
})), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
mut method 
mut Outer0::VarIterator vars(Outer2::N ok, Outer2::N max, Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars(Outer2::N ok, Outer2::N max) Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
mut method 
mut Outer0::VarIterator vars(Outer2::N ok, Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars(Outer2::N ok) Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:ok, max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
mut method 
mut Outer0::VarIterator vars(Outer2::N max, Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars(Outer2::N max) Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:max, max:Outer0::OptMax.#apply(that:max), fill:Outer0::OptFill.#apply())
mut method 
mut Outer0::VarIterator vars(Outer1::Kind::elem() fill) Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply(that:fill))
mut method 
mut Outer0::VarIterator vars() Outer0::VarIterator.#apply(that:this, min:Outer2::N.#numberParser(that:{'@stringU
'-1
}), ok:this.size(), max:Outer0::OptMax.#apply(), fill:Outer0::OptFill.#apply())
VarIterator:{
type method 
mut Outer0 #apply(mut Outer1^that, Outer3::N^min, Outer3::N^ok, Outer1::OptMax^max, Outer1::OptFill^fill) 
mut method 
mut Outer1 #that() 
read method 
read Outer1 that() 
mut method 
Void min(Outer3::N that) 
mut method 
Outer3::N #min() 
read method 
Outer3::N min() 
mut method 
Outer3::N #ok() 
read method 
Outer3::N ok() 
mut method 
Outer1::OptMax #max() 
read method 
Outer1::OptMax max() 
mut method 
Outer1::OptFill #fill() 
read method 
Outer1::OptFill fill() 
mut method 
Void inner(Outer2::Kind::elem() that) this.#that().#apply(that:this.min(), val:that)
mut method 
Void #next() exception Void (
  Void unused=(
    Void unused0=this.min(that:this.min().#plus(that:Outer3::N.#numberParser(that:{'@stringU
    '1
    })))
    Void unused1=(
      Outer0::fill() ::isPresent() cond=this.fill().isPresent()
      (
        Void unused5=cond.#checkTrue()
        catch exception unused6 (
          on Void void
          )
        (
          Void unused7=(
            Outer0::max() ::isPresent() ::#bang() cond0=this.max().isPresent().#bang()
            (
              Void unused9=cond0.#checkTrue()
              catch exception unused10 (
                on Void void
                )
              return void
              )
            )
          Void unused8=(
            Outer0::min() ::#rightequal(that ) cond1=this.min().#rightequal(that:this.max().#tilde())
            (
              Void unused11=cond1.#checkTrue()
              catch exception unused12 (
                on Void void
                )
              exception void
              )
            )
          return void
          )
        )
      )
    Void unused2=(
      Outer0::max() ::isPresent() cond2=this.max().isPresent()
      (
        Void unused13=cond2.#checkTrue()
        catch exception unused14 (
          on Void void
          )
        (
          Outer0::min() ::#rightequal(that ) cond3=this.min().#rightequal(that:this.max().#tilde())
          (
            Void unused15=cond3.#checkTrue()
            catch exception unused16 (
              on Void void
              )
            exception void
            )
          )
        )
      )
    Void unused3=(
      Outer0::min() ::#rightequal(that ) cond4=this.min().#rightequal(that:this.that().size())
      (
        Void unused17=cond4.#checkTrue()
        catch exception unused18 (
          on Void void
          )
        exception void
        )
      )
    Void unused4=return void
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::min() ::#left(that ) cond=this.min().#left(that:this.ok())
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    error Outer3::S.#stringParser(that:{'@stringU
    'Unexpected termination of iteration, reached 
    }).#begin().#add(that:this.min()).#end().#stringParser(that:{'@stringU
    ' instead of 
    }).#begin().#add(that:this.ok()).#end().#stringParser(that:{'@stringU
    '
    })
    )
  )
read method 
Outer2::Kind::elem() #inner() (
  Void unused=(
    Void unused0=(
      Outer0::fill() ::isPresent() ::#bang() cond=this.fill().isPresent().#bang()
      (
        Void unused3=cond.#checkTrue()
        catch exception unused4 (
          on Void void
          )
        return this.that().#apply(that:this.min())
        )
      )
    Void unused1=(
      Outer0::min() ::#left(that ) cond0=this.min().#left(that:this.that().size())
      (
        Void unused5=cond0.#checkTrue()
        catch exception unused6 (
          on Void void
          )
        return this.that().#apply(that:this.min())
        )
      )
    Void unused2=return this.fill().#tilde()
    void
    )
  catch return result (
    on Outer2::Kind::elem() result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #close() void}}})
N:{<:Outer1::S::ToS
type method 
Outer0 #apply(Library^_binaryRepr) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
type method 
Outer0 fromS(Outer1::S::ToS that) 
method 
Library binaryRepr() 
type method 
Outer0 #numberParser(Library that) 
method 
Outer0 #plus(Outer0 that) 
method 
Outer0 #less(Outer0 that) 
method 
Outer0 #times(Outer0 that) 
method 
Outer0 #divide(Outer0 that) 
method 
Outer1::Bool #equalequal(Outer0 that) 
method 
Outer1::Bool #left(Outer0 that) 
method 
Outer1::Bool #leftequal(Outer0 that) 
method 
Outer1::Bool #bangequal(Outer0 that) 
method 
Outer1::Bool #right(Outer0 that) 
method 
Outer1::Bool #rightequal(Outer0 that) 
method 
mut Outer0::Iterator vals() 
method 
mut Outer0::Iterator vals(Outer0 upTo) 
Iterator:{
type method 
mut Outer0 #apply(Outer1^start, Outer1^end) 
mut method 
Void start(Outer1 that) 
mut method 
Outer1 #start() 
read method 
Outer1 start() 
mut method 
Outer1 #end() 
read method 
Outer1 end() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Outer1 #inner() 
read method 
Void #close() }}
S:{<:Outer0::ToS
type method '  toPutAs private
Outer0 _private(Library^_binaryRepr) 
mut method '  toPutAs private
Library #_binaryRepr() 
read method '  toPutAs private
Library _binaryRepr() 
type method 
Outer0 #stringParser(Library that) 
method 
Library binaryRepr() 
ToS:{interface 
method 
Outer1 toS() }
method 
Outer0 #plusplus(Outer0 that) 
method 
Outer1::Bool #bangequal(Outer0 that) 
method 
Outer1::Bool #equalequal(Outer0 that) 
method 
Outer0 #apply(Outer1::N start, Outer1::N end) 
method 
Outer0 #apply(Outer1::N that) 
method 
Outer0 #apply(Outer1::N start) 
method 
Outer0 #apply(Outer1::N end) 
method 
Outer1::Bool beginsWith(Outer0 that) 
method 
Outer1::N firstIndexOf(Outer0 that) 
SubstringNotPresent:{
type method 
Outer0 #apply(Outer1^string, Outer1^subString) 
mut method 
Outer1 #string() 
read method 
Outer1 string() 
mut method 
Outer1 #subString() 
read method 
Outer1 subString() }
method 
Outer1::Bool contains(Outer0 that) 
method 
Outer1::Bool isASCIILowerCase(Outer1::N that) 
method 
Outer1::Bool isASCIIUpperCase(Outer1::N that) 
method 
Outer1::N size() 
type method 
Outer0 doubleQuote() 
method 
Outer0 replace(Outer0 that, Outer0 into) 
method 
Outer0::SConcat #begin() 
SConcat:{
type method 
Outer0 #apply(Outer1^accumulator) 
mut method 
Outer1 #accumulator() 
read method 
Outer1 accumulator() 
method 
Outer0 #add(Outer1::ToS that) 
method 
Outer0 #end() 
method 
Outer1 #stringParser(Library that) }}
Bool:{<:Outer1::S::ToS
type method '  toPutAs private
Outer0 #apply(Library^binaryRepr) 
mut method '  toPutAs private
Library #binaryRepr() 
read method '  toPutAs private
Library binaryRepr() 
type method 
Outer0 fromS(Outer1::S::ToS that) 
method 
Void #checkTrue() exception Void 
type method 
Outer0 true() 
type method 
Outer0 false() 
method 
Outer0 #and(Outer0 that) 
method 
Outer0 #or(Outer0 that) 
method 
Outer0 #bang() }
Debug:{
type method 
Void #apply(Outer1::S::ToS that) 
type method 
Void #apply(Library lib) 
type method 
Void #apply(Outer1::S::ToS fileName, Outer1::S::ToS content) 
type method 
Void #apply(type Any clazz) }
PrImpl:'@private
{
Report:{interface <:Outer2::S::ToS
UnsupportedOperation:'to report that a target do not support a certain selector.
'to be used when a class have a method available only on certain instances.
'For example, getting the element out of an optional type that is not present.
'is this a kind of misuse?
{<:Outer3::S::ToS
type method 
Outer0 #apply(Outer3::S^reason) 
mut method 
Outer3::S #reason() 
read method 
Outer3::S reason() 
type method 
Outer0 #stringParser(Library that) Outer0.#apply(reason:Outer3::S.#stringParser(that:that))
type method 
Outer0 #apply() Outer0.#apply(that:Outer3::S.#stringParser(that:{'@stringU
'
}))
type method 
Outer0 #apply(Outer3::S that) Outer0.#apply(reason:that)
method toS() Outer3::S.#stringParser(that:{'@stringU
'UnsupportedOperation[
}).#begin().#add(that:this.reason()).#end().#stringParser(that:{'@stringU
']
})}
InvalidOnTopLevel:{<:Outer1, Outer3::S::ToS
type method 
Outer0 #apply(Outer2::Introspection::Record^record) 
mut method 
Outer2::Introspection::Record #record() 
read method 
Outer2::Introspection::Record record() 
method toS() Outer3::S.#stringParser(that:{'@stringU
'InvalidOnTopLevel
})}
MemberUnavailable:{<:Outer1, Outer3::S::ToS
type method 
Outer0 #apply(Outer2::Path^path, Outer3::S^_selector, Outer0::InvalidKind^invalidKind) 
mut method 
Outer2::Path #path() 
read method 
Outer2::Path path() 
mut method 
Outer3::S #_selector() 
read method 
Outer3::S _selector() 
mut method 
Outer0::InvalidKind #invalidKind() 
read method 
Outer0::InvalidKind invalidKind() 
type method 
Outer0 privatePath(Outer2::Path path) Outer0.#apply(path:path, _selector:Outer3::S.#stringParser(that:{'@stringU
'
}), invalidKind:Outer0::InvalidKind.#apply(inner:Outer3::S.#stringParser(that:{'@stringU
'PrivatePath
})))
type method 
Outer0 privateMethod(Outer2::Path path, Outer2::Selector selector) Outer0.#apply(path:path, _selector:selector.toS(), invalidKind:Outer0::InvalidKind.#apply(inner:Outer3::S.#stringParser(that:{'@stringU
'PrivateMethod
})))
type method 
Outer0 nonExistentPath(Outer2::Path path) Outer0.#apply(path:path, _selector:Outer3::S.#stringParser(that:{'@stringU
'
}), invalidKind:Outer0::InvalidKind.#apply(inner:Outer3::S.#stringParser(that:{'@stringU
'NonExistentPath
})))
type method 
Outer0 nonExistentMethod(Outer2::Path path, Outer2::Selector selector) Outer0.#apply(path:path, _selector:selector.toS(), invalidKind:Outer0::InvalidKind.#apply(inner:Outer3::S.#stringParser(that:{'@stringU
'NonExistentMethod
})))
type method 
Outer0 #apply(Outer2::Introspection::Record record) Outer0.#apply(path:Outer2::Path.fromS(that:record.#stringParser(that:{'@stringU
'Path
})), _selector:record.#stringParser(that:{'@stringU
'Selector
}), invalidKind:Outer0::InvalidKind.#apply(inner:record.#stringParser(that:{'@stringU
'InvalidKind
})))
method 
Outer2::Selector selector() (
  Void unused=(
    Void unused0=(
      Outer0::hasSelector() cond=this.hasSelector()
      (
        Void unused2=cond.#checkTrue()
        catch exception unused3 (
          on Void void
          )
        return Outer2::Selector.fromS(that:this._selector())
        )
      )
    Void unused1=error Outer1::Misuse.#stringParser(that:{'@stringU
    'the MemberUnavailable is a path
    })
    void
    )
  catch return result (
    on Outer2::Selector result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool hasSelector() this._selector().#bangequal(that:Outer3::S.#stringParser(that:{'@stringU
'
}))
method toS() Outer3::S.#stringParser(that:{'@stringU
'MemberUnavailable[path:
}).#begin().#add(that:this.path()).#add(that:(
  Void unused=(
    Void unused0=(
      Outer0::toS() ::this::hasSelector() cond=this.hasSelector()
      (
        Void unused2=cond.#checkTrue()
        catch exception unused3 (
          on Void void
          )
        return Outer3::S.#stringParser(that:{'@stringU
        ' selector:
        }).#begin().#add(that:this.selector()).#end().#stringParser(that:{'@stringU
        '
        })
        )
      )
    Void unused1=return Outer3::S.#stringParser(that:{'@stringU
    '
    })
    void
    )
  catch return result (
    on Outer3::S::#stringParser(that ) ::#begin() ::#add(that ) ::#add(that ) ::that result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )).#end().#stringParser(that:{'@stringU
' kind:
}).#begin().#add(that:this.invalidKind()).#end().#stringParser(that:{'@stringU
']
})
InvalidKind:{<:Outer4::S::ToS
type method 
Outer0 #apply(Outer4::S^inner) 
mut method 
Outer4::S #inner() 
read method 
Outer4::S inner() 
method toS() this.inner()}}
SourceUnfit:{<:Outer1, Outer3::S::ToS
type method 'TODO: here, when typechecking introspection, for bug introspection can not see itself back. fix tomorrow. ADDED Has been fixed?
Outer0 #apply(Outer2::Introspection::Record^record) 
mut method 'TODO: here, when typechecking introspection, for bug introspection can not see itself back. fix tomorrow. ADDED Has been fixed?
Outer2::Introspection::Record #record() 
read method 'TODO: here, when typechecking introspection, for bug introspection can not see itself back. fix tomorrow. ADDED Has been fixed?
Outer2::Introspection::Record record() 
method toS() Outer3::S.#stringParser(that:{'@stringU
'SourceUnfit
})}
ClassClash:{'findMeClassClash
<:Outer1, Outer3::S::ToS
type method 
Outer0 #apply(Outer2::Introspection::Record^record) 
mut method 
Outer2::Introspection::Record #record() 
read method 
Outer2::Introspection::Record record() 
method toS() Outer3::S.#stringParser(that:{'@stringU
'ClassClash
})}
MethodClash:{<:Outer1, Outer3::S::ToS
type method 
Outer0 #apply(Outer2::Introspection::Record^record) 
mut method 
Outer2::Introspection::Record #record() 
read method 
Outer2::Introspection::Record record() 
method toS() Outer3::S.#stringParser(that:{'@stringU
'MethodClash
})}
CodeNotReachable:{<:Outer3::S::ToS
type method 
Outer0 #apply(Outer3::S^reason) 
mut method 
Outer3::S #reason() 
read method 
Outer3::S reason() 
type method 
Outer0 #stringParser(Library that) Outer0.#apply(reason:Outer3::S.#stringParser(that:that))
type method 
Outer0 #apply() Outer0.#apply(that:Outer3::S.#stringParser(that:{'@stringU
'
}))
type method 
Outer0 #apply(Outer3::S that) Outer0.#apply(reason:that)
method toS() Outer3::S.#stringParser(that:{'@stringU
'CodeNotReachable[
}).#begin().#add(that:this.reason()).#end().#stringParser(that:{'@stringU
']
})}
PluginFailure:'to report the inability of a plugin to act
{<:Outer3::S::ToS
type method 
Outer0 #apply(Outer3::S^reason) 
mut method 
Outer3::S #reason() 
read method 
Outer3::S reason() 
type method 
Outer0 #stringParser(Library that) Outer0.#apply(reason:Outer3::S.#stringParser(that:that))
type method 
Outer0 #apply() Outer0.#apply(that:Outer3::S.#stringParser(that:{'@stringU
'
}))
type method 
Outer0 #apply(Outer3::S that) Outer0.#apply(reason:that)
method toS() Outer3::S.#stringParser(that:{'@stringU
'PluginFailure[
}).#begin().#add(that:this.reason()).#end().#stringParser(that:{'@stringU
']
})}
Misuse:'If this happens, then the library client is calling a function with wrong parameters or in a wrong way.
'It is a shorter name for Precondition Violation
'If the violation is because the "this" parameter is not suitable to perform the requested operation,
'consider using UnsupportedOperation instead
{<:Outer3::S::ToS
type method 
Outer0 #apply(Outer3::S^reason) 
mut method 
Outer3::S #reason() 
read method 
Outer3::S reason() 
type method 
Outer0 #stringParser(Library that) Outer0.#apply(reason:Outer3::S.#stringParser(that:that))
type method 
Outer0 #apply() Outer0.#apply(that:Outer3::S.#stringParser(that:{'@stringU
'
}))
type method 
Outer0 #apply(Outer3::S that) Outer0.#apply(reason:that)
method toS() Outer3::S.#stringParser(that:{'@stringU
'Misuse[
}).#begin().#add(that:this.reason()).#end().#stringParser(that:{'@stringU
']
})}
NotImplementedYet:{<:Outer3::S::ToS
type method 
Outer0 #apply(Outer3::S^reason) 
mut method 
Outer3::S #reason() 
read method 
Outer3::S reason() 
type method 
Outer0 #stringParser(Library that) Outer0.#apply(reason:Outer3::S.#stringParser(that:that))
type method 
Outer0 #apply() Outer0.#apply(that:Outer3::S.#stringParser(that:{'@stringU
'
}))
type method 
Outer0 #apply(Outer3::S that) Outer0.#apply(reason:that)
method toS() Outer3::S.#stringParser(that:{'@stringU
'CodeNotReachable[
}).#begin().#add(that:this.reason()).#end().#stringParser(that:{'@stringU
']
})}
ObservedBug:'if this happens, then the programmer had wrong assumption on the code behaviour.
{<:Outer3::S::ToS
type method 
Outer0 #apply(Outer3::S^reason) 
mut method 
Outer3::S #reason() 
read method 
Outer3::S reason() 
type method 
Outer0 #stringParser(Library that) Outer0.#apply(reason:Outer3::S.#stringParser(that:that))
type method 
Outer0 #apply() Outer0.#apply(that:Outer3::S.#stringParser(that:{'@stringU
'
}))
type method 
Outer0 #apply(Outer3::S that) Outer0.#apply(reason:that)
method toS() Outer3::S.#stringParser(that:{'@stringU
'ObservedBug[
}).#begin().#add(that:this.reason()).#end().#stringParser(that:{'@stringU
']
})}}
Path:{<:Outer2::S::ToS
type method '  toPutAs private
Outer0 _private(Library^_binaryRepr) 
mut method '  toPutAs private
Library #_binaryRepr() 
read method '  toPutAs private
Library _binaryRepr() 
type method 
Outer0 fromS(Outer2::S::ToS that) Outer0.#stringParser(that:that.toS().binaryRepr())
type method 
Outer0 #stringParser(Library that) (
  Void unused=using Outer1::SafeOperators check ifInvalidDo(selector:that) error Outer0::InvalidFormat.#apply(that:Outer2::S.#stringParser(that:that))
  Outer0._private(_binaryRepr:that)
  )
method 
Library binaryRepr() this._binaryRepr()
method toS() Outer2::S.#stringParser(that:this._binaryRepr())
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer2::Bool.true()
    Void unused1=return Outer2::Bool.false()
    void
    )
  catch return result (
    on Outer2::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Void unused0=(
      Outer0::#equalequal(that ) cond=this.#equalequal(that:Outer0.#stringParser(that:{'@stringU
      'Outer0
      }))
      (
        Void unused3=cond.#checkTrue()
        catch exception unused4 (
          on Void void
          )
        return that
        )
      )
    Void unused1=(
      Outer0::#equalequal(that ) cond0=that.#equalequal(that:Outer0.#stringParser(that:{'@stringU
      'Outer0
      }))
      (
        Void unused5=cond0.#checkTrue()
        catch exception unused6 (
          on Void void
          )
        return this
        )
      )
    Void unused2=return Outer0.#stringParser(that:this.toS().#begin().#add(that:Outer2::S.#stringParser(that:{'@stringU
    '::
    })).#add(that:that).#end().#stringParser(that:{'@stringU
    '
    }).binaryRepr())
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
InvalidFormat:{
type method 
Outer0 #apply(Outer3::S^that) 
mut method 
Outer3::S #that() 
read method 
Outer3::S that() }}
Refactor:{
RenamePath:{
type method 
Outer0 #add(Outer2::Path^that, Outer2::Path^to) 
mut method 
Outer2::Path #that() 
read method 
Outer2::Path that() 
mut method 
Outer2::Path #to() 
read method 
Outer2::Path to() 
method 
Library #leftleft(Library that) exception Outer2::Report::MemberUnavailable, Outer2::Report::MethodClash, Outer2::Report::ClassClash (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.renameClass(that:that, src:this.that(), dest:this.to())
    catch error err (
      on Library (
        Outer2::Introspection::#apply(lib ) ::record() record=Outer2::Introspection.#apply(lib:err).record()
        (
          Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) x=record.#stringParser(that:{'@stringU
          'Kind
          })
          (
            Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) ::#equalequal(that ) cond=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
            'MemberUnavailable
            }))
            (
              Void unused1=cond.#checkTrue()
              catch exception unused2 (
                on Void (
                  Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) ::#equalequal(that ) cond0=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                  'MethodClash
                  }))
                  (
                    Void unused3=cond0.#checkTrue()
                    catch exception unused4 (
                      on Void (
                        Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) ::#equalequal(that ) cond1=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                        'ClassClash
                        }))
                        (
                          Void unused5=cond1.#checkTrue()
                          catch exception unused6 (
                            on Void error err
                            )
                          exception Outer2::Report::ClassClash.#apply(record:record)
                          )
                        )
                      )
                    exception Outer2::Report::MethodClash.#apply(record:record)
                    )
                  )
                )
              exception Outer2::Report::MemberUnavailable.#apply(record:record)
              )
            )
          )
        )
      )
    void
    )
  catch return result (
    on Library result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
type Outer0 #begin() Outer0
method 
Outer0 #end() this}
Redirect:{
type method 
Outer0 #add(Outer2::Path^that, type Any^to) 
mut method 
Outer2::Path #that() 
read method 
Outer2::Path that() 
mut method 
type Any #to() 
read method 
type Any to() 
method 
Library #leftleft(Library that) exception Outer2::Report::MemberUnavailable, Outer2::Report::InvalidOnTopLevel, Outer2::Report::SourceUnfit, Outer2::Report::MethodClash (
  Void unused=(
    Void unused0=return Outer2::SafeOperators.redirect(that:that, src:this.that(), dest:this.to())
    catch error err (
      on Library (
        Outer2::Introspection::#apply(lib ) ::record() record=Outer2::Introspection.#apply(lib:err).record()
        (
          Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) x=record.#stringParser(that:{'@stringU
          'Kind
          })
          (
            Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) ::#equalequal(that ) cond=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
            'MemberUnavailable
            }))
            (
              Void unused1=cond.#checkTrue()
              catch exception unused2 (
                on Void (
                  Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) ::#equalequal(that ) cond0=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                  'InvalidOnTopLevel
                  }))
                  (
                    Void unused3=cond0.#checkTrue()
                    catch exception unused4 (
                      on Void (
                        Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) ::#equalequal(that ) cond1=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                        'MethodClash
                        }))
                        (
                          Void unused5=cond1.#checkTrue()
                          catch exception unused6 (
                            on Void (
                              Outer2::Introspection::#apply(lib ) ::record() ::#stringParser(that ) ::#equalequal(that ) cond2=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                              'SourceUnfit
                              }))
                              (
                                Void unused7=cond2.#checkTrue()
                                catch exception unused8 (
                                  on Void error err
                                  )
                                exception Outer2::Report::SourceUnfit.#apply(record:record)
                                )
                              )
                            )
                          exception Outer2::Report::MethodClash.#apply(record:record)
                          )
                        )
                      )
                    exception Outer2::Report::InvalidOnTopLevel.#apply(record:record)
                    )
                  )
                )
              exception Outer2::Report::MemberUnavailable.#apply(record:record)
              )
            )
          )
        )
      )
    void
    )
  catch return result (
    on Library result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
type Outer0 #begin() Outer0
method 
Outer0 #end() this}}
Alu:{'@plugin
'L42.is/connected/withAlu
}
Introspection:{'findMeIntrospection

type method 
Outer0::NestedClass #apply(Library lib) (
  Outer0::MirrorPr::Lib::#apply(lib ) ::introspectReport(root path ) root=Outer0::MirrorPr::Lib.#apply(lib:lib).introspectReport(root:root, path:Outer1::Path.#stringParser(that:{'@stringU
  'Outer0
  }))
  catch exception x (
    on Outer1::Report::MemberUnavailable error Outer1::Report::CodeNotReachable.#apply()
    )
  root
  )
type method 
Outer0::NestedClass #apply(Library lib, Outer1::Path path) exception Outer1::Report::MemberUnavailable (
  Outer0::#apply(lib ) root=Outer0.#apply(lib:lib)
  root.mirror().introspectReport(root:root, path:path)
  )
type method 
Outer0::NestedClass #apply(type Any clazz) (
  Outer0::MirrorPr::Class::#apply(lib ) ::introspectReport(root path ) root=Outer0::MirrorPr::Class.#apply(lib:clazz).introspectReport(root:root, path:Outer1::Path.#stringParser(that:{'@stringU
  'Outer0
  }))
  catch exception x (
    on Outer1::Report::MemberUnavailable error Outer1::Report::CodeNotReachable.#apply()
    )
  root
  )
type method 
Outer0::NestedClass #apply(type Any clazz, Outer1::Path path) (
  Outer0::MirrorPr::Class::#apply(lib ) ::introspectReport(root path ) root=Outer0::MirrorPr::Class.#apply(lib:clazz).introspectReport(root:root, path:path)
  catch exception x (
    on Outer1::Report::MemberUnavailable error Outer1::Report::CodeNotReachable.#apply()
    )
  root
  )
Record:{
type method 
Outer0 #apply(Outer1::MirrorPr^that) 
mut method 
Outer1::MirrorPr #that() 
read method 
Outer1::MirrorPr that() 
type method 
Outer0 #apply(type Any clazz) Outer0.#apply(that:Outer1::MirrorPr::Class.#apply(lib:clazz))
type method 
Outer0 #apply(Library lib) Outer0.#apply(that:Outer1::MirrorPr::Lib.#apply(lib:lib))
method 
Void dbg() (
  Outer0::that() x=this.that()
  (
    Outer1::MirrorPr::Lib x0=(
      Void unused=return x
      catch return casted (
        on Outer1::MirrorPr::Lib casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void Outer3::Debug.#apply(that:Outer3::S.#stringParser(that:{'@stringU
      'Sorry, can not print class mirrors
      }))
      )
    (
      Void unused1=Outer3::Debug.#apply(lib:x0.lib())
      void
      )
    )
  )
method 
Outer3::S #stringParser(Library that) (
  Void unused=(
    Outer2::Path::#stringParser(that ) path=Outer2::Path.#stringParser(that:that)
    Void unused0=return this.that().introspectDocAsString(path:path)
    catch exception x (
      on Outer2::Report::MemberUnavailable error x
      )
    void
    )
  catch return result (
    on Outer3::S result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Doc docOf(Outer2::Path path) (
  Void unused=(
    Void unused0=(
      Outer0::that() mirror=this.that()
      (
        Outer1::MirrorPr::Lib mirror0=(
          Void unused2=return mirror
          catch return casted (
            on Outer1::MirrorPr::Lib casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused3 (
          on Void void
          )
        (
          Void unused4=return Outer2::Doc.#apply(that:Outer2::SafeOperators.renameClass(that:mirror0.lib(), src:path, dest:Outer2::Path.#stringParser(that:{'@stringU
          'Outer0
          })))
          void
          )
        )
      )
    Void unused1=error Outer2::Report::CodeNotReachable.#apply()
    void
    )
  catch return result (
    on Outer2::Doc result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer1::Member dispatch(Outer1::NestedClass^root, Outer2::Path path, Outer1::MirrorPr mirror, Outer3::N memberN, Library record) (
  Outer0::#apply(lib ) _report=Outer0.#apply(lib:record)
  Outer0::RootForMember result=(
    Void unused=(
      Void unused0=(
        Outer0::#apply(lib ) ::#stringParser(that ) x=_report.#stringParser(that:{'@stringU
        'MemberKind
        })
        (
          Outer0::#apply(lib ) ::#stringParser(that ) ::#equalequal(that ) cond=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
          'InterfaceImplementedMethod
          }))
          (
            Void unused1=cond.#checkTrue()
            catch exception unused2 (
              on Void (
                Outer0::#apply(lib ) ::#stringParser(that ) ::#equalequal(that ) cond0=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                'ImplementedMethod
                }))
                (
                  Void unused3=cond0.#checkTrue()
                  catch exception unused4 (
                    on Void (
                      Outer0::#apply(lib ) ::#stringParser(that ) ::#equalequal(that ) cond1=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                      'AbstractMethod
                      }))
                      (
                        Void unused5=cond1.#checkTrue()
                        catch exception unused6 (
                          on Void (
                            Outer0::#apply(lib ) ::#stringParser(that ) ::#equalequal(that ) cond2=x.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                            'NestedClass
                            }))
                            (
                              Void unused7=cond2.#checkTrue()
                              catch exception unused8 (
                                on Void error Outer2::Report::ObservedBug.#apply(that:Outer3::S.#stringParser(that:{'@stringU
                                'invalid member kind 
                                }).#begin().#add(that:x).#end().#stringParser(that:{'@stringU
                                '
                                }))
                                )
                              return Outer0::RootForNested.#apply(path:path, mirror:mirror, _report:_report)
                              )
                            )
                          )
                        return Outer0::RootForMethod.#apply(path:path, memberN:memberN, _report:_report)
                        )
                      )
                    )
                  return Outer0::RootForMethod.#apply(path:path, memberN:memberN, _report:_report)
                  )
                )
              )
            return Outer0::RootForMethod.#apply(path:path, memberN:memberN, _report:_report)
            )
          )
        )
      void
      )
    catch return result0 (
      on Outer0::RootForMember result0
      )
    error {'@stringU
    'CurlyBlock-Should be unreachable code
    }
    )
  result.#apply(root:root)
  )
RootForMember:' toPutAs private
{interface 
method 
Outer2::Member #apply(Outer2::NestedClass^root) }
RootForMethod:' toPutAs private
{<:Outer1::RootForMember
type method 
Outer0 #apply(Outer3::Path^path, Outer4::N^memberN, Outer1^_report) 
mut method 
Outer3::Path #path() 
read method 
Outer3::Path path() 
mut method 
Outer4::N #memberN() 
read method 
Outer4::N memberN() 
mut method 
Outer1 #_report() 
read method 
Outer1 _report() 
method #apply(root ) Outer2::Method.#apply(root:root, path:this.path(), memberN:this.memberN(), record:this._report())}
RootForNested:' toPutAs private
{<:Outer1::RootForMember
type method 
Outer0 #apply(Outer3::Path^path, Outer2::MirrorPr^mirror, Outer1^_report) 
mut method 
Outer3::Path #path() 
read method 
Outer3::Path path() 
mut method 
Outer2::MirrorPr #mirror() 
read method 
Outer2::MirrorPr mirror() 
mut method 
Outer1 #_report() 
read method 
Outer1 _report() 
method #apply(root ) (
  Outer3::Path::#stringParser(that ) path=Outer3::Path.#stringParser(that:this._report().#stringParser(that:{'@stringU
  'Key
  }).binaryRepr())
  Outer2::NestedClass.#apply(root:root, path:path, mirror:this.mirror(), record:this._report())
  )}}
MirrorPr:{interface 
Lib:{<:Outer1
type method 
Outer0 #apply(Library^lib) 
mut method 
Library #lib() 
read method 
Library lib() 
method introspectReport(root path ) (
  Outer2::NestedClass::#apply(root path mirror record ) result=Outer2::NestedClass.#apply(root:root, path:path, mirror:this, record:Outer2::Record.#apply(that:Outer0.#apply(lib:using Outer3::SafeOperators check introspectLibraryReport(that:this.lib(), path:path.binaryRepr()) error Outer3::Report::PluginFailure.#stringParser(that:{'@stringU
  'SafeOperators.introspectLibraryReport
  }))))
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectReportMember(root path memberN ) (
  Outer2::Record::dispatch(root path mirror memberN record ) result=Outer2::Record.dispatch(root:root, path:path, mirror:this, memberN:memberN, record:using Outer3::SafeOperators check introspectLibraryReportMember(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr()) exception void)
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectReportType(root path memberN typeN ) (
  Outer2::Type::#apply(root path memberN typeN record ) result=Outer2::Type.#apply(root:root, path:path, memberN:memberN, typeN:typeN, record:Outer2::Record.#apply(that:Outer0.#apply(lib:using Outer3::SafeOperators check introspectLibraryReportType(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr(), typeN:typeN.binaryRepr()) exception void)))
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectDocAsString(path annotationN ) (
  Outer4::S::#stringParser(that ) result=Outer4::S.#stringParser(that:using Outer3::SafeOperators check introspectLibraryDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) exception void)
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectDocAsString(path ) (
  Outer4::S::#stringParser(that ) result=Outer4::S.#stringParser(that:using Outer3::SafeOperators check introspectLibraryDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:Outer4::N.#numberParser(that:{'@stringU
  '0
  }).binaryRepr()) error Outer3::Report::PluginFailure.#stringParser(that:{'@stringU
  'SafeOperators.introspectLibraryDocAsString
  }))
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectDocPath(path annotationN ) (
  type Any result=using Outer3::SafeOperators check introspectLibraryDocPath(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) error Outer3::Report::PluginFailure.#stringParser(that:{'@stringU
  'SafeOperators.introspectLibraryDocPath
  })
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )}
Class:{<:Outer1
type method 
Outer0 #apply(type Any^lib) 
mut method 
type Any #lib() 
read method 
type Any lib() 
method introspectReport(root path ) (
  Outer2::Record::#apply(lib ) record=Outer2::Record.#apply(lib:using Outer3::SafeOperators check introspectTypeReport(that:this.lib(), path:path.binaryRepr()) error Outer3::Report::PluginFailure.#stringParser(that:{'@stringU
  'SafeOperators.introspectTypeReport
  }))
  Outer2::Record::#apply(lib ) ::docOf(path ) ::annotations() ::top() ::referredClass() realRootType=record.docOf(path:Outer3::Path.#stringParser(that:{'@stringU
  'MyClass
  })).annotations().top().referredClass()
  Outer2::NestedClass::#apply(root path mirror record ) result=Outer2::NestedClass.#apply(root:result, path:Outer3::Path.#stringParser(that:{'@stringU
  'Outer0
  }), mirror:Outer0.#apply(lib:realRootType), record:record)
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectReportMember(root path memberN ) (
  Outer2::Record::dispatch(root path mirror memberN record ) result=Outer2::Record.dispatch(root:root, path:path, mirror:this, memberN:memberN, record:using Outer3::SafeOperators check introspectTypeReportMember(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr()) exception void)
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectReportType(root path memberN typeN ) (
  Outer2::Type::#apply(root path memberN typeN record ) result=Outer2::Type.#apply(root:root, path:path, memberN:memberN, typeN:typeN, record:Outer2::Record.#apply(that:Outer1::Lib.#apply(lib:using Outer3::SafeOperators check introspectTypeReportType(that:this.lib(), path:path.binaryRepr(), memberN:memberN.binaryRepr(), typeN:typeN.binaryRepr()) exception void)))
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectDocAsString(path annotationN ) (
  Outer4::S::#stringParser(that ) result=Outer4::S.#stringParser(that:using Outer3::SafeOperators check introspectTypeDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) exception void)
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectDocAsString(path ) (
  Outer4::S::#stringParser(that ) result=Outer4::S.#stringParser(that:using Outer3::SafeOperators check introspectTypeDocAsString(that:this.lib(), path:path.binaryRepr(), annotationN:Outer4::N.#numberParser(that:{'@stringU
  '0
  }).binaryRepr()) error Outer3::Report::PluginFailure.#stringParser(that:{'@stringU
  'SafeOperators.introspectTypeDocAsString
  }))
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )
method introspectDocPath(path annotationN ) (
  type Any result=using Outer3::SafeOperators check introspectTypeDocPath(that:this.lib(), path:path.binaryRepr(), annotationN:annotationN.binaryRepr()) error Outer3::Report::PluginFailure.#stringParser(that:{'@stringU
  'SafeOperators.introspectTypeDocPath
  })
  catch error x (
    on Library exception Outer3::Report::MemberUnavailable.#apply(record:Outer2::Record.#apply(lib:x))
    )
  result
  )}
method 
Outer1::NestedClass introspectReport(Outer1::NestedClass^root, Outer2::Path path) exception Outer2::Report::MemberUnavailable 
method 
Outer1::Member introspectReportMember(Outer1::NestedClass^root, Outer2::Path path, Outer3::N memberN) exception Outer2::Report::MemberUnavailable, Void 
method 
Outer1::Type introspectReportType(Outer1::NestedClass^root, Outer2::Path path, Outer3::N memberN, Outer3::N typeN) exception Outer2::Report::MemberUnavailable, Void 
method 
Outer3::S introspectDocAsString(Outer2::Path path) exception Outer2::Report::MemberUnavailable 
method 
Outer3::S introspectDocAsString(Outer2::Path path, Outer3::N annotationN) exception Outer2::Report::MemberUnavailable, Void 
method 
type Any introspectDocPath(Outer2::Path path, Outer3::N annotationN) exception Outer2::Report::MemberUnavailable, Void }
NestedClass:{'findMeNestedClass
<:Outer1::Member, Outer3::S::ToS
type method 
Outer0 #apply(Outer0^root, Outer2::Path^path, Outer1::MirrorPr^mirror, Outer1::Record^record) 
mut method 
Outer0 #root() 
read method 
Outer0 root() 
mut method 
Outer2::Path #path() 
read method 
Outer2::Path path() 
mut method 
Outer1::MirrorPr #mirror() 
read method 
Outer1::MirrorPr mirror() 
mut method 
Outer1::Record #record() 
read method 
Outer1::Record record() 
method toS() Outer3::S.#stringParser(that:{'@stringU
'NestedClass[
}).#begin().#add(that:this.allAsString()).#end().#stringParser(that:{'@stringU
']
})
method 'empty for Outer0
Outer2::Doc nestedDoc() (
  Void unused=(
    Outer0::path() ::#equalequal(that ) cond=this.path().#equalequal(that:Outer2::Path.#stringParser(that:{'@stringU
    'Outer0
    }))
    (
      Void unused0=cond.#checkTrue()
      catch exception unused1 (
        on Void void
        )
      error Outer2::Report::UnsupportedOperation.#stringParser(that:{'@stringU
      'NestedClass.nestedDoc()  The NestedClass Object refers to Outer0
      })
      )
    )
  this.record().docOf(path:Outer2::Path.#stringParser(that:{'@stringU
  'MemberDoc
  }))
  )
method 'of the library literal
Outer2::Doc doc() this.record().docOf(path:Outer2::Path.#stringParser(that:{'@stringU
'Doc
}))
method 
Outer2::Path pathFromRoot() this.path()
method 
Outer3::Bool hasExternalType() (
  Void unused=(
    Void unused0=(
      Outer0::path() ::#bangequal(that ) cond=this.path().#bangequal(that:Outer2::Path.#stringParser(that:{'@stringU
      'Outer0
      }))
      (
        Void unused3=cond.#checkTrue()
        catch exception unused4 (
          on Void void
          )
        return Outer3::Bool.false()
        )
      )
    Void unused1=(
      Outer0::mirror() mirror=this.mirror()
      (
        Outer1::MirrorPr::Class mirror0=(
          Void unused5=return mirror
          catch return casted (
            on Outer1::MirrorPr::Class casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused6 (
          on Void void
          )
        (
          Void unused7=return Outer3::Bool.true()
          void
          )
        )
      )
    Void unused2=return Outer3::Bool.false()
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
type Any externalType() (
  Void unused=(
    Void unused0=(
      Outer0::path() ::#bangequal(that ) cond=this.path().#bangequal(that:Outer2::Path.#stringParser(that:{'@stringU
      'Outer0
      }))
      (
        Void unused2=cond.#checkTrue()
        catch exception unused3 (
          on Void void
          )
        error Outer2::Report::UnsupportedOperation.#apply(that:Outer3::S.#stringParser(that:{'@stringU
        'NestedClass.externalType() The NestedClass Object refers to 
        }).#begin().#add(that:this.path()).#end().#stringParser(that:{'@stringU
        '
        }))
        )
      )
    Void unused1=(
      Outer0::mirror() mirror=this.mirror()
      (
        Outer1::MirrorPr::Class mirror2=(
          Void unused4=return mirror
          catch return casted1 (
            on Outer1::MirrorPr::Class casted1
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused5 (
          on Void (
            Outer1::MirrorPr::Lib mirror1=(
              Void unused6=return mirror
              catch return casted0 (
                on Outer1::MirrorPr::Lib casted0
                
                on Any exception void
                )
              error {'@stringU
              'CastT-Should be unreachable code
              }
              )
            catch exception unused7 (
              on Void (
                Outer1::MirrorPr mirror0=(
                  Void unused8=return mirror
                  catch return casted (
                    on Outer1::MirrorPr casted
                    
                    on Any exception void
                    )
                  error {'@stringU
                  'CastT-Should be unreachable code
                  }
                  )
                catch exception unused9 (
                  on Void error Outer2::Report::ObservedBug.#stringParser(that:{'@stringU
                  'WTF 02
                  })
                  )
                (
                  Void unused10=error Outer2::Report::ObservedBug.#stringParser(that:{'@stringU
                  'WTF 01
                  })
                  void
                  )
                )
              )
            (
              Void unused11=error Outer2::Report::UnsupportedOperation.#stringParser(that:{'@stringU
              'NestedClass.externalType() The NestedClass Object is unbound
              })
              void
              )
            )
          )
        (
          Void unused12=return mirror2.lib()
          void
          )
        )
      )
    void
    )
  catch return result (
    on type Any result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::S classKind() this.record().#stringParser(that:{'@stringU
'ClassKind
})
method 
Outer3::S allAsString() this.record().#stringParser(that:{'@stringU
'AllAsString
})
method 
Outer1::Members members() (
  Outer1::Members::#begin() ::#end() result=Outer1::Members.#begin().#end()
  Outer3::N::#numberParser(that ) mN=Outer3::N.#numberParser(that:{'@stringU
  '1
  })
  mut Outer0::Varresult2__20_1 varresult=Outer0::Varresult2__20_1.#apply(inner:result)
  mut Outer0::VarmN__19_1 varmN=Outer0::VarmN__19_1.#apply(inner:mN)
  Void unused=(
    Void unused0=loop (
      Void unused1=Outer3::Bool.true().#checkTrue()
      (' to be able to break
      
        Void unused2=varresult.inner(that:varresult.#inner().#add(that:this.mirror().introspectReportMember(root:this, path:this.path(), memberN:varmN.#inner())))
        varmN.inner(that:varmN.#inner().#plus(that:Outer3::N.#numberParser(that:{'@stringU
        '1
        })))
        )
      )
    catch exception unused3 (
      on Void void
      )
    void
    )
  catch exception x (
    on Outer2::Report::MemberUnavailable error Outer2::Report::CodeNotReachable.#apply()
    )
  varresult.#inner()
  )
method 
Outer1::Methods methods() (
  Outer1::Methods::#begin() accumulator=Outer1::Methods.#begin()
  mut Outer0::Varaccumulator__21_1 varaccumulator=Outer0::Varaccumulator__21_1.#apply(inner:accumulator)
  Void unused=(
    Outer0::members() ::vals() m=this.members().vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=m.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=m.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            (
              Outer1::Method m0=(
                Void unused8=return m.#inner()
                catch return casted (
                  on Outer1::Method casted
                  
                  on Any exception void
                  )
                error {'@stringU
                'CastT-Should be unreachable code
                }
                )
              catch exception unused9 (
                on Void void
                )
              (
                Void unused10=varaccumulator.inner(that:varaccumulator.#inner().#add(that:m0))
                void
                )
              )
            )
          catch exception unused11 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused12=m.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused13=m.#close()
          return propagated0
          )
        )
      m.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer1::NestedClasses nestedClasses() (
  Outer1::NestedClasses::#begin() accumulator=Outer1::NestedClasses.#begin()
  mut Outer0::Varaccumulator0__22_1 varaccumulator=Outer0::Varaccumulator0__22_1.#apply(inner:accumulator)
  Void unused=(
    Outer0::members() ::vals() m=this.members().vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=m.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=m.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            (
              Outer0 m0=(
                Void unused8=return m.#inner()
                catch return casted (
                  on Outer0 casted
                  
                  on Any exception void
                  )
                error {'@stringU
                'CastT-Should be unreachable code
                }
                )
              catch exception unused9 (
                on Void void
                )
              (
                Void unused10=varaccumulator.inner(that:varaccumulator.#inner().#add(that:m0))
                void
                )
              )
            )
          catch exception unused11 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused12=m.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused13=m.#close()
          return propagated0
          )
        )
      m.#close()
      )
    )
  varaccumulator.#inner().#end()
  )
method 
Outer1::Types implementedInterfaces() (
  Outer1::Types::#begin() ::#end() result=Outer1::Types.#begin().#end()
  Outer3::N::#numberParser(that ) tN=Outer3::N.#numberParser(that:{'@stringU
  '-1
  })
  mut Outer0::Varresult3__24_1 varresult=Outer0::Varresult3__24_1.#apply(inner:result)
  mut Outer0::VartN__23_1 vartN=Outer0::VartN__23_1.#apply(inner:tN)
  Void unused=(
    Void unused0=loop (
      Void unused1=Outer3::Bool.true().#checkTrue()
      (' to be able to break
      
        Void unused2=varresult.inner(that:varresult.#inner().#add(that:this.record().that().introspectReportType(root:this, path:this.path(), memberN:Outer3::N.#numberParser(that:{'@stringU
        '0
        }), typeN:vartN.#inner())))
        vartN.inner(that:vartN.#inner().#less(that:Outer3::N.#numberParser(that:{'@stringU
        '1
        })))
        )
      )
    catch exception unused3 (
      on Void void
      )
    void
    )
  catch exception x (
    on Outer2::Report::MemberUnavailable error Outer2::Report::CodeNotReachable.#apply()
    )
  varresult.#inner()
  )
method 
Outer1::Method constructor() error Outer2::Report::NotImplementedYet.#apply()
method 
Outer1::Method methodFromSelector(Outer2::Selector that) exception Outer2::Report::MemberUnavailable (
  Void unused=(
    Void unused0=(
      Outer0::methods() ::vals() meth=this.methods().vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=meth.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=meth.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              (
                Outer0::methods() ::vals() ::#inner() ::selector() ::#equalequal(that ) cond=meth.#inner().selector().#equalequal(that:that)
                (
                  Void unused10=cond.#checkTrue()
                  catch exception unused11 (
                    on Void void
                    )
                  return meth.#inner()
                  )
                )
              )
            catch exception unused12 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused13=meth.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer1::Method (
            Void unused14=meth.#close()
            return propagated0
            )
          )
        meth.#close()
        )
      )
    Void unused1=error Outer2::Report::MemberUnavailable.nonExistentMethod(path:this.pathFromRoot(), selector:that)
    void
    )
  catch return result (
    on Outer1::Method result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool has(Outer2::Selector selector) (
  Void unused0=(
    Outer0::methodFromSelector(that ) unused=this.methodFromSelector(that:selector)
    catch exception unused1 (
      on Outer2::Report::MemberUnavailable return Outer3::Bool.false()
      )
    (
      Void unused2=return Outer3::Bool.true()
      void
      )
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 nestedClassFromRoot(Outer2::Path that) exception Outer2::Report::MemberUnavailable (
  Void unused=(
    Void unused0=(
      Outer2::Path::#equalequal(that ) cond=that.#equalequal(that:Outer2::Path.#stringParser(that:{'@stringU
      'Outer0
      }))
      (
        Void unused3=cond.#checkTrue()
        catch exception unused4 (
          on Void void
          )
        return this.root()
        )
      )
    Outer0::record() ::docOf(path ) ::annotations() ::top() myClass=this.record().docOf(path:Outer2::Path.#stringParser(that:{'@stringU
    'MyClass
    })).annotations().top()
    Void unused1=(
      Outer0::record() ::docOf(path ) ::annotations() ::top() ::hasReferredClass() ::#bang() cond0=myClass.hasReferredClass().#bang()
      (
        Void unused5=cond0.#checkTrue()
        catch exception unused6 (
          on Void void
          )
        return this.mirror().introspectReport(root:this.root(), path:that)
        )
      )
    Void unused2=return Outer1.#apply(clazz:myClass.referredClass(), path:that)
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool has(Outer2::Path fromRoot) (
  Outer0::nestedClassFromRoot(that ) unused=this.nestedClassFromRoot(that:fromRoot)
  catch exception unused0 (
    on Outer2::Report::MemberUnavailable Outer3::Bool.false()
    )
  Outer3::Bool.true()
  )
method 
Outer3::Bool isPrivate() (
  Void unused=(
    Void unused0=(
      Outer0::nestedDoc() ::annotations() ::vals() ann=this.nestedDoc().annotations().vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=ann.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=ann.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              (
                Outer0::nestedDoc() ::annotations() ::vals() ::#inner() ::toS() ::#equalequal(that ) cond=ann.#inner().toS().#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                'private
                }))
                (
                  Void unused10=cond.#checkTrue()
                  catch exception unused11 (
                    on Void void
                    )
                  return Outer3::Bool.true()
                  )
                )
              )
            catch exception unused12 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused13=ann.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer3::Bool (
            Void unused14=ann.#close()
            return propagated0
            )
          )
        ann.#close()
        )
      )
    Void unused1=return Outer3::Bool.false()
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
VartN__23_1:'@private
{
type method 
mut Outer0 #apply(Outer4::N::#numberParser(that ) ^inner) 
mut method 
Void inner(Outer4::N::#numberParser(that ) that) 
mut method 
Outer4::N::#numberParser(that ) #inner() }
Varresult2__20_1:'@private
{
type method 
mut Outer0 #apply(Outer2::Members::#begin() ::#end() ^inner) 
mut method 
Void inner(Outer2::Members::#begin() ::#end() that) 
mut method 
Outer2::Members::#begin() ::#end() #inner() }
VarmN__19_1:'@private
{
type method 
mut Outer0 #apply(Outer4::N::#numberParser(that ) ^inner) 
mut method 
Void inner(Outer4::N::#numberParser(that ) that) 
mut method 
Outer4::N::#numberParser(that ) #inner() }
Varresult3__24_1:'@private
{
type method 
mut Outer0 #apply(Outer2::Types::#begin() ::#end() ^inner) 
mut method 
Void inner(Outer2::Types::#begin() ::#end() that) 
mut method 
Outer2::Types::#begin() ::#end() #inner() }
Varaccumulator__21_1:'@private
{
type method 
mut Outer0 #apply(Outer2::Methods::#begin() ^inner) 
mut method 
Void inner(Outer2::Methods::#begin() that) 
mut method 
Outer2::Methods::#begin() #inner() }
Varaccumulator0__22_1:'@private
{
type method 
mut Outer0 #apply(Outer2::NestedClasses::#begin() ^inner) 
mut method 
Void inner(Outer2::NestedClasses::#begin() that) 
mut method 
Outer2::NestedClasses::#begin() #inner() }}
NestedClasses:{' generic linked list class, elements of type Elem

type method 
Outer0 _new(Outer0::Cell^head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          catch return casted (
            on Outer0::CellEnd casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused2 (
          on Void return Outer3::Bool.false()
          )
        (
          Void unused3=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::NestedClass top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    catch exception unused1 (
      on Void error Outer2::Report::Misuse.#stringParser(that:{'@stringU
      'PopOnEmpyList
      })
      )
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres__25_1 varres=Outer0::Varres__25_1.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=e.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            catch exception unused10 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused11=e.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer0 (
            Void unused12=e.#close()
            return propagated0
            )
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::NestedClass that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres0__26_1 varres=Outer0::Varres0__26_1.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=elem.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          catch exception unused8 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused9=elem.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused10=elem.#close()
          return propagated0
          )
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell^that, Outer4::Bool^terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer4::Bool #terminate() 
read method 
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        catch return casted (
          on Outer1::CellEnd casted
          
          on Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void void
        )
      (
        Void unused4=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    this.that().#checkEnd()
    )
  )
read method 
Outer2::NestedClass #inner() this.that().#inner()
read method 
Void #close() void}
Varres0__26_1:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() ^inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::NestedClass #inner() 
method 
Void #checkEnd() }
Varres__25_1:'@private
{
type method 
mut Outer0 #apply(Outer1^inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::NestedClass^elem, Outer1::Cell^nextCell) 
mut method 
Outer2::NestedClass #elem() 
read method 
Outer2::NestedClass elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  catch return result (
    on Outer0::vals(terminate ) result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      catch return casted (
        on Outer0 casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void void
      )
    (
      Void unused1=error Outer3::Report::Misuse.#stringParser(that:{'@stringU
      'IterationNotComplete,\u000a  use valsCut() to allows incomplete iterations\u000a
      })
      void
      )
    )
  )}
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Report::ObservedBug.#stringParser(that:{'@stringU
'InnerOnCellEnd
})
method #checkEnd() void}}
Members:{' generic linked list class, elements of type Elem

type method 
Outer0 _new(Outer0::Cell^head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          catch return casted (
            on Outer0::CellEnd casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused2 (
          on Void return Outer3::Bool.false()
          )
        (
          Void unused3=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Member top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    catch exception unused1 (
      on Void error Outer2::Report::Misuse.#stringParser(that:{'@stringU
      'PopOnEmpyList
      })
      )
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres__13_1 varres=Outer0::Varres__13_1.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=e.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            catch exception unused10 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused11=e.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer0 (
            Void unused12=e.#close()
            return propagated0
            )
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Member that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres0__14_1 varres=Outer0::Varres0__14_1.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=elem.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          catch exception unused8 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused9=elem.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused10=elem.#close()
          return propagated0
          )
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Varres__13_1:'@private
{
type method 
mut Outer0 #apply(Outer1^inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell^that, Outer4::Bool^terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer4::Bool #terminate() 
read method 
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        catch return casted (
          on Outer1::CellEnd casted
          
          on Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void void
        )
      (
        Void unused4=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Member #inner() this.that().#inner()
read method 
Void #close() void}
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::Member #inner() 
method 
Void #checkEnd() }
Varres0__14_1:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() ^inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Member^elem, Outer1::Cell^nextCell) 
mut method 
Outer2::Member #elem() 
read method 
Outer2::Member elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  catch return result (
    on Outer0::vals(terminate ) result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      catch return casted (
        on Outer0 casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void void
      )
    (
      Void unused1=error Outer3::Report::Misuse.#stringParser(that:{'@stringU
      'IterationNotComplete,\u000a  use valsCut() to allows incomplete iterations\u000a
      })
      void
      )
    )
  )}
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Report::ObservedBug.#stringParser(that:{'@stringU
'InnerOnCellEnd
})
method #checkEnd() void}}
Types:{' generic linked list class, elements of type Elem

type method 
Outer0 _new(Outer0::Cell^head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          catch return casted (
            on Outer0::CellEnd casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused2 (
          on Void return Outer3::Bool.false()
          )
        (
          Void unused3=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Type top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    catch exception unused1 (
      on Void error Outer2::Report::Misuse.#stringParser(that:{'@stringU
      'PopOnEmpyList
      })
      )
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres__27_1 varres=Outer0::Varres__27_1.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=e.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            catch exception unused10 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused11=e.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer0 (
            Void unused12=e.#close()
            return propagated0
            )
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Type that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres0__28_1 varres=Outer0::Varres0__28_1.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=elem.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          catch exception unused8 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused9=elem.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused10=elem.#close()
          return propagated0
          )
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell^that, Outer4::Bool^terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer4::Bool #terminate() 
read method 
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        catch return casted (
          on Outer1::CellEnd casted
          
          on Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void void
        )
      (
        Void unused4=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Type #inner() this.that().#inner()
read method 
Void #close() void}
Varres0__28_1:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() ^inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::Type #inner() 
method 
Void #checkEnd() }
Varres__27_1:'@private
{
type method 
mut Outer0 #apply(Outer1^inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Type^elem, Outer1::Cell^nextCell) 
mut method 
Outer2::Type #elem() 
read method 
Outer2::Type elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  catch return result (
    on Outer0::vals(terminate ) result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      catch return casted (
        on Outer0 casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void void
      )
    (
      Void unused1=error Outer3::Report::Misuse.#stringParser(that:{'@stringU
      'IterationNotComplete,\u000a  use valsCut() to allows incomplete iterations\u000a
      })
      void
      )
    )
  )}
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Report::ObservedBug.#stringParser(that:{'@stringU
'InnerOnCellEnd
})
method #checkEnd() void}}
Member:{interface <:Outer3::S::ToS}
Methods:{' generic linked list class, elements of type Elem

type method 
Outer0 _new(Outer0::Cell^head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          catch return casted (
            on Outer0::CellEnd casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused2 (
          on Void return Outer3::Bool.false()
          )
        (
          Void unused3=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Method top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    catch exception unused1 (
      on Void error Outer2::Report::Misuse.#stringParser(that:{'@stringU
      'PopOnEmpyList
      })
      )
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres__17_1 varres=Outer0::Varres__17_1.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=e.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            catch exception unused10 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused11=e.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer0 (
            Void unused12=e.#close()
            return propagated0
            )
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Method that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres0__18_1 varres=Outer0::Varres0__18_1.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=elem.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          catch exception unused8 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused9=elem.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused10=elem.#close()
          return propagated0
          )
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Varres__17_1:'@private
{
type method 
mut Outer0 #apply(Outer1^inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell^that, Outer4::Bool^terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer4::Bool #terminate() 
read method 
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        catch return casted (
          on Outer1::CellEnd casted
          
          on Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void void
        )
      (
        Void unused4=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Method #inner() this.that().#inner()
read method 
Void #close() void}
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::Method #inner() 
method 
Void #checkEnd() }
Varres0__18_1:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() ^inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Method^elem, Outer1::Cell^nextCell) 
mut method 
Outer2::Method #elem() 
read method 
Outer2::Method elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  catch return result (
    on Outer0::vals(terminate ) result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      catch return casted (
        on Outer0 casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void void
      )
    (
      Void unused1=error Outer3::Report::Misuse.#stringParser(that:{'@stringU
      'IterationNotComplete,\u000a  use valsCut() to allows incomplete iterations\u000a
      })
      void
      )
    )
  )}
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Report::ObservedBug.#stringParser(that:{'@stringU
'InnerOnCellEnd
})
method #checkEnd() void}}
Type:{<:Outer3::S::ToS
type method 
Outer0 #apply(Outer1::NestedClass^root, Outer2::Path^path, Outer3::N^memberN, Outer3::N^typeN, Outer1::Record^record) 
mut method 
Outer1::NestedClass #root() 
read method 
Outer1::NestedClass root() 
mut method 
Outer2::Path #path() 
read method 
Outer2::Path path() 
mut method 
Outer3::N #memberN() 
read method 
Outer3::N memberN() 
mut method 
Outer3::N #typeN() 
read method 
Outer3::N typeN() 
mut method 
Outer1::Record #record() 
read method 
Outer1::Record record() 
method toS() Outer3::S.#stringParser(that:{'@stringU
'Type[
}).#begin().#add(that:this.allAsString()).#end().#stringParser(that:{'@stringU
']
})
method 
Outer3::S allAsString() this.record().#stringParser(that:{'@stringU
'AllAsString
})
method 
Outer3::S typeKind() this.record().#stringParser(that:{'@stringU
'TypeKind
})
method 
Outer3::S mdf() (
  Void unused=('error on AliasUnresolvable
  
    Void unused0=(
      Outer0::typeKind() ::#bangequal(that ) cond=this.typeKind().#bangequal(that:Outer3::S.#stringParser(that:{'@stringU
      'AliasUnresolvable
      }))
      (
        Void unused2=cond.#checkTrue()
        catch exception unused3 (
          on Void void
          )
        return this.record().#stringParser(that:{'@stringU
        'Mdf
        })
        )
      )
    Void unused1=error Outer2::Report::UnsupportedOperation.#stringParser(that:{'@stringU
    'AliasUnresolvable type, mdf unknown
    })
    void
    )
  catch return result (
    on Outer3::S result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method '@private
Outer1::NestedClass referencedPath__1_1(Outer2::Doc::Annotation ann) (
  Void unused=(
    Void unused0=(
      Outer2::Doc::Annotation::hasReferredClass() cond=ann.hasReferredClass()
      (
        Void unused3=cond.#checkTrue()
        catch exception unused4 (
          on Void void
          )
        return Outer1.#apply(clazz:ann.referredClass())
        )
      )
    Outer3::S sPath=ann.toS().#apply(start:Outer3::N.#numberParser(that:{'@stringU
    '2
    }))
    Void unused1=(
      Outer3::S::#equalequal(that ) cond0=sPath.#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
      '
      }))
      (
        Void unused5=cond0.#checkTrue()
        catch exception unused6 (
          on Void void
          )
        return this.root()
        )
      )
    Outer2::Path path=Outer2::Path.fromS(that:sPath)
    Void unused2=return this.root().nestedClassFromRoot(that:path)
    catch exception x (
      on Outer2::Report::MemberUnavailable error Outer2::Report::ObservedBug.#stringParser(that:{'@stringU
      'Type refers to unexistent path
      })
      )
    void
    )
  catch return result (
    on Outer1::NestedClass result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::NestedClass referencedPath() this.referencedPath__1_1(ann:this.record().docOf(path:Outer2::Path.#stringParser(that:{'@stringU
'Path
})).annotations().top())
method 
Outer1::NestedClass resolvedReferencedPath() (
  Void unused=('error on AliasUnresolvable
  
    Void unused0=(
      Outer0::typeKind() ::#bangequal(that ) cond=this.typeKind().#bangequal(that:Outer3::S.#stringParser(that:{'@stringU
      'AliasUnresolvable
      }))
      (
        Void unused2=cond.#checkTrue()
        catch exception unused3 (
          on Void void
          )
        return this.referencedPath__1_1(ann:this.record().docOf(path:Outer2::Path.#stringParser(that:{'@stringU
        'ResolvedPath
        })).annotations().top())
        )
      )
    Void unused1=error Outer2::Report::UnsupportedOperation.#stringParser(that:{'@stringU
    'AliasUnresolvable type, mdf unknown
    })
    void
    )
  catch return result (
    on Outer1::NestedClass result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool partial() this.record().#stringParser(that:{'@stringU
'Ph
}).#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
'true
}))
method 
Outer3::Bool resolvedPartial() this.record().#stringParser(that:{'@stringU
'ResolvedPh
}).#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
'true
}))
method 
Outer3::S suffix() (
  Void unused=('error on Normal
  
    Void unused0=(
      Outer0::typeKind() ::#equalequal(that ) cond=this.typeKind().#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
      'Normal
      }))
      (
        Void unused2=cond.#checkTrue()
        catch exception unused3 (
          on Void void
          )
        error Outer2::Report::UnsupportedOperation.#stringParser(that:{'@stringU
        'Normal types have no suffix
        })
        )
      )
    Void unused1=return this.record().#stringParser(that:{'@stringU
    'Ph
    })
    void
    )
  catch return result (
    on Outer3::S result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::Doc doc() this.record().docOf(path:Outer2::Path.#stringParser(that:{'@stringU
'Doc
}))}
Method:{<:Outer1::Member, Outer3::S::ToS
type method 
Outer0 #apply(Outer1::NestedClass^root, Outer2::Path^path, Outer3::N^memberN, Outer1::Record^record) 
mut method 
Outer1::NestedClass #root() 
read method 
Outer1::NestedClass root() 
mut method 
Outer2::Path #path() 
read method 
Outer2::Path path() 
mut method 
Outer3::N #memberN() 
read method 
Outer3::N memberN() 
mut method 
Outer1::Record #record() 
read method 
Outer1::Record record() 
method toS() Outer3::S.#stringParser(that:{'@stringU
'Method[
}).#begin().#add(that:this.allAsString()).#end().#stringParser(that:{'@stringU
']
})
method 
Outer2::Doc doc() this.record().docOf(path:Outer2::Path.#stringParser(that:{'@stringU
'MemberDoc
}))
method 
Outer3::S thisMdf() this.record().#stringParser(that:{'@stringU
'ThisMdf
})
method ' invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
Outer2::Path pathFromRoot() this.path()
method 
Outer2::Selector selector() Outer2::Selector.#stringParser(that:this.record().#stringParser(that:{'@stringU
'Key
}).binaryRepr())
method 
Outer3::S methodKind() this.record().#stringParser(that:{'@stringU
'MemberKind
})
method 
Outer3::S allAsString() this.record().#stringParser(that:{'@stringU
'AllAsString
})
method 
Outer1::Type returnType() (
  Void unused=(
    Void unused0=return this.root().mirror().introspectReportType(root:this.root(), path:this.path(), memberN:this.memberN(), typeN:Outer3::N.#numberParser(that:{'@stringU
    '0
    }))
    catch exception x (
      on Outer2::Report::MemberUnavailable error Outer2::Report::CodeNotReachable.#apply()
      
      on Void error Outer2::Report::CodeNotReachable.#apply()
      )
    void
    )
  catch return result (
    on Outer1::Type result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Types exceptions() error Outer2::Report::NotImplementedYet.#apply()
method 
Outer1::Types parameterTypes() (
  Void unused=(
    Outer1::Types::#begin() ::#end() result=Outer1::Types.#begin().#end()
    Outer3::N::#numberParser(that ) pN=Outer3::N.#numberParser(that:{'@stringU
    '1
    })
    mut Outer0::Varresult1__16_1 varresult=Outer0::Varresult1__16_1.#apply(inner:result)
    mut Outer0::VarpN__15_1 varpN=Outer0::VarpN__15_1.#apply(inner:pN)
    Void unused0=(
      Void unused2=loop (
        Void unused3=Outer3::Bool.true().#checkTrue()
        (' to be able to break
        
          Outer1::Type ti=this.root().record().that().introspectReportType(root:this.root(), path:this.pathFromRoot(), memberN:this.memberN(), typeN:varpN.#inner())
          Void unused4=varresult.inner(that:varresult.#inner().#add(that:ti))
          varpN.inner(that:varpN.#inner().#plus(that:Outer3::N.#numberParser(that:{'@stringU
          '1
          })))
          )
        )
      catch exception unused5 (
        on Void void
        )
      void
      )
    Void unused1=return varresult.#inner()
    catch exception err (
      on Outer2::Report::MemberUnavailable error err
      )
    void
    )
  catch return result0 (
    on Outer1::Types result0
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool isPrivate() (
  Void unused=(
    Void unused0=(
      Outer0::doc() ::annotations() ::vals() ann=this.doc().annotations().vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=ann.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=ann.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              (
                Outer0::doc() ::annotations() ::vals() ::#inner() ::toS() ::#equalequal(that ) cond=ann.#inner().toS().#equalequal(that:Outer3::S.#stringParser(that:{'@stringU
                'private
                }))
                (
                  Void unused10=cond.#checkTrue()
                  catch exception unused11 (
                    on Void void
                    )
                  return Outer3::Bool.true()
                  )
                )
              )
            catch exception unused12 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused13=ann.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer3::Bool (
            Void unused14=ann.#close()
            return propagated0
            )
          )
        ann.#close()
        )
      )
    Void unused1=return Outer3::Bool.false()
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
Varresult1__16_1:'@private
{
type method 
mut Outer0 #apply(Outer2::Types::#begin() ::#end() ^inner) 
mut method 
Void inner(Outer2::Types::#begin() ::#end() that) 
mut method 
Outer2::Types::#begin() ::#end() #inner() }
VarpN__15_1:'@private
{
type method 
mut Outer0 #apply(Outer4::N::#numberParser(that ) ^inner) 
mut method 
Void inner(Outer4::N::#numberParser(that ) that) 
mut method 
Outer4::N::#numberParser(that ) #inner() }}}
SafeOperators:{'@plugin
'L42.is/connected/withSafeOperators

type method 
Library compose(Library left, Library right) using Outer0 check compose(left:left, right:right) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.compose
})
type method 
Library renameClass(Library that, Outer1::Path src, Outer1::Path dest) using Outer0 check renameClass(that:that, src:src.binaryRepr(), dest:dest.binaryRepr()) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.renameClass
})
type method 
Library renameMethod(Library that, Outer1::Path path, Outer1::Selector src, Outer1::Selector dest) using Outer0 check renameMethod(that:that, path:path.binaryRepr(), src:src.binaryRepr(), dest:dest.binaryRepr()) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.renameMethod
})
type method 
Library redirect(Library that, Outer1::Path src, type Any dest) using Outer0 check redirect(that:that, src:src.binaryRepr(), dest:dest) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.redirect
})
type method 
Library removeImplementation(Library that, Outer1::Path path) using Outer0 check removeImplementation(that:that, path:path.binaryRepr()) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.removeImplementation(path)
})
type method 
Library removeImplementation(Library that, Outer1::Path path, Outer1::Selector selector) using Outer0 check removeImplementation(that:that, path:path.binaryRepr(), selector:selector.binaryRepr()) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.removeImplementation(path,selector)
})
type method 
Library addDocumentation(Library that, Outer1::Path path, Outer1::Doc doc) using Outer0 check addDocumentation(that:that, path:path.binaryRepr(), doc:doc.binaryRepr()) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.addDocumentation(path)
})
type method 
Library addDocumentation(Library that, Outer1::Path path, Outer1::Selector selector, Outer1::Doc doc) using Outer0 check addDocumentation(that:that, path:path.binaryRepr(), selector:selector.binaryRepr(), doc:doc.binaryRepr()) error Outer1::Report::PluginFailure.#stringParser(that:{'@stringU
'SafeOperators.addDocumentation(path,selector)
})}
Doc:{<:Outer2::S::ToS
type method '  toPutAs private
Outer0 _private(Library^_binaryRepr, Outer0::Annotations^annotations) 
mut method '  toPutAs private
Library #_binaryRepr() 
read method '  toPutAs private
Library _binaryRepr() 
mut method '  toPutAs private
Outer0::Annotations #annotations() 
read method '  toPutAs private
Outer0::Annotations annotations() 
type method 
Outer0 #apply(Library that) (
  Outer0::Annotations::#begin() ::#end() result=Outer0::Annotations.#begin().#end()
  Outer2::N::#numberParser(that ) aN=Outer2::N.#numberParser(that:{'@stringU
  '1
  })
  mut Outer0::Varresult0__10_1 varresult=Outer0::Varresult0__10_1.#apply(inner:result)
  mut Outer0::VaraN__9_1 varaN=Outer0::VaraN__9_1.#apply(inner:aN)
  Void unused=(
    Void unused0=loop (
      Void unused1=Outer2::Bool.true().#checkTrue()
      (' to be able to break
      
        Void unused2=varresult.inner(that:varresult.#inner().#add(that:Outer0::Annotation.#apply(_binaryRepr:that, text:Outer1::Introspection::Record.#apply(lib:that).that().introspectDocAsString(path:Outer1::Path.#stringParser(that:{'@stringU
        'Outer0
        }), annotationN:varaN.#inner()), index:varaN.#inner())))
        varaN.inner(that:varaN.#inner().#plus(that:Outer2::N.#numberParser(that:{'@stringU
        '1
        })))
        )
      )
    catch exception unused3 (
      on Void void
      )
    void
    )
  catch exception x (
    on Outer1::Report::MemberUnavailable error Outer1::Report::CodeNotReachable.#apply()
    )
  (
    Void unused4=varresult.inner(that:varresult.#inner().#end())
    Outer0._private(_binaryRepr:that, annotations:varresult.#inner())
    )
  )
type method 
Outer0 #stringParser(Library that) Outer0.#apply(that:that)
method 
Library binaryRepr() this._binaryRepr()
method toS() (
  Void unused=(
    Void unused0=return Outer1::Introspection::Record.#apply(lib:this._binaryRepr()).that().introspectDocAsString(path:Outer1::Path.#stringParser(that:{'@stringU
    'Outer0
    }))
    catch exception x (
      on Outer1::Report::MemberUnavailable error Outer1::Report::CodeNotReachable.#apply()
      )
    void
    )
  catch return result (
    on Outer0::toS() result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
Annotations:{' generic linked list class, elements of type Elem

type method 
Outer0 _new(Outer0::Cell^head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer3::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          catch return casted (
            on Outer0::CellEnd casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused2 (
          on Void return Outer3::Bool.false()
          )
        (
          Void unused3=return Outer3::Bool.true()
          void
          )
        )
      )
    void
    )
  catch return result (
    on Outer3::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer1::Annotation top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer3::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer3::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    catch exception unused1 (
      on Void error Outer2::Report::Misuse.#stringParser(that:{'@stringU
      'PopOnEmpyList
      })
      )
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres__11_1 varres=Outer0::Varres__11_1.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=e.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            catch exception unused10 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused11=e.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer0 (
            Void unused12=e.#close()
            return propagated0
            )
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer1::Annotation that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres0__12_1 varres=Outer0::Varres0__12_1.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=elem.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          catch exception unused8 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused9=elem.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused10=elem.#close()
          return propagated0
          )
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Varres__11_1:'@private
{
type method 
mut Outer0 #apply(Outer1^inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell^that, Outer4::Bool^terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer4::Bool #terminate() 
read method 
Outer4::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        catch return casted (
          on Outer1::CellEnd casted
          
          on Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void void
        )
      (
        Void unused4=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    this.that().#checkEnd()
    )
  )
read method 
Outer2::Annotation #inner() this.that().#inner()
read method 
Void #close() void}
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer4::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer2::Annotation #inner() 
method 
Void #checkEnd() }
Varres0__12_1:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() ^inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer2::Annotation^elem, Outer1::Cell^nextCell) 
mut method 
Outer2::Annotation #elem() 
read method 
Outer2::Annotation elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  catch return result (
    on Outer0::vals(terminate ) result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      catch return casted (
        on Outer0 casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void void
      )
    (
      Void unused1=error Outer3::Report::Misuse.#stringParser(that:{'@stringU
      'IterationNotComplete,\u000a  use valsCut() to allows incomplete iterations\u000a
      })
      void
      )
    )
  )}
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer3::Report::ObservedBug.#stringParser(that:{'@stringU
'InnerOnCellEnd
})
method #checkEnd() void}}
VaraN__9_1:'@private
{
type method 
mut Outer0 #apply(Outer3::N::#numberParser(that ) ^inner) 
mut method 
Void inner(Outer3::N::#numberParser(that ) that) 
mut method 
Outer3::N::#numberParser(that ) #inner() }
Varresult0__10_1:'@private
{
type method 
mut Outer0 #apply(Outer1::Annotations::#begin() ::#end() ^inner) 
mut method 
Void inner(Outer1::Annotations::#begin() ::#end() that) 
mut method 
Outer1::Annotations::#begin() ::#end() #inner() }
Annotation:{<:Outer3::S::ToS
type method 
Outer0 #apply(Library^_binaryRepr, Outer3::S^text, Outer3::N^index) 
mut method 
Library #_binaryRepr() 
read method 
Library _binaryRepr() 
mut method 
Outer3::S #text() 
read method 
Outer3::S text() 
mut method 
Outer3::N #index() 
read method 
Outer3::N index() 
method toS() this.text()
method 
type Any referredClass() (
  Void unused=(
    Void unused0=return Outer2::Introspection::Record.#apply(lib:this._binaryRepr()).that().introspectDocPath(path:Outer2::Path.#stringParser(that:{'@stringU
    'Outer0
    }), annotationN:this.index())
    catch exception x (
      on Outer2::Report::MemberUnavailable error Outer2::Report::CodeNotReachable.#apply()
      
      on Void error Outer2::Report::ObservedBug.#stringParser(that:{'@stringU
      'Plugin introspection bug
      })
      )
    void
    )
  catch return result (
    on type Any result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer3::Bool hasReferredClass() (
  Outer0::text() ::#bangequal(that ) ::#and(that ) res=this.text().#bangequal(that:Outer3::S.#stringParser(that:{'@stringU
  '
  })).#and(that:this.text().isASCIIUpperCase(that:Outer3::N.#numberParser(that:{'@stringU
  '0
  })))
  res
  )}}
Selector:{<:Outer2::S::ToS
type method '  toPutAs private
Outer0 _private(Library^_binaryRepr) 
mut method '  toPutAs private
Library #_binaryRepr() 
read method '  toPutAs private
Library _binaryRepr() 
type method 
Outer0 fromS(Outer2::S::ToS that) Outer0.#stringParser(that:that.toS().binaryRepr())
type method 
Outer0 #stringParser(Library that) (
  Void unused=using Outer1::SafeOperators check ifInvalidDo(path:that) error Outer0::InvalidFormat.#apply(that:Outer2::S.#stringParser(that:that))
  Outer0._private(_binaryRepr:that)
  )
method 
Library binaryRepr() this._binaryRepr()
method toS() Outer2::S.#stringParser(that:this._binaryRepr())
method 
Outer2::Bool #bangequal(Outer0 that) this.#equalequal(that:that).#bang()
method 
Outer2::Bool #equalequal(Outer0 that) (
  Void unused=(
    Void unused0=using Outer1::Alu check ifStringEqualDo(s1:this.binaryRepr(), s2:that.binaryRepr()) return Outer2::Bool.true()
    Void unused1=return Outer2::Bool.false()
    void
    )
  catch return result (
    on Outer2::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::S name() (
  Outer0::toS() str=this.toS()
  str.#apply(end:str.firstIndexOf(that:Outer2::S.#stringParser(that:{'@stringU
  '(
  })))
  )
method 
Outer1::Strings names() (
  Void unused=(
    Outer0::toS() str=this.toS()
    mut Outer0::Varstr__8_1 varstr=Outer0::Varstr__8_1.#apply(inner:str)
    Void unused0=varstr.inner(that:varstr.#inner().#apply(start:varstr.#inner().firstIndexOf(that:Outer2::S.#stringParser(that:{'@stringU
    '(
    })).#plus(that:Outer2::N.#numberParser(that:{'@stringU
    '1
    })), end:varstr.#inner().size().#less(that:Outer2::N.#numberParser(that:{'@stringU
    '1
    }))).#plusplus(that:Outer2::S.#stringParser(that:{'@stringU
    ',
    })))
    Outer1::Strings::#begin() ::#end() result=Outer1::Strings.#begin().#end()
    mut Outer0::Varresult__7_1 varresult=Outer0::Varresult__7_1.#apply(inner:result)
    Void unused1=(
      Void unused3=loop (
        Void unused4=varstr.#inner().#bangequal(that:Outer2::S.#stringParser(that:{'@stringU
        '
        })).#checkTrue()
        (
          Outer0::Varstr__8_1::#inner() ::firstIndexOf(that ) pos=varstr.#inner().firstIndexOf(that:Outer2::S.#stringParser(that:{'@stringU
          ',
          }))
          Void unused5=varresult.inner(that:varresult.#inner().#add(that:varstr.#inner().#apply(end:pos)))
          varstr.inner(that:varstr.#inner().#apply(start:pos.#plus(that:Outer2::N.#numberParser(that:{'@stringU
          '1
          }))))
          )
        )
      catch exception unused6 (
        on Void void
        )
      void
      )
    Void unused2=return varresult.#inner().#end()
    void
    )
  catch return result0 (
    on Outer1::Strings result0
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
Varresult__7_1:'@private
{
type method 
mut Outer0 #apply(Outer2::Strings::#begin() ::#end() ^inner) 
mut method 
Void inner(Outer2::Strings::#begin() ::#end() that) 
mut method 
Outer2::Strings::#begin() ::#end() #inner() }
Varstr__8_1:'@private
{
type method 
mut Outer0 #apply(Outer1::toS() ^inner) 
mut method 
Void inner(Outer1::toS() that) 
mut method 
Outer1::toS() #inner() }
InvalidFormat:{
type method 
Outer0 #apply(Outer3::S^that) 
mut method 
Outer3::S #that() 
read method 
Outer3::S that() }}
Strings:{' generic linked list class, elements of type Elem

type method 
Outer0 _new(Outer0::Cell^head) 
mut method 
Outer0::Cell #head() 
read method 
Outer0::Cell head() 
type method 
Outer0 #apply() Outer0._new(head:Outer0::CellEnd.#apply())
method 
Outer2::Bool isEmpty() (
  Void unused=(
    Void unused0=(
      Outer0::head() x=this.head()
      (
        Outer0::CellEnd x0=(
          Void unused1=return x
          catch return casted (
            on Outer0::CellEnd casted
            
            on Any exception void
            )
          error {'@stringU
          'CastT-Should be unreachable code
          }
          )
        catch exception unused2 (
          on Void return Outer2::Bool.false()
          )
        (
          Void unused3=return Outer2::Bool.true()
          void
          )
        )
      )
    void
    )
  catch return result (
    on Outer2::Bool result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer2::S top() this.head().#inner()
method 
mut Outer0::Iterator vals() this.head().vals(terminate:Outer2::Bool.true())
method 
mut Outer0::Iterator valsCut() this.head().vals(terminate:Outer2::Bool.false())
method 
Outer0 pop() (
  Void unused=(
    Void unused0=return Outer0._new(head:this.head().#next())
    catch exception unused1 (
      on Void error Outer1::Report::Misuse.#stringParser(that:{'@stringU
      'PopOnEmpyList
      })
      )
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method 
Outer0 #plusplus(Outer0 that) (
  Void unused=(
    Outer0 res=this
    mut Outer0::Varres__5_1 varres=Outer0::Varres__5_1.#apply(inner:res)
    Void unused0=(
      Outer0::vals() e=that.vals()
      (
        Void unused2=(
          Void unused3=(
            Void unused4=loop (
              Void unused5=e.#next()
              catch exception unused6 (
                on Void (
                  Void unused7=(
                    Void unused8=e.#checkEnd()
                    catch exception unused9 (
                      on Void void
                      )
                    void
                    )
                  exception void
                  )
                )
              varres.inner(that:varres.#inner().#add(that:e.#inner()))
              )
            catch exception unused10 (
              on Void void
              )
            void
            )
          catch exception propagated (
            on Any (
              Void unused11=e.#close()
              exception propagated
              )
            )
          void
          )
        catch return propagated0 (
          on Outer0 (
            Void unused12=e.#close()
            return propagated0
            )
          )
        e.#close()
        )
      )
    Void unused1=return varres.#inner()
    void
    )
  catch return result (
    on Outer0 result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
type method 
Outer0 #begin() Outer0.#apply()
method 
Outer0 #add(Outer2::S that) Outer0._new(head:Outer0::CellNext.#apply(elem:that, nextCell:this.head()))
method 
Outer0 #end() (
  Outer0::#apply() res=Outer0.#apply()
  mut Outer0::Varres0__6_1 varres=Outer0::Varres0__6_1.#apply(inner:res)
  Void unused=(
    Outer0::vals() elem=this.vals()
    (
      Void unused0=(
        Void unused1=(
          Void unused2=loop (
            Void unused3=elem.#next()
            catch exception unused4 (
              on Void (
                Void unused5=(
                  Void unused6=elem.#checkEnd()
                  catch exception unused7 (
                    on Void void
                    )
                  void
                  )
                exception void
                )
              )
            varres.inner(that:varres.#inner().#add(that:elem.#inner()))
            )
          catch exception unused8 (
            on Void void
            )
          void
          )
        catch exception propagated (
          on Any (
            Void unused9=elem.#close()
            exception propagated
            )
          )
        void
        )
      catch return propagated0 (
        on Any (
          Void unused10=elem.#close()
          return propagated0
          )
        )
      elem.#close()
      )
    )
  varres.#inner()
  )
Varres0__6_1:'@private
{
type method 
mut Outer0 #apply(Outer1::#apply() ^inner) 
mut method 
Void inner(Outer1::#apply() that) 
mut method 
Outer1::#apply() #inner() }
Iterator:{
type method 
mut Outer0 #apply(Outer1::Cell^that, Outer3::Bool^terminate) 
mut method 
Void that(Outer1::Cell that) 
mut method 
Outer1::Cell #that() 
read method 
Outer1::Cell that() 
mut method 
Outer3::Bool #terminate() 
read method 
Outer3::Bool terminate() 
mut method 
Void #next() exception Void (
  Void unused=(
    Outer0::that() ::#next() x=this.that().#next()
    Void unused0=(
      Outer1::CellEnd x0=(
        Void unused2=return x
        catch return casted (
          on Outer1::CellEnd casted
          
          on Any exception void
          )
        error {'@stringU
        'CastT-Should be unreachable code
        }
        )
      catch exception unused3 (
        on Void void
        )
      (
        Void unused4=exception void
        void
        )
      )
    Void unused1=return this.that(that:x)
    void
    )
  catch return result (
    on Void result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
read method 
Void #checkEnd() (
  Outer0::terminate() cond=this.terminate()
  (
    Void unused=cond.#checkTrue()
    catch exception unused0 (
      on Void void
      )
    this.that().#checkEnd()
    )
  )
read method 
Outer3::S #inner() this.that().#inner()
read method 
Void #close() void}
Varres__5_1:'@private
{
type method 
mut Outer0 #apply(Outer1^inner) 
mut method 
Void inner(Outer1 that) 
mut method 
Outer1 #inner() 
read method 
Outer1 inner() }
Cell:{interface 
method 
mut Outer1::Iterator vals(Outer3::Bool terminate) 
method 
Outer0 #next() exception Void 
method 
Outer3::S #inner() 
method 
Void #checkEnd() }
CellNext:{<:Outer1::Cell
type method 
Outer0 #apply(Outer3::S^elem, Outer1::Cell^nextCell) 
mut method 
Outer3::S #elem() 
read method 
Outer3::S elem() 
mut method 
Outer1::Cell #nextCell() 
read method 
Outer1::Cell nextCell() 
method vals(terminate ) (
  Void unused=(
    Outer0::#apply(elem nextCell ) startPoint=Outer0.#apply(elem:this.elem(), nextCell:this)
    Void unused0=return Outer1::Iterator.#apply(that:startPoint, terminate:terminate)
    void
    )
  catch return result (
    on Outer0::vals(terminate ) result
    )
  error {'@stringU
  'CurlyBlock-Should be unreachable code
  }
  )
method #next() this.nextCell()
method #inner() this.elem()
method #checkEnd() (
  Outer0::#checkEnd() ::this::nextCell() cell=this.nextCell()
  (
    Outer0 cell0=(
      Void unused=return cell
      catch return casted (
        on Outer0 casted
        
        on Any exception void
        )
      error {'@stringU
      'CastT-Should be unreachable code
      }
      )
    catch exception unused0 (
      on Void void
      )
    (
      Void unused1=error Outer2::Report::Misuse.#stringParser(that:{'@stringU
      'IterationNotComplete,\u000a  use valsCut() to allows incomplete iterations\u000a
      })
      void
      )
    )
  )}
CellEnd:{<:Outer1::Cell
type method 
Outer0 #apply() 
method vals(terminate ) Outer1::Iterator.#apply(that:this, terminate:terminate)
method #next() exception void
method #inner() error Outer2::Report::ObservedBug.#stringParser(that:{'@stringU
'InnerOnCellEnd
})
method #checkEnd() void}}}
Varres1__39_1:'@private
{
type method 
mut Outer0 #apply(Library^inner) 
mut method 
Void inner(Library that) 
mut method 
Library #inner() 
read method 
Library inner() }}