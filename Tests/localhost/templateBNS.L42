{reuse L42.is/miniBase
'NameList:Collections.list(Name)
'Generalize:{(NameList internals)
'  type method Outer0 #begin() Outer0(internals:NameList())
'  method Outer0 #add(Name that) Outer0(internals:this.internals.#add(that))
'  method Outer0 #end() this
  
Generalize:{()
  type method Outer0 #begin() Outer0()
  method Outer0 #end() this
  method Library <(Library that){
    var result=that
    result:=Adapt[
      Name"Bool" into:Name(Template::Bool);
      Name"N" into:Name(Template::N);
      Name"S" into:Name(Template::S);
      Name"Debug" into:Name(Template::Debug);
      ]<result
    result:=Adapt[Name"Outer0" into:Name"PrivateImpl"]<result
    result:=Adapt[Name"PrivateImpl::Exported" into:Name"Outer0"]<result
    result:=MakePrivate(Name"PrivateImpl" into:result)
    return result
    }  
  }

Template:{
  Bool:{<:S::ToS
    method Void #checkTrue() exception Void 
    type method Outer0 true()
    type method Outer0 false()
    method Outer0 &(Outer0 that)
    method Outer0 |(Outer0 that)
    method Outer0 !()
    }
  N:{<:S::ToS
    type method N #numberParser(Library that)       
    method N +(N that)       
    method N -(N that)       
    method N *(N that)       
    method N /(N that) 
    method Bool ==(N that)     
    method Bool <(N that)     
    method Bool <=(N that)    
    method Bool !=(N that)  
    method Bool >(N that)  
    method Bool >=(N that)
    method Library binaryRepr()
    }
  
  S:{<: ToS  
    type method Outer0 #stringParser(Library that)    
    ToS:{interface method S toS()}  
    method S ++ (ToS that)  
    method Bool != (S that)  
    method Bool == (S that)     
    method S (N that) 
    method N size ()   
    type method S doubleQuote()  
    method S replace(S that, S into)
    method Library binaryRepr()  
    }
    
  Debug:{
    type method Void (S that)
    }
  }
}