{reuse L42.is/miniBase
NameList:Collections.list(Name)
Generalize:{(NameList internals)
  type method Outer0 #begin() Outer0(internals:NameList())
  method Outer0 #add(Name that) Outer0(internals:this.internals.#add(that))
  method Outer0 #end() this
  type method Library <(Library that){
    i=Introspection(that)
    'NEED TODO:
    'Name == using     == for libraries using string
    'Introspection nested classes?
    ' Collections.contains
    NameList externals=
    'if Bool.true() (return that)
    boolA=IntrospectionPlugin.adapter(Template::Bool,name:S"Bool")
    nA=IntrospectionPlugin.adapter(Template::N,name:S"N")
    sA=IntrospectionPlugin.adapter(Template::S,name:S"S")
    toSA=IntrospectionPlugin.adapter(Template::S::ToS,name:S"S::ToS")
    debugA=IntrospectionPlugin.adapter(Template::Debug,name:S"Debug")
    var map=IntrospectionPlugin.sumLib(l1:boolA,l2:nA)
    map:=IntrospectionPlugin.sumLib(l1:map,l2:sA)
    map:=IntrospectionPlugin.sumLib(l1:map,l2:toSA)
    map:=IntrospectionPlugin.sumLib(l1:map,l2:debugA)

    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"ExitCode"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Alu"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"IntrospectionPlugin"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Collections"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Name"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Introspection"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Load"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Opt"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Use"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Adapt"))
    map:=IntrospectionPlugin.sumLib(l1:map,l2:IntrospectionPlugin.adapter(Any,name:S"Data"))
    
    return IntrospectionPlugin.adaptLib(l1:that,l2:map)
    }  
  }

Template:{
  Bool:{<:S::ToS
    method Void #checkTrue() exception Void 
    type method Outer0 true()
    type method Outer0 false()
    method Outer0 &(Outer0 that)
    method Outer0 |(Outer0 that)
    method Outer0 !()
    }
  N:{<:S::ToS
    type method N #numberParser(Library that)       
    method N +(N that)       
    method N -(N that)       
    method N *(N that)       
    method N /(N that) 
    method Bool ==(N that)     
    method Bool <(N that)     
    method Bool <=(N that)    
    method Bool !=(N that)  
    method Bool >(N that)  
    method Bool >=(N that)
    method Library binaryRepr()
    }
  
  S:{<: ToS  
    type method Outer0 #stringParser(Library that)    
    ToS:{interface method S toS()}  
    method S ++ (ToS that)  
    method Bool != (S that)  
    method Bool == (S that)     
    method S (N that) 
    method N size ()   
    type method S doubleQuote()  
    method S replace(S that, S into)
    method Library binaryRepr()  
    }
    
  Debug:{
    type method Void (S that)
    }
  }
}