 {/*@untrusted
*/
read method 
This0.Abstract.S id() 
class method 
This0.Abstract.S jsEscape(This0.Abstract.S that) (
  var This0.Abstract.S tmp=that
  Void unused25103=tmp := tmp.replace(that:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b854=This0.Abstract.S.#builder()
    Void unused25107=b854.#backslash()
    b854
    )), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b855=This0.Abstract.S.#builder()
    Void unused25108=b855.#backslash()
    Void unused25109=b855.#backslash()
    b855
    )))
  Void unused25104=tmp := tmp.replace(that:This0.Abstract.S.doubleQuote(), into:(
    This0.Abstract.S imm$opPar474=This0.Abstract.S.#from(builder:(
      mut This0.Abstract.S.SBuilder b856=This0.Abstract.S.#builder()
      Void unused25110=b856.#backslash()
      b856
      ))
    This0.Abstract.S imm$opPar475=This0.Abstract.S.doubleQuote()
    imm$opPar474.#plusplus#0left(right:imm$opPar475)
    ))
  Void unused25105=tmp := tmp.replace(that:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b857=This0.Abstract.S.#builder()
    Void unused25111=b857.#sQuote()
    b857
    )), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b858=This0.Abstract.S.#builder()
    Void unused25112=b858.#backslash()
    Void unused25113=b858.#sQuote()
    b858
    )))
  Void unused25106=tmp := (/*tmp:=tmp.replace(S"\u" into:S"\u005cu")
*/tmp.replace(that:This0.Abstract.S.nl(), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b859=This0.Abstract.S.#builder()
    Void unused25114=b859.#backslash()
    Void unused25115=b859.#n()
    b859
    ))))
  tmp
  )
mut method 
Void close() use This0.GuiPlugin check close(wName:this.id().#binaryRepr()) error void
mut method 
Void open(This0.Abstract.S title, This0.Abstract.S body, This0.Abstract.Size x, This0.Abstract.Size y) this.open(html:(
  This0.Abstract.S.Continue rcv1=(
    This0.Abstract.S rcv2=(
      This0.Abstract.S.Continue rcv3=(
        This0.Abstract.S rcv4=(
          This0.Abstract.S.Continue rcv5=(
            This0.Abstract.S rcv6=This0.Abstract.S.#from(builder:(
              mut This0.Abstract.S.SBuilder b860=This0.Abstract.S.#builder()
              b860
              ))
            rcv6.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b861=rcv6.#seqBuilder()
              Void unused25116=b861.#add(that:This0.htmlHeader())
              b861
              ))
            )
          rcv5.#from(builder:(
            mut This0.Abstract.S.SBuilder b862=rcv5.#builder()
            Void unused25117=b862.#left()
            Void unused25118=b862.#t()
            Void unused25119=b862.#i()
            Void unused25120=b862.#t()
            Void unused25121=b862.#l()
            Void unused25122=b862.#e()
            Void unused25123=b862.#right()
            b862
            ))
          )
        rcv4.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b863=rcv4.#seqBuilder()
          Void unused25124=b863.#add(that:title)
          b863
          ))
        )
      rcv3.#from(builder:(
        mut This0.Abstract.S.SBuilder b864=rcv3.#builder()
        Void unused25125=b864.#left()
        Void unused25126=b864.#divide()
        Void unused25127=b864.#t()
        Void unused25128=b864.#i()
        Void unused25129=b864.#t()
        Void unused25130=b864.#l()
        Void unused25131=b864.#e()
        Void unused25132=b864.#right()
        Void unused25133=b864.#left()
        Void unused25134=b864.#divide()
        Void unused25135=b864.#h()
        Void unused25136=b864.#e()
        Void unused25137=b864.#a()
        Void unused25138=b864.#d()
        Void unused25139=b864.#right()
        Void unused25140=b864.#left()
        Void unused25141=b864.#b()
        Void unused25142=b864.#o()
        Void unused25143=b864.#d()
        Void unused25144=b864.#y()
        Void unused25145=b864.#right()
        b864
        ))
      )
    rcv2.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b865=rcv2.#seqBuilder()
      Void unused25146=b865.#add(that:body)
      b865
      ))
    )
  rcv1.#from(builder:(
    mut This0.Abstract.S.SBuilder b866=rcv1.#builder()
    Void unused25147=b866.#left()
    Void unused25148=b866.#divide()
    Void unused25149=b866.#b()
    Void unused25150=b866.#o()
    Void unused25151=b866.#d()
    Void unused25152=b866.#y()
    Void unused25153=b866.#right()
    Void unused25154=b866.#left()
    Void unused25155=b866.#divide()
    Void unused25156=b866.#h()
    Void unused25157=b866.#t()
    Void unused25158=b866.#m()
    Void unused25159=b866.#l()
    Void unused25160=b866.#right()
    b866
    ))
  ), x:x, y:y)
class method 
This0.Abstract.S htmlHeader() (/*        '<script>
        '
        "[Debug.readFile(fileName:Debug.localToAbsolute(fileName:S"examples/resources/js.js"))]"
        '
        '</script>
        "
*/This0.Abstract.S.#from(builder:(
  mut This0.Abstract.S.SBuilder b867=This0.Abstract.S.#builder()
  Void unused25161=b867.#left()
  Void unused25162=b867.#bang()
  Void unused25163=b867.#D()
  Void unused25164=b867.#O()
  Void unused25165=b867.#C()
  Void unused25166=b867.#T()
  Void unused25167=b867.#Y()
  Void unused25168=b867.#P()
  Void unused25169=b867.#E()
  Void unused25170=b867.#space()
  Void unused25171=b867.#h()
  Void unused25172=b867.#t()
  Void unused25173=b867.#m()
  Void unused25174=b867.#l()
  Void unused25175=b867.#right()
  Void unused25176=b867.#left()
  Void unused25177=b867.#h()
  Void unused25178=b867.#t()
  Void unused25179=b867.#m()
  Void unused25180=b867.#l()
  Void unused25181=b867.#right()
  Void unused25182=b867.#left()
  Void unused25183=b867.#h()
  Void unused25184=b867.#e()
  Void unused25185=b867.#a()
  Void unused25186=b867.#d()
  Void unused25187=b867.#right()
  Void unused25188=b867.#left()
  Void unused25189=b867.#m()
  Void unused25190=b867.#e()
  Void unused25191=b867.#t()
  Void unused25192=b867.#a()
  Void unused25193=b867.#space()
  Void unused25194=b867.#h()
  Void unused25195=b867.#t()
  Void unused25196=b867.#t()
  Void unused25197=b867.#p()
  Void unused25198=b867.#less()
  Void unused25199=b867.#e()
  Void unused25200=b867.#q()
  Void unused25201=b867.#u()
  Void unused25202=b867.#i()
  Void unused25203=b867.#v()
  Void unused25204=b867.#equal()
  Void unused25205=b867.#dQuote()
  Void unused25206=b867.#c()
  Void unused25207=b867.#o()
  Void unused25208=b867.#n()
  Void unused25209=b867.#t()
  Void unused25210=b867.#e()
  Void unused25211=b867.#n()
  Void unused25212=b867.#t()
  Void unused25213=b867.#less()
  Void unused25214=b867.#c()
  Void unused25215=b867.#l()
  Void unused25216=b867.#a()
  Void unused25217=b867.#s()
  Void unused25218=b867.#s()
  Void unused25219=b867.#dQuote()
  Void unused25220=b867.#space()
  Void unused25221=b867.#c()
  Void unused25222=b867.#o()
  Void unused25223=b867.#n()
  Void unused25224=b867.#t()
  Void unused25225=b867.#e()
  Void unused25226=b867.#n()
  Void unused25227=b867.#t()
  Void unused25228=b867.#equal()
  Void unused25229=b867.#dQuote()
  Void unused25230=b867.#t()
  Void unused25231=b867.#e()
  Void unused25232=b867.#x()
  Void unused25233=b867.#t()
  Void unused25234=b867.#divide()
  Void unused25235=b867.#h()
  Void unused25236=b867.#t()
  Void unused25237=b867.#m()
  Void unused25238=b867.#l()
  Void unused25239=b867.#semicolon()
  Void unused25240=b867.#space()
  Void unused25241=b867.#c()
  Void unused25242=b867.#h()
  Void unused25243=b867.#a()
  Void unused25244=b867.#r()
  Void unused25245=b867.#s()
  Void unused25246=b867.#e()
  Void unused25247=b867.#t()
  Void unused25248=b867.#equal()
  Void unused25249=b867.#U()
  Void unused25250=b867.#T()
  Void unused25251=b867.#F()
  Void unused25252=b867.#less()
  Void unused25253=b867.#8()
  Void unused25254=b867.#dQuote()
  Void unused25255=b867.#right()
  Void unused25256=b867.#newline()
  b867
  )))
mut method 
Void open(This0.Abstract.S html, This0.Abstract.Size x, This0.Abstract.Size y) (/*Debug(html)
*/use This0.GuiPlugin check open(wName:this.id().#binaryRepr(), html:html.#binaryRepr(), x:x.#binaryRepr(), y:y.#binaryRepr()) error void)
mut method 
Void set(This0.Abstract.S that, This0.Abstract.S id) (
  Void unused25257=(/*$('#Alpha').replaceWith('htmlstring')
*/
    This0.Abstract.S qid=(
      This0.Abstract.S.Continue rcv7=(
        This0.Abstract.S rcv8=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b868=This0.Abstract.S.#builder()
          Void unused25259=b868.#sQuote()
          b868
          ))
        rcv8.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b869=rcv8.#seqBuilder()
          Void unused25260=b869.#add(that:This0.jsEscape(that:id))
          b869
          ))
        )
      rcv7.#from(builder:(
        mut This0.Abstract.S.SBuilder b870=rcv7.#builder()
        Void unused25261=b870.#sQuote()
        b870
        ))
      )
    This0.Abstract.S qText=(
      This0.Abstract.S.Continue rcv9=(
        This0.Abstract.S rcv10=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b871=This0.Abstract.S.#builder()
          Void unused25262=b871.#sQuote()
          b871
          ))
        rcv10.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b872=rcv10.#seqBuilder()
          Void unused25263=b872.#add(that:This0.jsEscape(that:that))
          b872
          ))
        )
      rcv9.#from(builder:(
        mut This0.Abstract.S.SBuilder b873=rcv9.#builder()
        Void unused25264=b873.#sQuote()
        b873
        ))
      )
    This0.Abstract.S cmd=(
      This0.Abstract.S.Continue rcv11=(
        This0.Abstract.S rcv12=(
          This0.Abstract.S.Continue rcv13=(
            This0.Abstract.S rcv14=This0.Abstract.S.#from(builder:(
              mut This0.Abstract.S.SBuilder b874=This0.Abstract.S.#builder()
              Void unused25265=b874.#v()
              Void unused25266=b874.#a()
              Void unused25267=b874.#r()
              Void unused25268=b874.#space()
              Void unused25269=b874.#o()
              Void unused25270=b874.#l()
              Void unused25271=b874.#d()
              Void unused25272=b874.#E()
              Void unused25273=b874.#l()
              Void unused25274=b874.#e()
              Void unused25275=b874.#m()
              Void unused25276=b874.#space()
              Void unused25277=b874.#equal()
              Void unused25278=b874.#space()
              Void unused25279=b874.#d()
              Void unused25280=b874.#o()
              Void unused25281=b874.#c()
              Void unused25282=b874.#u()
              Void unused25283=b874.#m()
              Void unused25284=b874.#e()
              Void unused25285=b874.#n()
              Void unused25286=b874.#t()
              Void unused25287=b874.#dot()
              Void unused25288=b874.#g()
              Void unused25289=b874.#e()
              Void unused25290=b874.#t()
              Void unused25291=b874.#E()
              Void unused25292=b874.#l()
              Void unused25293=b874.#e()
              Void unused25294=b874.#m()
              Void unused25295=b874.#e()
              Void unused25296=b874.#n()
              Void unused25297=b874.#t()
              Void unused25298=b874.#B()
              Void unused25299=b874.#y()
              Void unused25300=b874.#I()
              Void unused25301=b874.#d()
              Void unused25302=b874.#oRound()
              Void unused25303=b874.#newline()
              b874
              ))
            rcv14.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b875=rcv14.#seqBuilder()
              Void unused25304=b875.#add(that:qid)
              b875
              ))
            )
          rcv13.#from(builder:(
            mut This0.Abstract.S.SBuilder b876=rcv13.#builder()
            Void unused25305=b876.#cRound()
            Void unused25306=b876.#semicolon()
            Void unused25307=b876.#newline()
            Void unused25308=b876.#o()
            Void unused25309=b876.#l()
            Void unused25310=b876.#d()
            Void unused25311=b876.#E()
            Void unused25312=b876.#l()
            Void unused25313=b876.#e()
            Void unused25314=b876.#m()
            Void unused25315=b876.#dot()
            Void unused25316=b876.#i()
            Void unused25317=b876.#n()
            Void unused25318=b876.#n()
            Void unused25319=b876.#e()
            Void unused25320=b876.#r()
            Void unused25321=b876.#H()
            Void unused25322=b876.#T()
            Void unused25323=b876.#M()
            Void unused25324=b876.#L()
            Void unused25325=b876.#space()
            Void unused25326=b876.#equal()
            Void unused25327=b876.#newline()
            b876
            ))
          )
        rcv12.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b877=rcv12.#seqBuilder()
          Void unused25328=b877.#add(that:qText)
          b877
          ))
        )
      rcv11.#from(builder:(
        mut This0.Abstract.S.SBuilder b878=rcv11.#builder()
        Void unused25329=b878.#semicolon()
        Void unused25330=b878.#newline()
        Void unused25331=b878.#v()
        Void unused25332=b878.#a()
        Void unused25333=b878.#r()
        Void unused25334=b878.#space()
        Void unused25335=b878.#p()
        Void unused25336=b878.#a()
        Void unused25337=b878.#r()
        Void unused25338=b878.#e()
        Void unused25339=b878.#n()
        Void unused25340=b878.#t()
        Void unused25341=b878.#E()
        Void unused25342=b878.#l()
        Void unused25343=b878.#e()
        Void unused25344=b878.#m()
        Void unused25345=b878.#space()
        Void unused25346=b878.#equal()
        Void unused25347=b878.#space()
        Void unused25348=b878.#o()
        Void unused25349=b878.#l()
        Void unused25350=b878.#d()
        Void unused25351=b878.#E()
        Void unused25352=b878.#l()
        Void unused25353=b878.#e()
        Void unused25354=b878.#m()
        Void unused25355=b878.#dot()
        Void unused25356=b878.#p()
        Void unused25357=b878.#a()
        Void unused25358=b878.#r()
        Void unused25359=b878.#e()
        Void unused25360=b878.#n()
        Void unused25361=b878.#t()
        Void unused25362=b878.#N()
        Void unused25363=b878.#o()
        Void unused25364=b878.#d()
        Void unused25365=b878.#e()
        Void unused25366=b878.#semicolon()
        Void unused25367=b878.#newline()
        Void unused25368=b878.#v()
        Void unused25369=b878.#a()
        Void unused25370=b878.#r()
        Void unused25371=b878.#space()
        Void unused25372=b878.#i()
        Void unused25373=b878.#n()
        Void unused25374=b878.#n()
        Void unused25375=b878.#e()
        Void unused25376=b878.#r()
        Void unused25377=b878.#E()
        Void unused25378=b878.#l()
        Void unused25379=b878.#e()
        Void unused25380=b878.#m()
        Void unused25381=b878.#semicolon()
        Void unused25382=b878.#newline()
        Void unused25383=b878.#w()
        Void unused25384=b878.#h()
        Void unused25385=b878.#i()
        Void unused25386=b878.#l()
        Void unused25387=b878.#e()
        Void unused25388=b878.#space()
        Void unused25389=b878.#oRound()
        Void unused25390=b878.#i()
        Void unused25391=b878.#n()
        Void unused25392=b878.#n()
        Void unused25393=b878.#e()
        Void unused25394=b878.#r()
        Void unused25395=b878.#E()
        Void unused25396=b878.#l()
        Void unused25397=b878.#e()
        Void unused25398=b878.#m()
        Void unused25399=b878.#space()
        Void unused25400=b878.#equal()
        Void unused25401=b878.#space()
        Void unused25402=b878.#o()
        Void unused25403=b878.#l()
        Void unused25404=b878.#d()
        Void unused25405=b878.#E()
        Void unused25406=b878.#l()
        Void unused25407=b878.#e()
        Void unused25408=b878.#m()
        Void unused25409=b878.#dot()
        Void unused25410=b878.#f()
        Void unused25411=b878.#i()
        Void unused25412=b878.#r()
        Void unused25413=b878.#s()
        Void unused25414=b878.#t()
        Void unused25415=b878.#C()
        Void unused25416=b878.#h()
        Void unused25417=b878.#i()
        Void unused25418=b878.#l()
        Void unused25419=b878.#d()
        Void unused25420=b878.#cRound()
        Void unused25421=b878.#oCurly()
        Void unused25422=b878.#newline()
        Void unused25423=b878.#space()
        Void unused25424=b878.#space()
        Void unused25425=b878.#p()
        Void unused25426=b878.#a()
        Void unused25427=b878.#r()
        Void unused25428=b878.#e()
        Void unused25429=b878.#n()
        Void unused25430=b878.#t()
        Void unused25431=b878.#E()
        Void unused25432=b878.#l()
        Void unused25433=b878.#e()
        Void unused25434=b878.#m()
        Void unused25435=b878.#dot()
        Void unused25436=b878.#i()
        Void unused25437=b878.#n()
        Void unused25438=b878.#s()
        Void unused25439=b878.#e()
        Void unused25440=b878.#r()
        Void unused25441=b878.#t()
        Void unused25442=b878.#B()
        Void unused25443=b878.#e()
        Void unused25444=b878.#f()
        Void unused25445=b878.#o()
        Void unused25446=b878.#r()
        Void unused25447=b878.#e()
        Void unused25448=b878.#oRound()
        Void unused25449=b878.#i()
        Void unused25450=b878.#n()
        Void unused25451=b878.#n()
        Void unused25452=b878.#e()
        Void unused25453=b878.#r()
        Void unused25454=b878.#E()
        Void unused25455=b878.#l()
        Void unused25456=b878.#e()
        Void unused25457=b878.#m()
        Void unused25458=b878.#comma()
        Void unused25459=b878.#space()
        Void unused25460=b878.#o()
        Void unused25461=b878.#l()
        Void unused25462=b878.#d()
        Void unused25463=b878.#E()
        Void unused25464=b878.#l()
        Void unused25465=b878.#e()
        Void unused25466=b878.#m()
        Void unused25467=b878.#cRound()
        Void unused25468=b878.#semicolon()
        Void unused25469=b878.#newline()
        Void unused25470=b878.#space()
        Void unused25471=b878.#space()
        Void unused25472=b878.#cCurly()
        Void unused25473=b878.#newline()
        Void unused25474=b878.#p()
        Void unused25475=b878.#a()
        Void unused25476=b878.#r()
        Void unused25477=b878.#e()
        Void unused25478=b878.#n()
        Void unused25479=b878.#t()
        Void unused25480=b878.#E()
        Void unused25481=b878.#l()
        Void unused25482=b878.#e()
        Void unused25483=b878.#m()
        Void unused25484=b878.#dot()
        Void unused25485=b878.#r()
        Void unused25486=b878.#e()
        Void unused25487=b878.#m()
        Void unused25488=b878.#o()
        Void unused25489=b878.#v()
        Void unused25490=b878.#e()
        Void unused25491=b878.#C()
        Void unused25492=b878.#h()
        Void unused25493=b878.#i()
        Void unused25494=b878.#l()
        Void unused25495=b878.#d()
        Void unused25496=b878.#oRound()
        Void unused25497=b878.#o()
        Void unused25498=b878.#l()
        Void unused25499=b878.#d()
        Void unused25500=b878.#E()
        Void unused25501=b878.#l()
        Void unused25502=b878.#e()
        Void unused25503=b878.#m()
        Void unused25504=b878.#cRound()
        Void unused25505=b878.#semicolon()
        Void unused25506=b878.#newline()
        b878
        ))
      )
    This0.Abstract.S x=(/*Debug(cmd)
if x!=S"" (Debug(x))
*/this.executeJs(that:cmd))
    Void unused25258=return void
    void
    )
  
  catch return Void result161 result161
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void add(This0.Abstract.S that, This0.Abstract.S id) (
  Void unused25507=(
    This0.Abstract.S qid=(
      This0.Abstract.S.Continue rcv15=(
        This0.Abstract.S rcv16=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b879=This0.Abstract.S.#builder()
          Void unused25509=b879.#sQuote()
          b879
          ))
        rcv16.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b880=rcv16.#seqBuilder()
          Void unused25510=b880.#add(that:This0.jsEscape(that:id))
          b880
          ))
        )
      rcv15.#from(builder:(
        mut This0.Abstract.S.SBuilder b881=rcv15.#builder()
        Void unused25511=b881.#sQuote()
        b881
        ))
      )
    This0.Abstract.S qText=(
      This0.Abstract.S.Continue rcv17=(
        This0.Abstract.S rcv18=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b882=This0.Abstract.S.#builder()
          Void unused25512=b882.#sQuote()
          b882
          ))
        rcv18.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b883=rcv18.#seqBuilder()
          Void unused25513=b883.#add(that:This0.jsEscape(that:that))
          b883
          ))
        )
      rcv17.#from(builder:(
        mut This0.Abstract.S.SBuilder b884=rcv17.#builder()
        Void unused25514=b884.#sQuote()
        b884
        ))
      )
    This0.Abstract.S cmd=(
      This0.Abstract.S.Continue rcv19=(
        This0.Abstract.S rcv20=(
          This0.Abstract.S.Continue rcv21=(
            This0.Abstract.S rcv22=This0.Abstract.S.#from(builder:(
              mut This0.Abstract.S.SBuilder b885=This0.Abstract.S.#builder()
              Void unused25515=b885.#v()
              Void unused25516=b885.#a()
              Void unused25517=b885.#r()
              Void unused25518=b885.#space()
              Void unused25519=b885.#t()
              Void unused25520=b885.#e()
              Void unused25521=b885.#m()
              Void unused25522=b885.#p()
              Void unused25523=b885.#l()
              Void unused25524=b885.#a()
              Void unused25525=b885.#t()
              Void unused25526=b885.#e()
              Void unused25527=b885.#space()
              Void unused25528=b885.#equal()
              Void unused25529=b885.#space()
              Void unused25530=b885.#d()
              Void unused25531=b885.#o()
              Void unused25532=b885.#c()
              Void unused25533=b885.#u()
              Void unused25534=b885.#m()
              Void unused25535=b885.#e()
              Void unused25536=b885.#n()
              Void unused25537=b885.#t()
              Void unused25538=b885.#dot()
              Void unused25539=b885.#c()
              Void unused25540=b885.#r()
              Void unused25541=b885.#e()
              Void unused25542=b885.#a()
              Void unused25543=b885.#t()
              Void unused25544=b885.#e()
              Void unused25545=b885.#E()
              Void unused25546=b885.#l()
              Void unused25547=b885.#e()
              Void unused25548=b885.#m()
              Void unused25549=b885.#e()
              Void unused25550=b885.#n()
              Void unused25551=b885.#t()
              Void unused25552=b885.#oRound()
              Void unused25553=b885.#sQuote()
              Void unused25554=b885.#d()
              Void unused25555=b885.#i()
              Void unused25556=b885.#v()
              Void unused25557=b885.#sQuote()
              Void unused25558=b885.#cRound()
              Void unused25559=b885.#semicolon()
              Void unused25560=b885.#newline()
              Void unused25561=b885.#t()
              Void unused25562=b885.#e()
              Void unused25563=b885.#m()
              Void unused25564=b885.#p()
              Void unused25565=b885.#l()
              Void unused25566=b885.#a()
              Void unused25567=b885.#t()
              Void unused25568=b885.#e()
              Void unused25569=b885.#dot()
              Void unused25570=b885.#i()
              Void unused25571=b885.#n()
              Void unused25572=b885.#n()
              Void unused25573=b885.#e()
              Void unused25574=b885.#r()
              Void unused25575=b885.#H()
              Void unused25576=b885.#T()
              Void unused25577=b885.#M()
              Void unused25578=b885.#L()
              Void unused25579=b885.#space()
              Void unused25580=b885.#equal()
              Void unused25581=b885.#newline()
              b885
              ))
            rcv22.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b886=rcv22.#seqBuilder()
              Void unused25582=b886.#add(that:qText)
              b886
              ))
            )
          rcv21.#from(builder:(
            mut This0.Abstract.S.SBuilder b887=rcv21.#builder()
            Void unused25583=b887.#semicolon()
            Void unused25584=b887.#newline()
            Void unused25585=b887.#d()
            Void unused25586=b887.#o()
            Void unused25587=b887.#c()
            Void unused25588=b887.#u()
            Void unused25589=b887.#m()
            Void unused25590=b887.#e()
            Void unused25591=b887.#n()
            Void unused25592=b887.#t()
            Void unused25593=b887.#dot()
            Void unused25594=b887.#g()
            Void unused25595=b887.#e()
            Void unused25596=b887.#t()
            Void unused25597=b887.#E()
            Void unused25598=b887.#l()
            Void unused25599=b887.#e()
            Void unused25600=b887.#m()
            Void unused25601=b887.#e()
            Void unused25602=b887.#n()
            Void unused25603=b887.#t()
            Void unused25604=b887.#B()
            Void unused25605=b887.#y()
            Void unused25606=b887.#I()
            Void unused25607=b887.#d()
            Void unused25608=b887.#oRound()
            Void unused25609=b887.#newline()
            b887
            ))
          )
        rcv20.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b888=rcv20.#seqBuilder()
          Void unused25610=b888.#add(that:qid)
          b888
          ))
        )
      rcv19.#from(builder:(
        mut This0.Abstract.S.SBuilder b889=rcv19.#builder()
        Void unused25611=b889.#cRound()
        Void unused25612=b889.#dot()
        Void unused25613=b889.#a()
        Void unused25614=b889.#p()
        Void unused25615=b889.#p()
        Void unused25616=b889.#e()
        Void unused25617=b889.#n()
        Void unused25618=b889.#d()
        Void unused25619=b889.#C()
        Void unused25620=b889.#h()
        Void unused25621=b889.#i()
        Void unused25622=b889.#l()
        Void unused25623=b889.#d()
        Void unused25624=b889.#oRound()
        Void unused25625=b889.#t()
        Void unused25626=b889.#e()
        Void unused25627=b889.#m()
        Void unused25628=b889.#p()
        Void unused25629=b889.#l()
        Void unused25630=b889.#a()
        Void unused25631=b889.#t()
        Void unused25632=b889.#e()
        Void unused25633=b889.#dot()
        Void unused25634=b889.#f()
        Void unused25635=b889.#i()
        Void unused25636=b889.#r()
        Void unused25637=b889.#s()
        Void unused25638=b889.#t()
        Void unused25639=b889.#C()
        Void unused25640=b889.#h()
        Void unused25641=b889.#i()
        Void unused25642=b889.#l()
        Void unused25643=b889.#d()
        Void unused25644=b889.#cRound()
        Void unused25645=b889.#semicolon()
        Void unused25646=b889.#newline()
        b889
        ))
      )
    This0.Abstract.S x=(/*Debug(cmd)
if x!=S"" (Debug(x))
*/this.executeJs(that:cmd))
    Void unused25508=return void
    void
    )
  
  catch return Void result162 result162
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
This0.Abstract.S executeJs(This0.Abstract.S that) This0.Abstract.S.#from(binaryRepr:use This0.GuiPlugin check executeJs(wName:this.id().#binaryRepr(), command:that.#binaryRepr()) error void)
mut method 
mut This0.Iterator events() This0.Iterator.#$(id:this.id(), current:This0.Abstract.S.#from(builder:(
  mut This0.Abstract.S.SBuilder b890=This0.Abstract.S.#builder()
  b890
  )))
class method 
mut This0 #$(fwd This0.Abstract.S id) 
mut method 
Void display(This0.Abstract.S title, This0.Abstract.Size x, This0.Abstract.Size y, mut This0.Widget body) this.display(title:title, x:x, y:y, body:body, events:This0.Abstract.Strings.#from(seqBuilder:(
  mut This0.Abstract.Strings b895=This0.Abstract.Strings.#seqBuilder()
  b895
  )))
mut method 
Void display(This0.Abstract.S title, This0.Abstract.Size x, This0.Abstract.Size y, mut This0.Widget body, This0.Abstract.Strings events) (
  Void unused27109=this.open(title:title, body:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b896=This0.Abstract.S.#builder()
    Void unused27112=b896.#left()
    Void unused27113=b896.#d()
    Void unused27114=b896.#i()
    Void unused27115=b896.#v()
    Void unused27116=b896.#space()
    Void unused27117=b896.#i()
    Void unused27118=b896.#d()
    Void unused27119=b896.#equal()
    Void unused27120=b896.#sQuote()
    Void unused27121=b896.#T()
    Void unused27122=b896.#o()
    Void unused27123=b896.#p()
    Void unused27124=b896.#sQuote()
    Void unused27125=b896.#right()
    Void unused27126=b896.#left()
    Void unused27127=b896.#divide()
    Void unused27128=b896.#d()
    Void unused27129=b896.#i()
    Void unused27130=b896.#v()
    Void unused27131=b896.#right()
    b896
    )), x:x, y:y)
  Void unused27110=this.draw(that:body)
  Void unused27111=(
    Void unused27132=(
      Void unused27133=(
        lent This0.Abstract.Strings.IteratorVal event=events.vals()
        (
          Void unused27136=loop (
            Void unused27137=event.#next()
            
            catch exception Void catched47429 (
              Void unused27138=(
                Void unused27139=event.#checkEnd()
                
                catch exception Void catched47430 void
                
                void
                )
              exception void
              )
            
            (
              Void unused27140=(
                This0.Abstract.Bool cond130=(
                  This0.Abstract.S read$opPar120=event.#inner()
                  This0.Abstract.S read$opPar121=This0.Abstract.S.#from(builder:(
                    mut This0.Abstract.S.SBuilder b897=This0.Abstract.S.#builder()
                    Void unused27141=b897.#E()
                    Void unused27142=b897.#X()
                    Void unused27143=b897.#I()
                    Void unused27144=b897.#T()
                    b897
                    ))
                  read$opPar120.#equalequal#0left(right:read$opPar121)
                  )
                (
                  Void unused27145=cond130.#checkTrue()
                  
                  catch exception Void catched47434 void
                  
                  (return void)
                  )
                )
              This0.Abstract.Bool unused=body.dispatch(that:This0.Event.#apply(that:event.#inner()))
              this.draw(that:body)
              )
            )
          
          catch exception Void catched47436 void
          
          void
          )
        )
      Void unused27134=(
        mut This0.Iterator event=this.events()
        (
          Void unused27146=loop (
            Void unused27147=event.#next()
            
            catch exception Void catched47438 (
              Void unused27148=(
                Void unused27149=event.#checkEnd()
                
                catch exception Void catched47439 void
                
                void
                )
              exception void
              )
            
            (
              Void unused27150=(
                This0.Abstract.Bool cond131=(
                  This0.Abstract.S read$opPar122=event.#inner()
                  This0.Abstract.S read$opPar123=This0.Abstract.S.#from(builder:(
                    mut This0.Abstract.S.SBuilder b898=This0.Abstract.S.#builder()
                    Void unused27151=b898.#E()
                    Void unused27152=b898.#X()
                    Void unused27153=b898.#I()
                    Void unused27154=b898.#T()
                    b898
                    ))
                  read$opPar122.#equalequal#0left(right:read$opPar123)
                  )
                (
                  Void unused27155=cond131.#checkTrue()
                  
                  catch exception Void catched47443 void
                  
                  (return void)
                  )
                )
              This0.Abstract.Bool unused=body.dispatch(that:This0.Event.#apply(that:event.#inner()))
              this.draw(that:body)
              )
            )
          
          catch exception Void catched47445 void
          
          void
          )
        )
      Void unused27135=return void
      void
      )
    
    catch return Void result169 result169
    
    error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
    )
  this.close()
  )
read method 
This0.Abstract.S format(read This0.Widget that) (
  This0.Abstract.S.Continue rcv1=(
    This0.Abstract.S rcv2=(
      This0.Abstract.S.Continue rcv3=(
        This0.Abstract.S rcv4=(
          This0.Abstract.S.Continue rcv5=(
            This0.Abstract.S rcv6=(
              This0.Abstract.S.Continue rcv7=(
                This0.Abstract.S rcv8=(
                  This0.Abstract.S.Continue rcv9=(
                    This0.Abstract.S rcv10=(
                      This0.Abstract.S.Continue rcv11=(
                        This0.Abstract.S rcv12=(
                          This0.Abstract.S.Continue rcv13=(
                            This0.Abstract.S rcv14=(
                              This0.Abstract.S.Continue rcv15=(
                                This0.Abstract.S rcv16=(
                                  This0.Abstract.S.Continue rcv17=(
                                    This0.Abstract.S rcv18=(
                                      This0.Abstract.S.Continue rcv19=(
                                        This0.Abstract.S rcv20=(
                                          This0.Abstract.S.Continue rcv21=(
                                            This0.Abstract.S rcv22=(
                                              This0.Abstract.S.Continue rcv23=(
                                                This0.Abstract.S rcv24=(
                                                  This0.Abstract.S.Continue rcv25=(
                                                    This0.Abstract.S rcv26=(
                                                      This0.Abstract.S.Continue rcv27=(
                                                        This0.Abstract.S rcv28=(
                                                          This0.Abstract.S.Continue rcv29=(
                                                            This0.Abstract.S rcv30=(
                                                              This0.Abstract.S.Continue rcv31=(
                                                                This0.Abstract.S rcv32=(
                                                                  This0.Abstract.S.Continue rcv33=(
                                                                    This0.Abstract.S rcv34=This0.Abstract.S.#from(builder:(
                                                                      mut This0.Abstract.S.SBuilder b899=This0.Abstract.S.#builder()
                                                                      Void unused27156=b899.#left()
                                                                      Void unused27157=b899.#d()
                                                                      Void unused27158=b899.#i()
                                                                      Void unused27159=b899.#v()
                                                                      Void unused27160=b899.#space()
                                                                      Void unused27161=b899.#i()
                                                                      Void unused27162=b899.#d()
                                                                      Void unused27163=b899.#equal()
                                                                      Void unused27164=b899.#sQuote()
                                                                      b899
                                                                      ))
                                                                    rcv34.#from(seqBuilder:(
                                                                      mut This0.Abstract.S.SConcat b900=rcv34.#seqBuilder()
                                                                      Void unused27165=b900.#add(that:that.id())
                                                                      b900
                                                                      ))
                                                                    )
                                                                  rcv33.#from(builder:(
                                                                    mut This0.Abstract.S.SBuilder b901=rcv33.#builder()
                                                                    Void unused27166=b901.#sQuote()
                                                                    Void unused27167=b901.#space()
                                                                    Void unused27168=b901.#o()
                                                                    Void unused27169=b901.#n()
                                                                    Void unused27170=b901.#c()
                                                                    Void unused27171=b901.#l()
                                                                    Void unused27172=b901.#i()
                                                                    Void unused27173=b901.#c()
                                                                    Void unused27174=b901.#k()
                                                                    Void unused27175=b901.#equal()
                                                                    b901
                                                                    ))
                                                                  )
                                                                rcv32.#from(seqBuilder:(
                                                                  mut This0.Abstract.S.SConcat b902=rcv32.#seqBuilder()
                                                                  Void unused27176=b902.#add(that:This0.Abstract.S.doubleQuote())
                                                                  b902
                                                                  ))
                                                                )
                                                              rcv31.#from(builder:(
                                                                mut This0.Abstract.S.SBuilder b903=rcv31.#builder()
                                                                Void unused27177=b903.#e()
                                                                Void unused27178=b903.#v()
                                                                Void unused27179=b903.#e()
                                                                Void unused27180=b903.#n()
                                                                Void unused27181=b903.#t()
                                                                Void unused27182=b903.#4()
                                                                Void unused27183=b903.#2()
                                                                Void unused27184=b903.#oRound()
                                                                Void unused27185=b903.#sQuote()
                                                                b903
                                                                ))
                                                              )
                                                            rcv30.#from(seqBuilder:(
                                                              mut This0.Abstract.S.SConcat b904=rcv30.#seqBuilder()
                                                              Void unused27186=b904.#add(that:that.id())
                                                              b904
                                                              ))
                                                            )
                                                          rcv29.#from(builder:(
                                                            mut This0.Abstract.S.SBuilder b905=rcv29.#builder()
                                                            Void unused27187=b905.#colon()
                                                            Void unused27188=b905.#colon()
                                                            Void unused27189=b905.#P()
                                                            Void unused27190=b905.#r()
                                                            Void unused27191=b905.#e()
                                                            Void unused27192=b905.#s()
                                                            Void unused27193=b905.#s()
                                                            Void unused27194=b905.#e()
                                                            Void unused27195=b905.#d()
                                                            Void unused27196=b905.#colon()
                                                            Void unused27197=b905.#colon()
                                                            Void unused27198=b905.#m()
                                                            Void unused27199=b905.#o()
                                                            Void unused27200=b905.#r()
                                                            Void unused27201=b905.#e()
                                                            Void unused27202=b905.#sQuote()
                                                            Void unused27203=b905.#cRound()
                                                            b905
                                                            ))
                                                          )
                                                        rcv28.#from(seqBuilder:(
                                                          mut This0.Abstract.S.SConcat b906=rcv28.#seqBuilder()
                                                          Void unused27204=b906.#add(that:This0.Abstract.S.doubleQuote())
                                                          b906
                                                          ))
                                                        )
                                                      rcv27.#from(builder:(
                                                        mut This0.Abstract.S.SBuilder b907=rcv27.#builder()
                                                        Void unused27205=b907.#space()
                                                        Void unused27206=b907.#s()
                                                        Void unused27207=b907.#t()
                                                        Void unused27208=b907.#y()
                                                        Void unused27209=b907.#l()
                                                        Void unused27210=b907.#e()
                                                        Void unused27211=b907.#equal()
                                                        Void unused27212=b907.#sQuote()
                                                        b907
                                                        ))
                                                      )
                                                    rcv26.#from(seqBuilder:(
                                                      mut This0.Abstract.S.SConcat b908=rcv26.#seqBuilder()
                                                      b908
                                                      ))
                                                    )
                                                  rcv25.#from(builder:(
                                                    mut This0.Abstract.S.SBuilder b909=rcv25.#builder()
                                                    Void unused27213=b909.#p()
                                                    Void unused27214=b909.#o()
                                                    Void unused27215=b909.#s()
                                                    Void unused27216=b909.#i()
                                                    Void unused27217=b909.#t()
                                                    Void unused27218=b909.#i()
                                                    Void unused27219=b909.#o()
                                                    Void unused27220=b909.#n()
                                                    Void unused27221=b909.#colon()
                                                    Void unused27222=b909.#space()
                                                    Void unused27223=b909.#a()
                                                    Void unused27224=b909.#b()
                                                    Void unused27225=b909.#s()
                                                    Void unused27226=b909.#o()
                                                    Void unused27227=b909.#l()
                                                    Void unused27228=b909.#u()
                                                    Void unused27229=b909.#t()
                                                    Void unused27230=b909.#e()
                                                    Void unused27231=b909.#semicolon()
                                                    b909
                                                    ))
                                                  )
                                                rcv24.#from(seqBuilder:(
                                                  mut This0.Abstract.S.SConcat b910=rcv24.#seqBuilder()
                                                  b910
                                                  ))
                                                )
                                              rcv23.#from(builder:(
                                                mut This0.Abstract.S.SBuilder b911=rcv23.#builder()
                                                Void unused27232=b911.#l()
                                                Void unused27233=b911.#e()
                                                Void unused27234=b911.#f()
                                                Void unused27235=b911.#t()
                                                Void unused27236=b911.#colon()
                                                Void unused27237=b911.#space()
                                                b911
                                                ))
                                              )
                                            rcv22.#from(seqBuilder:(
                                              mut This0.Abstract.S.SConcat b912=rcv22.#seqBuilder()
                                              Void unused27238=b912.#add(that:that.left())
                                              b912
                                              ))
                                            )
                                          rcv21.#from(builder:(
                                            mut This0.Abstract.S.SBuilder b913=rcv21.#builder()
                                            Void unused27239=b913.#p()
                                            Void unused27240=b913.#x()
                                            Void unused27241=b913.#semicolon()
                                            b913
                                            ))
                                          )
                                        rcv20.#from(seqBuilder:(
                                          mut This0.Abstract.S.SConcat b914=rcv20.#seqBuilder()
                                          b914
                                          ))
                                        )
                                      rcv19.#from(builder:(
                                        mut This0.Abstract.S.SBuilder b915=rcv19.#builder()
                                        Void unused27242=b915.#t()
                                        Void unused27243=b915.#o()
                                        Void unused27244=b915.#p()
                                        Void unused27245=b915.#colon()
                                        Void unused27246=b915.#space()
                                        b915
                                        ))
                                      )
                                    rcv18.#from(seqBuilder:(
                                      mut This0.Abstract.S.SConcat b916=rcv18.#seqBuilder()
                                      Void unused27247=b916.#add(that:that.top())
                                      b916
                                      ))
                                    )
                                  rcv17.#from(builder:(
                                    mut This0.Abstract.S.SBuilder b917=rcv17.#builder()
                                    Void unused27248=b917.#p()
                                    Void unused27249=b917.#x()
                                    Void unused27250=b917.#semicolon()
                                    b917
                                    ))
                                  )
                                rcv16.#from(seqBuilder:(
                                  mut This0.Abstract.S.SConcat b918=rcv16.#seqBuilder()
                                  b918
                                  ))
                                )
                              rcv15.#from(builder:(
                                mut This0.Abstract.S.SBuilder b919=rcv15.#builder()
                                Void unused27251=b919.#h()
                                Void unused27252=b919.#e()
                                Void unused27253=b919.#i()
                                Void unused27254=b919.#g()
                                Void unused27255=b919.#h()
                                Void unused27256=b919.#t()
                                Void unused27257=b919.#colon()
                                Void unused27258=b919.#space()
                                b919
                                ))
                              )
                            rcv14.#from(seqBuilder:(
                              mut This0.Abstract.S.SConcat b920=rcv14.#seqBuilder()
                              Void unused27259=b920.#add(that:that.height())
                              b920
                              ))
                            )
                          rcv13.#from(builder:(
                            mut This0.Abstract.S.SBuilder b921=rcv13.#builder()
                            Void unused27260=b921.#p()
                            Void unused27261=b921.#x()
                            Void unused27262=b921.#semicolon()
                            b921
                            ))
                          )
                        rcv12.#from(seqBuilder:(
                          mut This0.Abstract.S.SConcat b922=rcv12.#seqBuilder()
                          b922
                          ))
                        )
                      rcv11.#from(builder:(
                        mut This0.Abstract.S.SBuilder b923=rcv11.#builder()
                        Void unused27263=b923.#w()
                        Void unused27264=b923.#i()
                        Void unused27265=b923.#d()
                        Void unused27266=b923.#t()
                        Void unused27267=b923.#h()
                        Void unused27268=b923.#colon()
                        Void unused27269=b923.#space()
                        b923
                        ))
                      )
                    rcv10.#from(seqBuilder:(
                      mut This0.Abstract.S.SConcat b924=rcv10.#seqBuilder()
                      Void unused27270=b924.#add(that:that.width())
                      b924
                      ))
                    )
                  rcv9.#from(builder:(
                    mut This0.Abstract.S.SBuilder b925=rcv9.#builder()
                    Void unused27271=b925.#p()
                    Void unused27272=b925.#x()
                    Void unused27273=b925.#semicolon()
                    b925
                    ))
                  )
                rcv8.#from(seqBuilder:(
                  mut This0.Abstract.S.SConcat b926=rcv8.#seqBuilder()
                  b926
                  ))
                )
              rcv7.#from(builder:(
                mut This0.Abstract.S.SBuilder b927=rcv7.#builder()
                Void unused27274=b927.#b()
                Void unused27275=b927.#a()
                Void unused27276=b927.#c()
                Void unused27277=b927.#k()
                Void unused27278=b927.#g()
                Void unused27279=b927.#r()
                Void unused27280=b927.#o()
                Void unused27281=b927.#u()
                Void unused27282=b927.#n()
                Void unused27283=b927.#d()
                Void unused27284=b927.#less()
                Void unused27285=b927.#c()
                Void unused27286=b927.#o()
                Void unused27287=b927.#l()
                Void unused27288=b927.#o()
                Void unused27289=b927.#r()
                Void unused27290=b927.#colon()
                Void unused27291=b927.#space()
                b927
                ))
              )
            rcv6.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b928=rcv6.#seqBuilder()
              Void unused27292=b928.#add(that:that.color())
              b928
              ))
            )
          rcv5.#from(builder:(
            mut This0.Abstract.S.SBuilder b929=rcv5.#builder()
            Void unused27293=b929.#semicolon()
            Void unused27294=b929.#sQuote()
            Void unused27295=b929.#right()
            b929
            ))
          )
        rcv4.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b930=rcv4.#seqBuilder()
          b930
          ))
        )
      rcv3.#from(builder:(
        mut This0.Abstract.S.SBuilder b931=rcv3.#builder()
        Void unused27296=b931.#left()
        Void unused27297=b931.#d()
        Void unused27298=b931.#i()
        Void unused27299=b931.#v()
        Void unused27300=b931.#space()
        Void unused27301=b931.#s()
        Void unused27302=b931.#t()
        Void unused27303=b931.#y()
        Void unused27304=b931.#l()
        Void unused27305=b931.#e()
        Void unused27306=b931.#equal()
        Void unused27307=b931.#sQuote()
        Void unused27308=b931.#p()
        Void unused27309=b931.#o()
        Void unused27310=b931.#s()
        Void unused27311=b931.#i()
        Void unused27312=b931.#t()
        Void unused27313=b931.#i()
        Void unused27314=b931.#o()
        Void unused27315=b931.#n()
        Void unused27316=b931.#colon()
        Void unused27317=b931.#space()
        Void unused27318=b931.#r()
        Void unused27319=b931.#e()
        Void unused27320=b931.#l()
        Void unused27321=b931.#a()
        Void unused27322=b931.#t()
        Void unused27323=b931.#i()
        Void unused27324=b931.#v()
        Void unused27325=b931.#e()
        Void unused27326=b931.#semicolon()
        Void unused27327=b931.#sQuote()
        Void unused27328=b931.#right()
        b931
        ))
      )
    rcv2.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b1=rcv2.#seqBuilder()
      Void unused27329=(
        lent This0.Widget.List.IteratorVal w=that.children().vals()
        (
          Void unused27330=loop (
            Void unused27331=w.#next()
            
            catch exception Void catched47516 (
              Void unused27332=(
                Void unused27333=w.#checkEnd()
                
                catch exception Void catched47517 void
                
                void
                )
              exception void
              )
            
            ((
              Void unused27334=b1.#add(that:this.format(that:w.#inner()))
              void
              ))
            )
          
          catch exception Void catched47520 void
          
          void
          )
        )
      b1
      ))
    )
  rcv1.#from(builder:(
    mut This0.Abstract.S.SBuilder b932=rcv1.#builder()
    Void unused27335=b932.#left()
    Void unused27336=b932.#divide()
    Void unused27337=b932.#d()
    Void unused27338=b932.#i()
    Void unused27339=b932.#v()
    Void unused27340=b932.#right()
    Void unused27341=b932.#left()
    Void unused27342=b932.#divide()
    Void unused27343=b932.#d()
    Void unused27344=b932.#i()
    Void unused27345=b932.#v()
    Void unused27346=b932.#right()
    b932
    ))
  )
mut method 
Void draw(read This0.Widget that) this.set(that:(
  This0.Abstract.S.Continue rcv35=(
    This0.Abstract.S rcv36=(
      This0.Abstract.S.Continue rcv37=(
        This0.Abstract.S rcv38=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b933=This0.Abstract.S.#builder()
          Void unused27347=b933.#left()
          Void unused27348=b933.#d()
          Void unused27349=b933.#i()
          Void unused27350=b933.#v()
          Void unused27351=b933.#space()
          Void unused27352=b933.#i()
          Void unused27353=b933.#d()
          Void unused27354=b933.#equal()
          Void unused27355=b933.#sQuote()
          Void unused27356=b933.#T()
          Void unused27357=b933.#o()
          Void unused27358=b933.#p()
          Void unused27359=b933.#sQuote()
          Void unused27360=b933.#space()
          Void unused27361=b933.#s()
          Void unused27362=b933.#t()
          Void unused27363=b933.#y()
          Void unused27364=b933.#l()
          Void unused27365=b933.#e()
          Void unused27366=b933.#equal()
          Void unused27367=b933.#sQuote()
          b933
          ))
        rcv38.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b934=rcv38.#seqBuilder()
          b934
          ))
        )
      rcv37.#from(builder:(
        mut This0.Abstract.S.SBuilder b935=rcv37.#builder()
        Void unused27368=b935.#p()
        Void unused27369=b935.#o()
        Void unused27370=b935.#s()
        Void unused27371=b935.#i()
        Void unused27372=b935.#t()
        Void unused27373=b935.#i()
        Void unused27374=b935.#o()
        Void unused27375=b935.#n()
        Void unused27376=b935.#colon()
        Void unused27377=b935.#space()
        Void unused27378=b935.#r()
        Void unused27379=b935.#e()
        Void unused27380=b935.#l()
        Void unused27381=b935.#a()
        Void unused27382=b935.#t()
        Void unused27383=b935.#i()
        Void unused27384=b935.#v()
        Void unused27385=b935.#e()
        Void unused27386=b935.#semicolon()
        Void unused27387=b935.#space()
        Void unused27388=b935.#h()
        Void unused27389=b935.#e()
        Void unused27390=b935.#i()
        Void unused27391=b935.#g()
        Void unused27392=b935.#h()
        Void unused27393=b935.#t()
        Void unused27394=b935.#colon()
        Void unused27395=b935.#space()
        Void unused27396=b935.#7()
        Void unused27397=b935.#5()
        Void unused27398=b935.#0()
        Void unused27399=b935.#p()
        Void unused27400=b935.#x()
        Void unused27401=b935.#semicolon()
        Void unused27402=b935.#space()
        Void unused27403=b935.#w()
        Void unused27404=b935.#i()
        Void unused27405=b935.#d()
        Void unused27406=b935.#t()
        Void unused27407=b935.#h()
        Void unused27408=b935.#colon()
        Void unused27409=b935.#space()
        Void unused27410=b935.#7()
        Void unused27411=b935.#5()
        Void unused27412=b935.#0()
        Void unused27413=b935.#p()
        Void unused27414=b935.#x()
        Void unused27415=b935.#semicolon()
        Void unused27416=b935.#space()
        Void unused27417=b935.#b()
        Void unused27418=b935.#o()
        Void unused27419=b935.#r()
        Void unused27420=b935.#d()
        Void unused27421=b935.#e()
        Void unused27422=b935.#r()
        Void unused27423=b935.#colon()
        Void unused27424=b935.#space()
        Void unused27425=b935.#s()
        Void unused27426=b935.#o()
        Void unused27427=b935.#l()
        Void unused27428=b935.#i()
        Void unused27429=b935.#d()
        Void unused27430=b935.#space()
        Void unused27431=b935.#b()
        Void unused27432=b935.#l()
        Void unused27433=b935.#a()
        Void unused27434=b935.#c()
        Void unused27435=b935.#k()
        Void unused27436=b935.#space()
        Void unused27437=b935.#2()
        Void unused27438=b935.#p()
        Void unused27439=b935.#x()
        Void unused27440=b935.#semicolon()
        Void unused27441=b935.#sQuote()
        Void unused27442=b935.#right()
        b935
        ))
      )
    rcv36.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b936=rcv36.#seqBuilder()
      Void unused27443=b936.#add(that:this.format(that:that))
      b936
      ))
    )
  rcv35.#from(builder:(
    mut This0.Abstract.S.SBuilder b937=rcv35.#builder()
    Void unused27444=b937.#left()
    Void unused27445=b937.#divide()
    Void unused27446=b937.#d()
    Void unused27447=b937.#i()
    Void unused27448=b937.#v()
    Void unused27449=b937.#right()
    b937
    ))
  ), id:This0.Abstract.S.#from(builder:(
  mut This0.Abstract.S.SBuilder b938=This0.Abstract.S.#builder()
  Void unused27450=b938.#T()
  Void unused27451=b938.#o()
  Void unused27452=b938.#p()
  b938
  )))
Event: {implements This1.Abstract.Concept.Base, This1.Abstract.Concept.Classable, This1.Abstract.Concept.ToS, This1.Abstract.Concept.Equals
read method 
Void #invariant_$_428() void
class method 
mut This0 #apply_$_428(fwd This1.Abstract.S targetId, fwd This1.Abstract.S eventId, fwd This1.Abstract.Strings all) 
refine read method 
class This0 class() This0
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.Abstract.S readableName() This1.PrImpl1_$_459.GetMyName.#apply(that:This0)
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Abstract.Bool is(class This1.Abstract.Concept.Classable subtype) (
  Void unused21029=(
    Void unused21030=(
      class This0 subtype1=(
        Void unused21032=return subtype
        
        catch return class This0 casted9 casted9
        
        catch return class Any casted9 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18282 void
      
      (
        Void unused21033=return This1.Abstract.Bool.true()
        void
        )
      )
    Void unused21031=return This1.Abstract.Bool.false()
    void
    )
  
  catch return This1.Abstract.Bool result142 result142
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
read This0 cast(read This1.Abstract.Concept.Classable that) (
  Void unused21034=(
    Void unused21035=(
      read This0 that4=(
        Void unused21037=return that
        
        catch return read This0 casted10 casted10
        
        catch return read Any casted10 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18287 void
      
      (
        Void unused21038=return that4
        void
        )
      )
    Void unused21036=error This1.PrImpl1_$_459.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return read This0 result143 result143
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
mut This0 #cast(mut This1.Abstract.Concept.Classable that) (
  Void unused21039=(
    Void unused21040=(
      mut This0 that5=(
        Void unused21042=return that
        
        catch return mut This0 casted11 casted11
        
        catch return mut Any casted11 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18292 void
      
      (
        Void unused21043=return that5
        void
        )
      )
    Void unused21041=error This1.PrImpl1_$_459.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return mut This0 result144 result144
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
This0 #apply(This1.Abstract.S that) (
  This1.Abstract.Strings s=that.splitOn(chars:This1.Abstract.S.#from(builder:(
    mut This1.Abstract.S.SBuilder b891=This1.Abstract.S.#builder()
    Void unused27093=b891.#colon()
    Void unused27094=b891.#colon()
    b891
    )))
  This0.#apply(targetId:s.val(that:This1.Abstract.Size.#from(builder:(
    mut This1.Abstract.S.SBuilder b892=This1.Abstract.Size.#builder()
    Void unused27095=b892.#0()
    b892
    ))), eventId:s.val(that:This1.Abstract.Size.#from(builder:(
    mut This1.Abstract.S.SBuilder b893=This1.Abstract.Size.#builder()
    Void unused27096=b893.#1()
    b893
    ))), all:s)
  )
class method 
mut This0 #apply(This1.Abstract.S targetId, This1.Abstract.S eventId, This1.Abstract.Strings all) (
  mut This0 r5=this.#apply_$_428(targetId:targetId, eventId:eventId, all:all)
  Void unused34597=r5.#invariant_$_428()
  r5
  )
class method 
This0 #immK(This1.Abstract.S targetId, This1.Abstract.S eventId, This1.Abstract.Strings all) (
  This0 r6=this.#apply_$_428(targetId:targetId, eventId:eventId, all:all)
  Void unused34598=r6.#invariant_$_428()
  r6
  )
method 
This0 with(This1.Abstract.S targetId) This0.#immK(targetId:targetId, eventId:this.eventId(), all:this.all())
method 
This0 with(This1.Abstract.S eventId) This0.#immK(targetId:this.targetId(), eventId:eventId, all:this.all())
method 
This0 with(This1.Abstract.Strings all) This0.#immK(targetId:this.targetId(), eventId:this.eventId(), all:all)
refine read method 
This1.Abstract.S toS() (
  This1.Abstract.S.Continue rcv14=(
    This1.Abstract.S rcv15=This1.Abstract.S.#from(builder:(
      mut This1.Abstract.S.SBuilder b577=This1.Abstract.S.#builder()
      Void unused20530=b577.#oSquare()
      b577
      ))
    rcv15.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b578=rcv15.#seqBuilder()
      Void unused20531=b578.#add(that:this.baseToS1_$_440())
      b578
      ))
    )
  rcv14.#from(builder:(
    mut This1.Abstract.S.SBuilder b579=rcv14.#builder()
    Void unused20532=b579.#cSquare()
    b579
    ))
  )
read method 
This1.Abstract.S #1baseToS3_$_429() This1.Abstract.S.#from(builder:(
  mut This1.Abstract.S.SBuilder b580=This1.Abstract.S.#builder()
  b580
  ))
class method 
Any val2_$_430() This1.Abstract.S._private(_binaryRepr: {/*@stringU
targetId
*/})
class method 
This1.Abstract.S fN1_$_431() (
  Void unused20291=(
    Void unused20292=(
      Any val=this.val2_$_430()
      (
        This1.Abstract.S val1=(
          Void unused20294=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused20295=return val1
          void
          )
        )
      )
    Void unused20293=error This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val3_$_432() This1.Abstract.S._private(_binaryRepr: {/*@stringU
eventId
*/})
class method 
This1.Abstract.S fN2_$_433() (
  Void unused20291=(
    Void unused20292=(
      Any val=this.val3_$_432()
      (
        This1.Abstract.S val1=(
          Void unused20294=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused20295=return val1
          void
          )
        )
      )
    Void unused20293=error This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS1_$_434() (
  Void unused20757=(
    This1.Abstract.S ts=this.targetId().toS()
    Void unused20758=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused20760=b616.#oSquare()
        b616
        )))
      (
        Void unused20761=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused20762=b618.#add(that:This0.fN1_$_431())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused20763=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused20764=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused20759=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused20765=b623.#add(that:This0.fN1_$_431())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused20766=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused20767=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused20768=b625.#add(that:ts)
          Void unused20769=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #2baseToS1_$_435() (
  Void unused20757=(
    This1.Abstract.S ts=this.eventId().toS()
    Void unused20758=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused20760=b616.#oSquare()
        b616
        )))
      (
        Void unused20761=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused20762=b618.#add(that:This0.fN2_$_433())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused20763=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused20764=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused20759=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused20765=b623.#add(that:This0.fN2_$_433())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused20766=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused20767=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused20768=b625.#add(that:ts)
          Void unused20769=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val4_$_436() This1.Abstract.S._private(_binaryRepr: {/*@stringU
all
*/})
class method 
This1.Abstract.S fN3_$_437() (
  Void unused20291=(
    Void unused20292=(
      Any val=this.val4_$_436()
      (
        This1.Abstract.S val1=(
          Void unused20294=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused20295=return val1
          void
          )
        )
      )
    Void unused20293=error This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS2_$_438() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused20651=b593.#add(that:this.#1baseToS1_$_434())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused20652=b594.#comma()
        Void unused20653=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused20654=b595.#add(that:this.#2baseToS1_$_435())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS2_$_439() (
  Void unused20757=(
    This1.Abstract.S ts=this.all().toS()
    Void unused20758=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused20760=b616.#oSquare()
        b616
        )))
      (
        Void unused20761=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused20762=b618.#add(that:This0.fN3_$_437())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused20763=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused20764=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused20759=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused20765=b623.#add(that:This0.fN3_$_437())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused20766=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused20767=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused20768=b625.#add(that:ts)
          Void unused20769=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S baseToS1_$_440() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused20651=b593.#add(that:this.#1baseToS2_$_438())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused20652=b594.#comma()
        Void unused20653=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused20654=b595.#add(that:this.#2baseToS2_$_439())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #invariantToS() (
  This1.Abstract.S.Continue rcv70=(
    This1.Abstract.S rcv71=This1.Abstract.S.#from(builder:(
      mut This1.Abstract.S.SBuilder b667=This1.Abstract.S.#builder()
      Void unused20834=b667.#oSquare()
      b667
      ))
    rcv71.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b668=rcv71.#seqBuilder()
      Void unused20835=b668.#add(that:this.baseToS2_$_452())
      b668
      ))
    )
  rcv70.#from(builder:(
    mut This1.Abstract.S.SBuilder b669=rcv70.#builder()
    Void unused20836=b669.#cSquare()
    b669
    ))
  )
read method 
This1.Abstract.S #1baseToS6_$_441() This1.Abstract.S.#from(builder:(
  mut This1.Abstract.S.SBuilder b670=This1.Abstract.S.#builder()
  b670
  ))
class method 
Any val5_$_442() This1.Abstract.S._private(_binaryRepr: {/*@stringU
targetId
*/})
class method 
This1.Abstract.S fN4_$_443() (
  Void unused20291=(
    Void unused20292=(
      Any val=this.val5_$_442()
      (
        This1.Abstract.S val1=(
          Void unused20294=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused20295=return val1
          void
          )
        )
      )
    Void unused20293=error This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val6_$_444() This1.Abstract.S._private(_binaryRepr: {/*@stringU
eventId
*/})
class method 
This1.Abstract.S fN5_$_445() (
  Void unused20291=(
    Void unused20292=(
      Any val=this.val6_$_444()
      (
        This1.Abstract.S val1=(
          Void unused20294=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused20295=return val1
          void
          )
        )
      )
    Void unused20293=error This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS4_$_446() (
  Void unused20757=(
    This1.Abstract.S ts=this.targetId().toS()
    Void unused20758=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused20760=b616.#oSquare()
        b616
        )))
      (
        Void unused20761=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused20762=b618.#add(that:This0.fN4_$_443())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused20763=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused20764=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused20759=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused20765=b623.#add(that:This0.fN4_$_443())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused20766=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused20767=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused20768=b625.#add(that:ts)
          Void unused20769=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #2baseToS3_$_447() (
  Void unused20757=(
    This1.Abstract.S ts=this.eventId().toS()
    Void unused20758=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused20760=b616.#oSquare()
        b616
        )))
      (
        Void unused20761=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused20762=b618.#add(that:This0.fN5_$_445())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused20763=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused20764=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused20759=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused20765=b623.#add(that:This0.fN5_$_445())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused20766=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused20767=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused20768=b625.#add(that:ts)
          Void unused20769=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val7_$_448() This1.Abstract.S._private(_binaryRepr: {/*@stringU
all
*/})
class method 
This1.Abstract.S fN6_$_449() (
  Void unused20291=(
    Void unused20292=(
      Any val=this.val7_$_448()
      (
        This1.Abstract.S val1=(
          Void unused20294=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused20295=return val1
          void
          )
        )
      )
    Void unused20293=error This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS5_$_450() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused20651=b593.#add(that:this.#1baseToS4_$_446())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused20652=b594.#comma()
        Void unused20653=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused20654=b595.#add(that:this.#2baseToS3_$_447())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS4_$_451() (
  Void unused20757=(
    This1.Abstract.S ts=this.all().toS()
    Void unused20758=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused20760=b616.#oSquare()
        b616
        )))
      (
        Void unused20761=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused20762=b618.#add(that:This0.fN6_$_449())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused20763=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused20764=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused20759=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused20765=b623.#add(that:This0.fN6_$_449())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused20766=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused20767=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused20768=b625.#add(that:ts)
          Void unused20769=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S baseToS2_$_452() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused20651=b593.#add(that:this.#1baseToS5_$_450())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused20652=b594.#comma()
        Void unused20653=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused20654=b595.#add(that:this.#2baseToS4_$_451())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
refine read method 
This1.Abstract.Bool #equalequal#0left(read Any right) (
  Void unused20980=(
    Void unused20981=(
      read This0 right1=(
        Void unused20983=return right
        
        catch return read This0 casted8 casted8
        
        catch return read Any casted8 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18243 void
      
      (
        Void unused20984=return this.equals(that:right1)
        void
        )
      )
    Void unused20982=return This1.Abstract.Bool.false()
    void
    )
  
  catch return This1.Abstract.Bool result138 result138
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #1equals6_$_453(read This0 that) This1.Abstract.Bool.true()
read method 
This1.Abstract.S targetId() this.targetId_$_428()
read method 
This1.Abstract.S targetId_$_428() 
read method 
This1.Abstract.S eventId() this.eventId_$_428()
read method 
This1.Abstract.S eventId_$_428() 
read method 
This1.Abstract.Bool #1equals4_$_454(read This0 that) (
  This1.Abstract.S read$opPar95=this.targetId()
  This1.Abstract.S read$opPar96=that.targetId()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Bool #2equals1_$_455(read This0 that) (
  This1.Abstract.S read$opPar95=this.eventId()
  This1.Abstract.S read$opPar96=that.eventId()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Strings all() this.all_$_428()
read method 
This1.Abstract.Strings all_$_428() 
read method 
This1.Abstract.Bool #1equals5_$_456(read This0 that) (
  Void unused20963=(
    Void unused20964=(
      This1.Abstract.Bool cond120=this.#1equals4_$_454(that:that).#bang()
      (
        Void unused20966=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused20965=return this.#2equals1_$_455(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #2equals2_$_457(read This0 that) (
  This1.Abstract.Strings read$opPar95=this.all()
  This1.Abstract.Strings read$opPar96=that.all()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Bool equals(read This0 that) (
  Void unused20963=(
    Void unused20964=(
      This1.Abstract.Bool cond120=this.#1equals5_$_456(that:that).#bang()
      (
        Void unused20966=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused20965=return this.#2equals2_$_457(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #invariant() void}
Widget: {interface implements This1.Abstract.Concept.Base, This1.Abstract.Concept.ToS, This1.Abstract.Concept.Classable, This1.Abstract.Concept.Equals
read method 
This1.Abstract.S id() 
read method 
This1.Abstract.Size left() 
read method 
This1.Abstract.Size top() 
read method 
This1.Abstract.Size width() 
read method 
This1.Abstract.Size height() 
read method 
This1.Abstract.S color() 
read method 
read This0.List children() 
mut method 
This1.Abstract.Bool dispatch(This1.Event that) 
refine read method 
This1.Abstract.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.Abstract.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Abstract.Bool is(class This1.Abstract.Concept.Classable subtype) 
refine read method 
This1.Abstract.Bool #equalequal#0left(read Any right) 
refine read method 
class This1.Abstract.Concept.Base class() 
refine class method 
read This1.Abstract.Concept.Base cast(read This1.Abstract.Concept.Classable that) 
refine class method 
mut This1.Abstract.Concept.Base #cast(mut This1.Abstract.Concept.Classable that) 
List: {implements This2.Abstract.Concept.ToS, This2.Abstract.Concept.Classable, This2.Abstract.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Abstract.Concept.Classable that) (
  Void unused491=(
    Void unused492=(
      read This0 that9=(
        Void unused494=return that
        
        catch return read This0 casted17 casted17
        
        catch return read Any casted17 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched258 void
      
      (
        Void unused495=return that9
        void
        )
      )
    Void unused493=error This2.PrImpl1_$_459.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return read This0 result32 result32
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Abstract.Concept.Classable that) (
  Void unused496=(
    Void unused497=(
      mut This0 that10=(
        Void unused499=return that
        
        catch return mut This0 casted18 casted18
        
        catch return mut Any casted18 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched263 void
      
      (
        Void unused500=return that10
        void
        )
      )
    Void unused498=error This2.PrImpl1_$_459.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return mut This0 result33 result33
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() This0
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.Abstract.S readableName() This2.PrImpl1_$_459.GetMyName.#apply(that:This0)
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Abstract.Bool is(class This2.Abstract.Concept.Classable subtype) (
  Void unused501=(
    Void unused502=(
      class This0 subtype5=(
        Void unused504=return subtype
        
        catch return class This0 casted19 casted19
        
        catch return class Any casted19 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched268 void
      
      (
        Void unused505=return This2.Abstract.Bool.true()
        void
        )
      )
    Void unused503=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result34 result34
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
read This2.Abstract.CollectionsMut.MutListAny inner() 
mut method 
mut This2.Abstract.CollectionsMut.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Abstract.CollectionsMut.MutListAny inner) 
class method 
This0 #immK(This2.Abstract.CollectionsMut.MutListAny inner) This0.#apply(inner:inner)
class method 
mut This0 empty() This0.#apply(inner:This2.Abstract.CollectionsMut.MutListAny.empty())
mut method 
mut This0 #reverse() (/*TODO: read reverse is just impossible?
*/
  mut This0 result=This0.empty()
  Void unused1107=(
    mut This0.IteratorVar e=this.#vals()
    (
      Void unused1108=loop (
        Void unused1109=e.#next()
        
        catch exception Void catched513 (
          Void unused1110=(
            Void unused1111=e.#checkEnd()
            
            catch exception Void catched514 void
            
            void
            )
          exception void
          )
        
        (result.add(left:e.#inner()))
        )
      
      catch exception Void catched516 void
      
      void
      )
    )
  result
  )
read method 
class This2.Abstract.Size #default#val(Void that) This2.Abstract.Size
read method 
read This1 right() This0.Cast.#apply(that:(
  read This2.Abstract.CollectionsMut.MutListAny rcv29=this.inner()
  rcv29.val(that:(
    This2.Abstract.Size imm$opPar133=rcv29.size()
    This2.Abstract.Size imm$opPar134=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b225=This2.Abstract.Size.#builder()
      Void unused1114=b225.#1()
      b225
      ))
    imm$opPar133.#less#0left(right:imm$opPar134)
    ))
  ))
mut method 
mut This1 #left() This0.Cast.mut(that:this.#inner().#val(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b226=This2.Abstract.Size.#builder()
  Void unused1115=b226.#0()
  b226
  ))))
mut method 
mut This1 #right() (/*#################MUT METHODS
*/This0.Cast.mut(that:(
  mut This2.Abstract.CollectionsMut.MutListAny rcv30=this.#inner()
  rcv30.#val(that:(
    This2.Abstract.Size imm$opPar135=rcv30.size()
    This2.Abstract.Size imm$opPar136=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b227=This2.Abstract.Size.#builder()
      Void unused1116=b227.#1()
      b227
      ))
    imm$opPar135.#less#0left(right:imm$opPar136)
    ))
  )))
mut method 
Void #apply(This2.Abstract.Size that, mut This1 val) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv31=this.#inner()
  rcv31.#apply(that:that, val:val)
  )
mut method 
Void left(mut This1 that) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv32=this.#inner()
  rcv32.#apply(that:This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b228=This2.Abstract.Size.#builder()
    Void unused1117=b228.#0()
    b228
    )), val:that)
  )
mut method 
Void right(mut This1 that) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv33=this.#inner()
  rcv33.#apply(that:(
    This2.Abstract.Size imm$opPar137=rcv33.size()
    This2.Abstract.Size imm$opPar138=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b229=This2.Abstract.Size.#builder()
      Void unused1118=b229.#1()
      b229
      ))
    imm$opPar137.#less#0left(right:imm$opPar138)
    ), val:that)
  )
mut method 
Void add(This2.Abstract.Size that, mut This1 val) this.#inner().add(that:that, val:val)
mut method 
Void add(mut This1 right) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv34=this.#inner()
  rcv34.add(that:rcv34.size(), val:right)
  )
mut method 
Void add(mut This1 left) this.#inner().add(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b230=This2.Abstract.Size.#builder()
  Void unused1119=b230.#0()
  b230
  )), val:left)
mut method 
Void removeLeft() this.remove(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b231=This2.Abstract.Size.#builder()
  Void unused1120=b231.#0()
  b231
  )))
mut method 
Void removeRight() (/*#################OPERATORS
*/this.remove(that:(
  This2.Abstract.Size imm$opPar139=this.size()
  This2.Abstract.Size imm$opPar140=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b232=This2.Abstract.Size.#builder()
    Void unused1121=b232.#1()
    b232
    ))
  imm$opPar139.#less#0left(right:imm$opPar140)
  )))
method 
This0 #plus#0left(This1 right) this.withAlso(that:this.size(), val:right)
method 
This0 #plusplus#0left(This0 right) (/*#################Withs
*/(
  Void unused1122=(/*var This res=this//this does not work, iterator would return it read.
with e in right.vals() (res+=e)
return res
*/
    Void unused1123=(
      This2.Abstract.Bool cond30=right.isEmpty()
      (
        Void unused1125=cond30.#checkTrue()
        
        catch exception Void catched535 void
        
        (return this)
        )
      )
    Void unused1124=return (
      This0 imm$opPar142=((
        This1 imm$opPar141=right.left()
        this.#plus#0left(right:imm$opPar141)
        ))
      This0 imm$opPar143=right.withoutLeft()
      imm$opPar142.#plusplus#0left(right:imm$opPar143)
      )
    void
    )
  
  catch return This0 result49 result49
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  ))
method 
This0 with(This2.Abstract.Size that, This1 val) This0.#immK(inner:this.inner().with(that:that, val:val))
method 
This0 withLeft(This1 that) this.with(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b233=This2.Abstract.Size.#builder()
  Void unused1126=b233.#0()
  b233
  )), val:that)
method 
This0 withRight(This1 that) (/*insertion
*/this.with(that:(
  This2.Abstract.Size imm$opPar144=this.size()
  This2.Abstract.Size imm$opPar145=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b234=This2.Abstract.Size.#builder()
    Void unused1127=b234.#1()
    b234
    ))
  imm$opPar144.#less#0left(right:imm$opPar145)
  ), val:that))
method 
This0 withAlso(This2.Abstract.Size that, This1 val) This0.#immK(inner:this.inner().withAlso(that:that, val:val))
method 
This0 withAlsoRight(This1 that) (/*skipping/filtering
*/this.withAlso(that:this.size(), val:that))
method 
This0 withoutRight() (/*################# Iterators
*/this.without(index:(
  This2.Abstract.Size imm$opPar146=this.size()
  This2.Abstract.Size imm$opPar147=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b237=This2.Abstract.Size.#builder()
    Void unused1130=b237.#1()
    b237
    ))
  imm$opPar146.#less#0left(right:imm$opPar147)
  )))
read method 
lent This0.IteratorVal vals(This2.Abstract.Size from, This2.Abstract.Size maxTo, This2.Abstract.Size minTo) This0.IteratorVal.#apply(that:this.inner(), from:from, maxTo:maxTo, minTo:minTo)
read method 
lent This0.IteratorVal vals(This2.Abstract.Size minTo) this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b240=This2.Abstract.Size.#builder()
  Void unused1146=b240.#less()
  Void unused1147=b240.#1()
  b240
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b241=This2.Abstract.Size.#builder()
  Void unused1148=b241.#less()
  Void unused1149=b241.#2()
  b241
  )), minTo:minTo)
read method 
lent This0.IteratorVal vals(This2.Abstract.Size from, This2.Abstract.Size to) this.vals(from:from, maxTo:to, minTo:this.inner().size())
read method 
lent This0.IteratorValFill vals(This2.Abstract.Size from, This2.Abstract.Size maxTo, This2.Abstract.Size minTo, read This1 filled) This0.IteratorValFill.#apply(that:this.inner(), from:from, maxTo:maxTo, minTo:minTo, filled:filled)
read method 
lent This0.IteratorValFill vals(This2.Abstract.Size minTo, read This1 filled) this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b247=This2.Abstract.Size.#builder()
  Void unused1301=b247.#less()
  Void unused1302=b247.#1()
  b247
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b248=This2.Abstract.Size.#builder()
  Void unused1303=b248.#less()
  Void unused1304=b248.#2()
  b248
  )), minTo:minTo, filled:filled)
read method 
lent This0.IteratorValFill vals(This2.Abstract.Size from, This2.Abstract.Size to, read This1 filled) this.vals(from:from, maxTo:to, minTo:this.inner().size(), filled:filled)
read method 
lent This0.IteratorValFill vals(read This1 filled) this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b249=This2.Abstract.Size.#builder()
  Void unused1305=b249.#less()
  Void unused1306=b249.#1()
  b249
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b250=This2.Abstract.Size.#builder()
  Void unused1307=b250.#less()
  Void unused1308=b250.#2()
  b250
  )), minTo:this.inner().size(), filled:filled)
mut method 
mut This0.IteratorVar #vals(This2.Abstract.Size from, This2.Abstract.Size maxTo, This2.Abstract.Size minTo) This0.IteratorVar.#apply(that:this.#inner(), from:from, maxTo:maxTo, minTo:minTo)
mut method 
mut This0.IteratorVar #vals(This2.Abstract.Size minTo) this.#vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b253=This2.Abstract.Size.#builder()
  Void unused1383=b253.#less()
  Void unused1384=b253.#1()
  b253
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b254=This2.Abstract.Size.#builder()
  Void unused1385=b254.#less()
  Void unused1386=b254.#2()
  b254
  )), minTo:minTo)
mut method 
mut This0.IteratorVar #vals(This2.Abstract.Size from, This2.Abstract.Size to) this.#vals(from:from, maxTo:to, minTo:this.inner().size())
mut method 
mut This0.IteratorVar #vals() this.#vals(from:(
  This2.Abstract.Size imm$opPar163=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b255=This2.Abstract.Size.#builder()
    Void unused1387=b255.#0()
    b255
    ))
  This2.Abstract.Size imm$opPar164=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b256=This2.Abstract.Size.#builder()
    Void unused1388=b256.#1()
    b256
    ))
  imm$opPar163.#less#0left(right:imm$opPar164)
  ), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b257=This2.Abstract.Size.#builder()
  Void unused1389=b257.#less()
  Void unused1390=b257.#2()
  b257
  )), minTo:this.inner().size())
refine read method 
This2.Abstract.S toS() this.inner().toS()
read method 
This2.Abstract.Size size() this.inner().size()
read method 
This2.Abstract.Bool isEmpty() (
  This2.Abstract.Size read$opPar29=this.size()
  This2.Abstract.Size read$opPar30=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b223=This2.Abstract.Size.#builder()
    Void unused1112=b223.#0()
    b223
    ))
  read$opPar29.#equalequal#0left(right:read$opPar30)
  )
read method 
read This1 val(This2.Abstract.Size that) This0.Cast.#apply(that:this.inner().val(that:that))
mut method 
mut This1 #val(This2.Abstract.Size that) This0.Cast.mut(that:this.#inner().#val(that:that))
class method 
mut This0 #seqBuilder() this.empty()
class method 
mut This0 #from(mut This0 seqBuilder) seqBuilder
mut method 
Void #add(mut This1 that) this.add(right:that)
read method 
read This1 left() This0.Cast.#apply(that:this.inner().val(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b224=This2.Abstract.Size.#builder()
  Void unused1113=b224.#0()
  b224
  ))))
method 
This0 withoutLeft() this.without(index:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b236=This2.Abstract.Size.#builder()
  Void unused1129=b236.#0()
  b236
  )))
method 
This0 withAlsoLeft(This1 that) this.withAlso(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b235=This2.Abstract.Size.#builder()
  Void unused1128=b235.#0()
  b235
  )), val:that)
read method 
lent This0.IteratorVal vals() this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b242=This2.Abstract.Size.#builder()
  Void unused1150=b242.#less()
  Void unused1151=b242.#1()
  b242
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b243=This2.Abstract.Size.#builder()
  Void unused1152=b243.#less()
  Void unused1153=b243.#2()
  b243
  )), minTo:this.inner().size())
read method 
This2.Abstract.Bool contains(read This1 that) (/*################# operators
TODO: general issue:  V[a;b] wants a,b mut to create a mut?
with the current builder desugaring,
can not take imms since the collection under genration is still mut!
*/(
  Void unused1501=(
    Void unused1502=(
      lent This0.IteratorVal e=this.vals()
      (
        Void unused1504=loop (
          Void unused1505=e.#next()
          
          catch exception Void catched585 (
            Void unused1506=(
              Void unused1507=e.#checkEnd()
              
              catch exception Void catched586 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond36=(
              read This1 read$opPar31=e.#inner()
              read$opPar31.#equalequal#0left(right:that)
              )
            (
              Void unused1508=cond36.#checkTrue()
              
              catch exception Void catched589 void
              
              (return This2.Abstract.Bool.true())
              )
            ))
          )
        
        catch exception Void catched590 void
        
        void
        )
      )
    Void unused1503=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result52 result52
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  ))
method 
This0 #less#0left(This1 right) this.withoutAll(val:right)
method 
This0 #lessless#0left(This0 right) (
  Void unused1509=(/*This[with e in this.vals() ( if !right.contains(e)  (use[e])  )]
*/
    Void unused1510=(
      This2.Abstract.Bool cond37=right.isEmpty()
      (
        Void unused1512=cond37.#checkTrue()
        
        catch exception Void catched594 void
        
        (return this)
        )
      )
    Void unused1511=return (
      This0 imm$opPar166=((
        This1 imm$opPar165=right.left()
        this.#less#0left(right:imm$opPar165)
        ))
      This0 imm$opPar167=right.withoutLeft()
      imm$opPar166.#lessless#0left(right:imm$opPar167)
      )
    void
    )
  
  catch return This0 result53 result53
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0 #and#0left(This0 right) (
  Void unused1513=(/*This[with v in this.vals() ( if (right>v) (use[v]) )]
*/
    var This0 res=this
    Void unused1514=(
      lent This0.IteratorVal v=this.vals()
      (
        Void unused1516=loop (
          Void unused1517=v.#next()
          
          catch exception Void catched598 (
            Void unused1518=(
              Void unused1519=v.#checkEnd()
              
              catch exception Void catched599 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond38=right.contains(that:v.#inner()).#bang()
            (
              Void unused1520=cond38.#checkTrue()
              
              catch exception Void catched602 void
              
              (res := res.withoutAll(val:v.#inner()))
              )
            ))
          )
        
        catch exception Void catched603 void
        
        void
        )
      )
    Void unused1515=return res
    void
    )
  
  catch return This0 result54 result54
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This2.Abstract.Bool #rightright#0left(This0 right) (
  This2.Abstract.Bool imm$opPar168=this.#rightrightequal#0left(right:right)
  This2.Abstract.Bool imm$opPar169=(right.#rightrightequal#0left(right:this)).#bang()
  imm$opPar168.#and#0left(right:imm$opPar169)
  )
method 
This2.Abstract.Bool #rightrightequal#0left(This0 right) (
  Void unused1521=(
    Void unused1522=(
      lent This0.IteratorVal e=right.vals()
      (
        Void unused1524=loop (
          Void unused1525=e.#next()
          
          catch exception Void catched607 (
            Void unused1526=(
              Void unused1527=e.#checkEnd()
              
              catch exception Void catched608 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond39=this.contains(that:e.#inner()).#bang()
            (
              Void unused1528=cond39.#checkTrue()
              
              catch exception Void catched611 void
              
              (return This2.Abstract.Bool.false())
              )
            ))
          )
        
        catch exception Void catched612 void
        
        void
        )
      )
    Void unused1523=return This2.Abstract.Bool.true()
    void
    )
  
  catch return This2.Abstract.Bool result55 result55
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This2.Abstract.Bool #right#0left(This1 right) this.contains(that:right)
read method 
This2.Abstract.Bool equals(read This0 that) (
  Void unused1529=(
    Void unused1530=(
      lent This0.IteratorVal e1=this.vals()
      (
        lent This0.IteratorVal e2=that.vals()
        (
          Void unused1531=loop (
            Void unused1532=e1.#next()
            
            catch exception Void catched617 (
              Void unused1533=(
                Void unused1536=e2.#next()
                
                catch exception Void catched618 void
                
                void
                )
              Void unused1534=(
                Void unused1537=e1.#checkEnd()
                
                catch exception Void catched619 void
                
                void
                )
              Void unused1535=(
                Void unused1538=e2.#checkEnd()
                
                catch exception Void catched620 void
                
                void
                )
              exception void
              )
            
            (
              Void unused1539=e2.#next()
              
              catch exception Void catched622 (
                Void unused1540=(
                  Void unused1542=e1.#checkEnd()
                  
                  catch exception Void catched623 void
                  
                  void
                  )
                Void unused1541=(
                  Void unused1543=e2.#checkEnd()
                  
                  catch exception Void catched624 void
                  
                  void
                  )
                exception void
                )
              
              ((
                This2.Abstract.Bool cond40=(
                  read This1 read$opPar32=e1.#inner()
                  read This1 read$opPar33=e2.#inner()
                  read$opPar32.#equalequal#0left(right:read$opPar33)
                  ).#bang()
                (
                  Void unused1544=cond40.#checkTrue()
                  
                  catch exception Void catched627 void
                  
                  (return This2.Abstract.Bool.false())
                  )
                ))
              )
            )
          
          catch exception Void catched628 void
          
          void
          )
        )
      )
    
    catch error This2.Abstract.CollectionsMut.IterationFailure catched629 (return This2.Abstract.Bool.false())
    
    (
      Void unused1545=return This2.Abstract.Bool.true()
      void
      )
    )
  
  catch return This2.Abstract.Bool result56 result56
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine read method 
This2.Abstract.Bool #equalequal#0left(read Any right) (
  Void unused1546=(
    Void unused1547=(
      read This0 right5=(
        Void unused1549=return right
        
        catch return read This0 casted26 casted26
        
        catch return read Any casted26 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched633 void
      
      (
        Void unused1550=return this.equals(that:right5)
        void
        )
      )
    Void unused1548=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result57 result57
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This2.Abstract.Size indexOfLeft(read This1 val) (
  Void unused1551=(
    This2.Abstract.Size size=this.size()
    var This2.Abstract.Size pos=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b260=This2.Abstract.Size.#builder()
      Void unused1553=b260.#0()
      b260
      ))
    Void unused1552=loop (
      Void unused1554=(
        This2.Abstract.Bool cond41=(
          read This1 read$opPar34=this.val(that:pos)
          read$opPar34.#equalequal#0left(right:val)
          )
        (
          Void unused1556=cond41.#checkTrue()
          
          catch exception Void catched639 void
          
          (return pos)
          )
        )
      Void unused1555=(
        This2.Abstract.Bool cond42=pos.#rightequal#0left(right:size)
        (
          Void unused1557=cond42.#checkTrue()
          
          catch exception Void catched641 void
          
          (return This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b261=This2.Abstract.Size.#builder()
            Void unused1558=b261.#less()
            Void unused1559=b261.#1()
            b261
            )))
          )
        )
      pos := (
        This2.Abstract.Size imm$opPar170=This2.Abstract.Size.#from(builder:(
          mut This2.Abstract.S.SBuilder b262=This2.Abstract.Size.#builder()
          Void unused1560=b262.#1()
          b262
          ))
        pos.#plus#0left(right:imm$opPar170)
        )
      )
    void
    )
  
  catch return This2.Abstract.Size result58 result58
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This2.Abstract.Size indexOfRight(read This1 val) (
  Void unused1561=(
    var This2.Abstract.Size pos=(
      This2.Abstract.Size imm$opPar171=this.size()
      This2.Abstract.Size imm$opPar172=This2.Abstract.Size.#from(builder:(
        mut This2.Abstract.S.SBuilder b263=This2.Abstract.Size.#builder()
        Void unused1563=b263.#1()
        b263
        ))
      imm$opPar171.#less#0left(right:imm$opPar172)
      )
    Void unused1562=loop (
      Void unused1564=(
        This2.Abstract.Bool cond43=(
          read This1 read$opPar35=this.val(that:pos)
          read$opPar35.#equalequal#0left(right:val)
          )
        (
          Void unused1566=cond43.#checkTrue()
          
          catch exception Void catched649 void
          
          (return pos)
          )
        )
      Void unused1565=(
        This2.Abstract.Bool cond44=(
          This2.Abstract.Size opNorm15=pos
          (
            This2.Abstract.Size imm$opPar173=This2.Abstract.Size.#from(builder:(
              mut This2.Abstract.S.SBuilder b264=This2.Abstract.Size.#builder()
              Void unused1567=b264.#0()
              b264
              ))
            imm$opPar173.#rightequal#0left(right:opNorm15)
            )
          )
        (
          Void unused1568=cond44.#checkTrue()
          
          catch exception Void catched653 void
          
          (return This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b265=This2.Abstract.Size.#builder()
            Void unused1569=b265.#less()
            Void unused1570=b265.#1()
            b265
            )))
          )
        )
      pos := (
        This2.Abstract.Size imm$opPar174=This2.Abstract.Size.#from(builder:(
          mut This2.Abstract.S.SBuilder b266=This2.Abstract.Size.#builder()
          Void unused1571=b266.#1()
          b266
          ))
        pos.#less#0left(right:imm$opPar174)
        )
      )
    void
    )
  
  catch return This2.Abstract.Size result59 result59
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method /*from VectorTrait
*/This0 without(This2.Abstract.Size index) This0.#immK(inner:this.inner().without(that:index))
method 
This0 withoutLeft(read This1 val) (
  Void unused1572=(
    This2.Abstract.Size pos=this.indexOfLeft(val:val)
    Void unused1573=(
      This2.Abstract.Bool cond45=(
        This2.Abstract.Size opNorm16=pos
        (
          This2.Abstract.Size imm$opPar175=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b267=This2.Abstract.Size.#builder()
            Void unused1575=b267.#0()
            b267
            ))
          imm$opPar175.#right#0left(right:opNorm16)
          )
        )
      (
        Void unused1576=cond45.#checkTrue()
        
        catch exception Void catched662 void
        
        (return this)
        )
      )
    Void unused1574=return this.without(index:pos)
    void
    )
  
  catch return This0 result60 result60
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0 withoutRight(read This1 val) (
  Void unused1577=(
    This2.Abstract.Size pos=this.indexOfRight(val:val)
    Void unused1578=(
      This2.Abstract.Bool cond46=(
        This2.Abstract.Size opNorm17=pos
        (
          This2.Abstract.Size imm$opPar176=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b268=This2.Abstract.Size.#builder()
            Void unused1580=b268.#0()
            b268
            ))
          imm$opPar176.#right#0left(right:opNorm17)
          )
        )
      (
        Void unused1581=cond46.#checkTrue()
        
        catch exception Void catched668 void
        
        (return this)
        )
      )
    Void unused1579=return this.without(index:pos)
    void
    )
  
  catch return This0 result61 result61
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0 withoutAll(read This1 val) (
  Void unused1582=(/*This[with e in this.vals() (if e!=val (use[e]))]
*/
    Void unused1583=(
      This2.Abstract.Bool cond47=this.isEmpty()
      (
        Void unused1586=cond47.#checkTrue()
        
        catch exception Void catched672 void
        
        (return this)
        )
      )
    This0 rec=this.withoutLeft().withoutAll(val:val)
    Void unused1584=(
      This2.Abstract.Bool cond48=(
        read This1 read$opPar36=this.left()
        read$opPar36.#equalequal#0left(right:val)
        )
      (
        Void unused1587=cond48.#checkTrue()
        
        catch exception Void catched674 void
        
        (return rec)
        )
      )
    Void unused1585=return rec.withAlsoLeft(that:this.left())
    void
    )
  
  catch return This0 result62 result62
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method /*from VectorTrait
*/Void remove(This2.Abstract.Size that) this.#inner().remove(that:that)
mut method 
Void removeAll(read This1 val) (
  Void unused1588=(
    var This2.Abstract.Size pos=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b269=This2.Abstract.Size.#builder()
      Void unused1590=b269.#0()
      b269
      ))
    Void unused1589=loop (
      Void unused1591=(
        This2.Abstract.Bool cond49=(
          read This1 read$opPar37=this.val(that:pos)
          read$opPar37.#equalequal#0left(right:val)
          )
        (
          Void unused1592=cond49.#checkTrue()
          
          catch exception Void catched679 (pos := (
            This2.Abstract.Size imm$opPar177=This2.Abstract.Size.#from(builder:(
              mut This2.Abstract.S.SBuilder b270=This2.Abstract.Size.#builder()
              Void unused1593=b270.#1()
              b270
              ))
            pos.#plus#0left(right:imm$opPar177)
            ))
          
          (this.remove(that:pos))
          )
        )
      (
        This2.Abstract.Bool cond50=(
          This2.Abstract.Size read$opPar38=this.size()
          pos.#equalequal#0left(right:read$opPar38)
          )
        (
          Void unused1594=cond50.#checkTrue()
          
          catch exception Void catched683 void
          
          (return void)
          )
        )
      )
    void
    )
  
  catch return Void result63 result63
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void removeLeft(read This1 val) (
  Void unused1595=(
    This2.Abstract.Size pos=this.indexOfLeft(val:val)
    Void unused1596=(
      This2.Abstract.Bool cond51=(
        This2.Abstract.Size opNorm18=pos
        (
          This2.Abstract.Size imm$opPar178=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b271=This2.Abstract.Size.#builder()
            Void unused1598=b271.#0()
            b271
            ))
          imm$opPar178.#right#0left(right:opNorm18)
          )
        )
      (
        Void unused1599=cond51.#checkTrue()
        
        catch exception Void catched689 void
        
        (return void)
        )
      )
    Void unused1597=return this.remove(that:pos)
    void
    )
  
  catch return Void result64 result64
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void removeRight(read This1 val) (
  Void unused1600=(
    This2.Abstract.Size pos=this.indexOfRight(val:val)
    Void unused1601=(
      This2.Abstract.Bool cond52=(
        This2.Abstract.Size opNorm19=pos
        (
          This2.Abstract.Size imm$opPar179=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b272=This2.Abstract.Size.#builder()
            Void unused1603=b272.#0()
            b272
            ))
          imm$opPar179.#right#0left(right:opNorm19)
          )
        )
      (
        Void unused1604=cond52.#checkTrue()
        
        catch exception Void catched695 void
        
        (return void)
        )
      )
    Void unused1602=return this.remove(that:pos)
    void
    )
  
  catch return Void result65 result65
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
Cast: {
class method 
read This2 #apply(read Any that) (
  Void unused1097=(
    Void unused1098=(
      read This2 that11=(
        Void unused1100=return that
        
        catch return read This2 casted24 casted24
        
        catch return read Any casted24 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched503 void
      
      (
        Void unused1101=return that11
        void
        )
      )
    Void unused1099=error This3.Abstract.CollectionsMut.CollectionErrors.cast()
    void
    )
  
  catch return read This2 result47 result47
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
mut This2 mut(mut Any that) (
  Void unused1102=(
    Void unused1103=(
      mut This2 that12=(
        Void unused1105=return that
        
        catch return mut This2 casted25 casted25
        
        catch return mut Any casted25 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched508 void
      
      (
        Void unused1106=return that12
        void
        )
      )
    Void unused1104=error This3.Abstract.CollectionsMut.CollectionErrors.cast()
    void
    )
  
  catch return mut This2 result48 result48
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )}
IteratorTrait: {
class method 
Library #apply()  {
read method 
read This4.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This4.Abstract.CollectionsMut.MutListAny #that() 
read method 
This4.Abstract.Size from() 
mut method 
Void from(This4.Abstract.Size that) 
read method 
This4.Abstract.Size maxTo() 
read method 
This4.Abstract.Size minTo() 
read method 
This4.Abstract.Bool isFill() 
read method 
read This3 filled() 
mut method 
mut This3 #filled() 
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This4.Abstract.Size imm$opPar148=this.from()
    This4.Abstract.Size imm$opPar149=This4.Abstract.Size.#from(builder:(
      mut This4.Abstract.S.SBuilder b238=This4.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This4.Abstract.Bool cond31=(
      This4.Abstract.Bool imm$opPar154=(
        This4.Abstract.Size imm$opPar150=this.maxTo()
        This4.Abstract.Size imm$opPar151=This4.Abstract.Size.#from(builder:(
          mut This4.Abstract.S.SBuilder b239=This4.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This4.Abstract.Bool imm$opPar155=(
        This4.Abstract.Size imm$opPar152=this.from()
        This4.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This4.Abstract.Bool cond32=(
      This4.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This4.Abstract.Bool imm$opPar159=(
        This4.Abstract.Size imm$opPar156=this.from()
        This4.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This4.Abstract.Bool cond33=(
    This4.Abstract.Size opNorm12=this.from()
    (
      This4.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This4.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This3 readInner() (
  Void unused1138=(
    Void unused1139=(
      This4.Abstract.Bool cond34=(
        This4.Abstract.Size opNorm13=this.from()
        (
          This4.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This2.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This3 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This3 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This4.Abstract.Bool cond35=(
        This4.Abstract.Size opNorm14=this.from()
        (
          This4.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This2.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This3 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #close() void}}
IteratorValFill: {
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This3.Abstract.Size imm$opPar148=this.from()
    This3.Abstract.Size imm$opPar149=This3.Abstract.Size.#from(builder:(
      mut This3.Abstract.S.SBuilder b238=This3.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This3.Abstract.Bool cond31=(
      This3.Abstract.Bool imm$opPar154=(
        This3.Abstract.Size imm$opPar150=this.maxTo()
        This3.Abstract.Size imm$opPar151=This3.Abstract.Size.#from(builder:(
          mut This3.Abstract.S.SBuilder b239=This3.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This3.Abstract.Bool imm$opPar155=(
        This3.Abstract.Size imm$opPar152=this.from()
        This3.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This3.Abstract.Bool cond32=(
      This3.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This3.Abstract.Bool imm$opPar159=(
        This3.Abstract.Size imm$opPar156=this.from()
        This3.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This3.Abstract.Bool cond33=(
    This3.Abstract.Size opNorm12=this.from()
    (
      This3.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This3.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This2 readInner() (
  Void unused1138=(
    Void unused1139=(
      This3.Abstract.Bool cond34=(
        This3.Abstract.Size opNorm13=this.from()
        (
          This3.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This1.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This2 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This2 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This3.Abstract.Bool cond35=(
        This3.Abstract.Size opNorm14=this.from()
        (
          This3.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This1.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This2 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #close() void
mut method 
Void from(This3.Abstract.Size that) 
read method 
This3.Abstract.Size from() 
read method 
This3.Abstract.Size maxTo() 
read method 
This3.Abstract.Size minTo() 
read method 
read This2 filled() 
mut method 
mut This2 #filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b251=This3.Abstract.X.#builder()
  Void unused1309=b251.#t()
  Void unused1310=b251.#y()
  Void unused1311=b251.#p()
  Void unused1312=b251.#e()
  Void unused1313=b251.#space()
  Void unused1314=b251.#s()
  Void unused1315=b251.#y()
  Void unused1316=b251.#s()
  Void unused1317=b251.#t()
  Void unused1318=b251.#e()
  Void unused1319=b251.#m()
  Void unused1320=b251.#space()
  Void unused1321=b251.#s()
  Void unused1322=b251.#h()
  Void unused1323=b251.#o()
  Void unused1324=b251.#u()
  Void unused1325=b251.#l()
  Void unused1326=b251.#d()
  Void unused1327=b251.#space()
  Void unused1328=b251.#m()
  Void unused1329=b251.#a()
  Void unused1330=b251.#k()
  Void unused1331=b251.#e()
  Void unused1332=b251.#space()
  Void unused1333=b251.#i()
  Void unused1334=b251.#t()
  Void unused1335=b251.#space()
  Void unused1336=b251.#n()
  Void unused1337=b251.#o()
  Void unused1338=b251.#t()
  Void unused1339=b251.#space()
  Void unused1340=b251.#c()
  Void unused1341=b251.#a()
  Void unused1342=b251.#l()
  Void unused1343=b251.#l()
  Void unused1344=b251.#e()
  Void unused1345=b251.#d()
  b251
  ))
read method 
read This3.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This3.Abstract.CollectionsMut.MutListAny #that() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b252=This3.Abstract.X.#builder()
  Void unused1346=b252.#t()
  Void unused1347=b252.#y()
  Void unused1348=b252.#p()
  Void unused1349=b252.#e()
  Void unused1350=b252.#space()
  Void unused1351=b252.#s()
  Void unused1352=b252.#y()
  Void unused1353=b252.#s()
  Void unused1354=b252.#t()
  Void unused1355=b252.#e()
  Void unused1356=b252.#m()
  Void unused1357=b252.#space()
  Void unused1358=b252.#s()
  Void unused1359=b252.#h()
  Void unused1360=b252.#o()
  Void unused1361=b252.#u()
  Void unused1362=b252.#l()
  Void unused1363=b252.#d()
  Void unused1364=b252.#space()
  Void unused1365=b252.#m()
  Void unused1366=b252.#a()
  Void unused1367=b252.#k()
  Void unused1368=b252.#e()
  Void unused1369=b252.#space()
  Void unused1370=b252.#i()
  Void unused1371=b252.#t()
  Void unused1372=b252.#space()
  Void unused1373=b252.#n()
  Void unused1374=b252.#o()
  Void unused1375=b252.#t()
  Void unused1376=b252.#space()
  Void unused1377=b252.#c()
  Void unused1378=b252.#a()
  Void unused1379=b252.#l()
  Void unused1380=b252.#l()
  Void unused1381=b252.#e()
  Void unused1382=b252.#d()
  b252
  ))
class method 
lent This0 #apply(read This3.Abstract.CollectionsMut.MutListAny that, This3.Abstract.Size from, This3.Abstract.Size maxTo, This3.Abstract.Size minTo, read This2 filled) 
read method 
read This2 #inner() this.readInner()
read method 
This3.Abstract.Bool isFill() This3.Abstract.Bool.true()}
IteratorVar: {
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This3.Abstract.Size imm$opPar148=this.from()
    This3.Abstract.Size imm$opPar149=This3.Abstract.Size.#from(builder:(
      mut This3.Abstract.S.SBuilder b238=This3.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This3.Abstract.Bool cond31=(
      This3.Abstract.Bool imm$opPar154=(
        This3.Abstract.Size imm$opPar150=this.maxTo()
        This3.Abstract.Size imm$opPar151=This3.Abstract.Size.#from(builder:(
          mut This3.Abstract.S.SBuilder b239=This3.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This3.Abstract.Bool imm$opPar155=(
        This3.Abstract.Size imm$opPar152=this.from()
        This3.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This3.Abstract.Bool cond32=(
      This3.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This3.Abstract.Bool imm$opPar159=(
        This3.Abstract.Size imm$opPar156=this.from()
        This3.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This3.Abstract.Bool cond33=(
    This3.Abstract.Size opNorm12=this.from()
    (
      This3.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This3.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This2 readInner() (
  Void unused1138=(
    Void unused1139=(
      This3.Abstract.Bool cond34=(
        This3.Abstract.Size opNorm13=this.from()
        (
          This3.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This1.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This2 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This2 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This3.Abstract.Bool cond35=(
        This3.Abstract.Size opNorm14=this.from()
        (
          This3.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This1.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This2 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #close() void
read method 
read This3.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This3.Abstract.CollectionsMut.MutListAny #that() 
mut method 
Void from(This3.Abstract.Size that) 
read method 
This3.Abstract.Size from() 
read method 
This3.Abstract.Size maxTo() 
read method 
This3.Abstract.Size minTo() 
class method 
mut This0 #apply(mut This3.Abstract.CollectionsMut.MutListAny that, This3.Abstract.Size from, This3.Abstract.Size maxTo, This3.Abstract.Size minTo) 
mut method 
Void inner(mut This2 that) (
  mut This3.Abstract.CollectionsMut.MutListAny rcv35=this.#that()
  rcv35.#apply(that:this.from(), val:that)
  )
mut method 
mut This2 #inner() this.mutInner()
read method 
This3.Abstract.Bool isFill() This3.Abstract.Bool.false()
read method 
read This2 filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b258=This3.Abstract.X.#builder()
  Void unused1391=b258.#F()
  Void unused1392=b258.#i()
  Void unused1393=b258.#l()
  Void unused1394=b258.#l()
  Void unused1395=b258.#e()
  Void unused1396=b258.#d()
  Void unused1397=b258.#space()
  Void unused1398=b258.#c()
  Void unused1399=b258.#a()
  Void unused1400=b258.#l()
  Void unused1401=b258.#l()
  Void unused1402=b258.#e()
  Void unused1403=b258.#d()
  Void unused1404=b258.#space()
  Void unused1405=b258.#o()
  Void unused1406=b258.#n()
  Void unused1407=b258.#space()
  Void unused1408=b258.#n()
  Void unused1409=b258.#o()
  Void unused1410=b258.#t()
  Void unused1411=b258.#space()
  Void unused1412=b258.#f()
  Void unused1413=b258.#i()
  Void unused1414=b258.#l()
  Void unused1415=b258.#l()
  Void unused1416=b258.#space()
  Void unused1417=b258.#i()
  Void unused1418=b258.#t()
  Void unused1419=b258.#e()
  Void unused1420=b258.#r()
  Void unused1421=b258.#a()
  Void unused1422=b258.#t()
  Void unused1423=b258.#o()
  Void unused1424=b258.#r()
  Void unused1425=b258.#comma()
  Void unused1426=b258.#space()
  Void unused1427=b258.#s()
  Void unused1428=b258.#h()
  Void unused1429=b258.#o()
  Void unused1430=b258.#u()
  Void unused1431=b258.#l()
  Void unused1432=b258.#d()
  Void unused1433=b258.#space()
  Void unused1434=b258.#n()
  Void unused1435=b258.#e()
  Void unused1436=b258.#v()
  Void unused1437=b258.#e()
  Void unused1438=b258.#r()
  Void unused1439=b258.#space()
  Void unused1440=b258.#h()
  Void unused1441=b258.#a()
  Void unused1442=b258.#p()
  Void unused1443=b258.#p()
  Void unused1444=b258.#e()
  Void unused1445=b258.#n()
  b258
  ))
mut method 
mut This2 #filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b259=This3.Abstract.X.#builder()
  Void unused1446=b259.#F()
  Void unused1447=b259.#i()
  Void unused1448=b259.#l()
  Void unused1449=b259.#l()
  Void unused1450=b259.#e()
  Void unused1451=b259.#d()
  Void unused1452=b259.#space()
  Void unused1453=b259.#c()
  Void unused1454=b259.#a()
  Void unused1455=b259.#l()
  Void unused1456=b259.#l()
  Void unused1457=b259.#e()
  Void unused1458=b259.#d()
  Void unused1459=b259.#space()
  Void unused1460=b259.#o()
  Void unused1461=b259.#n()
  Void unused1462=b259.#space()
  Void unused1463=b259.#n()
  Void unused1464=b259.#o()
  Void unused1465=b259.#t()
  Void unused1466=b259.#space()
  Void unused1467=b259.#f()
  Void unused1468=b259.#i()
  Void unused1469=b259.#l()
  Void unused1470=b259.#l()
  Void unused1471=b259.#space()
  Void unused1472=b259.#i()
  Void unused1473=b259.#t()
  Void unused1474=b259.#e()
  Void unused1475=b259.#r()
  Void unused1476=b259.#a()
  Void unused1477=b259.#t()
  Void unused1478=b259.#o()
  Void unused1479=b259.#r()
  Void unused1480=b259.#comma()
  Void unused1481=b259.#space()
  Void unused1482=b259.#s()
  Void unused1483=b259.#h()
  Void unused1484=b259.#o()
  Void unused1485=b259.#u()
  Void unused1486=b259.#l()
  Void unused1487=b259.#d()
  Void unused1488=b259.#space()
  Void unused1489=b259.#n()
  Void unused1490=b259.#e()
  Void unused1491=b259.#v()
  Void unused1492=b259.#e()
  Void unused1493=b259.#r()
  Void unused1494=b259.#space()
  Void unused1495=b259.#h()
  Void unused1496=b259.#a()
  Void unused1497=b259.#p()
  Void unused1498=b259.#p()
  Void unused1499=b259.#e()
  Void unused1500=b259.#n()
  b259
  ))}
IteratorVal: {
read method 
read This2 readInner() (
  Void unused1138=(
    Void unused1139=(
      This3.Abstract.Bool cond34=(
        This3.Abstract.Size opNorm13=this.from()
        (
          This3.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This1.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This2 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This2 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This3.Abstract.Bool cond35=(
        This3.Abstract.Size opNorm14=this.from()
        (
          This3.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This1.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This2 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void from(This3.Abstract.Size that) 
read method 
This3.Abstract.Size from() 
read method 
This3.Abstract.Size maxTo() 
read method 
This3.Abstract.Size minTo() 
read method 
read This3.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This3.Abstract.CollectionsMut.MutListAny #that() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b244=This3.Abstract.X.#builder()
  Void unused1154=b244.#t()
  Void unused1155=b244.#y()
  Void unused1156=b244.#p()
  Void unused1157=b244.#e()
  Void unused1158=b244.#space()
  Void unused1159=b244.#s()
  Void unused1160=b244.#y()
  Void unused1161=b244.#s()
  Void unused1162=b244.#t()
  Void unused1163=b244.#e()
  Void unused1164=b244.#m()
  Void unused1165=b244.#space()
  Void unused1166=b244.#s()
  Void unused1167=b244.#h()
  Void unused1168=b244.#o()
  Void unused1169=b244.#u()
  Void unused1170=b244.#l()
  Void unused1171=b244.#d()
  Void unused1172=b244.#space()
  Void unused1173=b244.#m()
  Void unused1174=b244.#a()
  Void unused1175=b244.#k()
  Void unused1176=b244.#e()
  Void unused1177=b244.#space()
  Void unused1178=b244.#i()
  Void unused1179=b244.#t()
  Void unused1180=b244.#space()
  Void unused1181=b244.#n()
  Void unused1182=b244.#o()
  Void unused1183=b244.#t()
  Void unused1184=b244.#space()
  Void unused1185=b244.#c()
  Void unused1186=b244.#a()
  Void unused1187=b244.#l()
  Void unused1188=b244.#l()
  Void unused1189=b244.#e()
  Void unused1190=b244.#d()
  b244
  ))
class method 
lent This0 #apply(read This3.Abstract.CollectionsMut.MutListAny that, This3.Abstract.Size from, This3.Abstract.Size maxTo, This3.Abstract.Size minTo) 
read method 
This3.Abstract.Bool isFill() This3.Abstract.Bool.false()
read method 
read This2 filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b245=This3.Abstract.X.#builder()
  Void unused1191=b245.#F()
  Void unused1192=b245.#i()
  Void unused1193=b245.#l()
  Void unused1194=b245.#l()
  Void unused1195=b245.#e()
  Void unused1196=b245.#d()
  Void unused1197=b245.#space()
  Void unused1198=b245.#c()
  Void unused1199=b245.#a()
  Void unused1200=b245.#l()
  Void unused1201=b245.#l()
  Void unused1202=b245.#e()
  Void unused1203=b245.#d()
  Void unused1204=b245.#space()
  Void unused1205=b245.#o()
  Void unused1206=b245.#n()
  Void unused1207=b245.#space()
  Void unused1208=b245.#n()
  Void unused1209=b245.#o()
  Void unused1210=b245.#t()
  Void unused1211=b245.#space()
  Void unused1212=b245.#f()
  Void unused1213=b245.#i()
  Void unused1214=b245.#l()
  Void unused1215=b245.#l()
  Void unused1216=b245.#space()
  Void unused1217=b245.#i()
  Void unused1218=b245.#t()
  Void unused1219=b245.#e()
  Void unused1220=b245.#r()
  Void unused1221=b245.#a()
  Void unused1222=b245.#t()
  Void unused1223=b245.#o()
  Void unused1224=b245.#r()
  Void unused1225=b245.#comma()
  Void unused1226=b245.#space()
  Void unused1227=b245.#s()
  Void unused1228=b245.#h()
  Void unused1229=b245.#o()
  Void unused1230=b245.#u()
  Void unused1231=b245.#l()
  Void unused1232=b245.#d()
  Void unused1233=b245.#space()
  Void unused1234=b245.#n()
  Void unused1235=b245.#e()
  Void unused1236=b245.#v()
  Void unused1237=b245.#e()
  Void unused1238=b245.#r()
  Void unused1239=b245.#space()
  Void unused1240=b245.#h()
  Void unused1241=b245.#a()
  Void unused1242=b245.#p()
  Void unused1243=b245.#p()
  Void unused1244=b245.#e()
  Void unused1245=b245.#n()
  b245
  ))
mut method 
mut This2 #filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b246=This3.Abstract.X.#builder()
  Void unused1246=b246.#F()
  Void unused1247=b246.#i()
  Void unused1248=b246.#l()
  Void unused1249=b246.#l()
  Void unused1250=b246.#e()
  Void unused1251=b246.#d()
  Void unused1252=b246.#space()
  Void unused1253=b246.#c()
  Void unused1254=b246.#a()
  Void unused1255=b246.#l()
  Void unused1256=b246.#l()
  Void unused1257=b246.#e()
  Void unused1258=b246.#d()
  Void unused1259=b246.#space()
  Void unused1260=b246.#o()
  Void unused1261=b246.#n()
  Void unused1262=b246.#space()
  Void unused1263=b246.#n()
  Void unused1264=b246.#o()
  Void unused1265=b246.#t()
  Void unused1266=b246.#space()
  Void unused1267=b246.#f()
  Void unused1268=b246.#i()
  Void unused1269=b246.#l()
  Void unused1270=b246.#l()
  Void unused1271=b246.#space()
  Void unused1272=b246.#i()
  Void unused1273=b246.#t()
  Void unused1274=b246.#e()
  Void unused1275=b246.#r()
  Void unused1276=b246.#a()
  Void unused1277=b246.#t()
  Void unused1278=b246.#o()
  Void unused1279=b246.#r()
  Void unused1280=b246.#comma()
  Void unused1281=b246.#space()
  Void unused1282=b246.#s()
  Void unused1283=b246.#h()
  Void unused1284=b246.#o()
  Void unused1285=b246.#u()
  Void unused1286=b246.#l()
  Void unused1287=b246.#d()
  Void unused1288=b246.#space()
  Void unused1289=b246.#n()
  Void unused1290=b246.#e()
  Void unused1291=b246.#v()
  Void unused1292=b246.#e()
  Void unused1293=b246.#r()
  Void unused1294=b246.#space()
  Void unused1295=b246.#h()
  Void unused1296=b246.#a()
  Void unused1297=b246.#p()
  Void unused1298=b246.#p()
  Void unused1299=b246.#e()
  Void unused1300=b246.#n()
  b246
  ))
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This3.Abstract.Size imm$opPar148=this.from()
    This3.Abstract.Size imm$opPar149=This3.Abstract.Size.#from(builder:(
      mut This3.Abstract.S.SBuilder b238=This3.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This3.Abstract.Bool cond31=(
      This3.Abstract.Bool imm$opPar154=(
        This3.Abstract.Size imm$opPar150=this.maxTo()
        This3.Abstract.Size imm$opPar151=This3.Abstract.Size.#from(builder:(
          mut This3.Abstract.S.SBuilder b239=This3.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This3.Abstract.Bool imm$opPar155=(
        This3.Abstract.Size imm$opPar152=this.from()
        This3.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This3.Abstract.Bool cond32=(
      This3.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This3.Abstract.Bool imm$opPar159=(
        This3.Abstract.Size imm$opPar156=this.from()
        This3.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This3.Abstract.Bool cond33=(
    This3.Abstract.Size opNorm12=this.from()
    (
      This3.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This3.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This2 #inner() this.readInner()
read method 
Void #close() void}}}
DispatchTrait: {
class method 
Any val()  {
read method 
This2.Abstract.S id() 
read method 
read This2.Widget.List children() 
mut method 
mut This2.Widget.List #children() 
mut method 
Void process(This2.Event event) 
mut method 
This2.Abstract.Bool dispatch(This2.Event that) (
  Void unused27097=(
    Void unused27098=(
      This2.Abstract.Bool cond128=(
        This2.Abstract.S read$opPar118=this.id()
        This2.Abstract.S read$opPar119=that.targetId()
        read$opPar118.#equalequal#0left(right:read$opPar119)
        )
      (
        Void unused27101=cond128.#checkTrue()
        
        catch exception Void catched47414 void
        
        (
          Void unused27102=this.process(event:that)
          return This2.Abstract.Bool.true()
          )
        )
      )
    Void unused27099=(
      mut This2.Widget.List.IteratorVar w=this.#children().#vals()
      (
        Void unused27103=loop (
          Void unused27104=w.#next()
          
          catch exception Void catched47417 (
            Void unused27105=(
              Void unused27106=w.#checkEnd()
              
              catch exception Void catched47418 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond129=w.#inner().dispatch(that:that)
            (
              Void unused27107=cond129.#checkTrue()
              
              catch exception Void catched47421 void
              
              (return This2.Abstract.Bool.true())
              )
            ))
          )
        
        catch exception Void catched47422 void
        
        void
        )
      )
    Void unused27100=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result168 result168
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )}
class method 
Library #apply() (
  Void unused20291=(
    Void unused20292=(
      Any val=this.val()
      (
        Library val1=(
          Void unused20294=return val
          
          catch return Library casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused20295=return val1
          void
          )
        )
      )
    Void unused20293=error This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_459.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return Library result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )}
Abstract: {
Alu: {/*@plugin
L42.is/connected/withAlu
*/}
ExitCode: {
class method /*To signal normal program completion
*/Library normal() 
class method /*To signal a failure in program completion
*/Library failure() }
Bool: {implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
read method 
Library _binaryRepr() 
class method 
mut This0 #apply(Library _binaryRepr) 
read method 
This0 clone() 
read method 
Library #binaryRepr() 
class method 
mut This0 #from(Library binaryRepr) 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This0 is(class This1.Concept.Classable subtype) 
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine read method 
This1.S toS() 
refine read method 
This0 #equalequal#0left(read Any right) 
read method 
Void #checkTrue() exception Void 
class method 
This0 true() 
class method 
This0 false() 
method 
This0 #and#0left(This0 right) 
method 
This0 #or#0left(This0 right) 
method 
This0 #bang() 
read method 
This0 equals(read This0 that) 
class method 
This0 fromS(read This1.Concept.ToS that) 
class method 
Any parseError(This1.S that) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1 is(class This2.Concept.Classable subtype) 
refine read method 
This1 #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This1 equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Size: {implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable/*@_private
*/
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(This1.S.SBuilder builder) 
refine read method 
This1.S toS() 
method 
This0 #plus#0left(This0 right) 
method 
This0 #less#0left(This0 right) 
method 
This0 #times#0left(This0 right) 
method 
This0 #divide#0left(This0 right) 
read method 
This1.Bool equals(read This0 that) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
method 
This1.Bool #right#0left(This0 right) 
method 
This1.Bool #rightequal#0left(This0 right) 
method 
mut This0.Iterator vals() 
method 
mut This0.Iterator vals(This0 upTo) 
class method 
This0 #0() 
class method 
This0 #1() 
class method 
This0 #2() 
class method 
This0 #3() 
class method 
This0 #4() 
class method 
This0 #5() 
class method 
This0 #6() 
class method 
This0 #7() 
class method 
This0 #8() 
class method 
This0 #9() 
class method 
This0 #10() 
class method 
This0 #11() 
class method 
This0 #12() 
class method 
This0 #13() 
class method 
This0 #14() 
class method 
This0 #15() 
class method 
This0 #16() 
class method 
This0 #17() 
class method 
This0 #18() 
class method 
This0 #19() 
class method 
This0 #20() 
class method 
This0 #21() 
class method 
This0 #22() 
class method 
This0 #23() 
class method 
This0 #24() 
class method 
This0 #25() 
class method 
This0 #26() 
class method 
This0 #27() 
class method 
This0 #28() 
class method 
This0 #29() 
class method 
This0 #30() 
class method 
This0 #31() 
class method 
This0 #32() 
class method 
This0 #33() 
class method 
This0 #34() 
class method 
This0 #35() 
class method 
This0 #36() 
class method 
This0 #37() 
class method 
This0 #38() 
class method 
This0 #39() 
class method 
This0 #40() 
class method 
This0 #41() 
class method 
This0 #42() 
class method 
This0 #43() 
class method 
This0 #44() 
class method 
This0 #45() 
class method 
This0 #46() 
class method 
This0 #47() 
class method 
This0 #48() 
class method 
This0 #49() 
class method 
This0 #50() 
class method 
This0 #51() 
class method 
This0 #52() 
class method 
This0 #53() 
class method 
This0 #54() 
class method 
This0 #55() 
class method 
This0 #56() 
class method 
This0 #57() 
class method 
This0 #58() 
class method 
This0 #59() 
class method 
This0 #60() 
class method 
This0 #61() 
class method 
This0 #62() 
class method 
This0 #63() 
class method 
Any parseError(This1.S that) 
Iterator: {
mut method 
Void start(This1 that) 
read method 
This1 start() 
read method 
This1 end() 
class method 
mut This0 #apply(This1 start, This1 end) 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This1 #inner() 
read method 
Void #close() }
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Num: {implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
Any parseError(This1.S that) 
refine read method 
This1.S toS() 
method 
This0 #plus#0left(This0 right) 
method 
This0 #less#0left(This0 right) 
method 
This0 #times#0left(This0 right) 
method 
This0 #divide#0left(This0 right) 
read method 
This1.Bool equals(read This0 that) 
method 
This1.Bool #right#0left(This0 right) 
method 
This1.Bool #rightequal#0left(This0 right) 
Plg: {/*@plugin
L42.is/connected/withNumbers
*/}
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
S: {implements This1.Concept.Base/*, Concept.Equals //needed until we do (also refine) normalization
*/, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals, This1.Concept.ToS
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
read method 
This0 clone() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This0 readableName() 
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
method 
This0 #plusplus#0left(This0 right) 
read method 
This1.Bool equals(read This0 that) 
method 
This0 #less#0left(This0 right) 
method 
This1.Bool #rightright#0left(This0 right) 
method 
This1.Bool #rightrightequal#0left(This0 right) 
method 
This1.Bool #right#0left(This0 right) 
method 
This1.Size indexOfLeft(This0 val) 
method 
This1.Size indexOfLeft(This0 val, This1.Size start) 
method 
This1.Size indexOfRight(This0 val) 
method 
This0 withoutLeft(This0 val) 
method 
This0 withoutRight(This0 val) 
method 
This0 withoutAll(This0 val) 
method 
This1.Bool isEmpty() 
method 
This0 val(This1.Size that) 
method 
This1.Size #default#val(Void that) 
method 
This0 left() 
method 
This0 right() 
method 
This0 with(This1.Size that, This0 val) 
method 
This1.Size #default#with(Void that) 
method 
This0 withLeft(This0 that) 
method 
This0 withRight(This0 that) 
method 
This0 withAlso(This1.Size that, This0 val) 
method 
This1.Size #default#withAlso(Void that) 
method 
This0 withAlsoLeft(This0 that) 
method 
This0 withAlsoRight(This0 that) 
method 
This0 without(This1.Size index) 
method 
This1.Size #default#without(Void index) 
method 
This0 without(This1.Size index, This1.Size skipNum) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
method 
This1.Bool contains(This0 that) 
method 
This0 #apply(This1.Size start, This1.Size end) 
method 
This0 #apply(This1.Size that) 
method 
This0 #apply(This1.Size start) 
method 
This0 #apply(This1.Size end) 
method 
This1.Size #default##apply(Void that) 
method 
This1.Size #default##apply(Void end) 
method 
This1.Size #default##apply(Void start) 
method 
This1.Size size() 
method 
This1.Bool subStrEq(This0 that, This1.Size start) 
method 
This1.Bool beginsWith(This0 that) 
class method 
This0 aSCIILowerCase() 
class method 
This0 aSCIIUpperCase() 
method 
This1.Bool isASCIILowerCase(This1.Size that) 
method 
This1.Bool isASCIIUpperCase(This1.Size that) 
class method 
This0 doubleQuote() 
class method 
This0 nl() 
method 
This0 replace(This0 that, This0 into) 
method 
This0 as42MultilineString() 
method 
This0.Continue #from(This0.SConcat seqBuilder) 
method 
mut This0.SConcat #seqBuilder() 
class method 
This0 #from(This0.SBuilder builder) 
class method 
mut This0.SBuilder #builder() 
refine read method 
This0 toS() 
method 
This1.Strings splitOn(This0 chars) 
Continue: {
read method 
This1 that() 
class method 
This0 #apply(This1 that) 
method 
mut This1.SBuilder #builder() 
method 
This1 #from(This1.SBuilder builder) }
SConcat: {
read method 
This1 old() 
mut method 
Void accumulator(This1 that) 
read method 
This1 accumulator() 
class method 
mut This0 #apply(This1 old, This1 accumulator) 
mut method 
Void #add(read This2.Concept.ToS that) 
mut method 
Void #add(read This2.Concept.ToS that, This2.Concept.ToS sep) }
SBuilder: {
mut method 
Void _binaryRepr(Library that) 
read method 
Library _binaryRepr() 
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library #binaryRepr() 
mut method 
Void acc(Library that) 
class method 
mut This0 empty() 
mut method 
Void #0() 
mut method 
Void #1() 
mut method 
Void #2() 
mut method 
Void #3() 
mut method 
Void #4() 
mut method 
Void #5() 
mut method 
Void #6() 
mut method 
Void #7() 
mut method 
Void #8() 
mut method 
Void #9() 
mut method 
Void #q() 
mut method 
Void #w() 
mut method 
Void #e() 
mut method 
Void #r() 
mut method 
Void #t() 
mut method 
Void #y() 
mut method 
Void #u() 
mut method 
Void #i() 
mut method 
Void #o() 
mut method 
Void #p() 
mut method 
Void #a() 
mut method 
Void #s() 
mut method 
Void #d() 
mut method 
Void #f() 
mut method 
Void #g() 
mut method 
Void #h() 
mut method 
Void #j() 
mut method 
Void #k() 
mut method 
Void #l() 
mut method 
Void #z() 
mut method 
Void #x() 
mut method 
Void #c() 
mut method 
Void #v() 
mut method 
Void #b() 
mut method 
Void #n() 
mut method 
Void #m() 
mut method 
Void #Q() 
mut method 
Void #W() 
mut method 
Void #E() 
mut method 
Void #R() 
mut method 
Void #T() 
mut method 
Void #Y() 
mut method 
Void #U() 
mut method 
Void #I() 
mut method 
Void #O() 
mut method 
Void #P() 
mut method 
Void #A() 
mut method 
Void #S() 
mut method 
Void #D() 
mut method 
Void #F() 
mut method 
Void #G() 
mut method 
Void #H() 
mut method 
Void #J() 
mut method 
Void #K() 
mut method 
Void #L() 
mut method 
Void #Z() 
mut method 
Void #X() 
mut method 
Void #C() 
mut method 
Void #V() 
mut method 
Void #B() 
mut method 
Void #N() 
mut method 
Void #M() 
mut method 
Void #%() 
mut method 
Void #left() 
mut method 
Void #right() 
mut method 
Void #bang() 
mut method 
Void #tilde() 
mut method 
Void #plus() 
mut method 
Void #times() 
mut method 
Void #divide() 
mut method 
Void #less() 
mut method 
Void #and() 
mut method 
Void #or() 
mut method 
Void #oRound() 
mut method 
Void #cRound() 
mut method 
Void #oSquare() 
mut method 
Void #cSquare() 
mut method 
Void #oCurly() 
mut method 
Void #cCurly() 
mut method 
Void #dQuote() 
mut method 
Void #sQuote() 
mut method 
Void #hQuote() 
mut method 
Void #equal() 
mut method 
Void #qMark() 
mut method 
Void #hat() 
mut method 
Void #comma() 
mut method 
Void #semicolon() 
mut method 
Void #colon() 
mut method 
Void #dot() 
mut method 
Void #underscore() 
mut method 
Void #hash() 
mut method 
Void #at() 
mut method 
Void #backslash() 
mut method 
Void #dollar() 
mut method 
Void #space() 
mut method 
Void #newline() }
U: {
class method 
mut This1.SBuilder #builder() 
class method 
This1 #from(This1.SBuilder builder) }}
Concept: {
ToS: {interface 
read method 
This2.S toS() }
Classable: {interface 
class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This0 that) 
class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This0 that) 
read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This0 subtype) }
Base: {interface implements This1.ToS, This1.Classable, This1.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This1.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Classable that) 
refine class method 
mut This0 #cast(mut This1.Classable that) }
Wrapper: {interface 
read method 
Any inner() }
ClassWrapper: {interface 
read method 
class Any inner() }
MutWrapper: {interface 
read method 
read Any inner() 
mut method 
mut Any #inner() }
Equals: {interface 
read method 
This2.Bool #equalequal#0left(read Any right) }
Comparable: {interface 
read method 
This2.Bool greater(read Any that) }
Boollable: {interface 
read method 
Void #checkTrue() exception Void }
Decorator: {interface }
Contains: {interface 
read method 
This2.Bool contains(read Any that) }
Parsable: {interface }
RandomAccess: {interface 
read method 
read Any get(This2.Size that) 
mut method 
mut Any #get(This2.Size that) }
Sizable: {interface 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() }
Iterator: {interface 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Void #close() }}
Message: {interface implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine class method 
read This1.Concept.Base cast(read This1.Concept.Classable that) 
refine class method 
mut This1.Concept.Base #cast(mut This1.Concept.Classable that) 
class method 
This1.S kind() 
read method 
This1.S text() 
read method 
This0.Opt responseOf() 
refine read method 
class This0 class() 
EqualMessages: {
class method 
This2.Bool #apply(read This1 that, read This1 other) }
$: {
class method 
This0 #apply() 
class method 
Library #leftrightleft#0left(Library right) 
class method 
Library messageTrait() }
Opt: {/*will be Fixed in AdamTowel02
*/
method 
This0.TOpt that() 
class method 
This0 #new(This0.TOpt that) 
method 
This1 get() exception This2.Guard.Operation 
method 
This1 #get() 
method 
This2.Bool isPresent() 
class method 
This0 #apply() 
class method 
This0 #apply(This1 that) 
TOpt: {interface 
method 
This2 get() }
TEmpty: {implements This1.TOpt
class method 
This0 #apply() 
refine method 
This2 get() }
TOf: {implements This1.TOpt
method 
This2 that() 
class method 
This0 #apply(This2 that) 
refine method 
This2 get() }}}
Guard: {/* exception as Guard bureocracy, error as Guard detection
-is a check guarenteed to be performed, program logic can rely on this being enforced.
  as exceptions, Guards objects are a way to report/guard complex operations,
 where checking the shape of the input can be unconvenient.
as errors, they represent precondition violations.
Turning an exception Guard into an error Guard
 is equivalent of declaring that such misuse should not happen (blame on the caller),
 still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed
*/interface implements This1.Message, This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine class method 
read This1.Concept.Base cast(read This1.Concept.Classable that) 
refine class method 
mut This1.Concept.Base #cast(mut This1.Concept.Classable that) 
refine class method 
This1.S kind() 
refine read method 
This1.S text() 
refine read method 
This1.Message.Opt responseOf() 
refine read method 
class This1.Message class() 
Operation: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Parameter: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Precondition: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
ParseFail: {interface implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() }
CastFail: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
System: {
Guard: {/* implements Outer.Guard soon (remove "interface" for a bad translation bug: This1_System_Guard is not abstract and does not override abstract method MtoS()
*/interface implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
PluginFailure: {implements This1, This3.Guard, This3.Message, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
read method 
This3.S _text() 
read method 
This3.Message.Opt cause() 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
refine class method 
This3.S kind() 
refine read method 
This3.S text() 
refine read method 
This3.Message.Opt responseOf() 
method 
This0 #apply(This3.Message that) 
refine read method 
This3.S toS() 
read method 
This3.Bool equals(read This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
read method 
This4.S that() 
class method 
This0 #apply(This4.S that) 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}}}
X: {
class method 
This0.AssertionFail #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
mut This0.Tests #seqBuilder() 
class method 
Void #from(This0.Tests seqBuilder) 
NotImplementedYet: {implements This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
AssertionFail: {implements This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Pre: {
class method 
mut This1.Tests #seqBuilder() 
class method 
Void #from(This1.Tests seqBuilder) }
Test: {
read method 
This2.Bool that() 
read method 
This2.S msg() 
class method 
This0 #apply(This2.Bool that, This2.S msg) }
Tests: {implements This2.Concept.ToS, This2.Concept.Classable
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.Test val(This2.Size that) 
read method 
class This2.Size #default#val(Void that) 
read method 
This1.Test left() 
read method 
This1.Test right() 
mut method 
Void #apply(This2.Size that, This1.Test val) 
mut method 
Void left(This1.Test that) 
mut method 
Void right(This1.Test that) 
mut method 
Void add(This2.Size that, This1.Test val) 
mut method 
Void add(This1.Test right) 
mut method 
Void add(This1.Test left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1.Test right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This1.Test val) 
method 
This0 withLeft(This1.Test that) 
method 
This0 withRight(This1.Test that) 
method 
This0 withAlso(This2.Size that, This1.Test val) 
method 
This0 withAlsoLeft(This1.Test that) 
method 
This0 withAlsoRight(This1.Test that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This1.Test filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
mut method 
Void #add(This2.Bool that, This2.Concept.ToS msg) 
mut method 
Void #add(This2.Bool that) 
read method 
This2.S collapse() 
Cast: {
class method 
This2.Test #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
This2.Test filled() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This2.Test filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Test filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Test filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(This2.Test that) 
read method 
This3.Bool isFill() 
read method 
This2.Test filled() }}}
Strings: {implements This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This1.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This1.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
read method 
read This1.Collections.MutListAny inner() 
mut method 
mut This1.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This1.Collections.MutListAny inner) 
class method 
This0 #immK(This1.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This1.Bool isEmpty() 
read method 
class This1.Size #default#val(Void that) 
read method 
This1.S left() 
read method 
This1.S right() 
mut method 
Void #apply(This1.Size that, This1.S val) 
mut method 
Void left(This1.S that) 
mut method 
Void right(This1.S that) 
mut method 
Void add(This1.Size that, This1.S val) 
mut method 
Void add(This1.S right) 
mut method 
Void add(This1.S left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1.S right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This1.Size that, This1.S val) 
method 
This0 withLeft(This1.S that) 
method 
This0 withRight(This1.S that) 
method 
This0 withAlso(This1.Size that, This1.S val) 
method 
This0 withAlsoLeft(This1.S that) 
method 
This0 withAlsoRight(This1.S that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This1.Size from, This1.Size maxTo, This1.Size minTo) 
read method 
lent This0.IteratorVal vals(This1.Size minTo) 
read method 
lent This0.IteratorVal vals(This1.Size from, This1.Size to) 
read method 
lent This0.IteratorValFill vals(This1.Size from, This1.Size maxTo, This1.Size minTo, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.Size minTo, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.Size from, This1.Size to, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.S filled) 
mut method 
lent This0.IteratorVar #vals(This1.Size from, This1.Size maxTo, This1.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This1.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This1.Size from, This1.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This1.S toS() 
read method 
This1.Size size() 
read method 
This1.S val(This1.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.S that) 
read method 
lent This0.IteratorVal vals() 
read method 
This1.Bool contains(This1.S that) 
method 
This0 #less#0left(This1.S right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This1.Bool #rightright#0left(This0 right) 
method 
This1.Bool #rightrightequal#0left(This0 right) 
method 
This1.Bool #right#0left(This1.S right) 
read method 
This1.Bool equals(read This0 that) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
read method 
This1.Size indexOfLeft(This1.S val) 
read method 
This1.Size indexOfRight(This1.S val) 
method /*from VectorTrait
*/This0 without(This1.Size index) 
method 
This0 withoutLeft(This1.S val) 
method 
This0 withoutRight(This1.S val) 
method 
This0 withoutAll(This1.S val) 
mut method /*from VectorTrait
*/Void remove(This1.Size that) 
mut method 
Void removeAll(This1.S val) 
mut method 
Void removeLeft(This1.S val) 
mut method 
Void removeRight(This1.S val) 
Cast: {
class method 
This2.S #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
read method 
read This2.Collections.MutListAny _that() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size from() 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
read method 
This2.S filled() 
read method 
read This2.Collections.MutListAny that() 
class method 
lent This0 #apply(read This2.Collections.MutListAny _that, This2.Size from, This2.Size maxTo, This2.Size minTo, This2.S filled) 
class method 
lent This0 #apply(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo, This2.S filled) 
read method 
This2.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
read method 
read This2.Collections.MutListAny that() 
mut method 
mut This2.Collections.MutListAny #that() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size from() 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
class method 
mut This0 #apply(mut This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
Void inner(This2.S that) 
read method 
This2.Bool isFill() 
read method 
This2.S filled() }
IteratorVal: {
read method 
read This2.Collections.MutListAny _that() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size from() 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
read method 
read This2.Collections.MutListAny that() 
class method 
lent This0 #apply(read This2.Collections.MutListAny _that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
class method 
lent This0 #apply(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
This2.Bool isFill() 
read method 
This2.S filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() }}
Debug: {
class method 
Void #apply(read This1.Concept.ToS that) 
class method 
Void incrementCounter(read This1.Concept.ToS that) 
class method 
Void printCounter(read This1.Concept.ToS that) 
class method 
Void #apply(Library lib) 
class method 
Void #$(This1.Concept.ToS fileName, This1.Concept.ToS content) 
class method 
This1.S #$readFile(This1.Concept.ToS fileName) 
class method 
This1.S #$localToAbsolute(This1.Concept.ToS fileName) 
class method 
Void test(read This1.Concept.ToS that, read This1.Concept.ToS expected, This1.S message) 
class method 
Void test(read This1.Concept.ToS that, read This1.Concept.ToS expected) 
Test: {/* Builder to look like a list and run a series of debug.test calls.
 Does not actually make an instance or store the list of calls anywhere :-)
*/
class method 
class This0 #seqBuilder() 
class method 
Void #from(class This0 seqBuilder) 
class method 
Void #add(read This2.Concept.ToS that, read This2.Concept.ToS expected) 
class method 
Void #add(read This2.Concept.ToS that, read This2.Concept.ToS expected, This2.S message) }}
ConceptMap: {interface 
method 
This1.Alu _Alu() 
method 
This1.ExitCode _ExitCode() 
method 
This1.Bool _Bool() 
method 
This1.Size _Size() 
method 
This1.Num _Num() 
method 
This1.S _S() 
method 
This1.Concept _Concept() 
method 
This1.Message _Message() 
method 
This1.Guard _Guard() 
method 
This1.System _System() 
method 
This1.X _X() 
method 
This1.Strings _Strings() 
method 
This1.Debug _Debug() 
method 
This0 _ConceptMap() 
method 
This1.Url _Url() 
method 
This1.Path _Path() 
method 
This1.Selector _Selector() 
method 
This1.Location _Location() 
method 
This1.Refactor2 _Refactor2() 
method 
This1.Optimize _Optimize() 
method 
This1.Opt _Opt() 
method 
This1.Use _Use() 
method 
This1.Collections _Collections() 
method 
This1.CollectionsMut _CollectionsMut() 
method 
This1.K _K() 
method 
This1.Alphanumeric _Alphanumeric() 
method 
This1.DeployTowel _DeployTowel() 
method 
This1.Composers _Composers() 
method 
This1.Load _Load() }
Url: {implements This1.Concept.ToS
read method 
This1.S inner() 
class method 
This0 #apply(This1.S inner) 
refine read method 
This1.S toS() 
method 
Library #binaryRepr() 
class method /* if you do not implement it, it is a constructor?
may become an interface Concept.Parsable method?
*/This0 from(This1.Concept.ToS string) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() }
Path: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart java.util.List
*/implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This1.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This0 from(This1.Concept.ToS string) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
method 
This1.Strings names() 
class method 
This0 from(read This1.Strings names) 
class method 
This0 fresh() 
method 
This1.S name(This1.Size that) 
method 
This1.Size nameSize() 
refine read method 
This1.S toS() 
method 
This0 #plusplus#0left(This0 right) 
method 
This1.Bool isUnique() 
class method 
This0 fresh(This0 like) 
method 
This1.Size size() 
class method 
Any parseError(This1.S that) 
class method 
Any parseError(This1.S that, This1.Message cause) 
PlgPath: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart is.L42.connected.withSafeOperators.refactor.PathAdapter
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This2.S name(This1 that, This2.Size index) 
class method 
This1 concat(This1 that, This1 and) 
class method 
This2.Bool isUnique(This1 that) 
class method 
This1 fresh(This1 that) 
class method 
This1 rawFromS(This2.S that) 
class method 
This2.S toS(read This1 that) }
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals, This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Selector: {/*@plugin  toFix 
@pluginPart ast.Ast$MethodSelector
*/implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This1.Bool equals(read This0 that) 
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This0 parse(This1.S that) 
class method 
This0 from(This1.Concept.ToS string) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 from(This1.S name, This1.Strings names) 
method 
This1.S nameAsField() 
method 
This1.S prefixAsField() 
method 
This1.Bool isOperator() 
method 
This1.Bool isUnique() 
method 
This1.S nameToS() 
method 
This1.S name() 
method 
This1.Size nameSize() 
method 
This1.S name(This1.Size that) 
method 
This1.Strings names() 
class method 
This0 fresh(This0 like) 
class method /*will be private
*/This1.S leftAsASCIIUpperCase(This1.S that) 
method 
This0 with(This1.S prefix) 
method 
This0 with(This1.S name) 
method 
This0 with(This1.Strings names) 
class method 
Any parseError(This1.S that) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals, This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Location: {interface implements This1.Concept.Base/*that is equals, toS and "know your class"
*/, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This1.Concept.Base class() 
refine class method 
read This1.Concept.Base cast(read This1.Concept.Classable that) 
refine class method 
mut This1.Concept.Base #cast(mut This1.Concept.Classable that) 
method 
This1.Size originSize() 
method 
This0.Origin origin(This1.Size that) 
method 
This0 location() 
method 
This0.Doc doc() 
NotAvailable: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Mdf: {implements This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
read method 
This2.Size inner() 
class method 
This0 #apply(This2.Size inner) 
read method 
This2.S name() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 fromS(This2.S that) 
class method 
This2.Strings names() 
class method 
This0 cmpImm() 
method 
This2.Bool isCmpImm() 
class method 
This0 cmpMut() 
method 
This2.Bool isCmpMut() 
class method 
This0 cmpRead() 
method 
This2.Bool isCmpRead() 
class method 
This0 cmpLent() 
method 
This2.Bool isCmpLent() 
class method 
This0 cmpCapsule() 
method 
This2.Bool isCmpCapsule() 
class method 
This0 cmpClass() 
method 
This2.Bool isCmpClass() 
class method 
This0 fwdImm() 
method 
This2.Bool isFwdImm() 
class method 
This0 fwdMut() 
method 
This2.Bool isFwdMut() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
ParseFail: {implements This3.Guard.ParseFail, This3.Guard, This3.Message, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
read method 
This3.S _text() 
read method 
This3.Message.Opt cause() 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
refine class method 
This3.S kind() 
refine read method 
This3.S text() 
refine read method 
This3.Message.Opt responseOf() 
method 
This0 #apply(This3.Message that) 
refine read method 
This3.S toS() 
read method 
This3.Bool equals(read This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
read method 
This4.S that() 
class method 
This0 #apply(This4.S that) 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Origin: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Origin
*/implements This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
read method 
This2.S fileName() 
read method 
This2.Size lineStart() 
read method 
This2.Size lineEnd() 
read method 
This2.Size columnStart() 
read method 
This2.Size columnEnd() 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This0 #apply(This2.S fileName, This2.Size lineStart, This2.Size lineEnd, This2.Size columnStart, This2.Size columnEnd) 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
PUnresponsive: {
class method 
Library #leftrightleft#0left(Library right) 
class method 
Library #apply() }
This$Impl: {
class method 
Library #leftrightleft#0left(Library right) 
class method 
Library #apply() }
PlgClass: {
class method 
Library #leftrightleft#0left(Library right) }
Lib: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.location.Lib
*/implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This2.Bool equals(read This0 that) 
method 
This1.Origin.List origins() 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This1.Doc doc() 
method 
This0.List nesteds() 
method 
This0.List allNesteds() 
method 
class This2.Path #default#nested(Void path) 
method 
This0 nested(This2.Path path) exception This1.NotAvailable 
method 
class This2.Path #default#has(Void path) 
method 
This2.Bool has(This2.Path path) 
method 
This1.Method.List methods() 
method 
class This2.Selector #default#method(Void selector) 
method 
This1.Method method(This2.Selector selector) exception This1.NotAvailable 
method 
class This2.Selector #default#has(Void selector) 
method 
This2.Bool has(This2.Selector selector) 
method 
This1.Type.Implemented.List implements() 
method 
This2.Bool implements(class Any classObj) 
method 
class This2.Path #default#implements(Void path) 
method 
This2.Bool implements(This2.Path path) 
class method 
This0 #apply(class Any classObj) 
class method 
This0 #apply(Library that) 
method 
This0 navigate(This2.Path that) 
class method 
This0 newFromClass(class Any that) 
class method 
This0 newFromLibrary(Library that) 
method 
This1.Type.Implemented implemented(This2.Size that) 
method 
This2.Size implementedSize() 
method 
This2.Bool isBinded() 
method 
This2.Bool isCloseState() 
method /*as in EnsureCoherent<><
*/This2.Bool isEnsuredCoherent() 
method 
This2.Bool isInterface() 
method 
This2.Bool isPotentialInterface() 
method 
This2.Bool isRedirectable() 
method 
This1.Method method(This2.Size that) 
method 
This2.Size methodSize() 
method 
This0 nested(This2.Size that) 
method /*empty doc if it is root
*/This1.Doc nestedDoc() 
method 
This2.Size nestedSize() 
method /*last is its name, empty path for root
*/This2.Path path() 
method 
This0 root() 
refine method /*implemented but refined
*/This0 location() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Method: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Method
*/implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This2.Bool equals(read This0 that) 
method 
This1.Origin.List origins() 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This1.Doc doc() 
refine method 
This1.Lib location() 
method 
This2.Bool isAbstract() 
method 
This2.Bool isRefine() 
method 
This2.Selector selector() 
method 
This1.Type.Return returnType() 
method 
This2.Size parameterTypeSize() 
method 
This1.Type.Parameter parameterType(This2.Size that) 
method 
This1.Type.Parameter.List parameterTypes() 
method 
This2.Size exceptionTypeSize() 
method 
This1.Type.Exception exceptionType(This2.Size that) 
method 
This1.Type.Exception.List exceptionTypes() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Type: {interface implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine read method 
class This2.Concept.Base class() 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This1 location() 
refine method 
This1.Doc doc() 
method 
This0.RefTo refTo() 
method 
This2.Size mdfS() 
method 
This1.Mdf mdf() 
DispatchRefTo: {
class method 
This1.RefTo #apply(Library that) }
Return: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Return
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Method location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() }
Parameter: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Parameter     
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Method location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
method 
This3.Size pos() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Exception: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Exception
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Method location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
method 
This3.Size pos() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Implemented: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Implemented
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Lib location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
method 
This3.Size pos() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
RefTo: {interface implements This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine read method 
class This3.Concept.Base class() 
refine class method 
read This3.Concept.Base cast(read This3.Concept.Classable that) 
refine class method 
mut This3.Concept.Base #cast(mut This3.Concept.Classable that) 
Lib: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Lib
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
method 
This3.Lib referredLib() 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }
Unavailable: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Unavailable
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }
Binded: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Binded
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1/*includes primitives
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
method 
class Any referredClassObj() 
class method 
This0 #apply(class Any classObj) 
class method 
This4.Bool equalsClassObj(class Any that, class Any and) 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }
Missing: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Missing
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }}}
Doc: {/*user will need typecase to discover precise type, location() not refined
@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Doc
*/implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This2.Bool equals(read This0 that) 
method 
This1.Origin.List origins() 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This0 doc() 
refine method 
This1 location() 
method 
This2.Size annotationSize() 
method 
This0.Annotation annotation(This2.Size that) 
method 
This0.Annotation.List annotations() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
Annotation: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Doc$Annotation
*/implements This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Type.RefTo title() 
method 
This3.S text() 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}}}
Refactor2: {/*------------------------------
Infrastructure
------------------------------
*/
class method 
Library compose(Library that, Library and) exception This0.MethodClash, This0.ClassClash, This0.SubtleSubtypeViolation 
class method 
class This1.Path #default#rename(Void path) 
class method 
class This1.Path #default#rename(Void into) 
class method 
This0.RenameClass rename(This1.Path path, This1.Path into) 
class method 
class This1.Path #default#hide(Void path) 
class method 
This0.HideClass hide(This1.Path path) 
class method 
class This1.Path #default#toAbstract(Void path) 
class method 
This0.ToAbstractClass toAbstract(This1.Path path) 
class method 
This0.ToAbstract toAbstract(This1.Selector selector) 
class method 
This0.ToAbstractDest toAbstract(This1.Selector selector, This1.Selector into) 
class method 
This0.ToAbstractPath toAbstract(This1.Selector selector, This1.Path of) 
class method 
This0.ToAbstractPathDest toAbstract(This1.Selector selector, This1.Path of, This1.Selector into) 
class method 
class This1.Selector #default#toAbstract(Void selector) 
class method 
class This1.Selector #default#toAbstract(Void into) 
class method 
class This1.Path #default#toAbstract(Void of) 
class method 
class This1.Path #default#redirect(Void path) 
class method 
This0.Redirect redirect(This1.Path path, class Any into) 
class method 
This0.RedirectRefTo redirect(This1.Path path, This1.Location.Type.RefTo intoRefTo) 
class method 
Library makeDoc(This1.S that) 
class method 
This0.SumMethods sumMethods(This1.Selector that, This1.Selector and, This1.Path of, This1.S over, This1.Selector into) 
Fail: {interface implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() }
ErrorW: {
class method 
Library trait() 
class method 
Library #leftrightleft#0left(Library right) }
ParseFail: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ParseFail
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.S string() 
method 
This2.S expected() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
UnresolvedOverloading: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$UnresolvedOverloading
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
ClassUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
MethodUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
ClassClash: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassClash
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Location.Lib left() 
method 
This2.Location.Lib right() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
MethodClash: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodClash
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Location.Method left() 
method 
This2.Location.Method right() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
PathUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$PathUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Path path() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
SelectorUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SelectorUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Path path() 
method 
This2.Selector selector() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
IncoherentMapping: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SelectorUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
PrivacyCoupuled: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$PrivacyCoupuled
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
SubtleSubtypeViolation: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SubtleSubtypeViolation
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
DeployL42TypeError: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$DeployL42TypeError
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
JavaImport: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
Library #leftrightleft#0left(Library right) exception This1.UnresolvedOverloading, This1.ClassUnfit, This1.MethodUnfit 
class method 
Library main(Library that) exception This1.UnresolvedOverloading, This1.ClassUnfit, This1.MethodUnfit }
Compose: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.Compose
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library compose(Library left, Library right) exception This1.MethodClash, This1.ClassClash, This1.SubtleSubtypeViolation }
PlgRenameClass: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.Rename
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library renameClassJ(Library that, This2.Path src, This2.Path dest) exception This1.PathUnfit, This1.MethodClash, This1.ClassClash, This1.SubtleSubtypeViolation 
class method 
Library hideClassJ(Library that, This2.Path src) exception This1.PathUnfit, This1.ClassUnfit }
RenameClass: {
method 
This2.Path src() 
method 
This2.Path dest() 
class method 
This0 #apply(This2.Path src, This2.Path dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.MethodClash, This1.ClassClash, This1.SubtleSubtypeViolation }
HideClass: {
method 
This2.Path src() 
class method 
This0 #apply(This2.Path src) 
method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.ClassUnfit }
PlgAbstractClass: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.AbstractClass
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library toAbstractJ(Library that, This2.Path src) exception This1.PathUnfit, This1.PrivacyCoupuled }
ToAbstractClass: {
read method 
This2.Path src() 
class method 
This0 #apply(This2.Path src) 
method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.PrivacyCoupuled }
PlgToAbstract: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.ToAbstract
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library toAbstractPathDestJ(Library that, This2.Path path, This2.Selector src, This2.Selector dest) exception This1.SelectorUnfit, This1.PathUnfit, This1.MethodClash 
class method 
Library toAbstractPathJ(Library that, This2.Path path, This2.Selector src) exception This1.SelectorUnfit, This1.PathUnfit 
class method 
Library toAbstractDestJ(Library that, This2.Selector src, This2.Selector dest) exception This1.SelectorUnfit, This1.MethodClash 
class method 
Library toAbstractJ(Library that, This2.Selector src) exception This1.SelectorUnfit }
ToAbstract: {
method 
This2.Selector src() 
class method 
This0 #apply(This2.Selector src) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit }
ToAbstractDest: {
method 
This2.Selector src() 
method 
This2.Selector dest() 
class method 
This0 #apply(This2.Selector src, This2.Selector dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit, This1.MethodClash }
ToAbstractPath: {
method 
This2.Path path() 
method 
This2.Selector src() 
class method 
This0 #apply(This2.Path path, This2.Selector src) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit, This1.PathUnfit }
ToAbstractPathDest: {
method 
This2.Path path() 
method 
This2.Selector src() 
method 
This2.Selector dest() 
class method 
This0 #apply(This2.Path path, This2.Selector src, This2.Selector dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit, This1.PathUnfit, This1.MethodClash }
PlgRedirect: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.Redirect
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library redirectJ(Library that, This2.Path src, class Any dest) exception This1.ClassUnfit, This1.IncoherentMapping, This1.MethodClash, This1.PathUnfit }
Redirect: {
method 
This2.Path src() 
method 
class Any dest() 
class method 
This0 #apply(This2.Path src, class Any dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.ClassUnfit, This1.IncoherentMapping, This1.MethodClash, This1.PathUnfit }
RefToUnfit: {implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
RedirectRefTo: {
read method 
This2.Path src() 
read method 
This2.Location.Type.RefTo into() 
class method 
This0 #apply(This2.Path src, This2.Location.Type.RefTo into) 
method 
Library #leftrightleft#0left(Library right) exception This1.ClassUnfit, This1.IncoherentMapping, This1.MethodClash, This1.ClassClash, This1.PathUnfit, This1.RefToUnfit, This1.SubtleSubtypeViolation }
PlgMethod: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.RenameMethods
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
This0 #apply() 
method 
Library act(Library that) exception This1.PathUnfit, This1.SelectorUnfit, This1.MethodClash, This1.ClassUnfit 
method 
This0 addRenameJ(This2.Path path, This2.Selector src, This2.Selector dest) 
method 
This0 addHideJ(This2.Path path, This2.Selector src) 
method 
This0 addCloseJ(This2.Path path) 
method 
This0 addAbstractJ(This2.Path path, This2.Selector src) 
method 
This0 addAbstractAliasJ(This2.Path path, This2.Selector src, This2.Selector dest) }
Method: {
mut method 
Void inner(This1.PlgMethod that) 
read method 
This1.PlgMethod inner() 
class method 
mut This0 #apply(This1.PlgMethod inner) 
read method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.SelectorUnfit, This1.MethodClash, This1.ClassUnfit 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
class method 
class This2.Path #default##square(Void of) 
class method 
class This2.Path #default##square(Void closeState) 
class method 
class This2.Selector #default##square(Void hide) 
class method 
class This2.Selector #default##square(Void rename) 
class method 
class This2.Selector #default##square(Void into) 
class method 
class This2.Selector #default##square(Void abstract) 
class method 
class This2.Selector #default##square(Void alias) 
mut method 
Void #add(This2.Selector hide, This2.Path of) 
mut method 
Void #add(This2.Selector hide) 
mut method 
Void #add(This2.Selector rename, This2.Path of, This2.Selector into) 
mut method 
Void #add(This2.Selector rename, This2.Selector into) 
mut method 
Void #add(This2.Path closeState) 
mut method 
Void #add(This2.Selector abstract, This2.Path of) 
mut method 
Void #add(This2.Selector abstract, This2.Path of, This2.Selector alias) 
mut method 
Void #add(This2.Selector abstract) 
mut method 
Void #add(This2.Selector abstract, This2.Selector alias) }
MakeDoc: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.MakeDoc
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library makeDoc(This2.S that) }
PlgSumMethods: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.SumMethods
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library sumMethodsJ(Library lib, This2.Path path, This2.Selector src1, This2.Selector src2, This2.Selector dest, This2.S name) exception This1.MethodClash, This1.PathUnfit, This1.SelectorUnfit }
SumMethods: {
read method 
This2.Selector that() 
read method 
This2.Selector and() 
read method 
This2.Path of() 
read method 
This2.S over() 
read method 
This2.Selector into() 
class method 
This0 #apply(This2.Selector that, This2.Selector and, This2.Path of, This2.S over, This2.Selector into) 
method 
Library #leftrightleft#0left(Library right) exception This1.MethodClash, This1.PathUnfit, This1.SelectorUnfit }}
Optimize: {
RemoveUnreachableCode: {
class method 
Library #leftrightleft#0left(Library right) }}
Opt: {
class method 
Library #apply(class Any that) 
class method 
Library optTrait() }
Use: {
mut method 
Void fillMaps() 
mut method 
Void fillMaps(This1.Location.Lib li, This1.Size i) 
mut method 
Void fillMaps(This1.Location.Lib lij, This1.Composers.Selectors ssj, This1.Path pj, This1.Size i) 
mut method 
This1.Selector superName(This1.Selector selector, This1.Size i) 
class method 
mut This1.Composers.Libs #seqBuilder() 
class method 
mut This0.Decorator #from(mut This1.Composers.Libs seqBuilder) 
mut method 
mut This1.Composers.RenameMethods openMaps() 
mut method 
mut This1.Refactor2.Method close() 
read method 
read This1.Composers.Libs inputs() 
mut method 
mut This1.Composers.Libs #inputs() 
read method 
Library input() 
read method 
This1.Location.Lib.List ls() 
read method 
This1.Location.Lib l0() 
read method 
This1.Location.Lib.List l0ns() 
read method 
This1.Composers.Selectorss sels() 
class method 
mut This0 #apply(mut This1.Composers.Libs libs, Library lib0) 
mut method 
mut This1.Refactor2.Method open(This1.Size that) 
mut method 
Void fillMapsPatch(This1.Location.Lib top, This1.Path fix) 
class method 
mut This0 #apply(Library top, This1.Path fix) exception This1.Location.NotAvailable 
class method 
class This1.Path #default##apply(Void patch) 
class method 
mut This0.Patcher #apply(This1.Path patch) 
class method 
mut This0 #apply(fwd mut This1.Composers.RenameMethods openMaps, fwd mut This1.Refactor2.Method close, fwd mut This1.Composers.Libs inputs, fwd Library input, fwd This1.Location.Lib.List ls, fwd This1.Location.Lib l0, fwd This1.Location.Lib.List l0ns, fwd This1.Composers.Selectorss sels) 
mut method 
Void op(This1.Path p, This1.Location.Method m, This1.Size i) 
Over: {
mut method 
Void fillMaps() 
mut method 
Void fillMaps(This2.Location.Lib li, This2.Size i) 
mut method 
Void fillMaps(This2.Location.Lib lij, This2.Composers.Selectors ssj, This2.Path pj, This2.Size i) 
mut method 
This2.Selector superName(This2.Selector selector, This2.Size i) 
class method 
mut This2.Composers.Libs #seqBuilder() 
class method 
mut This0.Decorator #from(mut This2.Composers.Libs seqBuilder) 
mut method 
mut This2.Composers.RenameMethods openMaps() 
mut method 
mut This2.Refactor2.Method close() 
read method 
read This2.Composers.Libs inputs() 
mut method 
mut This2.Composers.Libs #inputs() 
read method 
Library input() 
read method 
This2.Location.Lib.List ls() 
read method 
This2.Location.Lib l0() 
read method 
This2.Location.Lib.List l0ns() 
read method 
This2.Composers.Selectorss sels() 
class method 
mut This0 #apply(mut This2.Composers.Libs libs, Library lib0) 
mut method 
mut This2.Refactor2.Method open(This2.Size that) 
mut method 
Void fillMapsPatch(This2.Location.Lib top, This2.Path fix) 
class method 
mut This0 #apply(Library top, This2.Path fix) exception This2.Location.NotAvailable 
class method 
class This2.Path #default##apply(Void patch) 
class method 
mut This0.Patcher #apply(This2.Path patch) 
class method 
mut This0 #apply(fwd mut This2.Composers.RenameMethods openMaps, fwd mut This2.Refactor2.Method close, fwd mut This2.Composers.Libs inputs, fwd Library input, fwd This2.Location.Lib.List ls, fwd This2.Location.Lib l0, fwd This2.Location.Lib.List l0ns, fwd This2.Composers.Selectorss sels) 
mut method 
Void op(This2.Path p, This2.Location.Method m, This2.Size i) 
Decorator: {
read method 
read This3.Composers.Libs inner() 
mut method 
mut This3.Composers.Libs #inner() 
class method 
mut This0 #apply(mut This3.Composers.Libs inner) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation 
method 
Library foldLeft(Library resolver) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation }
Patcher: {
read method 
This3.Path patch() 
class method 
mut This0 #apply(This3.Path patch) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation, This3.Refactor2.PathUnfit, This3.Refactor2.SelectorUnfit, This3.Refactor2.ClassUnfit, This3.Location.NotAvailable }}
Override: {
mut method 
Void fillMaps() 
mut method 
Void fillMaps(This2.Location.Lib li, This2.Size i) 
mut method 
Void fillMaps(This2.Location.Lib lij, This2.Composers.Selectors ssj, This2.Path pj, This2.Size i) 
mut method 
This2.Selector superName(This2.Selector selector, This2.Size i) 
class method 
mut This2.Composers.Libs #seqBuilder() 
class method 
mut This0.Decorator #from(mut This2.Composers.Libs seqBuilder) 
mut method 
mut This2.Composers.RenameMethods openMaps() 
mut method 
mut This2.Refactor2.Method close() 
read method 
read This2.Composers.Libs inputs() 
mut method 
mut This2.Composers.Libs #inputs() 
read method 
Library input() 
read method 
This2.Location.Lib.List ls() 
read method 
This2.Location.Lib l0() 
read method 
This2.Location.Lib.List l0ns() 
read method 
This2.Composers.Selectorss sels() 
class method 
mut This0 #apply(mut This2.Composers.Libs libs, Library lib0) 
mut method 
mut This2.Refactor2.Method open(This2.Size that) 
mut method 
Void fillMapsPatch(This2.Location.Lib top, This2.Path fix) 
class method 
mut This0 #apply(Library top, This2.Path fix) exception This2.Location.NotAvailable 
class method 
class This2.Path #default##apply(Void patch) 
class method 
mut This0.Patcher #apply(This2.Path patch) 
class method 
mut This0 #apply(fwd mut This2.Composers.RenameMethods openMaps, fwd mut This2.Refactor2.Method close, fwd mut This2.Composers.Libs inputs, fwd Library input, fwd This2.Location.Lib.List ls, fwd This2.Location.Lib l0, fwd This2.Location.Lib.List l0ns, fwd This2.Composers.Selectorss sels) 
mut method 
Void op(This2.Path p, This2.Location.Method m, This2.Size i) 
Decorator: {
read method 
read This3.Composers.Libs inner() 
mut method 
mut This3.Composers.Libs #inner() 
class method 
mut This0 #apply(mut This3.Composers.Libs inner) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation 
method 
Library foldLeft(Library resolver) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation }
Patcher: {
read method 
This3.Path patch() 
class method 
mut This0 #apply(This3.Path patch) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation, This3.Refactor2.PathUnfit, This3.Refactor2.SelectorUnfit, This3.Refactor2.ClassUnfit, This3.Location.NotAvailable }}
Decorator: {
read method 
read This2.Composers.Libs inner() 
mut method 
mut This2.Composers.Libs #inner() 
class method 
mut This0 #apply(mut This2.Composers.Libs inner) 
mut method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.MethodClash, This2.Refactor2.ClassClash, This2.Refactor2.SubtleSubtypeViolation 
method 
Library foldLeft(Library resolver) exception This2.Refactor2.MethodClash, This2.Refactor2.ClassClash, This2.Refactor2.SubtleSubtypeViolation }
Patcher: {
read method 
This2.Path patch() 
class method 
mut This0 #apply(This2.Path patch) 
mut method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.MethodClash, This2.Refactor2.ClassClash, This2.Refactor2.SubtleSubtypeViolation, This2.Refactor2.PathUnfit, This2.Refactor2.SelectorUnfit, This2.Refactor2.ClassUnfit, This2.Location.NotAvailable }}
Collections: {
class method 
Library vector(class Any ofMut) 
class method 
Library vector(class Any of) 
class method 
Library minimal(class Any that) 
class method 
Library eq(class Any that) 
IterationFailure: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
CollectionErrors: {
class method 
Any negBound(This2.Size that, This2.Size listSize) 
class method 
Any outBound(This2.Size that, This2.Size listSize) 
class method 
Any cast() 
class method 
Any iterationTermination(This2.Size from, This2.Size minTo, This2.Size size) 
class method 
Void checkBound(This2.Size that, This2.Size listSize) 
class method 
Void checkBoundAdd(This2.Size that, This2.Size listSize) }
MutListAny: {implements This2.Concept.ToS
mut method 
Void head(This0.Cell that) 
read method 
This0.Cell head() 
mut method 
Void size(This2.Size that) 
read method 
This2.Size size() 
class method 
mut This0 #apply(This0.Cell head, This2.Size size) 
class method 
mut This0 empty() 
read method 
Any val(This2.Size that) 
mut method 
Void #apply(This2.Size that, Any val) 
mut method 
Void add(This2.Size that, Any val) 
mut method 
Void remove(This2.Size that) 
method 
This0 without(This2.Size that) 
method 
This0 withAlso(This2.Size that, Any val) 
method 
This0 with(This2.Size that, Any val) 
refine read method 
This2.S toS() 
Cell: {interface 
method 
Any get(This3.Size that) 
method 
This0 set(This3.Size that, Any val, This3.Bool add) 
method 
This0 remove(This3.Size that) }
CellNext: {implements This1.Cell
read method 
Any val() 
read method 
This1.Cell next() 
class method 
mut This0 #apply(Any val, This1.Cell next) 
refine method 
Any get(This3.Size that) 
refine method 
This1.Cell set(This3.Size that, Any val, This3.Bool add) 
refine method 
This1.Cell remove(This3.Size that) }
CellEnd: {implements This1.Cell
class method 
mut This0 #apply() 
refine method 
Any get(This3.Size that) 
refine method 
This1.Cell set(This3.Size that, Any val, This3.Bool add) 
refine method 
This1.Cell remove(This3.Size that) }}
VectorTrait: {
class method 
Library #apply() }
CodeEq: {
class method 
Library #apply() }}
CollectionsMut: {
class method 
Library vector(class Any of) 
class method 
Library minimal(class Any that) 
class method 
Library eq(class Any that) 
IterationFailure: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
CollectionErrors: {
class method 
Any negBound(This2.Size that, This2.Size listSize) 
class method 
Any outBound(This2.Size that, This2.Size listSize) 
class method 
Any cast() 
class method 
Any iterationTermination(This2.Size from, This2.Size minTo, This2.Size size) 
class method 
Void checkBound(This2.Size that, This2.Size listSize) 
class method 
Void checkBoundAdd(This2.Size that, This2.Size listSize) }
MutListAny: {implements This2.Concept.ToS
mut method 
Void head(mut This0.Cell that) 
read method 
read This0.Cell head() 
mut method 
mut This0.Cell #head() 
mut method 
Void size(This2.Size that) 
read method 
This2.Size size() 
class method 
mut This0 #apply(fwd mut This0.Cell head, This2.Size size) 
class method 
mut This0 empty() 
read method 
read Any val(This2.Size that) 
mut method 
mut Any #val(This2.Size that) 
mut method 
Void #apply(This2.Size that, mut Any val) 
mut method 
Void add(This2.Size that, mut Any val) 
mut method 
Void remove(This2.Size that) 
method 
This0 without(This2.Size that) 
method 
This0 withAlso(This2.Size that, Any val) 
method 
This0 with(This2.Size that, Any val) 
refine read method 
This2.S toS() 
Cell: {interface 
read method 
read Any get(This3.Size that) 
mut method 
mut Any #get(This3.Size that) 
read method 
read This0 set(This3.Size that, read Any val, This3.Bool add) 
mut method 
mut This0 #set(This3.Size that, mut Any val, This3.Bool add) 
read method 
read This0 remove(This3.Size that) 
mut method 
mut This0 #remove(This3.Size that) }
CellNext: {implements This1.Cell
read method 
read Any val() 
mut method 
mut Any #val() 
read method 
read This1.Cell next() 
mut method 
mut This1.Cell #next() 
class method 
mut This0 #apply(fwd mut Any val, fwd mut This1.Cell next) 
refine read method 
read Any get(This3.Size that) 
refine mut method 
mut Any #get(This3.Size that) 
refine read method 
read This1.Cell set(This3.Size that, read Any val, This3.Bool add) 
refine mut method 
mut This1.Cell #set(This3.Size that, mut Any val, This3.Bool add) 
refine read method 
read This1.Cell remove(This3.Size that) 
refine mut method 
mut This1.Cell #remove(This3.Size that) }
CellEnd: {implements This1.Cell
class method 
mut This0 #apply() 
refine read method 
read Any get(This3.Size that) 
refine mut method 
mut Any #get(This3.Size that) 
refine read method 
read This1.Cell set(This3.Size that, read Any val, This3.Bool add) 
refine mut method 
mut This1.Cell #set(This3.Size that, mut Any val, This3.Bool add) 
refine read method 
read This1.Cell remove(This3.Size that) 
refine mut method 
mut This1.Cell #remove(This3.Size that) }}
VectorTrait: {
class method 
Library #apply() }
CodeEq: {
class method 
Library #apply() }}
K: {
class method 
Library #leftrightleft#0left(Library right) exception This1.Refactor2.ClassUnfit 
class method 
This0.Decorator #apply(This1.S name, This1.Path path, This1.S excluded, This1.Bool immK, This1.Bool isFwd) 
PlgK: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart is.L42.connected.withSafeOperators.refactor.MakeK
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library makeKJ(Library that, This2.S name, This2.Path path, This2.S excluded, This2.Bool immK, This2.Bool isFwd) 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
Imm: {
class method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.ClassUnfit }
$: {
class method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.ClassUnfit }
Decorator: {
read method 
This2.S name() 
read method 
This2.Path path() 
read method 
This2.S excluded() 
read method 
This2.Bool immK() 
read method 
This2.Bool isFwd() 
class method 
This0 #apply(This2.S name, This2.Path path, This2.S excluded, This2.Bool immK, This2.Bool isFwd) 
method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.ClassUnfit }}
Alphanumeric: {
class method 
Library #leftrightleft#0left(Library right) exception This0.Fail 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Fail: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Trait: {
class method 
Any val() 
class method 
Library #apply() }}
DeployTowel: {/*@untrusted
*/
read method 
This1.Url fileName() 
class method 
mut This0 #$(This1.Url fileName) 
mut method 
Library #leftrightleft#0left(Library right) 
FileSystemAccess:/*@_private
*/ {/*@plugin
L42.is/connected/withFileSystem
*/}}
Composers: {/*
Main feature of Composers:
you implement an
  mut method Void op(Path p, Location.Method m, Size i)
       op(p,meth,i) for example can be
         s=meth.selector()
         s2=this.superName(s,i)
         this.open(i).op(p,s,s2)//#add(rename:s of:p into:s2)
         this.close().op(p,s2)//hide selector of
*/
class method 
Library composerTrait() 
class method 
read Library #leftrightleft#0left(Library right) exception This1.Refactor2.MethodClash, This1.Refactor2.ClassClash, This1.Refactor2.SubtleSubtypeViolation 
class method 
This1.Location.Lib.List filterClash(This1.Location.Lib.List ls) 
class method 
This0.Selectors filterClash(This1.Location.Method.List ms) 
class method 
This1.Bool noClash(This1.Location.Method m) 
class method 
This1.Bool noClash(This1.Location.Lib l) 
class method 
This1.Path removePrefix(This1.Path path, This1.Path prefix) 
Selectors: {implements This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This2.Bool isEmpty() 
read method 
class This2.Size #default#val(Void that) 
read method 
This2.Selector left() 
read method 
This2.Selector right() 
mut method 
Void #apply(This2.Size that, This2.Selector val) 
mut method 
Void left(This2.Selector that) 
mut method 
Void right(This2.Selector that) 
mut method 
Void add(This2.Size that, This2.Selector val) 
mut method 
Void add(This2.Selector right) 
mut method 
Void add(This2.Selector left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This2.Selector right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This2.Selector val) 
method 
This0 withLeft(This2.Selector that) 
method 
This0 withRight(This2.Selector that) 
method 
This0 withAlso(This2.Size that, This2.Selector val) 
method 
This0 withAlsoLeft(This2.Selector that) 
method 
This0 withAlsoRight(This2.Selector that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This2.Selector filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This2.Selector filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This2.Selector filled) 
read method 
lent This0.IteratorValFill vals(This2.Selector filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
read method 
This2.Size size() 
read method 
This2.Selector val(This2.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This2.Selector that) 
read method 
lent This0.IteratorVal vals() 
read method 
This2.Bool contains(This2.Selector that) 
method 
This0 #less#0left(This2.Selector right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This2.Bool #rightright#0left(This0 right) 
method 
This2.Bool #rightrightequal#0left(This0 right) 
method 
This2.Bool #right#0left(This2.Selector right) 
read method 
This2.Bool equals(read This0 that) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
read method 
This2.Size indexOfLeft(This2.Selector val) 
read method 
This2.Size indexOfRight(This2.Selector val) 
method /*from VectorTrait
*/This0 without(This2.Size index) 
method 
This0 withoutLeft(This2.Selector val) 
method 
This0 withoutRight(This2.Selector val) 
method 
This0 withoutAll(This2.Selector val) 
mut method /*from VectorTrait
*/Void remove(This2.Size that) 
mut method 
Void removeAll(This2.Selector val) 
mut method 
Void removeLeft(This2.Selector val) 
mut method 
Void removeRight(This2.Selector val) 
Cast: {
class method 
This3.Selector #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This3.Selector #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Selector filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, This3.Selector filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This3.Selector filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This3.Selector #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(This3.Selector that) 
read method 
This3.Bool isFill() 
read method 
This3.Selector filled() }
IteratorVal: {
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
This3.Selector filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This3.Selector #inner() 
read method 
Void #close() }}
Selectorss: {implements This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This2.Bool isEmpty() 
read method 
class This2.Size #default#val(Void that) 
read method 
This1.Selectors left() 
read method 
This1.Selectors right() 
mut method 
Void #apply(This2.Size that, This1.Selectors val) 
mut method 
Void left(This1.Selectors that) 
mut method 
Void right(This1.Selectors that) 
mut method 
Void add(This2.Size that, This1.Selectors val) 
mut method 
Void add(This1.Selectors right) 
mut method 
Void add(This1.Selectors left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1.Selectors right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This1.Selectors val) 
method 
This0 withLeft(This1.Selectors that) 
method 
This0 withRight(This1.Selectors that) 
method 
This0 withAlso(This2.Size that, This1.Selectors val) 
method 
This0 withAlsoLeft(This1.Selectors that) 
method 
This0 withAlsoRight(This1.Selectors that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Selectors filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Selectors filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Selectors filled) 
read method 
lent This0.IteratorValFill vals(This1.Selectors filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
read method 
This2.Size size() 
read method 
This1.Selectors val(This2.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.Selectors that) 
read method 
lent This0.IteratorVal vals() 
read method 
This2.Bool contains(This1.Selectors that) 
method 
This0 #less#0left(This1.Selectors right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This2.Bool #rightright#0left(This0 right) 
method 
This2.Bool #rightrightequal#0left(This0 right) 
method 
This2.Bool #right#0left(This1.Selectors right) 
read method 
This2.Bool equals(read This0 that) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
read method 
This2.Size indexOfLeft(This1.Selectors val) 
read method 
This2.Size indexOfRight(This1.Selectors val) 
method /*from VectorTrait
*/This0 without(This2.Size index) 
method 
This0 withoutLeft(This1.Selectors val) 
method 
This0 withoutRight(This1.Selectors val) 
method 
This0 withoutAll(This1.Selectors val) 
mut method /*from VectorTrait
*/Void remove(This2.Size that) 
mut method 
Void removeAll(This1.Selectors val) 
mut method 
Void removeLeft(This1.Selectors val) 
mut method 
Void removeRight(This1.Selectors val) 
Cast: {
class method 
This2.Selectors #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Selectors #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This2.Selectors filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Selectors filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Selectors filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Selectors #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(This2.Selectors that) 
read method 
This3.Bool isFill() 
read method 
This2.Selectors filled() }
IteratorVal: {
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
This2.Selectors filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Selectors #inner() 
read method 
Void #close() }}
RenameMethods: {implements This2.Concept.ToS, This2.Concept.Classable
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.CollectionsMut.MutListAny inner() 
mut method 
mut This2.CollectionsMut.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.CollectionsMut.MutListAny inner) 
class method 
This0 #immK(This2.CollectionsMut.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(mut This2.Refactor2.Method that) 
mut method 
mut This0 #reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
read This2.Refactor2.Method val(This2.Size that) 
mut method 
mut This2.Refactor2.Method #val(This2.Size that) 
read method 
class This2.Size #default#val(Void that) 
read method 
read This2.Refactor2.Method left() 
read method 
read This2.Refactor2.Method right() 
mut method 
mut This2.Refactor2.Method #left() 
mut method 
mut This2.Refactor2.Method #right() 
mut method 
Void #apply(This2.Size that, mut This2.Refactor2.Method val) 
mut method 
Void left(mut This2.Refactor2.Method that) 
mut method 
Void right(mut This2.Refactor2.Method that) 
mut method 
Void add(This2.Size that, mut This2.Refactor2.Method val) 
mut method 
Void add(mut This2.Refactor2.Method right) 
mut method 
Void add(mut This2.Refactor2.Method left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This2.Refactor2.Method right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This2.Refactor2.Method val) 
method 
This0 withLeft(This2.Refactor2.Method that) 
method 
This0 withRight(This2.Refactor2.Method that) 
method 
This0 withAlso(This2.Size that, This2.Refactor2.Method val) 
method 
This0 withAlsoLeft(This2.Refactor2.Method that) 
method 
This0 withAlsoRight(This2.Refactor2.Method that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, read This2.Refactor2.Method filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, read This2.Refactor2.Method filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, read This2.Refactor2.Method filled) 
read method 
lent This0.IteratorValFill vals(read This2.Refactor2.Method filled) 
mut method 
mut This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
mut This0.IteratorVar #vals(This2.Size minTo) 
mut method 
mut This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
mut This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
Cast: {
class method 
read This3.Refactor2.Method #apply(read Any that) 
class method 
mut This3.Refactor2.Method mut(mut Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
read This3.Refactor2.Method readInner() 
mut method 
mut This3.Refactor2.Method mutInner() 
read method 
Void #close() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.CollectionsMut.MutListAny that() 
mut method 
mut This3.CollectionsMut.MutListAny #that() 
class method 
lent This0 #apply(read This3.CollectionsMut.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
read This3.Refactor2.Method #inner() 
read method 
This3.Bool isFill() 
read method 
read This3.Refactor2.Method filled() 
mut method 
mut This3.Refactor2.Method #filled() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
read This3.Refactor2.Method readInner() 
mut method 
mut This3.Refactor2.Method mutInner() 
read method 
Void #close() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Refactor2.Method filled() 
mut method 
mut This3.Refactor2.Method #filled() 
read method 
read This3.CollectionsMut.MutListAny that() 
mut method 
mut This3.CollectionsMut.MutListAny #that() 
class method 
lent This0 #apply(read This3.CollectionsMut.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, read This3.Refactor2.Method filled) 
read method 
read This3.Refactor2.Method #inner() 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
read This3.Refactor2.Method readInner() 
mut method 
mut This3.Refactor2.Method mutInner() 
read method 
Void #close() 
read method 
read This3.CollectionsMut.MutListAny that() 
mut method 
mut This3.CollectionsMut.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.CollectionsMut.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(mut This3.Refactor2.Method that) 
mut method 
mut This3.Refactor2.Method #inner() 
read method 
This3.Bool isFill() 
read method 
read This3.Refactor2.Method filled() 
mut method 
mut This3.Refactor2.Method #filled() }}
Libs: {implements This2.Concept.ToS, This2.Concept.Classable
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(Library that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
Library val(This2.Size that) 
read method 
class This2.Size #default#val(Void that) 
read method 
Library left() 
read method 
Library right() 
mut method 
Void #apply(This2.Size that, Library val) 
mut method 
Void left(Library that) 
mut method 
Void right(Library that) 
mut method 
Void add(This2.Size that, Library val) 
mut method 
Void add(Library right) 
mut method 
Void add(Library left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(Library right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, Library val) 
method 
This0 withLeft(Library that) 
method 
This0 withRight(Library that) 
method 
This0 withAlso(This2.Size that, Library val) 
method 
This0 withAlsoLeft(Library that) 
method 
This0 withAlsoRight(Library that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, Library filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, Library filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, Library filled) 
read method 
lent This0.IteratorValFill vals(Library filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
Cast: {
class method 
Library #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
Library filled() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
Library filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, Library filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, Library filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(Library that) 
read method 
This3.Bool isFill() 
read method 
Library filled() }}}
Load: {/*shape of a loadable library:
 This contains actual library, but
 Abstract:{} contains abstract classes, and
 Abstract.ConceptMap maps concepts names to abstract classes
*/
class method 
Library cacheTowel() 
class method 
Library #leftrightleft#0left(Library right) exception This0.ConceptMapMismatch, This0.ConceptMapUnavailable 
ConceptMapMismatch: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
ConceptMapUnavailable: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
DeployLibrary: {/*@untrusted
*/
read method 
This2.Path path() 
read method 
This2.Url url() 
class method 
mut This0 #$(This2.Path path, This2.Url url) 
class method 
Library moveToAbstract(This2.Path that, Library of) 
class method 
This2.X.AssertionFail msg(This2.Path that, Library of) 
class method 
Library exposeAsLibrary(Library that, This2.Path path) exception This2.Refactor2.PathUnfit, This2.Refactor2.PrivacyCoupuled, This2.Location.NotAvailable 
class method 
Void checkTargetExists(Library that, This2.Path path) exception This2.Refactor2.PathUnfit 
mut method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.PathUnfit, This2.Refactor2.PrivacyCoupuled, This2.Location.NotAvailable }}}
GuiPlugin: {/*@plugin
L42.is/connected/withHtml
*/}
Iterator: {/*@untrusted
*/
read method 
This1.Abstract.S id() 
mut method 
Void current(This1.Abstract.S that) 
read method 
This1.Abstract.S current() 
class method 
This1.Abstract.S #$auxFetchEvent(This1.Abstract.S id) exception Void (
  Void unused25647=(
    Library s=use This1.GuiPlugin check eventPending(wName:id.#binaryRepr()) exception void
    
    catch error Library x exception void
    
    (
      Void unused25648=return This1.Abstract.S.#from(binaryRepr:s)
      void
      )
    )
  
  catch return capsule This1.Abstract.S result163 result163
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void #next() exception Void (
  Void unused25649=(
    This1.Abstract.S s=This0.#$auxFetchEvent(id:this.id())
    Void unused25650=return this.current(that:s)
    void
    )
  
  catch return Void result164 result164
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #checkEnd() void
read method 
This1.Abstract.S #inner() (this.current())
read method 
Void #close() void
class method 
mut This0 #$(fwd This1.Abstract.S id, fwd This1.Abstract.S current) }
PrImpl1_$_459: {
GetMyName: {
class method 
This2.Abstract.S #1#apply2_$_214(class Any that) This2.Abstract.S.#from(builder:(
  mut This2.Abstract.S.SBuilder b157=This2.Abstract.S.#builder()
  Void unused632=b157.#less()
  Void unused633=b157.#less()
  Void unused634=b157.#N()
  Void unused635=b157.#a()
  Void unused636=b157.#m()
  Void unused637=b157.#e()
  Void unused638=b157.#S()
  Void unused639=b157.#t()
  Void unused640=b157.#i()
  Void unused641=b157.#l()
  Void unused642=b157.#l()
  Void unused643=b157.#T()
  Void unused644=b157.#o()
  Void unused645=b157.#F()
  Void unused646=b157.#i()
  Void unused647=b157.#x()
  Void unused648=b157.#less()
  Void unused649=b157.#less()
  b157
  ))
class method 
Any #1classCastError1_$_215(read This2.Abstract.Concept.Classable that, class This2.Abstract.Concept.Classable classObj) This2.Abstract.S.#from(builder:(
  mut This2.Abstract.S.SBuilder b158=This2.Abstract.S.#builder()
  Void unused650=b158.#less()
  Void unused651=b158.#less()
  Void unused652=b158.#C()
  Void unused653=b158.#a()
  Void unused654=b158.#s()
  Void unused655=b158.#t()
  Void unused656=b158.#S()
  Void unused657=b158.#t()
  Void unused658=b158.#i()
  Void unused659=b158.#l()
  Void unused660=b158.#l()
  Void unused661=b158.#T()
  Void unused662=b158.#o()
  Void unused663=b158.#F()
  Void unused664=b158.#i()
  Void unused665=b158.#x()
  b158
  ))
class method 
This2.Abstract.S #apply(class Any that) This2.Abstract.Location.Type.RefTo.Binded.#apply(classObj:that).toS().withoutLeft(val:This2.Abstract.S.#from(builder:(
  mut This2.Abstract.S.SBuilder b741=This2.Abstract.S.#builder()
  Void unused21501=b741.#T()
  Void unused21502=b741.#h()
  Void unused21503=b741.#i()
  Void unused21504=b741.#s()
  Void unused21505=b741.#0()
  Void unused21506=b741.#dot()
  b741
  )))
class method 
Any classCastError(read This2.Abstract.Concept.Classable that, class This2.Abstract.Concept.Classable classObj) (
  This2.Abstract.Guard.CastFail.Continue rcv96=(
    This2.Abstract.Guard.CastFail rcv97=(
      This2.Abstract.Guard.CastFail.Continue rcv98=(
        This2.Abstract.Guard.CastFail rcv99=(
          This2.Abstract.Guard.CastFail.Continue rcv100=(
            This2.Abstract.Guard.CastFail rcv101=This2.Abstract.Guard.CastFail.#from(builder:(
              mut This2.Abstract.S.SBuilder b742=This2.Abstract.Guard.CastFail.#builder()
              Void unused21507=b742.#N()
              Void unused21508=b742.#o()
              Void unused21509=b742.#t()
              Void unused21510=b742.#space()
              b742
              ))
            rcv101.#from(seqBuilder:(
              mut This2.Abstract.S.SConcat b743=rcv101.#seqBuilder()
              Void unused21511=b743.#add(that:This0.#apply(that:that.class()))
              b743
              ))
            )
          rcv100.#from(builder:(
            mut This2.Abstract.S.SBuilder b744=rcv100.#builder()
            Void unused21512=b744.#left()
            Void unused21513=b744.#equal()
            b744
            ))
          )
        rcv99.#from(seqBuilder:(
          mut This2.Abstract.S.SConcat b745=rcv99.#seqBuilder()
          Void unused21514=b745.#add(that:This0.#apply(that:classObj))
          b745
          ))
        )
      rcv98.#from(builder:(
        mut This2.Abstract.S.SBuilder b746=rcv98.#builder()
        Void unused21515=b746.#semicolon()
        Void unused21516=b746.#space()
        Void unused21517=b746.#p()
        Void unused21518=b746.#r()
        Void unused21519=b746.#o()
        Void unused21520=b746.#v()
        Void unused21521=b746.#i()
        Void unused21522=b746.#d()
        Void unused21523=b746.#e()
        Void unused21524=b746.#d()
        Void unused21525=b746.#space()
        Void unused21526=b746.#o()
        Void unused21527=b746.#b()
        Void unused21528=b746.#j()
        Void unused21529=b746.#e()
        Void unused21530=b746.#c()
        Void unused21531=b746.#t()
        Void unused21532=b746.#space()
        Void unused21533=b746.#i()
        Void unused21534=b746.#s()
        Void unused21535=b746.#space()
        Void unused21536=b746.#o()
        Void unused21537=b746.#f()
        Void unused21538=b746.#space()
        Void unused21539=b746.#t()
        Void unused21540=b746.#y()
        Void unused21541=b746.#p()
        Void unused21542=b746.#e()
        Void unused21543=b746.#space()
        b746
        ))
      )
    rcv97.#from(seqBuilder:(
      mut This2.Abstract.S.SConcat b747=rcv97.#seqBuilder()
      Void unused21544=b747.#add(that:This0.#apply(that:that.class()))
      b747
      ))
    )
  rcv96.#from(builder:(
    mut This2.Abstract.S.SBuilder b748=rcv96.#builder()
    b748
    ))
  )}
Resource: {
ProvidedValueNotOfExpectedType: {implements This3.Abstract.Guard, This3.Abstract.Message, This3.Abstract.Concept.Base, This3.Abstract.Concept.ToS, This3.Abstract.Concept.Classable, This3.Abstract.Concept.Equals
refine read method 
class This0 class() This0
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.Abstract.S readableName() This2.GetMyName.#apply(that:This0)
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Abstract.Bool is(class This3.Abstract.Concept.Classable subtype) (
  Void unused481=(
    Void unused482=(
      class This0 subtype4=(
        Void unused484=return subtype
        
        catch return class This0 casted15 casted15
        
        catch return class Any casted15 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched248 void
      
      (
        Void unused485=return This3.Abstract.Bool.true()
        void
        )
      )
    Void unused483=return This3.Abstract.Bool.false()
    void
    )
  
  catch return This3.Abstract.Bool result30 result30
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine read method 
This3.Abstract.Bool #equalequal#0left(read Any right) (
  Void unused486=(
    Void unused487=(
      read This0 right4=(
        Void unused489=return right
        
        catch return read This0 casted16 casted16
        
        catch return read Any casted16 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched253 void
      
      (
        Void unused490=return this.equals(that:right4)
        void
        )
      )
    Void unused488=return This3.Abstract.Bool.false()
    void
    )
  
  catch return This3.Abstract.Bool result31 result31
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
read This0 cast(read This3.Abstract.Concept.Classable that) (
  Void unused471=(
    Void unused472=(
      read This0 that7=(
        Void unused474=return that
        
        catch return read This0 casted13 casted13
        
        catch return read Any casted13 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched238 void
      
      (
        Void unused475=return that7
        void
        )
      )
    Void unused473=error This2.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return read This0 result28 result28
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
mut This0 #cast(mut This3.Abstract.Concept.Classable that) (
  Void unused476=(
    Void unused477=(
      mut This0 that8=(
        Void unused479=return that
        
        catch return mut This0 casted14 casted14
        
        catch return mut Any casted14 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched243 void
      
      (
        Void unused480=return that8
        void
        )
      )
    Void unused478=error This2.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return mut This0 result29 result29
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This3.Abstract.S _text() 
read method 
This3.Abstract.Message.Opt cause() 
class method 
This0 #apply(This3.Abstract.S _text, This3.Abstract.Message.Opt cause) 
refine class method 
This3.Abstract.S kind() this.readableName()
refine read method 
This3.Abstract.S text() this._text()
refine read method 
This3.Abstract.Message.Opt responseOf() this.cause()
method 
This0 #apply(This3.Abstract.Message that) This0.#apply(text:this.text(), cause:that)
refine read method 
This3.Abstract.S toS() (
  Void unused672=(
    Void unused673=(
      This3.Abstract.Bool cond14=this.cause().isPresent().#bang()
      (
        Void unused676=cond14.#checkTrue()
        
        catch exception Void catched331 void
        
        (return (
          This3.Abstract.S imm$opPar84=This0.kind()
          This3.Abstract.S imm$opPar85=(
            This3.Abstract.S imm$opPar82=This3.Abstract.S.doubleQuote()
            This3.Abstract.S imm$opPar83=(
              This3.Abstract.S imm$opPar80=this.text()
              This3.Abstract.S imm$opPar81=This3.Abstract.S.doubleQuote()
              imm$opPar80.#plusplus#0left(right:imm$opPar81)
              )
            imm$opPar82.#plusplus#0left(right:imm$opPar83)
            )
          imm$opPar84.#plusplus#0left(right:imm$opPar85)
          ))
        )
      )
    var This3.Abstract.S res=This0.kind()
    Void unused674=(
      This3.Abstract.Bool cond15=(
        This3.Abstract.S read$opPar19=this.text()
        This3.Abstract.S read$opPar20=This3.Abstract.S.#from(builder:(
          mut This3.Abstract.S.SBuilder b159=This3.Abstract.S.#builder()
          b159
          ))
        read$opPar19.#equalequal#0left(right:read$opPar20)
        ).#bang()
      (
        Void unused677=cond15.#checkTrue()
        
        catch exception Void catched334 (res := (
          This3.Abstract.S imm$opPar86=This3.Abstract.S.#from(builder:(
            mut This3.Abstract.S.SBuilder b160=This3.Abstract.S.#builder()
            Void unused678=b160.#oSquare()
            b160
            ))
          res.#plusplus#0left(right:imm$opPar86)
          ))
        
        (res := (
          This3.Abstract.S imm$opPar95=(
            This3.Abstract.S imm$opPar93=This3.Abstract.S.#from(builder:(
              mut This3.Abstract.S.SBuilder b161=This3.Abstract.S.#builder()
              Void unused679=b161.#oSquare()
              Void unused680=b161.#t()
              Void unused681=b161.#e()
              Void unused682=b161.#x()
              Void unused683=b161.#t()
              Void unused684=b161.#colon()
              b161
              ))
            This3.Abstract.S imm$opPar94=(
              This3.Abstract.S imm$opPar91=This3.Abstract.S.doubleQuote()
              This3.Abstract.S imm$opPar92=(
                This3.Abstract.S imm$opPar89=this.text()
                This3.Abstract.S imm$opPar90=(
                  This3.Abstract.S imm$opPar87=This3.Abstract.S.doubleQuote()
                  This3.Abstract.S imm$opPar88=This3.Abstract.S.#from(builder:(
                    mut This3.Abstract.S.SBuilder b162=This3.Abstract.S.#builder()
                    Void unused685=b162.#comma()
                    Void unused686=b162.#space()
                    Void unused687=b162.#c()
                    Void unused688=b162.#a()
                    Void unused689=b162.#u()
                    Void unused690=b162.#s()
                    Void unused691=b162.#e()
                    Void unused692=b162.#colon()
                    b162
                    ))
                  imm$opPar87.#plusplus#0left(right:imm$opPar88)
                  )
                imm$opPar89.#plusplus#0left(right:imm$opPar90)
                )
              imm$opPar91.#plusplus#0left(right:imm$opPar92)
              )
            imm$opPar93.#plusplus#0left(right:imm$opPar94)
            )
          res.#plusplus#0left(right:imm$opPar95)
          ))
        )
      )
    Void unused675=return (
      This3.Abstract.S.Continue rcv16=res.#from(seqBuilder:(
        mut This3.Abstract.S.SConcat b163=res.#seqBuilder()
        Void unused693=b163.#add(that:this.cause().#get())
        b163
        ))
      rcv16.#from(builder:(
        mut This3.Abstract.S.SBuilder b164=rcv16.#builder()
        Void unused694=b164.#cSquare()
        b164
        ))
      )
    void
    )
  
  catch return This3.Abstract.S result36 result36
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This3.Abstract.Bool equals(read This0 that) This3.Abstract.Message.EqualMessages.#apply(that:this, other:that)
class method 
This0 #apply(This3.Abstract.S text) This0.#apply(_text:text, cause:This3.Abstract.Message.Opt.#apply())
class method 
This0 #apply(This3.Abstract.S text, This3.Abstract.Message cause) (/*next part could become a trait on its own (but S must keep its version)
*/This0.#apply(_text:text, cause:This3.Abstract.Message.Opt.#apply(that:cause)))
class method 
mut This3.Abstract.S.SBuilder #builder() This3.Abstract.S.SBuilder.empty()
class method 
This0 #from(This3.Abstract.S.SBuilder builder) This0.#apply(text:This3.Abstract.S.#from(builder:builder))
method 
This0.Continue #from(This3.Abstract.S.SConcat seqBuilder) This0.Continue.#apply(that:(
  This3.Abstract.S imm$opPar96=seqBuilder.old()
  This3.Abstract.S imm$opPar97=seqBuilder.accumulator()
  imm$opPar96.#plusplus#0left(right:imm$opPar97)
  ))
method 
mut This3.Abstract.S.SConcat #seqBuilder() This3.Abstract.S.SConcat.#apply(old:this.text(), accumulator:This3.Abstract.S.#from(builder:(
  mut This3.Abstract.S.SBuilder b165=This3.Abstract.S.#builder()
  b165
  )))
Continue: {
read method 
This4.Abstract.S that() 
class method 
This0 #apply(This4.Abstract.S that) 
method 
mut This4.Abstract.S.SBuilder #builder() This4.Abstract.S.SBuilder.empty()
method 
This1 #from(This4.Abstract.S.SBuilder builder) This1.#apply(text:(
  This4.Abstract.S imm$opPar98=this.that()
  This4.Abstract.S imm$opPar99=This4.Abstract.S.#from(builder:builder)
  imm$opPar98.#plusplus#0left(right:imm$opPar99)
  ))}}}}}