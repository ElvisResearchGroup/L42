 {/*@untrusted
*/
read method 
This0.Abstract.S id() 
class method 
This0.Abstract.S jsEscape(This0.Abstract.S that) (
  var This0.Abstract.S tmp=that
  Void unused39907=tmp := tmp.replace(that:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b875=This0.Abstract.S.#builder()
    Void unused39911=b875.#backslash()
    b875
    )), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b876=This0.Abstract.S.#builder()
    Void unused39912=b876.#backslash()
    Void unused39913=b876.#backslash()
    b876
    )))
  Void unused39908=tmp := tmp.replace(that:This0.Abstract.S.doubleQuote(), into:(
    This0.Abstract.S imm$opPar488=This0.Abstract.S.#from(builder:(
      mut This0.Abstract.S.SBuilder b877=This0.Abstract.S.#builder()
      Void unused39914=b877.#backslash()
      b877
      ))
    This0.Abstract.S imm$opPar489=This0.Abstract.S.doubleQuote()
    imm$opPar488.#plusplus#0left(right:imm$opPar489)
    ))
  Void unused39909=tmp := tmp.replace(that:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b878=This0.Abstract.S.#builder()
    Void unused39915=b878.#sQuote()
    b878
    )), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b879=This0.Abstract.S.#builder()
    Void unused39916=b879.#backslash()
    Void unused39917=b879.#sQuote()
    b879
    )))
  Void unused39910=tmp := (/*tmp:=tmp.replace(S"\u" into:S"\u005cu")
*/tmp.replace(that:This0.Abstract.S.nl(), into:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b880=This0.Abstract.S.#builder()
    Void unused39918=b880.#backslash()
    Void unused39919=b880.#n()
    b880
    ))))
  tmp
  )
mut method 
Void close() use This0.GuiPlugin check close(wName:this.id().#binaryRepr()) error void
mut method 
Void open(This0.Abstract.S title, This0.Abstract.S body, This0.Abstract.Size x, This0.Abstract.Size y) this.open(html:(
  This0.Abstract.S.Continue rcv1=(
    This0.Abstract.S rcv2=(
      This0.Abstract.S.Continue rcv3=(
        This0.Abstract.S rcv4=(
          This0.Abstract.S.Continue rcv5=(
            This0.Abstract.S rcv6=This0.Abstract.S.#from(builder:(
              mut This0.Abstract.S.SBuilder b881=This0.Abstract.S.#builder()
              b881
              ))
            rcv6.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b882=rcv6.#seqBuilder()
              Void unused39920=b882.#add(that:This0.htmlHeader())
              b882
              ))
            )
          rcv5.#from(builder:(
            mut This0.Abstract.S.SBuilder b883=rcv5.#builder()
            Void unused39921=b883.#left()
            Void unused39922=b883.#t()
            Void unused39923=b883.#i()
            Void unused39924=b883.#t()
            Void unused39925=b883.#l()
            Void unused39926=b883.#e()
            Void unused39927=b883.#right()
            b883
            ))
          )
        rcv4.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b884=rcv4.#seqBuilder()
          Void unused39928=b884.#add(that:title)
          b884
          ))
        )
      rcv3.#from(builder:(
        mut This0.Abstract.S.SBuilder b885=rcv3.#builder()
        Void unused39929=b885.#left()
        Void unused39930=b885.#divide()
        Void unused39931=b885.#t()
        Void unused39932=b885.#i()
        Void unused39933=b885.#t()
        Void unused39934=b885.#l()
        Void unused39935=b885.#e()
        Void unused39936=b885.#right()
        Void unused39937=b885.#left()
        Void unused39938=b885.#divide()
        Void unused39939=b885.#h()
        Void unused39940=b885.#e()
        Void unused39941=b885.#a()
        Void unused39942=b885.#d()
        Void unused39943=b885.#right()
        Void unused39944=b885.#left()
        Void unused39945=b885.#b()
        Void unused39946=b885.#o()
        Void unused39947=b885.#d()
        Void unused39948=b885.#y()
        Void unused39949=b885.#right()
        b885
        ))
      )
    rcv2.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b886=rcv2.#seqBuilder()
      Void unused39950=b886.#add(that:body)
      b886
      ))
    )
  rcv1.#from(builder:(
    mut This0.Abstract.S.SBuilder b887=rcv1.#builder()
    Void unused39951=b887.#left()
    Void unused39952=b887.#divide()
    Void unused39953=b887.#b()
    Void unused39954=b887.#o()
    Void unused39955=b887.#d()
    Void unused39956=b887.#y()
    Void unused39957=b887.#right()
    Void unused39958=b887.#left()
    Void unused39959=b887.#divide()
    Void unused39960=b887.#h()
    Void unused39961=b887.#t()
    Void unused39962=b887.#m()
    Void unused39963=b887.#l()
    Void unused39964=b887.#right()
    b887
    ))
  ), x:x, y:y)
class method 
This0.Abstract.S htmlHeader() (/*        '<script>
        '
        "[Debug.readFile(fileName:Debug.localToAbsolute(fileName:S"examples/resources/js.js"))]"
        '
        '</script>
        "
*/This0.Abstract.S.#from(builder:(
  mut This0.Abstract.S.SBuilder b888=This0.Abstract.S.#builder()
  Void unused39965=b888.#left()
  Void unused39966=b888.#bang()
  Void unused39967=b888.#D()
  Void unused39968=b888.#O()
  Void unused39969=b888.#C()
  Void unused39970=b888.#T()
  Void unused39971=b888.#Y()
  Void unused39972=b888.#P()
  Void unused39973=b888.#E()
  Void unused39974=b888.#space()
  Void unused39975=b888.#h()
  Void unused39976=b888.#t()
  Void unused39977=b888.#m()
  Void unused39978=b888.#l()
  Void unused39979=b888.#right()
  Void unused39980=b888.#left()
  Void unused39981=b888.#h()
  Void unused39982=b888.#t()
  Void unused39983=b888.#m()
  Void unused39984=b888.#l()
  Void unused39985=b888.#right()
  Void unused39986=b888.#left()
  Void unused39987=b888.#h()
  Void unused39988=b888.#e()
  Void unused39989=b888.#a()
  Void unused39990=b888.#d()
  Void unused39991=b888.#right()
  Void unused39992=b888.#left()
  Void unused39993=b888.#m()
  Void unused39994=b888.#e()
  Void unused39995=b888.#t()
  Void unused39996=b888.#a()
  Void unused39997=b888.#space()
  Void unused39998=b888.#h()
  Void unused39999=b888.#t()
  Void unused40000=b888.#t()
  Void unused40001=b888.#p()
  Void unused40002=b888.#less()
  Void unused40003=b888.#e()
  Void unused40004=b888.#q()
  Void unused40005=b888.#u()
  Void unused40006=b888.#i()
  Void unused40007=b888.#v()
  Void unused40008=b888.#equal()
  Void unused40009=b888.#dQuote()
  Void unused40010=b888.#c()
  Void unused40011=b888.#o()
  Void unused40012=b888.#n()
  Void unused40013=b888.#t()
  Void unused40014=b888.#e()
  Void unused40015=b888.#n()
  Void unused40016=b888.#t()
  Void unused40017=b888.#less()
  Void unused40018=b888.#c()
  Void unused40019=b888.#l()
  Void unused40020=b888.#a()
  Void unused40021=b888.#s()
  Void unused40022=b888.#s()
  Void unused40023=b888.#dQuote()
  Void unused40024=b888.#space()
  Void unused40025=b888.#c()
  Void unused40026=b888.#o()
  Void unused40027=b888.#n()
  Void unused40028=b888.#t()
  Void unused40029=b888.#e()
  Void unused40030=b888.#n()
  Void unused40031=b888.#t()
  Void unused40032=b888.#equal()
  Void unused40033=b888.#dQuote()
  Void unused40034=b888.#t()
  Void unused40035=b888.#e()
  Void unused40036=b888.#x()
  Void unused40037=b888.#t()
  Void unused40038=b888.#divide()
  Void unused40039=b888.#h()
  Void unused40040=b888.#t()
  Void unused40041=b888.#m()
  Void unused40042=b888.#l()
  Void unused40043=b888.#semicolon()
  Void unused40044=b888.#space()
  Void unused40045=b888.#c()
  Void unused40046=b888.#h()
  Void unused40047=b888.#a()
  Void unused40048=b888.#r()
  Void unused40049=b888.#s()
  Void unused40050=b888.#e()
  Void unused40051=b888.#t()
  Void unused40052=b888.#equal()
  Void unused40053=b888.#U()
  Void unused40054=b888.#T()
  Void unused40055=b888.#F()
  Void unused40056=b888.#less()
  Void unused40057=b888.#8()
  Void unused40058=b888.#dQuote()
  Void unused40059=b888.#right()
  Void unused40060=b888.#newline()
  b888
  )))
mut method 
Void open(This0.Abstract.S html, This0.Abstract.Size x, This0.Abstract.Size y) (/*Debug(html)
*/use This0.GuiPlugin check open(wName:this.id().#binaryRepr(), html:html.#binaryRepr(), x:x.#binaryRepr(), y:y.#binaryRepr()) error void)
mut method 
Void set(This0.Abstract.S that, This0.Abstract.S id) (
  Void unused40061=(/*$('#Alpha').replaceWith('htmlstring')
*/
    This0.Abstract.S qid=(
      This0.Abstract.S.Continue rcv7=(
        This0.Abstract.S rcv8=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b889=This0.Abstract.S.#builder()
          Void unused40063=b889.#sQuote()
          b889
          ))
        rcv8.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b890=rcv8.#seqBuilder()
          Void unused40064=b890.#add(that:This0.jsEscape(that:id))
          b890
          ))
        )
      rcv7.#from(builder:(
        mut This0.Abstract.S.SBuilder b891=rcv7.#builder()
        Void unused40065=b891.#sQuote()
        b891
        ))
      )
    This0.Abstract.S qText=(
      This0.Abstract.S.Continue rcv9=(
        This0.Abstract.S rcv10=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b892=This0.Abstract.S.#builder()
          Void unused40066=b892.#sQuote()
          b892
          ))
        rcv10.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b893=rcv10.#seqBuilder()
          Void unused40067=b893.#add(that:This0.jsEscape(that:that))
          b893
          ))
        )
      rcv9.#from(builder:(
        mut This0.Abstract.S.SBuilder b894=rcv9.#builder()
        Void unused40068=b894.#sQuote()
        b894
        ))
      )
    This0.Abstract.S cmd=(
      This0.Abstract.S.Continue rcv11=(
        This0.Abstract.S rcv12=(
          This0.Abstract.S.Continue rcv13=(
            This0.Abstract.S rcv14=This0.Abstract.S.#from(builder:(
              mut This0.Abstract.S.SBuilder b895=This0.Abstract.S.#builder()
              Void unused40069=b895.#v()
              Void unused40070=b895.#a()
              Void unused40071=b895.#r()
              Void unused40072=b895.#space()
              Void unused40073=b895.#o()
              Void unused40074=b895.#l()
              Void unused40075=b895.#d()
              Void unused40076=b895.#E()
              Void unused40077=b895.#l()
              Void unused40078=b895.#e()
              Void unused40079=b895.#m()
              Void unused40080=b895.#space()
              Void unused40081=b895.#equal()
              Void unused40082=b895.#space()
              Void unused40083=b895.#d()
              Void unused40084=b895.#o()
              Void unused40085=b895.#c()
              Void unused40086=b895.#u()
              Void unused40087=b895.#m()
              Void unused40088=b895.#e()
              Void unused40089=b895.#n()
              Void unused40090=b895.#t()
              Void unused40091=b895.#dot()
              Void unused40092=b895.#g()
              Void unused40093=b895.#e()
              Void unused40094=b895.#t()
              Void unused40095=b895.#E()
              Void unused40096=b895.#l()
              Void unused40097=b895.#e()
              Void unused40098=b895.#m()
              Void unused40099=b895.#e()
              Void unused40100=b895.#n()
              Void unused40101=b895.#t()
              Void unused40102=b895.#B()
              Void unused40103=b895.#y()
              Void unused40104=b895.#I()
              Void unused40105=b895.#d()
              Void unused40106=b895.#oRound()
              Void unused40107=b895.#newline()
              b895
              ))
            rcv14.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b896=rcv14.#seqBuilder()
              Void unused40108=b896.#add(that:qid)
              b896
              ))
            )
          rcv13.#from(builder:(
            mut This0.Abstract.S.SBuilder b897=rcv13.#builder()
            Void unused40109=b897.#cRound()
            Void unused40110=b897.#semicolon()
            Void unused40111=b897.#newline()
            Void unused40112=b897.#o()
            Void unused40113=b897.#l()
            Void unused40114=b897.#d()
            Void unused40115=b897.#E()
            Void unused40116=b897.#l()
            Void unused40117=b897.#e()
            Void unused40118=b897.#m()
            Void unused40119=b897.#dot()
            Void unused40120=b897.#i()
            Void unused40121=b897.#n()
            Void unused40122=b897.#n()
            Void unused40123=b897.#e()
            Void unused40124=b897.#r()
            Void unused40125=b897.#H()
            Void unused40126=b897.#T()
            Void unused40127=b897.#M()
            Void unused40128=b897.#L()
            Void unused40129=b897.#space()
            Void unused40130=b897.#equal()
            Void unused40131=b897.#newline()
            b897
            ))
          )
        rcv12.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b898=rcv12.#seqBuilder()
          Void unused40132=b898.#add(that:qText)
          b898
          ))
        )
      rcv11.#from(builder:(
        mut This0.Abstract.S.SBuilder b899=rcv11.#builder()
        Void unused40133=b899.#semicolon()
        Void unused40134=b899.#newline()
        Void unused40135=b899.#v()
        Void unused40136=b899.#a()
        Void unused40137=b899.#r()
        Void unused40138=b899.#space()
        Void unused40139=b899.#p()
        Void unused40140=b899.#a()
        Void unused40141=b899.#r()
        Void unused40142=b899.#e()
        Void unused40143=b899.#n()
        Void unused40144=b899.#t()
        Void unused40145=b899.#E()
        Void unused40146=b899.#l()
        Void unused40147=b899.#e()
        Void unused40148=b899.#m()
        Void unused40149=b899.#space()
        Void unused40150=b899.#equal()
        Void unused40151=b899.#space()
        Void unused40152=b899.#o()
        Void unused40153=b899.#l()
        Void unused40154=b899.#d()
        Void unused40155=b899.#E()
        Void unused40156=b899.#l()
        Void unused40157=b899.#e()
        Void unused40158=b899.#m()
        Void unused40159=b899.#dot()
        Void unused40160=b899.#p()
        Void unused40161=b899.#a()
        Void unused40162=b899.#r()
        Void unused40163=b899.#e()
        Void unused40164=b899.#n()
        Void unused40165=b899.#t()
        Void unused40166=b899.#N()
        Void unused40167=b899.#o()
        Void unused40168=b899.#d()
        Void unused40169=b899.#e()
        Void unused40170=b899.#semicolon()
        Void unused40171=b899.#newline()
        Void unused40172=b899.#v()
        Void unused40173=b899.#a()
        Void unused40174=b899.#r()
        Void unused40175=b899.#space()
        Void unused40176=b899.#i()
        Void unused40177=b899.#n()
        Void unused40178=b899.#n()
        Void unused40179=b899.#e()
        Void unused40180=b899.#r()
        Void unused40181=b899.#E()
        Void unused40182=b899.#l()
        Void unused40183=b899.#e()
        Void unused40184=b899.#m()
        Void unused40185=b899.#semicolon()
        Void unused40186=b899.#newline()
        Void unused40187=b899.#w()
        Void unused40188=b899.#h()
        Void unused40189=b899.#i()
        Void unused40190=b899.#l()
        Void unused40191=b899.#e()
        Void unused40192=b899.#space()
        Void unused40193=b899.#oRound()
        Void unused40194=b899.#i()
        Void unused40195=b899.#n()
        Void unused40196=b899.#n()
        Void unused40197=b899.#e()
        Void unused40198=b899.#r()
        Void unused40199=b899.#E()
        Void unused40200=b899.#l()
        Void unused40201=b899.#e()
        Void unused40202=b899.#m()
        Void unused40203=b899.#space()
        Void unused40204=b899.#equal()
        Void unused40205=b899.#space()
        Void unused40206=b899.#o()
        Void unused40207=b899.#l()
        Void unused40208=b899.#d()
        Void unused40209=b899.#E()
        Void unused40210=b899.#l()
        Void unused40211=b899.#e()
        Void unused40212=b899.#m()
        Void unused40213=b899.#dot()
        Void unused40214=b899.#f()
        Void unused40215=b899.#i()
        Void unused40216=b899.#r()
        Void unused40217=b899.#s()
        Void unused40218=b899.#t()
        Void unused40219=b899.#C()
        Void unused40220=b899.#h()
        Void unused40221=b899.#i()
        Void unused40222=b899.#l()
        Void unused40223=b899.#d()
        Void unused40224=b899.#cRound()
        Void unused40225=b899.#oCurly()
        Void unused40226=b899.#newline()
        Void unused40227=b899.#space()
        Void unused40228=b899.#space()
        Void unused40229=b899.#p()
        Void unused40230=b899.#a()
        Void unused40231=b899.#r()
        Void unused40232=b899.#e()
        Void unused40233=b899.#n()
        Void unused40234=b899.#t()
        Void unused40235=b899.#E()
        Void unused40236=b899.#l()
        Void unused40237=b899.#e()
        Void unused40238=b899.#m()
        Void unused40239=b899.#dot()
        Void unused40240=b899.#i()
        Void unused40241=b899.#n()
        Void unused40242=b899.#s()
        Void unused40243=b899.#e()
        Void unused40244=b899.#r()
        Void unused40245=b899.#t()
        Void unused40246=b899.#B()
        Void unused40247=b899.#e()
        Void unused40248=b899.#f()
        Void unused40249=b899.#o()
        Void unused40250=b899.#r()
        Void unused40251=b899.#e()
        Void unused40252=b899.#oRound()
        Void unused40253=b899.#i()
        Void unused40254=b899.#n()
        Void unused40255=b899.#n()
        Void unused40256=b899.#e()
        Void unused40257=b899.#r()
        Void unused40258=b899.#E()
        Void unused40259=b899.#l()
        Void unused40260=b899.#e()
        Void unused40261=b899.#m()
        Void unused40262=b899.#comma()
        Void unused40263=b899.#space()
        Void unused40264=b899.#o()
        Void unused40265=b899.#l()
        Void unused40266=b899.#d()
        Void unused40267=b899.#E()
        Void unused40268=b899.#l()
        Void unused40269=b899.#e()
        Void unused40270=b899.#m()
        Void unused40271=b899.#cRound()
        Void unused40272=b899.#semicolon()
        Void unused40273=b899.#newline()
        Void unused40274=b899.#space()
        Void unused40275=b899.#space()
        Void unused40276=b899.#cCurly()
        Void unused40277=b899.#newline()
        Void unused40278=b899.#p()
        Void unused40279=b899.#a()
        Void unused40280=b899.#r()
        Void unused40281=b899.#e()
        Void unused40282=b899.#n()
        Void unused40283=b899.#t()
        Void unused40284=b899.#E()
        Void unused40285=b899.#l()
        Void unused40286=b899.#e()
        Void unused40287=b899.#m()
        Void unused40288=b899.#dot()
        Void unused40289=b899.#r()
        Void unused40290=b899.#e()
        Void unused40291=b899.#m()
        Void unused40292=b899.#o()
        Void unused40293=b899.#v()
        Void unused40294=b899.#e()
        Void unused40295=b899.#C()
        Void unused40296=b899.#h()
        Void unused40297=b899.#i()
        Void unused40298=b899.#l()
        Void unused40299=b899.#d()
        Void unused40300=b899.#oRound()
        Void unused40301=b899.#o()
        Void unused40302=b899.#l()
        Void unused40303=b899.#d()
        Void unused40304=b899.#E()
        Void unused40305=b899.#l()
        Void unused40306=b899.#e()
        Void unused40307=b899.#m()
        Void unused40308=b899.#cRound()
        Void unused40309=b899.#semicolon()
        Void unused40310=b899.#newline()
        b899
        ))
      )
    This0.Abstract.S x=(/*Debug(cmd)
if x!=S"" (Debug(x))
*/this.executeJs(that:cmd))
    Void unused40062=return void
    void
    )
  
  catch return Void result168 result168
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void add(This0.Abstract.S that, This0.Abstract.S id) (
  Void unused40311=(
    This0.Abstract.S qid=(
      This0.Abstract.S.Continue rcv15=(
        This0.Abstract.S rcv16=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b900=This0.Abstract.S.#builder()
          Void unused40313=b900.#sQuote()
          b900
          ))
        rcv16.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b901=rcv16.#seqBuilder()
          Void unused40314=b901.#add(that:This0.jsEscape(that:id))
          b901
          ))
        )
      rcv15.#from(builder:(
        mut This0.Abstract.S.SBuilder b902=rcv15.#builder()
        Void unused40315=b902.#sQuote()
        b902
        ))
      )
    This0.Abstract.S qText=(
      This0.Abstract.S.Continue rcv17=(
        This0.Abstract.S rcv18=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b903=This0.Abstract.S.#builder()
          Void unused40316=b903.#sQuote()
          b903
          ))
        rcv18.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b904=rcv18.#seqBuilder()
          Void unused40317=b904.#add(that:This0.jsEscape(that:that))
          b904
          ))
        )
      rcv17.#from(builder:(
        mut This0.Abstract.S.SBuilder b905=rcv17.#builder()
        Void unused40318=b905.#sQuote()
        b905
        ))
      )
    This0.Abstract.S cmd=(
      This0.Abstract.S.Continue rcv19=(
        This0.Abstract.S rcv20=(
          This0.Abstract.S.Continue rcv21=(
            This0.Abstract.S rcv22=This0.Abstract.S.#from(builder:(
              mut This0.Abstract.S.SBuilder b906=This0.Abstract.S.#builder()
              Void unused40319=b906.#v()
              Void unused40320=b906.#a()
              Void unused40321=b906.#r()
              Void unused40322=b906.#space()
              Void unused40323=b906.#t()
              Void unused40324=b906.#e()
              Void unused40325=b906.#m()
              Void unused40326=b906.#p()
              Void unused40327=b906.#l()
              Void unused40328=b906.#a()
              Void unused40329=b906.#t()
              Void unused40330=b906.#e()
              Void unused40331=b906.#space()
              Void unused40332=b906.#equal()
              Void unused40333=b906.#space()
              Void unused40334=b906.#d()
              Void unused40335=b906.#o()
              Void unused40336=b906.#c()
              Void unused40337=b906.#u()
              Void unused40338=b906.#m()
              Void unused40339=b906.#e()
              Void unused40340=b906.#n()
              Void unused40341=b906.#t()
              Void unused40342=b906.#dot()
              Void unused40343=b906.#c()
              Void unused40344=b906.#r()
              Void unused40345=b906.#e()
              Void unused40346=b906.#a()
              Void unused40347=b906.#t()
              Void unused40348=b906.#e()
              Void unused40349=b906.#E()
              Void unused40350=b906.#l()
              Void unused40351=b906.#e()
              Void unused40352=b906.#m()
              Void unused40353=b906.#e()
              Void unused40354=b906.#n()
              Void unused40355=b906.#t()
              Void unused40356=b906.#oRound()
              Void unused40357=b906.#sQuote()
              Void unused40358=b906.#d()
              Void unused40359=b906.#i()
              Void unused40360=b906.#v()
              Void unused40361=b906.#sQuote()
              Void unused40362=b906.#cRound()
              Void unused40363=b906.#semicolon()
              Void unused40364=b906.#newline()
              Void unused40365=b906.#t()
              Void unused40366=b906.#e()
              Void unused40367=b906.#m()
              Void unused40368=b906.#p()
              Void unused40369=b906.#l()
              Void unused40370=b906.#a()
              Void unused40371=b906.#t()
              Void unused40372=b906.#e()
              Void unused40373=b906.#dot()
              Void unused40374=b906.#i()
              Void unused40375=b906.#n()
              Void unused40376=b906.#n()
              Void unused40377=b906.#e()
              Void unused40378=b906.#r()
              Void unused40379=b906.#H()
              Void unused40380=b906.#T()
              Void unused40381=b906.#M()
              Void unused40382=b906.#L()
              Void unused40383=b906.#space()
              Void unused40384=b906.#equal()
              Void unused40385=b906.#newline()
              b906
              ))
            rcv22.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b907=rcv22.#seqBuilder()
              Void unused40386=b907.#add(that:qText)
              b907
              ))
            )
          rcv21.#from(builder:(
            mut This0.Abstract.S.SBuilder b908=rcv21.#builder()
            Void unused40387=b908.#semicolon()
            Void unused40388=b908.#newline()
            Void unused40389=b908.#d()
            Void unused40390=b908.#o()
            Void unused40391=b908.#c()
            Void unused40392=b908.#u()
            Void unused40393=b908.#m()
            Void unused40394=b908.#e()
            Void unused40395=b908.#n()
            Void unused40396=b908.#t()
            Void unused40397=b908.#dot()
            Void unused40398=b908.#g()
            Void unused40399=b908.#e()
            Void unused40400=b908.#t()
            Void unused40401=b908.#E()
            Void unused40402=b908.#l()
            Void unused40403=b908.#e()
            Void unused40404=b908.#m()
            Void unused40405=b908.#e()
            Void unused40406=b908.#n()
            Void unused40407=b908.#t()
            Void unused40408=b908.#B()
            Void unused40409=b908.#y()
            Void unused40410=b908.#I()
            Void unused40411=b908.#d()
            Void unused40412=b908.#oRound()
            Void unused40413=b908.#newline()
            b908
            ))
          )
        rcv20.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b909=rcv20.#seqBuilder()
          Void unused40414=b909.#add(that:qid)
          b909
          ))
        )
      rcv19.#from(builder:(
        mut This0.Abstract.S.SBuilder b910=rcv19.#builder()
        Void unused40415=b910.#cRound()
        Void unused40416=b910.#dot()
        Void unused40417=b910.#a()
        Void unused40418=b910.#p()
        Void unused40419=b910.#p()
        Void unused40420=b910.#e()
        Void unused40421=b910.#n()
        Void unused40422=b910.#d()
        Void unused40423=b910.#C()
        Void unused40424=b910.#h()
        Void unused40425=b910.#i()
        Void unused40426=b910.#l()
        Void unused40427=b910.#d()
        Void unused40428=b910.#oRound()
        Void unused40429=b910.#t()
        Void unused40430=b910.#e()
        Void unused40431=b910.#m()
        Void unused40432=b910.#p()
        Void unused40433=b910.#l()
        Void unused40434=b910.#a()
        Void unused40435=b910.#t()
        Void unused40436=b910.#e()
        Void unused40437=b910.#dot()
        Void unused40438=b910.#f()
        Void unused40439=b910.#i()
        Void unused40440=b910.#r()
        Void unused40441=b910.#s()
        Void unused40442=b910.#t()
        Void unused40443=b910.#C()
        Void unused40444=b910.#h()
        Void unused40445=b910.#i()
        Void unused40446=b910.#l()
        Void unused40447=b910.#d()
        Void unused40448=b910.#cRound()
        Void unused40449=b910.#semicolon()
        Void unused40450=b910.#newline()
        b910
        ))
      )
    This0.Abstract.S x=(/*Debug(cmd)
if x!=S"" (Debug(x))
*/this.executeJs(that:cmd))
    Void unused40312=return void
    void
    )
  
  catch return Void result169 result169
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
This0.Abstract.S executeJs(This0.Abstract.S that) This0.Abstract.S.#from(binaryRepr:use This0.GuiPlugin check executeJs(wName:this.id().#binaryRepr(), command:that.#binaryRepr()) error void)
mut method 
mut This0.Iterator events() This0.Iterator.#$(id:this.id(), current:This0.Abstract.S.#from(builder:(
  mut This0.Abstract.S.SBuilder b911=This0.Abstract.S.#builder()
  b911
  )))
class method 
mut This0 #$(fwd This0.Abstract.S id) 
mut method 
Void display(This0.Abstract.S title, This0.Abstract.Size x, This0.Abstract.Size y, mut This0.Widget body) this.display(title:title, x:x, y:y, body:body, events:This0.Abstract.Strings.#from(seqBuilder:(
  mut This0.Abstract.Strings b919=This0.Abstract.Strings.#seqBuilder()
  b919
  )))
mut method 
Void display(This0.Abstract.S title, This0.Abstract.Size x, This0.Abstract.Size y, mut This0.Widget body, This0.Abstract.Strings events) (
  Void unused40478=this.open(title:title, body:This0.Abstract.S.#from(builder:(
    mut This0.Abstract.S.SBuilder b920=This0.Abstract.S.#builder()
    Void unused40481=b920.#left()
    Void unused40482=b920.#d()
    Void unused40483=b920.#i()
    Void unused40484=b920.#v()
    Void unused40485=b920.#space()
    Void unused40486=b920.#i()
    Void unused40487=b920.#d()
    Void unused40488=b920.#equal()
    Void unused40489=b920.#sQuote()
    Void unused40490=b920.#T()
    Void unused40491=b920.#o()
    Void unused40492=b920.#p()
    Void unused40493=b920.#sQuote()
    Void unused40494=b920.#right()
    Void unused40495=b920.#left()
    Void unused40496=b920.#divide()
    Void unused40497=b920.#d()
    Void unused40498=b920.#i()
    Void unused40499=b920.#v()
    Void unused40500=b920.#right()
    b920
    )), x:x, y:y)
  Void unused40479=this.draw(that:body)
  Void unused40480=(
    Void unused40501=(
      Void unused40502=(
        lent This0.Abstract.Strings.IteratorVal event=events.vals()
        (
          Void unused40505=loop (
            Void unused40506=event.#next()
            
            catch exception Void catched47435 (
              Void unused40507=(
                Void unused40508=event.#checkEnd()
                
                catch exception Void catched47436 void
                
                void
                )
              exception void
              )
            
            (
              Void unused40509=(
                This0.Abstract.Bool cond130=(
                  This0.Abstract.S read$opPar120=event.#inner()
                  This0.Abstract.S read$opPar121=This0.Abstract.S.#from(builder:(
                    mut This0.Abstract.S.SBuilder b921=This0.Abstract.S.#builder()
                    Void unused40510=b921.#E()
                    Void unused40511=b921.#X()
                    Void unused40512=b921.#I()
                    Void unused40513=b921.#T()
                    b921
                    ))
                  read$opPar120.#equalequal#0left(right:read$opPar121)
                  )
                (
                  Void unused40514=cond130.#checkTrue()
                  
                  catch exception Void catched47440 void
                  
                  (return void)
                  )
                )
              This0.Abstract.Bool unused=body.dispatch(that:This0.Event.#apply(that:event.#inner()))
              this.draw(that:body)
              )
            )
          
          catch exception Void catched47442 void
          
          void
          )
        )
      Void unused40503=(
        mut This0.Iterator event=this.events()
        (
          Void unused40515=loop (
            Void unused40516=event.#next()
            
            catch exception Void catched47444 (
              Void unused40517=(
                Void unused40518=event.#checkEnd()
                
                catch exception Void catched47445 void
                
                void
                )
              exception void
              )
            
            (
              Void unused40519=(
                This0.Abstract.Bool cond131=(
                  This0.Abstract.S read$opPar122=event.#inner()
                  This0.Abstract.S read$opPar123=This0.Abstract.S.#from(builder:(
                    mut This0.Abstract.S.SBuilder b922=This0.Abstract.S.#builder()
                    Void unused40520=b922.#E()
                    Void unused40521=b922.#X()
                    Void unused40522=b922.#I()
                    Void unused40523=b922.#T()
                    b922
                    ))
                  read$opPar122.#equalequal#0left(right:read$opPar123)
                  )
                (
                  Void unused40524=cond131.#checkTrue()
                  
                  catch exception Void catched47449 void
                  
                  (return void)
                  )
                )
              This0.Abstract.Bool unused=body.dispatch(that:This0.Event.#apply(that:event.#inner()))
              this.draw(that:body)
              )
            )
          
          catch exception Void catched47451 void
          
          void
          )
        )
      Void unused40504=return void
      void
      )
    
    catch return Void result174 result174
    
    error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
    )
  this.close()
  )
mut method 
This0.Abstract.S format(read This0.Widget that) (
  Void unused40525=(
    Void unused40526=(
      read This0.Button that1=(
        Void unused40528=return that
        
        catch return read This0.Button casted1 casted1
        
        catch return read Any casted1 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched47456 void
      
      (
        Void unused40529=return this.format(button:that1)
        void
        )
      )
    Void unused40527=return this.format(div:that)
    void
    )
  
  catch return This0.Abstract.S result175 result175
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
This0.Abstract.S format(read This0.Button button) ((
  This0.Abstract.S.Continue rcv2=(
    This0.Abstract.S rcv3=(
      This0.Abstract.S.Continue rcv4=(
        This0.Abstract.S rcv5=(
          This0.Abstract.S.Continue rcv6=(
            This0.Abstract.S rcv7=(
              This0.Abstract.S.Continue rcv8=(
                This0.Abstract.S rcv9=(
                  This0.Abstract.S.Continue rcv10=(
                    This0.Abstract.S rcv11=(
                      This0.Abstract.S.Continue rcv12=(
                        This0.Abstract.S rcv13=(
                          This0.Abstract.S.Continue rcv14=(
                            This0.Abstract.S rcv15=(
                              This0.Abstract.S.Continue rcv16=(
                                This0.Abstract.S rcv17=(
                                  This0.Abstract.S.Continue rcv18=(
                                    This0.Abstract.S rcv19=(
                                      This0.Abstract.S.Continue rcv20=(
                                        This0.Abstract.S rcv21=(
                                          This0.Abstract.S.Continue rcv22=(
                                            This0.Abstract.S rcv23=(
                                              This0.Abstract.S.Continue rcv24=(
                                                This0.Abstract.S rcv25=(
                                                  This0.Abstract.S.Continue rcv26=(
                                                    This0.Abstract.S rcv27=(
                                                      This0.Abstract.S.Continue rcv28=(
                                                        This0.Abstract.S rcv29=(
                                                          This0.Abstract.S.Continue rcv30=(
                                                            This0.Abstract.S rcv31=(
                                                              This0.Abstract.S.Continue rcv32=(
                                                                This0.Abstract.S rcv33=This0.Abstract.S.#from(builder:(
                                                                  mut This0.Abstract.S.SBuilder b923=This0.Abstract.S.#builder()
                                                                  Void unused40530=b923.#left()
                                                                  Void unused40531=b923.#b()
                                                                  Void unused40532=b923.#u()
                                                                  Void unused40533=b923.#t()
                                                                  Void unused40534=b923.#t()
                                                                  Void unused40535=b923.#o()
                                                                  Void unused40536=b923.#n()
                                                                  Void unused40537=b923.#space()
                                                                  Void unused40538=b923.#i()
                                                                  Void unused40539=b923.#d()
                                                                  Void unused40540=b923.#equal()
                                                                  Void unused40541=b923.#sQuote()
                                                                  b923
                                                                  ))
                                                                rcv33.#from(seqBuilder:(
                                                                  mut This0.Abstract.S.SConcat b924=rcv33.#seqBuilder()
                                                                  Void unused40542=b924.#add(that:button.id())
                                                                  b924
                                                                  ))
                                                                )
                                                              rcv32.#from(builder:(
                                                                mut This0.Abstract.S.SBuilder b925=rcv32.#builder()
                                                                Void unused40543=b925.#sQuote()
                                                                Void unused40544=b925.#space()
                                                                b925
                                                                ))
                                                              )
                                                            rcv31.#from(seqBuilder:(
                                                              mut This0.Abstract.S.SConcat b926=rcv31.#seqBuilder()
                                                              b926
                                                              ))
                                                            )
                                                          rcv30.#from(builder:(
                                                            mut This0.Abstract.S.SBuilder b927=rcv30.#builder()
                                                            Void unused40545=b927.#space()
                                                            Void unused40546=b927.#o()
                                                            Void unused40547=b927.#n()
                                                            Void unused40548=b927.#c()
                                                            Void unused40549=b927.#l()
                                                            Void unused40550=b927.#i()
                                                            Void unused40551=b927.#c()
                                                            Void unused40552=b927.#k()
                                                            Void unused40553=b927.#equal()
                                                            b927
                                                            ))
                                                          )
                                                        rcv29.#from(seqBuilder:(
                                                          mut This0.Abstract.S.SConcat b928=rcv29.#seqBuilder()
                                                          Void unused40554=b928.#add(that:This0.Abstract.S.doubleQuote())
                                                          b928
                                                          ))
                                                        )
                                                      rcv28.#from(builder:(
                                                        mut This0.Abstract.S.SBuilder b929=rcv28.#builder()
                                                        Void unused40555=b929.#e()
                                                        Void unused40556=b929.#v()
                                                        Void unused40557=b929.#e()
                                                        Void unused40558=b929.#n()
                                                        Void unused40559=b929.#t()
                                                        Void unused40560=b929.#4()
                                                        Void unused40561=b929.#2()
                                                        Void unused40562=b929.#oRound()
                                                        Void unused40563=b929.#sQuote()
                                                        b929
                                                        ))
                                                      )
                                                    rcv27.#from(seqBuilder:(
                                                      mut This0.Abstract.S.SConcat b930=rcv27.#seqBuilder()
                                                      Void unused40564=b930.#add(that:button.id())
                                                      b930
                                                      ))
                                                    )
                                                  rcv26.#from(builder:(
                                                    mut This0.Abstract.S.SBuilder b931=rcv26.#builder()
                                                    Void unused40565=b931.#colon()
                                                    Void unused40566=b931.#colon()
                                                    Void unused40567=b931.#P()
                                                    Void unused40568=b931.#r()
                                                    Void unused40569=b931.#e()
                                                    Void unused40570=b931.#s()
                                                    Void unused40571=b931.#s()
                                                    Void unused40572=b931.#e()
                                                    Void unused40573=b931.#d()
                                                    Void unused40574=b931.#colon()
                                                    Void unused40575=b931.#colon()
                                                    Void unused40576=b931.#m()
                                                    Void unused40577=b931.#o()
                                                    Void unused40578=b931.#r()
                                                    Void unused40579=b931.#e()
                                                    Void unused40580=b931.#sQuote()
                                                    Void unused40581=b931.#cRound()
                                                    b931
                                                    ))
                                                  )
                                                rcv25.#from(seqBuilder:(
                                                  mut This0.Abstract.S.SConcat b932=rcv25.#seqBuilder()
                                                  Void unused40582=b932.#add(that:This0.Abstract.S.doubleQuote())
                                                  b932
                                                  ))
                                                )
                                              rcv24.#from(builder:(
                                                mut This0.Abstract.S.SBuilder b933=rcv24.#builder()
                                                Void unused40583=b933.#space()
                                                Void unused40584=b933.#s()
                                                Void unused40585=b933.#t()
                                                Void unused40586=b933.#y()
                                                Void unused40587=b933.#l()
                                                Void unused40588=b933.#e()
                                                Void unused40589=b933.#equal()
                                                Void unused40590=b933.#sQuote()
                                                b933
                                                ))
                                              )
                                            rcv23.#from(seqBuilder:(
                                              mut This0.Abstract.S.SConcat b934=rcv23.#seqBuilder()
                                              b934
                                              ))
                                            )
                                          rcv22.#from(builder:(
                                            mut This0.Abstract.S.SBuilder b935=rcv22.#builder()
                                            Void unused40591=b935.#space()
                                            Void unused40592=b935.#p()
                                            Void unused40593=b935.#o()
                                            Void unused40594=b935.#s()
                                            Void unused40595=b935.#i()
                                            Void unused40596=b935.#t()
                                            Void unused40597=b935.#i()
                                            Void unused40598=b935.#o()
                                            Void unused40599=b935.#n()
                                            Void unused40600=b935.#colon()
                                            Void unused40601=b935.#space()
                                            Void unused40602=b935.#a()
                                            Void unused40603=b935.#b()
                                            Void unused40604=b935.#s()
                                            Void unused40605=b935.#o()
                                            Void unused40606=b935.#l()
                                            Void unused40607=b935.#u()
                                            Void unused40608=b935.#t()
                                            Void unused40609=b935.#e()
                                            Void unused40610=b935.#semicolon()
                                            b935
                                            ))
                                          )
                                        rcv21.#from(seqBuilder:(
                                          mut This0.Abstract.S.SConcat b936=rcv21.#seqBuilder()
                                          b936
                                          ))
                                        )
                                      rcv20.#from(builder:(
                                        mut This0.Abstract.S.SBuilder b937=rcv20.#builder()
                                        Void unused40611=b937.#space()
                                        Void unused40612=b937.#l()
                                        Void unused40613=b937.#e()
                                        Void unused40614=b937.#f()
                                        Void unused40615=b937.#t()
                                        Void unused40616=b937.#colon()
                                        Void unused40617=b937.#space()
                                        b937
                                        ))
                                      )
                                    rcv19.#from(seqBuilder:(
                                      mut This0.Abstract.S.SConcat b938=rcv19.#seqBuilder()
                                      Void unused40618=b938.#add(that:button.left())
                                      b938
                                      ))
                                    )
                                  rcv18.#from(builder:(
                                    mut This0.Abstract.S.SBuilder b939=rcv18.#builder()
                                    Void unused40619=b939.#p()
                                    Void unused40620=b939.#x()
                                    Void unused40621=b939.#semicolon()
                                    b939
                                    ))
                                  )
                                rcv17.#from(seqBuilder:(
                                  mut This0.Abstract.S.SConcat b940=rcv17.#seqBuilder()
                                  b940
                                  ))
                                )
                              rcv16.#from(builder:(
                                mut This0.Abstract.S.SBuilder b941=rcv16.#builder()
                                Void unused40622=b941.#space()
                                Void unused40623=b941.#t()
                                Void unused40624=b941.#o()
                                Void unused40625=b941.#p()
                                Void unused40626=b941.#colon()
                                Void unused40627=b941.#space()
                                b941
                                ))
                              )
                            rcv15.#from(seqBuilder:(
                              mut This0.Abstract.S.SConcat b942=rcv15.#seqBuilder()
                              Void unused40628=b942.#add(that:button.top())
                              b942
                              ))
                            )
                          rcv14.#from(builder:(
                            mut This0.Abstract.S.SBuilder b943=rcv14.#builder()
                            Void unused40629=b943.#p()
                            Void unused40630=b943.#x()
                            Void unused40631=b943.#semicolon()
                            b943
                            ))
                          )
                        rcv13.#from(seqBuilder:(
                          mut This0.Abstract.S.SConcat b944=rcv13.#seqBuilder()
                          b944
                          ))
                        )
                      rcv12.#from(builder:(
                        mut This0.Abstract.S.SBuilder b945=rcv12.#builder()
                        Void unused40632=b945.#space()
                        Void unused40633=b945.#h()
                        Void unused40634=b945.#e()
                        Void unused40635=b945.#i()
                        Void unused40636=b945.#g()
                        Void unused40637=b945.#h()
                        Void unused40638=b945.#t()
                        Void unused40639=b945.#colon()
                        Void unused40640=b945.#space()
                        b945
                        ))
                      )
                    rcv11.#from(seqBuilder:(
                      mut This0.Abstract.S.SConcat b946=rcv11.#seqBuilder()
                      Void unused40641=b946.#add(that:button.height())
                      b946
                      ))
                    )
                  rcv10.#from(builder:(
                    mut This0.Abstract.S.SBuilder b947=rcv10.#builder()
                    Void unused40642=b947.#p()
                    Void unused40643=b947.#x()
                    Void unused40644=b947.#semicolon()
                    b947
                    ))
                  )
                rcv9.#from(seqBuilder:(
                  mut This0.Abstract.S.SConcat b948=rcv9.#seqBuilder()
                  b948
                  ))
                )
              rcv8.#from(builder:(
                mut This0.Abstract.S.SBuilder b949=rcv8.#builder()
                Void unused40645=b949.#space()
                Void unused40646=b949.#p()
                Void unused40647=b949.#a()
                Void unused40648=b949.#d()
                Void unused40649=b949.#d()
                Void unused40650=b949.#i()
                Void unused40651=b949.#n()
                Void unused40652=b949.#g()
                Void unused40653=b949.#colon()
                Void unused40654=b949.#space()
                Void unused40655=b949.#0()
                Void unused40656=b949.#p()
                Void unused40657=b949.#x()
                Void unused40658=b949.#semicolon()
                b949
                ))
              )
            rcv7.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b950=rcv7.#seqBuilder()
              b950
              ))
            )
          rcv6.#from(builder:(
            mut This0.Abstract.S.SBuilder b951=rcv6.#builder()
            Void unused40659=b951.#space()
            Void unused40660=b951.#w()
            Void unused40661=b951.#i()
            Void unused40662=b951.#d()
            Void unused40663=b951.#t()
            Void unused40664=b951.#h()
            Void unused40665=b951.#colon()
            Void unused40666=b951.#space()
            b951
            ))
          )
        rcv5.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b952=rcv5.#seqBuilder()
          Void unused40667=b952.#add(that:button.width())
          b952
          ))
        )
      rcv4.#from(builder:(
        mut This0.Abstract.S.SBuilder b953=rcv4.#builder()
        Void unused40668=b953.#p()
        Void unused40669=b953.#x()
        Void unused40670=b953.#semicolon()
        Void unused40671=b953.#sQuote()
        Void unused40672=b953.#right()
        b953
        ))
      )
    rcv3.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b954=rcv3.#seqBuilder()
      Void unused40673=b954.#add(that:button.content())
      b954
      ))
    )
  rcv2.#from(builder:(
    mut This0.Abstract.S.SBuilder b955=rcv2.#builder()
    Void unused40674=b955.#left()
    Void unused40675=b955.#divide()
    Void unused40676=b955.#b()
    Void unused40677=b955.#u()
    Void unused40678=b955.#t()
    Void unused40679=b955.#t()
    Void unused40680=b955.#o()
    Void unused40681=b955.#n()
    Void unused40682=b955.#right()
    b955
    ))
  ))
mut method 
This0.Abstract.S format(read This0.Widget div) (
  This0.Abstract.S.Continue rcv34=(
    This0.Abstract.S rcv35=(
      This0.Abstract.S.Continue rcv36=(
        This0.Abstract.S rcv37=(
          This0.Abstract.S.Continue rcv38=(
            This0.Abstract.S rcv39=(
              This0.Abstract.S.Continue rcv40=(
                This0.Abstract.S rcv41=(
                  This0.Abstract.S.Continue rcv42=(
                    This0.Abstract.S rcv43=(
                      This0.Abstract.S.Continue rcv44=(
                        This0.Abstract.S rcv45=(
                          This0.Abstract.S.Continue rcv46=(
                            This0.Abstract.S rcv47=(
                              This0.Abstract.S.Continue rcv48=(
                                This0.Abstract.S rcv49=(
                                  This0.Abstract.S.Continue rcv50=(
                                    This0.Abstract.S rcv51=(
                                      This0.Abstract.S.Continue rcv52=(
                                        This0.Abstract.S rcv53=(
                                          This0.Abstract.S.Continue rcv54=(
                                            This0.Abstract.S rcv55=(
                                              This0.Abstract.S.Continue rcv56=(
                                                This0.Abstract.S rcv57=(
                                                  This0.Abstract.S.Continue rcv58=(
                                                    This0.Abstract.S rcv59=(
                                                      This0.Abstract.S.Continue rcv60=(
                                                        This0.Abstract.S rcv61=(
                                                          This0.Abstract.S.Continue rcv62=(
                                                            This0.Abstract.S rcv63=(
                                                              This0.Abstract.S.Continue rcv64=(
                                                                This0.Abstract.S rcv65=(
                                                                  This0.Abstract.S.Continue rcv66=(
                                                                    This0.Abstract.S rcv67=This0.Abstract.S.#from(builder:(
                                                                      mut This0.Abstract.S.SBuilder b956=This0.Abstract.S.#builder()
                                                                      Void unused40683=b956.#left()
                                                                      Void unused40684=b956.#d()
                                                                      Void unused40685=b956.#i()
                                                                      Void unused40686=b956.#v()
                                                                      Void unused40687=b956.#space()
                                                                      Void unused40688=b956.#i()
                                                                      Void unused40689=b956.#d()
                                                                      Void unused40690=b956.#equal()
                                                                      Void unused40691=b956.#sQuote()
                                                                      b956
                                                                      ))
                                                                    rcv67.#from(seqBuilder:(
                                                                      mut This0.Abstract.S.SConcat b957=rcv67.#seqBuilder()
                                                                      Void unused40692=b957.#add(that:div.id())
                                                                      b957
                                                                      ))
                                                                    )
                                                                  rcv66.#from(builder:(
                                                                    mut This0.Abstract.S.SBuilder b958=rcv66.#builder()
                                                                    Void unused40693=b958.#sQuote()
                                                                    Void unused40694=b958.#space()
                                                                    Void unused40695=b958.#o()
                                                                    Void unused40696=b958.#n()
                                                                    Void unused40697=b958.#c()
                                                                    Void unused40698=b958.#l()
                                                                    Void unused40699=b958.#i()
                                                                    Void unused40700=b958.#c()
                                                                    Void unused40701=b958.#k()
                                                                    Void unused40702=b958.#equal()
                                                                    b958
                                                                    ))
                                                                  )
                                                                rcv65.#from(seqBuilder:(
                                                                  mut This0.Abstract.S.SConcat b959=rcv65.#seqBuilder()
                                                                  Void unused40703=b959.#add(that:This0.Abstract.S.doubleQuote())
                                                                  b959
                                                                  ))
                                                                )
                                                              rcv64.#from(builder:(
                                                                mut This0.Abstract.S.SBuilder b960=rcv64.#builder()
                                                                Void unused40704=b960.#e()
                                                                Void unused40705=b960.#v()
                                                                Void unused40706=b960.#e()
                                                                Void unused40707=b960.#n()
                                                                Void unused40708=b960.#t()
                                                                Void unused40709=b960.#4()
                                                                Void unused40710=b960.#2()
                                                                Void unused40711=b960.#oRound()
                                                                Void unused40712=b960.#sQuote()
                                                                b960
                                                                ))
                                                              )
                                                            rcv63.#from(seqBuilder:(
                                                              mut This0.Abstract.S.SConcat b961=rcv63.#seqBuilder()
                                                              Void unused40713=b961.#add(that:div.id())
                                                              b961
                                                              ))
                                                            )
                                                          rcv62.#from(builder:(
                                                            mut This0.Abstract.S.SBuilder b962=rcv62.#builder()
                                                            Void unused40714=b962.#colon()
                                                            Void unused40715=b962.#colon()
                                                            Void unused40716=b962.#P()
                                                            Void unused40717=b962.#r()
                                                            Void unused40718=b962.#e()
                                                            Void unused40719=b962.#s()
                                                            Void unused40720=b962.#s()
                                                            Void unused40721=b962.#e()
                                                            Void unused40722=b962.#d()
                                                            Void unused40723=b962.#colon()
                                                            Void unused40724=b962.#colon()
                                                            Void unused40725=b962.#m()
                                                            Void unused40726=b962.#o()
                                                            Void unused40727=b962.#r()
                                                            Void unused40728=b962.#e()
                                                            Void unused40729=b962.#sQuote()
                                                            Void unused40730=b962.#cRound()
                                                            b962
                                                            ))
                                                          )
                                                        rcv61.#from(seqBuilder:(
                                                          mut This0.Abstract.S.SConcat b963=rcv61.#seqBuilder()
                                                          Void unused40731=b963.#add(that:This0.Abstract.S.doubleQuote())
                                                          b963
                                                          ))
                                                        )
                                                      rcv60.#from(builder:(
                                                        mut This0.Abstract.S.SBuilder b964=rcv60.#builder()
                                                        Void unused40732=b964.#space()
                                                        Void unused40733=b964.#s()
                                                        Void unused40734=b964.#t()
                                                        Void unused40735=b964.#y()
                                                        Void unused40736=b964.#l()
                                                        Void unused40737=b964.#e()
                                                        Void unused40738=b964.#equal()
                                                        Void unused40739=b964.#sQuote()
                                                        b964
                                                        ))
                                                      )
                                                    rcv59.#from(seqBuilder:(
                                                      mut This0.Abstract.S.SConcat b965=rcv59.#seqBuilder()
                                                      b965
                                                      ))
                                                    )
                                                  rcv58.#from(builder:(
                                                    mut This0.Abstract.S.SBuilder b966=rcv58.#builder()
                                                    Void unused40740=b966.#p()
                                                    Void unused40741=b966.#o()
                                                    Void unused40742=b966.#s()
                                                    Void unused40743=b966.#i()
                                                    Void unused40744=b966.#t()
                                                    Void unused40745=b966.#i()
                                                    Void unused40746=b966.#o()
                                                    Void unused40747=b966.#n()
                                                    Void unused40748=b966.#colon()
                                                    Void unused40749=b966.#space()
                                                    Void unused40750=b966.#a()
                                                    Void unused40751=b966.#b()
                                                    Void unused40752=b966.#s()
                                                    Void unused40753=b966.#o()
                                                    Void unused40754=b966.#l()
                                                    Void unused40755=b966.#u()
                                                    Void unused40756=b966.#t()
                                                    Void unused40757=b966.#e()
                                                    Void unused40758=b966.#semicolon()
                                                    b966
                                                    ))
                                                  )
                                                rcv57.#from(seqBuilder:(
                                                  mut This0.Abstract.S.SConcat b967=rcv57.#seqBuilder()
                                                  b967
                                                  ))
                                                )
                                              rcv56.#from(builder:(
                                                mut This0.Abstract.S.SBuilder b968=rcv56.#builder()
                                                Void unused40759=b968.#l()
                                                Void unused40760=b968.#e()
                                                Void unused40761=b968.#f()
                                                Void unused40762=b968.#t()
                                                Void unused40763=b968.#colon()
                                                Void unused40764=b968.#space()
                                                b968
                                                ))
                                              )
                                            rcv55.#from(seqBuilder:(
                                              mut This0.Abstract.S.SConcat b969=rcv55.#seqBuilder()
                                              Void unused40765=b969.#add(that:div.left())
                                              b969
                                              ))
                                            )
                                          rcv54.#from(builder:(
                                            mut This0.Abstract.S.SBuilder b970=rcv54.#builder()
                                            Void unused40766=b970.#p()
                                            Void unused40767=b970.#x()
                                            Void unused40768=b970.#semicolon()
                                            b970
                                            ))
                                          )
                                        rcv53.#from(seqBuilder:(
                                          mut This0.Abstract.S.SConcat b971=rcv53.#seqBuilder()
                                          b971
                                          ))
                                        )
                                      rcv52.#from(builder:(
                                        mut This0.Abstract.S.SBuilder b972=rcv52.#builder()
                                        Void unused40769=b972.#t()
                                        Void unused40770=b972.#o()
                                        Void unused40771=b972.#p()
                                        Void unused40772=b972.#colon()
                                        Void unused40773=b972.#space()
                                        b972
                                        ))
                                      )
                                    rcv51.#from(seqBuilder:(
                                      mut This0.Abstract.S.SConcat b973=rcv51.#seqBuilder()
                                      Void unused40774=b973.#add(that:div.top())
                                      b973
                                      ))
                                    )
                                  rcv50.#from(builder:(
                                    mut This0.Abstract.S.SBuilder b974=rcv50.#builder()
                                    Void unused40775=b974.#p()
                                    Void unused40776=b974.#x()
                                    Void unused40777=b974.#semicolon()
                                    b974
                                    ))
                                  )
                                rcv49.#from(seqBuilder:(
                                  mut This0.Abstract.S.SConcat b975=rcv49.#seqBuilder()
                                  b975
                                  ))
                                )
                              rcv48.#from(builder:(
                                mut This0.Abstract.S.SBuilder b976=rcv48.#builder()
                                Void unused40778=b976.#h()
                                Void unused40779=b976.#e()
                                Void unused40780=b976.#i()
                                Void unused40781=b976.#g()
                                Void unused40782=b976.#h()
                                Void unused40783=b976.#t()
                                Void unused40784=b976.#colon()
                                Void unused40785=b976.#space()
                                b976
                                ))
                              )
                            rcv47.#from(seqBuilder:(
                              mut This0.Abstract.S.SConcat b977=rcv47.#seqBuilder()
                              Void unused40786=b977.#add(that:div.height())
                              b977
                              ))
                            )
                          rcv46.#from(builder:(
                            mut This0.Abstract.S.SBuilder b978=rcv46.#builder()
                            Void unused40787=b978.#p()
                            Void unused40788=b978.#x()
                            Void unused40789=b978.#semicolon()
                            b978
                            ))
                          )
                        rcv45.#from(seqBuilder:(
                          mut This0.Abstract.S.SConcat b979=rcv45.#seqBuilder()
                          b979
                          ))
                        )
                      rcv44.#from(builder:(
                        mut This0.Abstract.S.SBuilder b980=rcv44.#builder()
                        Void unused40790=b980.#w()
                        Void unused40791=b980.#i()
                        Void unused40792=b980.#d()
                        Void unused40793=b980.#t()
                        Void unused40794=b980.#h()
                        Void unused40795=b980.#colon()
                        Void unused40796=b980.#space()
                        b980
                        ))
                      )
                    rcv43.#from(seqBuilder:(
                      mut This0.Abstract.S.SConcat b981=rcv43.#seqBuilder()
                      Void unused40797=b981.#add(that:div.width())
                      b981
                      ))
                    )
                  rcv42.#from(builder:(
                    mut This0.Abstract.S.SBuilder b982=rcv42.#builder()
                    Void unused40798=b982.#p()
                    Void unused40799=b982.#x()
                    Void unused40800=b982.#semicolon()
                    b982
                    ))
                  )
                rcv41.#from(seqBuilder:(
                  mut This0.Abstract.S.SConcat b983=rcv41.#seqBuilder()
                  b983
                  ))
                )
              rcv40.#from(builder:(
                mut This0.Abstract.S.SBuilder b984=rcv40.#builder()
                Void unused40801=b984.#b()
                Void unused40802=b984.#a()
                Void unused40803=b984.#c()
                Void unused40804=b984.#k()
                Void unused40805=b984.#g()
                Void unused40806=b984.#r()
                Void unused40807=b984.#o()
                Void unused40808=b984.#u()
                Void unused40809=b984.#n()
                Void unused40810=b984.#d()
                Void unused40811=b984.#less()
                Void unused40812=b984.#c()
                Void unused40813=b984.#o()
                Void unused40814=b984.#l()
                Void unused40815=b984.#o()
                Void unused40816=b984.#r()
                Void unused40817=b984.#colon()
                Void unused40818=b984.#space()
                b984
                ))
              )
            rcv39.#from(seqBuilder:(
              mut This0.Abstract.S.SConcat b985=rcv39.#seqBuilder()
              Void unused40819=b985.#add(that:div.color())
              b985
              ))
            )
          rcv38.#from(builder:(
            mut This0.Abstract.S.SBuilder b986=rcv38.#builder()
            Void unused40820=b986.#semicolon()
            Void unused40821=b986.#sQuote()
            Void unused40822=b986.#right()
            b986
            ))
          )
        rcv37.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b987=rcv37.#seqBuilder()
          b987
          ))
        )
      rcv36.#from(builder:(
        mut This0.Abstract.S.SBuilder b988=rcv36.#builder()
        Void unused40823=b988.#left()
        Void unused40824=b988.#d()
        Void unused40825=b988.#i()
        Void unused40826=b988.#v()
        Void unused40827=b988.#space()
        Void unused40828=b988.#s()
        Void unused40829=b988.#t()
        Void unused40830=b988.#y()
        Void unused40831=b988.#l()
        Void unused40832=b988.#e()
        Void unused40833=b988.#equal()
        Void unused40834=b988.#sQuote()
        Void unused40835=b988.#p()
        Void unused40836=b988.#o()
        Void unused40837=b988.#s()
        Void unused40838=b988.#i()
        Void unused40839=b988.#t()
        Void unused40840=b988.#i()
        Void unused40841=b988.#o()
        Void unused40842=b988.#n()
        Void unused40843=b988.#colon()
        Void unused40844=b988.#space()
        Void unused40845=b988.#r()
        Void unused40846=b988.#e()
        Void unused40847=b988.#l()
        Void unused40848=b988.#a()
        Void unused40849=b988.#t()
        Void unused40850=b988.#i()
        Void unused40851=b988.#v()
        Void unused40852=b988.#e()
        Void unused40853=b988.#semicolon()
        Void unused40854=b988.#sQuote()
        Void unused40855=b988.#right()
        b988
        ))
      )
    rcv35.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b1=rcv35.#seqBuilder()
      Void unused40856=(
        lent This0.Widget.List.IteratorVal w=div.children().vals()
        (
          Void unused40857=loop (
            Void unused40858=w.#next()
            
            catch exception Void catched47592 (
              Void unused40859=(
                Void unused40860=w.#checkEnd()
                
                catch exception Void catched47593 void
                
                void
                )
              exception void
              )
            
            ((
              Void unused40861=b1.#add(that:this.format(that:w.#inner()))
              void
              ))
            )
          
          catch exception Void catched47596 void
          
          void
          )
        )
      b1
      ))
    )
  rcv34.#from(builder:(
    mut This0.Abstract.S.SBuilder b989=rcv34.#builder()
    Void unused40862=b989.#left()
    Void unused40863=b989.#divide()
    Void unused40864=b989.#d()
    Void unused40865=b989.#i()
    Void unused40866=b989.#v()
    Void unused40867=b989.#right()
    Void unused40868=b989.#left()
    Void unused40869=b989.#divide()
    Void unused40870=b989.#d()
    Void unused40871=b989.#i()
    Void unused40872=b989.#v()
    Void unused40873=b989.#right()
    b989
    ))
  )
mut method 
Void draw(read This0.Widget that) this.set(that:(
  This0.Abstract.S.Continue rcv68=(
    This0.Abstract.S rcv69=(
      This0.Abstract.S.Continue rcv70=(
        This0.Abstract.S rcv71=This0.Abstract.S.#from(builder:(
          mut This0.Abstract.S.SBuilder b990=This0.Abstract.S.#builder()
          Void unused40874=b990.#left()
          Void unused40875=b990.#d()
          Void unused40876=b990.#i()
          Void unused40877=b990.#v()
          Void unused40878=b990.#space()
          Void unused40879=b990.#i()
          Void unused40880=b990.#d()
          Void unused40881=b990.#equal()
          Void unused40882=b990.#sQuote()
          Void unused40883=b990.#T()
          Void unused40884=b990.#o()
          Void unused40885=b990.#p()
          Void unused40886=b990.#sQuote()
          Void unused40887=b990.#space()
          Void unused40888=b990.#s()
          Void unused40889=b990.#t()
          Void unused40890=b990.#y()
          Void unused40891=b990.#l()
          Void unused40892=b990.#e()
          Void unused40893=b990.#equal()
          Void unused40894=b990.#sQuote()
          b990
          ))
        rcv71.#from(seqBuilder:(
          mut This0.Abstract.S.SConcat b991=rcv71.#seqBuilder()
          b991
          ))
        )
      rcv70.#from(builder:(
        mut This0.Abstract.S.SBuilder b992=rcv70.#builder()
        Void unused40895=b992.#p()
        Void unused40896=b992.#o()
        Void unused40897=b992.#s()
        Void unused40898=b992.#i()
        Void unused40899=b992.#t()
        Void unused40900=b992.#i()
        Void unused40901=b992.#o()
        Void unused40902=b992.#n()
        Void unused40903=b992.#colon()
        Void unused40904=b992.#space()
        Void unused40905=b992.#r()
        Void unused40906=b992.#e()
        Void unused40907=b992.#l()
        Void unused40908=b992.#a()
        Void unused40909=b992.#t()
        Void unused40910=b992.#i()
        Void unused40911=b992.#v()
        Void unused40912=b992.#e()
        Void unused40913=b992.#semicolon()
        Void unused40914=b992.#space()
        Void unused40915=b992.#h()
        Void unused40916=b992.#e()
        Void unused40917=b992.#i()
        Void unused40918=b992.#g()
        Void unused40919=b992.#h()
        Void unused40920=b992.#t()
        Void unused40921=b992.#colon()
        Void unused40922=b992.#space()
        Void unused40923=b992.#7()
        Void unused40924=b992.#5()
        Void unused40925=b992.#0()
        Void unused40926=b992.#p()
        Void unused40927=b992.#x()
        Void unused40928=b992.#semicolon()
        Void unused40929=b992.#space()
        Void unused40930=b992.#w()
        Void unused40931=b992.#i()
        Void unused40932=b992.#d()
        Void unused40933=b992.#t()
        Void unused40934=b992.#h()
        Void unused40935=b992.#colon()
        Void unused40936=b992.#space()
        Void unused40937=b992.#7()
        Void unused40938=b992.#5()
        Void unused40939=b992.#0()
        Void unused40940=b992.#p()
        Void unused40941=b992.#x()
        Void unused40942=b992.#semicolon()
        Void unused40943=b992.#space()
        Void unused40944=b992.#b()
        Void unused40945=b992.#o()
        Void unused40946=b992.#r()
        Void unused40947=b992.#d()
        Void unused40948=b992.#e()
        Void unused40949=b992.#r()
        Void unused40950=b992.#colon()
        Void unused40951=b992.#space()
        Void unused40952=b992.#s()
        Void unused40953=b992.#o()
        Void unused40954=b992.#l()
        Void unused40955=b992.#i()
        Void unused40956=b992.#d()
        Void unused40957=b992.#space()
        Void unused40958=b992.#b()
        Void unused40959=b992.#l()
        Void unused40960=b992.#a()
        Void unused40961=b992.#c()
        Void unused40962=b992.#k()
        Void unused40963=b992.#space()
        Void unused40964=b992.#2()
        Void unused40965=b992.#p()
        Void unused40966=b992.#x()
        Void unused40967=b992.#semicolon()
        Void unused40968=b992.#sQuote()
        Void unused40969=b992.#right()
        b992
        ))
      )
    rcv69.#from(seqBuilder:(
      mut This0.Abstract.S.SConcat b993=rcv69.#seqBuilder()
      Void unused40970=b993.#add(that:this.format(that:that))
      b993
      ))
    )
  rcv68.#from(builder:(
    mut This0.Abstract.S.SBuilder b994=rcv68.#builder()
    Void unused40971=b994.#left()
    Void unused40972=b994.#divide()
    Void unused40973=b994.#d()
    Void unused40974=b994.#i()
    Void unused40975=b994.#v()
    Void unused40976=b994.#right()
    b994
    ))
  ), id:This0.Abstract.S.#from(builder:(
  mut This0.Abstract.S.SBuilder b995=This0.Abstract.S.#builder()
  Void unused40977=b995.#T()
  Void unused40978=b995.#o()
  Void unused40979=b995.#p()
  b995
  )))
Event: {implements This1.Abstract.Concept.Base, This1.Abstract.Concept.Classable, This1.Abstract.Concept.ToS, This1.Abstract.Concept.Equals
read method 
Void #invariant_$_428() void
class method 
mut This0 #apply_$_428(fwd This1.Abstract.S targetId, fwd This1.Abstract.S eventId, fwd This1.Abstract.Strings all) 
refine read method 
class This0 class() This0
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.Abstract.S readableName() This1.PrImpl1_$_634.GetMyName.#apply(that:This0)
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Abstract.Bool is(class This1.Abstract.Concept.Classable subtype) (
  Void unused35862=(
    Void unused35863=(
      class This0 subtype1=(
        Void unused35865=return subtype
        
        catch return class This0 casted9 casted9
        
        catch return class Any casted9 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18282 void
      
      (
        Void unused35866=return This1.Abstract.Bool.true()
        void
        )
      )
    Void unused35864=return This1.Abstract.Bool.false()
    void
    )
  
  catch return This1.Abstract.Bool result142 result142
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
read This0 cast(read This1.Abstract.Concept.Classable that) (
  Void unused35867=(
    Void unused35868=(
      read This0 that4=(
        Void unused35870=return that
        
        catch return read This0 casted10 casted10
        
        catch return read Any casted10 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18287 void
      
      (
        Void unused35871=return that4
        void
        )
      )
    Void unused35869=error This1.PrImpl1_$_634.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return read This0 result143 result143
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
mut This0 #cast(mut This1.Abstract.Concept.Classable that) (
  Void unused35872=(
    Void unused35873=(
      mut This0 that5=(
        Void unused35875=return that
        
        catch return mut This0 casted11 casted11
        
        catch return mut Any casted11 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18292 void
      
      (
        Void unused35876=return that5
        void
        )
      )
    Void unused35874=error This1.PrImpl1_$_634.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return mut This0 result144 result144
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
This0 #apply(This1.Abstract.S that) (
  This1.Abstract.Strings s=that.splitOn(chars:This1.Abstract.S.#from(builder:(
    mut This1.Abstract.S.SBuilder b912=This1.Abstract.S.#builder()
    Void unused40455=b912.#colon()
    Void unused40456=b912.#colon()
    b912
    )))
  This0.#apply(targetId:s.val(that:This1.Abstract.Size.#from(builder:(
    mut This1.Abstract.S.SBuilder b913=This1.Abstract.Size.#builder()
    Void unused40457=b913.#0()
    b913
    ))), eventId:s.val(that:This1.Abstract.Size.#from(builder:(
    mut This1.Abstract.S.SBuilder b914=This1.Abstract.Size.#builder()
    Void unused40458=b914.#1()
    b914
    ))), all:s)
  )
class method 
mut This0 #apply(This1.Abstract.S targetId, This1.Abstract.S eventId, This1.Abstract.Strings all) (
  mut This0 r5=this.#apply_$_428(targetId:targetId, eventId:eventId, all:all)
  Void unused48124=r5.#invariant_$_428()
  r5
  )
class method 
This0 #immK(This1.Abstract.S targetId, This1.Abstract.S eventId, This1.Abstract.Strings all) (
  This0 r6=this.#apply_$_428(targetId:targetId, eventId:eventId, all:all)
  Void unused48125=r6.#invariant_$_428()
  r6
  )
method 
This0 with(This1.Abstract.S targetId) This0.#immK(targetId:targetId, eventId:this.eventId(), all:this.all())
method 
This0 with(This1.Abstract.S eventId) This0.#immK(targetId:this.targetId(), eventId:eventId, all:this.all())
method 
This0 with(This1.Abstract.Strings all) This0.#immK(targetId:this.targetId(), eventId:this.eventId(), all:all)
refine read method 
This1.Abstract.S toS() (
  This1.Abstract.S.Continue rcv14=(
    This1.Abstract.S rcv15=This1.Abstract.S.#from(builder:(
      mut This1.Abstract.S.SBuilder b577=This1.Abstract.S.#builder()
      Void unused35363=b577.#oSquare()
      b577
      ))
    rcv15.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b578=rcv15.#seqBuilder()
      Void unused35364=b578.#add(that:this.baseToS1_$_440())
      b578
      ))
    )
  rcv14.#from(builder:(
    mut This1.Abstract.S.SBuilder b579=rcv14.#builder()
    Void unused35365=b579.#cSquare()
    b579
    ))
  )
read method 
This1.Abstract.S #1baseToS3_$_429() This1.Abstract.S.#from(builder:(
  mut This1.Abstract.S.SBuilder b580=This1.Abstract.S.#builder()
  b580
  ))
class method 
Any val2_$_430() This1.Abstract.S._private(_binaryRepr: {/*@stringU
targetId
*/})
class method 
This1.Abstract.S fN1_$_431() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val2_$_430()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val3_$_432() This1.Abstract.S._private(_binaryRepr: {/*@stringU
eventId
*/})
class method 
This1.Abstract.S fN2_$_433() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val3_$_432()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS1_$_434() (
  Void unused35590=(
    This1.Abstract.S ts=this.targetId().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN1_$_431())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN1_$_431())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #2baseToS1_$_435() (
  Void unused35590=(
    This1.Abstract.S ts=this.eventId().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN2_$_433())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN2_$_433())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val4_$_436() This1.Abstract.S._private(_binaryRepr: {/*@stringU
all
*/})
class method 
This1.Abstract.S fN3_$_437() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val4_$_436()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS2_$_438() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS1_$_434())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS1_$_435())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS2_$_439() (
  Void unused35590=(
    This1.Abstract.S ts=this.all().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN3_$_437())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN3_$_437())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S baseToS1_$_440() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS2_$_438())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS2_$_439())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #invariantToS() (
  This1.Abstract.S.Continue rcv70=(
    This1.Abstract.S rcv71=This1.Abstract.S.#from(builder:(
      mut This1.Abstract.S.SBuilder b667=This1.Abstract.S.#builder()
      Void unused35667=b667.#oSquare()
      b667
      ))
    rcv71.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b668=rcv71.#seqBuilder()
      Void unused35668=b668.#add(that:this.baseToS2_$_452())
      b668
      ))
    )
  rcv70.#from(builder:(
    mut This1.Abstract.S.SBuilder b669=rcv70.#builder()
    Void unused35669=b669.#cSquare()
    b669
    ))
  )
read method 
This1.Abstract.S #1baseToS6_$_441() This1.Abstract.S.#from(builder:(
  mut This1.Abstract.S.SBuilder b670=This1.Abstract.S.#builder()
  b670
  ))
class method 
Any val5_$_442() This1.Abstract.S._private(_binaryRepr: {/*@stringU
targetId
*/})
class method 
This1.Abstract.S fN4_$_443() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val5_$_442()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val6_$_444() This1.Abstract.S._private(_binaryRepr: {/*@stringU
eventId
*/})
class method 
This1.Abstract.S fN5_$_445() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val6_$_444()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS4_$_446() (
  Void unused35590=(
    This1.Abstract.S ts=this.targetId().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN4_$_443())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN4_$_443())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #2baseToS3_$_447() (
  Void unused35590=(
    This1.Abstract.S ts=this.eventId().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN5_$_445())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN5_$_445())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val7_$_448() This1.Abstract.S._private(_binaryRepr: {/*@stringU
all
*/})
class method 
This1.Abstract.S fN6_$_449() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val7_$_448()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS5_$_450() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS4_$_446())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS3_$_447())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS4_$_451() (
  Void unused35590=(
    This1.Abstract.S ts=this.all().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN6_$_449())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN6_$_449())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S baseToS2_$_452() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS5_$_450())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS4_$_451())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
refine read method 
This1.Abstract.Bool #equalequal#0left(read Any right) (
  Void unused35813=(
    Void unused35814=(
      read This0 right1=(
        Void unused35816=return right
        
        catch return read This0 casted8 casted8
        
        catch return read Any casted8 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18243 void
      
      (
        Void unused35817=return this.equals(that:right1)
        void
        )
      )
    Void unused35815=return This1.Abstract.Bool.false()
    void
    )
  
  catch return This1.Abstract.Bool result138 result138
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #1equals6_$_453(read This0 that) This1.Abstract.Bool.true()
read method 
This1.Abstract.S targetId() this.targetId_$_428()
read method 
This1.Abstract.S targetId_$_428() 
read method 
This1.Abstract.S eventId() this.eventId_$_428()
read method 
This1.Abstract.S eventId_$_428() 
read method 
This1.Abstract.Bool #1equals4_$_454(read This0 that) (
  This1.Abstract.S read$opPar95=this.targetId()
  This1.Abstract.S read$opPar96=that.targetId()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Bool #2equals1_$_455(read This0 that) (
  This1.Abstract.S read$opPar95=this.eventId()
  This1.Abstract.S read$opPar96=that.eventId()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Strings all() this.all_$_428()
read method 
This1.Abstract.Strings all_$_428() 
read method 
This1.Abstract.Bool #1equals5_$_456(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals4_$_454(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals1_$_455(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #2equals2_$_457(read This0 that) (
  This1.Abstract.Strings read$opPar95=this.all()
  This1.Abstract.Strings read$opPar96=that.all()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Bool equals(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals5_$_456(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals2_$_457(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #invariant() void}
Widget: {interface implements This1.Abstract.Concept.Base, This1.Abstract.Concept.ToS, This1.Abstract.Concept.Classable, This1.Abstract.Concept.Equals
read method 
This1.Abstract.S id() 
read method 
This1.Abstract.Size left() 
read method 
This1.Abstract.Size top() 
read method 
This1.Abstract.Size width() 
read method 
This1.Abstract.Size height() 
read method 
This1.Abstract.S color() 
read method 
read This0.List children() 
mut method 
This1.Abstract.Bool dispatch(This1.Event that) 
refine read method 
This1.Abstract.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.Abstract.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Abstract.Bool is(class This1.Abstract.Concept.Classable subtype) 
refine read method 
This1.Abstract.Bool #equalequal#0left(read Any right) 
refine read method 
class This1.Abstract.Concept.Base class() 
refine class method 
read This1.Abstract.Concept.Base cast(read This1.Abstract.Concept.Classable that) 
refine class method 
mut This1.Abstract.Concept.Base #cast(mut This1.Abstract.Concept.Classable that) 
List: {implements This2.Abstract.Concept.ToS, This2.Abstract.Concept.Classable, This2.Abstract.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Abstract.Concept.Classable that) (
  Void unused491=(
    Void unused492=(
      read This0 that9=(
        Void unused494=return that
        
        catch return read This0 casted17 casted17
        
        catch return read Any casted17 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched258 void
      
      (
        Void unused495=return that9
        void
        )
      )
    Void unused493=error This2.PrImpl1_$_634.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return read This0 result32 result32
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Abstract.Concept.Classable that) (
  Void unused496=(
    Void unused497=(
      mut This0 that10=(
        Void unused499=return that
        
        catch return mut This0 casted18 casted18
        
        catch return mut Any casted18 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched263 void
      
      (
        Void unused500=return that10
        void
        )
      )
    Void unused498=error This2.PrImpl1_$_634.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return mut This0 result33 result33
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() This0
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.Abstract.S readableName() This2.PrImpl1_$_634.GetMyName.#apply(that:This0)
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Abstract.Bool is(class This2.Abstract.Concept.Classable subtype) (
  Void unused501=(
    Void unused502=(
      class This0 subtype5=(
        Void unused504=return subtype
        
        catch return class This0 casted19 casted19
        
        catch return class Any casted19 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched268 void
      
      (
        Void unused505=return This2.Abstract.Bool.true()
        void
        )
      )
    Void unused503=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result34 result34
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
read This2.Abstract.CollectionsMut.MutListAny inner() 
mut method 
mut This2.Abstract.CollectionsMut.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Abstract.CollectionsMut.MutListAny inner) 
class method 
This0 #immK(This2.Abstract.CollectionsMut.MutListAny inner) This0.#apply(inner:inner)
class method 
mut This0 empty() This0.#apply(inner:This2.Abstract.CollectionsMut.MutListAny.empty())
mut method 
mut This0 #reverse() (/*TODO: read reverse is just impossible?
*/
  mut This0 result=This0.empty()
  Void unused1107=(
    mut This0.IteratorVar e=this.#vals()
    (
      Void unused1108=loop (
        Void unused1109=e.#next()
        
        catch exception Void catched513 (
          Void unused1110=(
            Void unused1111=e.#checkEnd()
            
            catch exception Void catched514 void
            
            void
            )
          exception void
          )
        
        (result.add(left:e.#inner()))
        )
      
      catch exception Void catched516 void
      
      void
      )
    )
  result
  )
read method 
class This2.Abstract.Size #default#val(Void that) This2.Abstract.Size
read method 
read This1 right() This0.Cast.#apply(that:(
  read This2.Abstract.CollectionsMut.MutListAny rcv29=this.inner()
  rcv29.val(that:(
    This2.Abstract.Size imm$opPar133=rcv29.size()
    This2.Abstract.Size imm$opPar134=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b225=This2.Abstract.Size.#builder()
      Void unused1114=b225.#1()
      b225
      ))
    imm$opPar133.#less#0left(right:imm$opPar134)
    ))
  ))
mut method 
mut This1 #left() This0.Cast.mut(that:this.#inner().#val(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b226=This2.Abstract.Size.#builder()
  Void unused1115=b226.#0()
  b226
  ))))
mut method 
mut This1 #right() (/*#################MUT METHODS
*/This0.Cast.mut(that:(
  mut This2.Abstract.CollectionsMut.MutListAny rcv30=this.#inner()
  rcv30.#val(that:(
    This2.Abstract.Size imm$opPar135=rcv30.size()
    This2.Abstract.Size imm$opPar136=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b227=This2.Abstract.Size.#builder()
      Void unused1116=b227.#1()
      b227
      ))
    imm$opPar135.#less#0left(right:imm$opPar136)
    ))
  )))
mut method 
Void #apply(This2.Abstract.Size that, mut This1 val) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv31=this.#inner()
  rcv31.#apply(that:that, val:val)
  )
mut method 
Void left(mut This1 that) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv32=this.#inner()
  rcv32.#apply(that:This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b228=This2.Abstract.Size.#builder()
    Void unused1117=b228.#0()
    b228
    )), val:that)
  )
mut method 
Void right(mut This1 that) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv33=this.#inner()
  rcv33.#apply(that:(
    This2.Abstract.Size imm$opPar137=rcv33.size()
    This2.Abstract.Size imm$opPar138=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b229=This2.Abstract.Size.#builder()
      Void unused1118=b229.#1()
      b229
      ))
    imm$opPar137.#less#0left(right:imm$opPar138)
    ), val:that)
  )
mut method 
Void add(This2.Abstract.Size that, mut This1 val) this.#inner().add(that:that, val:val)
mut method 
Void add(mut This1 right) (
  mut This2.Abstract.CollectionsMut.MutListAny rcv34=this.#inner()
  rcv34.add(that:rcv34.size(), val:right)
  )
mut method 
Void add(mut This1 left) this.#inner().add(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b230=This2.Abstract.Size.#builder()
  Void unused1119=b230.#0()
  b230
  )), val:left)
mut method 
Void removeLeft() this.remove(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b231=This2.Abstract.Size.#builder()
  Void unused1120=b231.#0()
  b231
  )))
mut method 
Void removeRight() (/*#################OPERATORS
*/this.remove(that:(
  This2.Abstract.Size imm$opPar139=this.size()
  This2.Abstract.Size imm$opPar140=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b232=This2.Abstract.Size.#builder()
    Void unused1121=b232.#1()
    b232
    ))
  imm$opPar139.#less#0left(right:imm$opPar140)
  )))
method 
This0 #plus#0left(This1 right) this.withAlso(that:this.size(), val:right)
method 
This0 #plusplus#0left(This0 right) (/*#################Withs
*/(
  Void unused1122=(/*var This res=this//this does not work, iterator would return it read.
with e in right.vals() (res+=e)
return res
*/
    Void unused1123=(
      This2.Abstract.Bool cond30=right.isEmpty()
      (
        Void unused1125=cond30.#checkTrue()
        
        catch exception Void catched535 void
        
        (return this)
        )
      )
    Void unused1124=return (
      This0 imm$opPar142=((
        This1 imm$opPar141=right.left()
        this.#plus#0left(right:imm$opPar141)
        ))
      This0 imm$opPar143=right.withoutLeft()
      imm$opPar142.#plusplus#0left(right:imm$opPar143)
      )
    void
    )
  
  catch return This0 result49 result49
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  ))
method 
This0 with(This2.Abstract.Size that, This1 val) This0.#immK(inner:this.inner().with(that:that, val:val))
method 
This0 withLeft(This1 that) this.with(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b233=This2.Abstract.Size.#builder()
  Void unused1126=b233.#0()
  b233
  )), val:that)
method 
This0 withRight(This1 that) (/*insertion
*/this.with(that:(
  This2.Abstract.Size imm$opPar144=this.size()
  This2.Abstract.Size imm$opPar145=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b234=This2.Abstract.Size.#builder()
    Void unused1127=b234.#1()
    b234
    ))
  imm$opPar144.#less#0left(right:imm$opPar145)
  ), val:that))
method 
This0 withAlso(This2.Abstract.Size that, This1 val) This0.#immK(inner:this.inner().withAlso(that:that, val:val))
method 
This0 withAlsoRight(This1 that) (/*skipping/filtering
*/this.withAlso(that:this.size(), val:that))
method 
This0 withoutRight() (/*################# Iterators
*/this.without(index:(
  This2.Abstract.Size imm$opPar146=this.size()
  This2.Abstract.Size imm$opPar147=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b237=This2.Abstract.Size.#builder()
    Void unused1130=b237.#1()
    b237
    ))
  imm$opPar146.#less#0left(right:imm$opPar147)
  )))
read method 
lent This0.IteratorVal vals(This2.Abstract.Size from, This2.Abstract.Size maxTo, This2.Abstract.Size minTo) This0.IteratorVal.#apply(that:this.inner(), from:from, maxTo:maxTo, minTo:minTo)
read method 
lent This0.IteratorVal vals(This2.Abstract.Size minTo) this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b240=This2.Abstract.Size.#builder()
  Void unused1146=b240.#less()
  Void unused1147=b240.#1()
  b240
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b241=This2.Abstract.Size.#builder()
  Void unused1148=b241.#less()
  Void unused1149=b241.#2()
  b241
  )), minTo:minTo)
read method 
lent This0.IteratorVal vals(This2.Abstract.Size from, This2.Abstract.Size to) this.vals(from:from, maxTo:to, minTo:this.inner().size())
read method 
lent This0.IteratorValFill vals(This2.Abstract.Size from, This2.Abstract.Size maxTo, This2.Abstract.Size minTo, read This1 filled) This0.IteratorValFill.#apply(that:this.inner(), from:from, maxTo:maxTo, minTo:minTo, filled:filled)
read method 
lent This0.IteratorValFill vals(This2.Abstract.Size minTo, read This1 filled) this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b247=This2.Abstract.Size.#builder()
  Void unused1301=b247.#less()
  Void unused1302=b247.#1()
  b247
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b248=This2.Abstract.Size.#builder()
  Void unused1303=b248.#less()
  Void unused1304=b248.#2()
  b248
  )), minTo:minTo, filled:filled)
read method 
lent This0.IteratorValFill vals(This2.Abstract.Size from, This2.Abstract.Size to, read This1 filled) this.vals(from:from, maxTo:to, minTo:this.inner().size(), filled:filled)
read method 
lent This0.IteratorValFill vals(read This1 filled) this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b249=This2.Abstract.Size.#builder()
  Void unused1305=b249.#less()
  Void unused1306=b249.#1()
  b249
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b250=This2.Abstract.Size.#builder()
  Void unused1307=b250.#less()
  Void unused1308=b250.#2()
  b250
  )), minTo:this.inner().size(), filled:filled)
mut method 
mut This0.IteratorVar #vals(This2.Abstract.Size from, This2.Abstract.Size maxTo, This2.Abstract.Size minTo) This0.IteratorVar.#apply(that:this.#inner(), from:from, maxTo:maxTo, minTo:minTo)
mut method 
mut This0.IteratorVar #vals(This2.Abstract.Size minTo) this.#vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b253=This2.Abstract.Size.#builder()
  Void unused1383=b253.#less()
  Void unused1384=b253.#1()
  b253
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b254=This2.Abstract.Size.#builder()
  Void unused1385=b254.#less()
  Void unused1386=b254.#2()
  b254
  )), minTo:minTo)
mut method 
mut This0.IteratorVar #vals(This2.Abstract.Size from, This2.Abstract.Size to) this.#vals(from:from, maxTo:to, minTo:this.inner().size())
mut method 
mut This0.IteratorVar #vals() this.#vals(from:(
  This2.Abstract.Size imm$opPar163=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b255=This2.Abstract.Size.#builder()
    Void unused1387=b255.#0()
    b255
    ))
  This2.Abstract.Size imm$opPar164=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b256=This2.Abstract.Size.#builder()
    Void unused1388=b256.#1()
    b256
    ))
  imm$opPar163.#less#0left(right:imm$opPar164)
  ), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b257=This2.Abstract.Size.#builder()
  Void unused1389=b257.#less()
  Void unused1390=b257.#2()
  b257
  )), minTo:this.inner().size())
refine read method 
This2.Abstract.S toS() this.inner().toS()
read method 
This2.Abstract.Size size() this.inner().size()
read method 
This2.Abstract.Bool isEmpty() (
  This2.Abstract.Size read$opPar29=this.size()
  This2.Abstract.Size read$opPar30=This2.Abstract.Size.#from(builder:(
    mut This2.Abstract.S.SBuilder b223=This2.Abstract.Size.#builder()
    Void unused1112=b223.#0()
    b223
    ))
  read$opPar29.#equalequal#0left(right:read$opPar30)
  )
read method 
read This1 val(This2.Abstract.Size that) This0.Cast.#apply(that:this.inner().val(that:that))
mut method 
mut This1 #val(This2.Abstract.Size that) This0.Cast.mut(that:this.#inner().#val(that:that))
class method 
mut This0 #seqBuilder() this.empty()
class method 
mut This0 #from(mut This0 seqBuilder) seqBuilder
mut method 
Void #add(mut This1 that) this.add(right:that)
read method 
read This1 left() This0.Cast.#apply(that:this.inner().val(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b224=This2.Abstract.Size.#builder()
  Void unused1113=b224.#0()
  b224
  ))))
method 
This0 withoutLeft() this.without(index:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b236=This2.Abstract.Size.#builder()
  Void unused1129=b236.#0()
  b236
  )))
method 
This0 withAlsoLeft(This1 that) this.withAlso(that:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b235=This2.Abstract.Size.#builder()
  Void unused1128=b235.#0()
  b235
  )), val:that)
read method 
lent This0.IteratorVal vals() this.vals(from:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b242=This2.Abstract.Size.#builder()
  Void unused1150=b242.#less()
  Void unused1151=b242.#1()
  b242
  )), maxTo:This2.Abstract.Size.#from(builder:(
  mut This2.Abstract.S.SBuilder b243=This2.Abstract.Size.#builder()
  Void unused1152=b243.#less()
  Void unused1153=b243.#2()
  b243
  )), minTo:this.inner().size())
read method 
This2.Abstract.Bool contains(read This1 that) (/*################# operators
TODO: general issue:  V[a;b] wants a,b mut to create a mut?
with the current builder desugaring,
can not take imms since the collection under genration is still mut!
*/(
  Void unused1501=(
    Void unused1502=(
      lent This0.IteratorVal e=this.vals()
      (
        Void unused1504=loop (
          Void unused1505=e.#next()
          
          catch exception Void catched585 (
            Void unused1506=(
              Void unused1507=e.#checkEnd()
              
              catch exception Void catched586 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond36=(
              read This1 read$opPar31=e.#inner()
              read$opPar31.#equalequal#0left(right:that)
              )
            (
              Void unused1508=cond36.#checkTrue()
              
              catch exception Void catched589 void
              
              (return This2.Abstract.Bool.true())
              )
            ))
          )
        
        catch exception Void catched590 void
        
        void
        )
      )
    Void unused1503=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result52 result52
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  ))
method 
This0 #less#0left(This1 right) this.withoutAll(val:right)
method 
This0 #lessless#0left(This0 right) (
  Void unused1509=(/*This[with e in this.vals() ( if !right.contains(e)  (use[e])  )]
*/
    Void unused1510=(
      This2.Abstract.Bool cond37=right.isEmpty()
      (
        Void unused1512=cond37.#checkTrue()
        
        catch exception Void catched594 void
        
        (return this)
        )
      )
    Void unused1511=return (
      This0 imm$opPar166=((
        This1 imm$opPar165=right.left()
        this.#less#0left(right:imm$opPar165)
        ))
      This0 imm$opPar167=right.withoutLeft()
      imm$opPar166.#lessless#0left(right:imm$opPar167)
      )
    void
    )
  
  catch return This0 result53 result53
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0 #and#0left(This0 right) (
  Void unused1513=(/*This[with v in this.vals() ( if (right>v) (use[v]) )]
*/
    var This0 res=this
    Void unused1514=(
      lent This0.IteratorVal v=this.vals()
      (
        Void unused1516=loop (
          Void unused1517=v.#next()
          
          catch exception Void catched598 (
            Void unused1518=(
              Void unused1519=v.#checkEnd()
              
              catch exception Void catched599 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond38=right.contains(that:v.#inner()).#bang()
            (
              Void unused1520=cond38.#checkTrue()
              
              catch exception Void catched602 void
              
              (res := res.withoutAll(val:v.#inner()))
              )
            ))
          )
        
        catch exception Void catched603 void
        
        void
        )
      )
    Void unused1515=return res
    void
    )
  
  catch return This0 result54 result54
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This2.Abstract.Bool #rightright#0left(This0 right) (
  This2.Abstract.Bool imm$opPar168=this.#rightrightequal#0left(right:right)
  This2.Abstract.Bool imm$opPar169=(right.#rightrightequal#0left(right:this)).#bang()
  imm$opPar168.#and#0left(right:imm$opPar169)
  )
method 
This2.Abstract.Bool #rightrightequal#0left(This0 right) (
  Void unused1521=(
    Void unused1522=(
      lent This0.IteratorVal e=right.vals()
      (
        Void unused1524=loop (
          Void unused1525=e.#next()
          
          catch exception Void catched607 (
            Void unused1526=(
              Void unused1527=e.#checkEnd()
              
              catch exception Void catched608 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond39=this.contains(that:e.#inner()).#bang()
            (
              Void unused1528=cond39.#checkTrue()
              
              catch exception Void catched611 void
              
              (return This2.Abstract.Bool.false())
              )
            ))
          )
        
        catch exception Void catched612 void
        
        void
        )
      )
    Void unused1523=return This2.Abstract.Bool.true()
    void
    )
  
  catch return This2.Abstract.Bool result55 result55
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This2.Abstract.Bool #right#0left(This1 right) this.contains(that:right)
read method 
This2.Abstract.Bool equals(read This0 that) (
  Void unused1529=(
    Void unused1530=(
      lent This0.IteratorVal e1=this.vals()
      (
        lent This0.IteratorVal e2=that.vals()
        (
          Void unused1531=loop (
            Void unused1532=e1.#next()
            
            catch exception Void catched617 (
              Void unused1533=(
                Void unused1536=e2.#next()
                
                catch exception Void catched618 void
                
                void
                )
              Void unused1534=(
                Void unused1537=e1.#checkEnd()
                
                catch exception Void catched619 void
                
                void
                )
              Void unused1535=(
                Void unused1538=e2.#checkEnd()
                
                catch exception Void catched620 void
                
                void
                )
              exception void
              )
            
            (
              Void unused1539=e2.#next()
              
              catch exception Void catched622 (
                Void unused1540=(
                  Void unused1542=e1.#checkEnd()
                  
                  catch exception Void catched623 void
                  
                  void
                  )
                Void unused1541=(
                  Void unused1543=e2.#checkEnd()
                  
                  catch exception Void catched624 void
                  
                  void
                  )
                exception void
                )
              
              ((
                This2.Abstract.Bool cond40=(
                  read This1 read$opPar32=e1.#inner()
                  read This1 read$opPar33=e2.#inner()
                  read$opPar32.#equalequal#0left(right:read$opPar33)
                  ).#bang()
                (
                  Void unused1544=cond40.#checkTrue()
                  
                  catch exception Void catched627 void
                  
                  (return This2.Abstract.Bool.false())
                  )
                ))
              )
            )
          
          catch exception Void catched628 void
          
          void
          )
        )
      )
    
    catch error This2.Abstract.CollectionsMut.IterationFailure catched629 (return This2.Abstract.Bool.false())
    
    (
      Void unused1545=return This2.Abstract.Bool.true()
      void
      )
    )
  
  catch return This2.Abstract.Bool result56 result56
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine read method 
This2.Abstract.Bool #equalequal#0left(read Any right) (
  Void unused1546=(
    Void unused1547=(
      read This0 right5=(
        Void unused1549=return right
        
        catch return read This0 casted26 casted26
        
        catch return read Any casted26 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched633 void
      
      (
        Void unused1550=return this.equals(that:right5)
        void
        )
      )
    Void unused1548=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result57 result57
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This2.Abstract.Size indexOfLeft(read This1 val) (
  Void unused1551=(
    This2.Abstract.Size size=this.size()
    var This2.Abstract.Size pos=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b260=This2.Abstract.Size.#builder()
      Void unused1553=b260.#0()
      b260
      ))
    Void unused1552=loop (
      Void unused1554=(
        This2.Abstract.Bool cond41=(
          read This1 read$opPar34=this.val(that:pos)
          read$opPar34.#equalequal#0left(right:val)
          )
        (
          Void unused1556=cond41.#checkTrue()
          
          catch exception Void catched639 void
          
          (return pos)
          )
        )
      Void unused1555=(
        This2.Abstract.Bool cond42=pos.#rightequal#0left(right:size)
        (
          Void unused1557=cond42.#checkTrue()
          
          catch exception Void catched641 void
          
          (return This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b261=This2.Abstract.Size.#builder()
            Void unused1558=b261.#less()
            Void unused1559=b261.#1()
            b261
            )))
          )
        )
      pos := (
        This2.Abstract.Size imm$opPar170=This2.Abstract.Size.#from(builder:(
          mut This2.Abstract.S.SBuilder b262=This2.Abstract.Size.#builder()
          Void unused1560=b262.#1()
          b262
          ))
        pos.#plus#0left(right:imm$opPar170)
        )
      )
    void
    )
  
  catch return This2.Abstract.Size result58 result58
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This2.Abstract.Size indexOfRight(read This1 val) (
  Void unused1561=(
    var This2.Abstract.Size pos=(
      This2.Abstract.Size imm$opPar171=this.size()
      This2.Abstract.Size imm$opPar172=This2.Abstract.Size.#from(builder:(
        mut This2.Abstract.S.SBuilder b263=This2.Abstract.Size.#builder()
        Void unused1563=b263.#1()
        b263
        ))
      imm$opPar171.#less#0left(right:imm$opPar172)
      )
    Void unused1562=loop (
      Void unused1564=(
        This2.Abstract.Bool cond43=(
          read This1 read$opPar35=this.val(that:pos)
          read$opPar35.#equalequal#0left(right:val)
          )
        (
          Void unused1566=cond43.#checkTrue()
          
          catch exception Void catched649 void
          
          (return pos)
          )
        )
      Void unused1565=(
        This2.Abstract.Bool cond44=(
          This2.Abstract.Size opNorm15=pos
          (
            This2.Abstract.Size imm$opPar173=This2.Abstract.Size.#from(builder:(
              mut This2.Abstract.S.SBuilder b264=This2.Abstract.Size.#builder()
              Void unused1567=b264.#0()
              b264
              ))
            imm$opPar173.#rightequal#0left(right:opNorm15)
            )
          )
        (
          Void unused1568=cond44.#checkTrue()
          
          catch exception Void catched653 void
          
          (return This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b265=This2.Abstract.Size.#builder()
            Void unused1569=b265.#less()
            Void unused1570=b265.#1()
            b265
            )))
          )
        )
      pos := (
        This2.Abstract.Size imm$opPar174=This2.Abstract.Size.#from(builder:(
          mut This2.Abstract.S.SBuilder b266=This2.Abstract.Size.#builder()
          Void unused1571=b266.#1()
          b266
          ))
        pos.#less#0left(right:imm$opPar174)
        )
      )
    void
    )
  
  catch return This2.Abstract.Size result59 result59
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method /*from VectorTrait
*/This0 without(This2.Abstract.Size index) This0.#immK(inner:this.inner().without(that:index))
method 
This0 withoutLeft(read This1 val) (
  Void unused1572=(
    This2.Abstract.Size pos=this.indexOfLeft(val:val)
    Void unused1573=(
      This2.Abstract.Bool cond45=(
        This2.Abstract.Size opNorm16=pos
        (
          This2.Abstract.Size imm$opPar175=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b267=This2.Abstract.Size.#builder()
            Void unused1575=b267.#0()
            b267
            ))
          imm$opPar175.#right#0left(right:opNorm16)
          )
        )
      (
        Void unused1576=cond45.#checkTrue()
        
        catch exception Void catched662 void
        
        (return this)
        )
      )
    Void unused1574=return this.without(index:pos)
    void
    )
  
  catch return This0 result60 result60
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0 withoutRight(read This1 val) (
  Void unused1577=(
    This2.Abstract.Size pos=this.indexOfRight(val:val)
    Void unused1578=(
      This2.Abstract.Bool cond46=(
        This2.Abstract.Size opNorm17=pos
        (
          This2.Abstract.Size imm$opPar176=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b268=This2.Abstract.Size.#builder()
            Void unused1580=b268.#0()
            b268
            ))
          imm$opPar176.#right#0left(right:opNorm17)
          )
        )
      (
        Void unused1581=cond46.#checkTrue()
        
        catch exception Void catched668 void
        
        (return this)
        )
      )
    Void unused1579=return this.without(index:pos)
    void
    )
  
  catch return This0 result61 result61
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
method 
This0 withoutAll(read This1 val) (
  Void unused1582=(/*This[with e in this.vals() (if e!=val (use[e]))]
*/
    Void unused1583=(
      This2.Abstract.Bool cond47=this.isEmpty()
      (
        Void unused1586=cond47.#checkTrue()
        
        catch exception Void catched672 void
        
        (return this)
        )
      )
    This0 rec=this.withoutLeft().withoutAll(val:val)
    Void unused1584=(
      This2.Abstract.Bool cond48=(
        read This1 read$opPar36=this.left()
        read$opPar36.#equalequal#0left(right:val)
        )
      (
        Void unused1587=cond48.#checkTrue()
        
        catch exception Void catched674 void
        
        (return rec)
        )
      )
    Void unused1585=return rec.withAlsoLeft(that:this.left())
    void
    )
  
  catch return This0 result62 result62
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method /*from VectorTrait
*/Void remove(This2.Abstract.Size that) this.#inner().remove(that:that)
mut method 
Void removeAll(read This1 val) (
  Void unused1588=(
    var This2.Abstract.Size pos=This2.Abstract.Size.#from(builder:(
      mut This2.Abstract.S.SBuilder b269=This2.Abstract.Size.#builder()
      Void unused1590=b269.#0()
      b269
      ))
    Void unused1589=loop (
      Void unused1591=(
        This2.Abstract.Bool cond49=(
          read This1 read$opPar37=this.val(that:pos)
          read$opPar37.#equalequal#0left(right:val)
          )
        (
          Void unused1592=cond49.#checkTrue()
          
          catch exception Void catched679 (pos := (
            This2.Abstract.Size imm$opPar177=This2.Abstract.Size.#from(builder:(
              mut This2.Abstract.S.SBuilder b270=This2.Abstract.Size.#builder()
              Void unused1593=b270.#1()
              b270
              ))
            pos.#plus#0left(right:imm$opPar177)
            ))
          
          (this.remove(that:pos))
          )
        )
      (
        This2.Abstract.Bool cond50=(
          This2.Abstract.Size read$opPar38=this.size()
          pos.#equalequal#0left(right:read$opPar38)
          )
        (
          Void unused1594=cond50.#checkTrue()
          
          catch exception Void catched683 void
          
          (return void)
          )
        )
      )
    void
    )
  
  catch return Void result63 result63
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void removeLeft(read This1 val) (
  Void unused1595=(
    This2.Abstract.Size pos=this.indexOfLeft(val:val)
    Void unused1596=(
      This2.Abstract.Bool cond51=(
        This2.Abstract.Size opNorm18=pos
        (
          This2.Abstract.Size imm$opPar178=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b271=This2.Abstract.Size.#builder()
            Void unused1598=b271.#0()
            b271
            ))
          imm$opPar178.#right#0left(right:opNorm18)
          )
        )
      (
        Void unused1599=cond51.#checkTrue()
        
        catch exception Void catched689 void
        
        (return void)
        )
      )
    Void unused1597=return this.remove(that:pos)
    void
    )
  
  catch return Void result64 result64
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void removeRight(read This1 val) (
  Void unused1600=(
    This2.Abstract.Size pos=this.indexOfRight(val:val)
    Void unused1601=(
      This2.Abstract.Bool cond52=(
        This2.Abstract.Size opNorm19=pos
        (
          This2.Abstract.Size imm$opPar179=This2.Abstract.Size.#from(builder:(
            mut This2.Abstract.S.SBuilder b272=This2.Abstract.Size.#builder()
            Void unused1603=b272.#0()
            b272
            ))
          imm$opPar179.#right#0left(right:opNorm19)
          )
        )
      (
        Void unused1604=cond52.#checkTrue()
        
        catch exception Void catched695 void
        
        (return void)
        )
      )
    Void unused1602=return this.remove(that:pos)
    void
    )
  
  catch return Void result65 result65
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
This2.Abstract.Bool dispatch(This2.Event that) (
  Void unused40460=(
    Void unused40461=(
      mut This0.IteratorVar w=this.#vals()
      (
        Void unused40463=loop (
          Void unused40464=w.#next()
          
          catch exception Void catched47415 (
            Void unused40465=(
              Void unused40466=w.#checkEnd()
              
              catch exception Void catched47416 void
              
              void
              )
            exception void
            )
          
          ((
            This2.Abstract.Bool cond128=w.#inner().dispatch(that:that)
            (
              Void unused40467=cond128.#checkTrue()
              
              catch exception Void catched47419 void
              
              (return This2.Abstract.Bool.true())
              )
            ))
          )
        
        catch exception Void catched47420 void
        
        void
        )
      )
    Void unused40462=return This2.Abstract.Bool.false()
    void
    )
  
  catch return This2.Abstract.Bool result172 result172
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
Cast: {
class method 
read This2 #apply(read Any that) (
  Void unused1097=(
    Void unused1098=(
      read This2 that11=(
        Void unused1100=return that
        
        catch return read This2 casted24 casted24
        
        catch return read Any casted24 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched503 void
      
      (
        Void unused1101=return that11
        void
        )
      )
    Void unused1099=error This3.Abstract.CollectionsMut.CollectionErrors.cast()
    void
    )
  
  catch return read This2 result47 result47
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
mut This2 mut(mut Any that) (
  Void unused1102=(
    Void unused1103=(
      mut This2 that12=(
        Void unused1105=return that
        
        catch return mut This2 casted25 casted25
        
        catch return mut Any casted25 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched508 void
      
      (
        Void unused1106=return that12
        void
        )
      )
    Void unused1104=error This3.Abstract.CollectionsMut.CollectionErrors.cast()
    void
    )
  
  catch return mut This2 result48 result48
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )}
IteratorTrait: {
class method 
Library #apply()  {
read method 
read This4.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This4.Abstract.CollectionsMut.MutListAny #that() 
read method 
This4.Abstract.Size from() 
mut method 
Void from(This4.Abstract.Size that) 
read method 
This4.Abstract.Size maxTo() 
read method 
This4.Abstract.Size minTo() 
read method 
This4.Abstract.Bool isFill() 
read method 
read This3 filled() 
mut method 
mut This3 #filled() 
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This4.Abstract.Size imm$opPar148=this.from()
    This4.Abstract.Size imm$opPar149=This4.Abstract.Size.#from(builder:(
      mut This4.Abstract.S.SBuilder b238=This4.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This4.Abstract.Bool cond31=(
      This4.Abstract.Bool imm$opPar154=(
        This4.Abstract.Size imm$opPar150=this.maxTo()
        This4.Abstract.Size imm$opPar151=This4.Abstract.Size.#from(builder:(
          mut This4.Abstract.S.SBuilder b239=This4.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This4.Abstract.Bool imm$opPar155=(
        This4.Abstract.Size imm$opPar152=this.from()
        This4.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This4.Abstract.Bool cond32=(
      This4.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This4.Abstract.Bool imm$opPar159=(
        This4.Abstract.Size imm$opPar156=this.from()
        This4.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This4.Abstract.Bool cond33=(
    This4.Abstract.Size opNorm12=this.from()
    (
      This4.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This4.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This3 readInner() (
  Void unused1138=(
    Void unused1139=(
      This4.Abstract.Bool cond34=(
        This4.Abstract.Size opNorm13=this.from()
        (
          This4.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This2.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This3 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This3 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This4.Abstract.Bool cond35=(
        This4.Abstract.Size opNorm14=this.from()
        (
          This4.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This2.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This3 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #close() void}}
IteratorValFill: {
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This3.Abstract.Size imm$opPar148=this.from()
    This3.Abstract.Size imm$opPar149=This3.Abstract.Size.#from(builder:(
      mut This3.Abstract.S.SBuilder b238=This3.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This3.Abstract.Bool cond31=(
      This3.Abstract.Bool imm$opPar154=(
        This3.Abstract.Size imm$opPar150=this.maxTo()
        This3.Abstract.Size imm$opPar151=This3.Abstract.Size.#from(builder:(
          mut This3.Abstract.S.SBuilder b239=This3.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This3.Abstract.Bool imm$opPar155=(
        This3.Abstract.Size imm$opPar152=this.from()
        This3.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This3.Abstract.Bool cond32=(
      This3.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This3.Abstract.Bool imm$opPar159=(
        This3.Abstract.Size imm$opPar156=this.from()
        This3.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This3.Abstract.Bool cond33=(
    This3.Abstract.Size opNorm12=this.from()
    (
      This3.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This3.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This2 readInner() (
  Void unused1138=(
    Void unused1139=(
      This3.Abstract.Bool cond34=(
        This3.Abstract.Size opNorm13=this.from()
        (
          This3.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This1.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This2 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This2 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This3.Abstract.Bool cond35=(
        This3.Abstract.Size opNorm14=this.from()
        (
          This3.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This1.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This2 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #close() void
mut method 
Void from(This3.Abstract.Size that) 
read method 
This3.Abstract.Size from() 
read method 
This3.Abstract.Size maxTo() 
read method 
This3.Abstract.Size minTo() 
read method 
read This2 filled() 
mut method 
mut This2 #filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b251=This3.Abstract.X.#builder()
  Void unused1309=b251.#t()
  Void unused1310=b251.#y()
  Void unused1311=b251.#p()
  Void unused1312=b251.#e()
  Void unused1313=b251.#space()
  Void unused1314=b251.#s()
  Void unused1315=b251.#y()
  Void unused1316=b251.#s()
  Void unused1317=b251.#t()
  Void unused1318=b251.#e()
  Void unused1319=b251.#m()
  Void unused1320=b251.#space()
  Void unused1321=b251.#s()
  Void unused1322=b251.#h()
  Void unused1323=b251.#o()
  Void unused1324=b251.#u()
  Void unused1325=b251.#l()
  Void unused1326=b251.#d()
  Void unused1327=b251.#space()
  Void unused1328=b251.#m()
  Void unused1329=b251.#a()
  Void unused1330=b251.#k()
  Void unused1331=b251.#e()
  Void unused1332=b251.#space()
  Void unused1333=b251.#i()
  Void unused1334=b251.#t()
  Void unused1335=b251.#space()
  Void unused1336=b251.#n()
  Void unused1337=b251.#o()
  Void unused1338=b251.#t()
  Void unused1339=b251.#space()
  Void unused1340=b251.#c()
  Void unused1341=b251.#a()
  Void unused1342=b251.#l()
  Void unused1343=b251.#l()
  Void unused1344=b251.#e()
  Void unused1345=b251.#d()
  b251
  ))
read method 
read This3.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This3.Abstract.CollectionsMut.MutListAny #that() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b252=This3.Abstract.X.#builder()
  Void unused1346=b252.#t()
  Void unused1347=b252.#y()
  Void unused1348=b252.#p()
  Void unused1349=b252.#e()
  Void unused1350=b252.#space()
  Void unused1351=b252.#s()
  Void unused1352=b252.#y()
  Void unused1353=b252.#s()
  Void unused1354=b252.#t()
  Void unused1355=b252.#e()
  Void unused1356=b252.#m()
  Void unused1357=b252.#space()
  Void unused1358=b252.#s()
  Void unused1359=b252.#h()
  Void unused1360=b252.#o()
  Void unused1361=b252.#u()
  Void unused1362=b252.#l()
  Void unused1363=b252.#d()
  Void unused1364=b252.#space()
  Void unused1365=b252.#m()
  Void unused1366=b252.#a()
  Void unused1367=b252.#k()
  Void unused1368=b252.#e()
  Void unused1369=b252.#space()
  Void unused1370=b252.#i()
  Void unused1371=b252.#t()
  Void unused1372=b252.#space()
  Void unused1373=b252.#n()
  Void unused1374=b252.#o()
  Void unused1375=b252.#t()
  Void unused1376=b252.#space()
  Void unused1377=b252.#c()
  Void unused1378=b252.#a()
  Void unused1379=b252.#l()
  Void unused1380=b252.#l()
  Void unused1381=b252.#e()
  Void unused1382=b252.#d()
  b252
  ))
class method 
lent This0 #apply(read This3.Abstract.CollectionsMut.MutListAny that, This3.Abstract.Size from, This3.Abstract.Size maxTo, This3.Abstract.Size minTo, read This2 filled) 
read method 
read This2 #inner() this.readInner()
read method 
This3.Abstract.Bool isFill() This3.Abstract.Bool.true()}
IteratorVar: {
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This3.Abstract.Size imm$opPar148=this.from()
    This3.Abstract.Size imm$opPar149=This3.Abstract.Size.#from(builder:(
      mut This3.Abstract.S.SBuilder b238=This3.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This3.Abstract.Bool cond31=(
      This3.Abstract.Bool imm$opPar154=(
        This3.Abstract.Size imm$opPar150=this.maxTo()
        This3.Abstract.Size imm$opPar151=This3.Abstract.Size.#from(builder:(
          mut This3.Abstract.S.SBuilder b239=This3.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This3.Abstract.Bool imm$opPar155=(
        This3.Abstract.Size imm$opPar152=this.from()
        This3.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This3.Abstract.Bool cond32=(
      This3.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This3.Abstract.Bool imm$opPar159=(
        This3.Abstract.Size imm$opPar156=this.from()
        This3.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This3.Abstract.Bool cond33=(
    This3.Abstract.Size opNorm12=this.from()
    (
      This3.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This3.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This2 readInner() (
  Void unused1138=(
    Void unused1139=(
      This3.Abstract.Bool cond34=(
        This3.Abstract.Size opNorm13=this.from()
        (
          This3.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This1.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This2 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This2 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This3.Abstract.Bool cond35=(
        This3.Abstract.Size opNorm14=this.from()
        (
          This3.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This1.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This2 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #close() void
read method 
read This3.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This3.Abstract.CollectionsMut.MutListAny #that() 
mut method 
Void from(This3.Abstract.Size that) 
read method 
This3.Abstract.Size from() 
read method 
This3.Abstract.Size maxTo() 
read method 
This3.Abstract.Size minTo() 
class method 
mut This0 #apply(mut This3.Abstract.CollectionsMut.MutListAny that, This3.Abstract.Size from, This3.Abstract.Size maxTo, This3.Abstract.Size minTo) 
mut method 
Void inner(mut This2 that) (
  mut This3.Abstract.CollectionsMut.MutListAny rcv35=this.#that()
  rcv35.#apply(that:this.from(), val:that)
  )
mut method 
mut This2 #inner() this.mutInner()
read method 
This3.Abstract.Bool isFill() This3.Abstract.Bool.false()
read method 
read This2 filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b258=This3.Abstract.X.#builder()
  Void unused1391=b258.#F()
  Void unused1392=b258.#i()
  Void unused1393=b258.#l()
  Void unused1394=b258.#l()
  Void unused1395=b258.#e()
  Void unused1396=b258.#d()
  Void unused1397=b258.#space()
  Void unused1398=b258.#c()
  Void unused1399=b258.#a()
  Void unused1400=b258.#l()
  Void unused1401=b258.#l()
  Void unused1402=b258.#e()
  Void unused1403=b258.#d()
  Void unused1404=b258.#space()
  Void unused1405=b258.#o()
  Void unused1406=b258.#n()
  Void unused1407=b258.#space()
  Void unused1408=b258.#n()
  Void unused1409=b258.#o()
  Void unused1410=b258.#t()
  Void unused1411=b258.#space()
  Void unused1412=b258.#f()
  Void unused1413=b258.#i()
  Void unused1414=b258.#l()
  Void unused1415=b258.#l()
  Void unused1416=b258.#space()
  Void unused1417=b258.#i()
  Void unused1418=b258.#t()
  Void unused1419=b258.#e()
  Void unused1420=b258.#r()
  Void unused1421=b258.#a()
  Void unused1422=b258.#t()
  Void unused1423=b258.#o()
  Void unused1424=b258.#r()
  Void unused1425=b258.#comma()
  Void unused1426=b258.#space()
  Void unused1427=b258.#s()
  Void unused1428=b258.#h()
  Void unused1429=b258.#o()
  Void unused1430=b258.#u()
  Void unused1431=b258.#l()
  Void unused1432=b258.#d()
  Void unused1433=b258.#space()
  Void unused1434=b258.#n()
  Void unused1435=b258.#e()
  Void unused1436=b258.#v()
  Void unused1437=b258.#e()
  Void unused1438=b258.#r()
  Void unused1439=b258.#space()
  Void unused1440=b258.#h()
  Void unused1441=b258.#a()
  Void unused1442=b258.#p()
  Void unused1443=b258.#p()
  Void unused1444=b258.#e()
  Void unused1445=b258.#n()
  b258
  ))
mut method 
mut This2 #filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b259=This3.Abstract.X.#builder()
  Void unused1446=b259.#F()
  Void unused1447=b259.#i()
  Void unused1448=b259.#l()
  Void unused1449=b259.#l()
  Void unused1450=b259.#e()
  Void unused1451=b259.#d()
  Void unused1452=b259.#space()
  Void unused1453=b259.#c()
  Void unused1454=b259.#a()
  Void unused1455=b259.#l()
  Void unused1456=b259.#l()
  Void unused1457=b259.#e()
  Void unused1458=b259.#d()
  Void unused1459=b259.#space()
  Void unused1460=b259.#o()
  Void unused1461=b259.#n()
  Void unused1462=b259.#space()
  Void unused1463=b259.#n()
  Void unused1464=b259.#o()
  Void unused1465=b259.#t()
  Void unused1466=b259.#space()
  Void unused1467=b259.#f()
  Void unused1468=b259.#i()
  Void unused1469=b259.#l()
  Void unused1470=b259.#l()
  Void unused1471=b259.#space()
  Void unused1472=b259.#i()
  Void unused1473=b259.#t()
  Void unused1474=b259.#e()
  Void unused1475=b259.#r()
  Void unused1476=b259.#a()
  Void unused1477=b259.#t()
  Void unused1478=b259.#o()
  Void unused1479=b259.#r()
  Void unused1480=b259.#comma()
  Void unused1481=b259.#space()
  Void unused1482=b259.#s()
  Void unused1483=b259.#h()
  Void unused1484=b259.#o()
  Void unused1485=b259.#u()
  Void unused1486=b259.#l()
  Void unused1487=b259.#d()
  Void unused1488=b259.#space()
  Void unused1489=b259.#n()
  Void unused1490=b259.#e()
  Void unused1491=b259.#v()
  Void unused1492=b259.#e()
  Void unused1493=b259.#r()
  Void unused1494=b259.#space()
  Void unused1495=b259.#h()
  Void unused1496=b259.#a()
  Void unused1497=b259.#p()
  Void unused1498=b259.#p()
  Void unused1499=b259.#e()
  Void unused1500=b259.#n()
  b259
  ))}
IteratorVal: {
read method 
read This2 readInner() (
  Void unused1138=(
    Void unused1139=(
      This3.Abstract.Bool cond34=(
        This3.Abstract.Size opNorm13=this.from()
        (
          This3.Abstract.Size imm$opPar161=this.that().size()
          imm$opPar161.#right#0left(right:opNorm13)
          )
        )
      (
        Void unused1141=cond34.#checkTrue()
        
        catch exception Void catched555 void
        
        (return This1.Cast.#apply(that:this.that().val(that:this.from())))
        )
      )
    Void unused1140=return this.filled()
    void
    )
  
  catch return read This2 result50 result50
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This2 mutInner() (
  Void unused1142=(
    Void unused1143=(
      This3.Abstract.Bool cond35=(
        This3.Abstract.Size opNorm14=this.from()
        (
          This3.Abstract.Size imm$opPar162=this.that().size()
          imm$opPar162.#right#0left(right:opNorm14)
          )
        )
      (
        Void unused1145=cond35.#checkTrue()
        
        catch exception Void catched560 void
        
        (return This1.Cast.mut(that:this.#that().#val(that:this.from())))
        )
      )
    Void unused1144=return this.#filled()
    void
    )
  
  catch return mut This2 result51 result51
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void from(This3.Abstract.Size that) 
read method 
This3.Abstract.Size from() 
read method 
This3.Abstract.Size maxTo() 
read method 
This3.Abstract.Size minTo() 
read method 
read This3.Abstract.CollectionsMut.MutListAny that() 
mut method 
mut This3.Abstract.CollectionsMut.MutListAny #that() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b244=This3.Abstract.X.#builder()
  Void unused1154=b244.#t()
  Void unused1155=b244.#y()
  Void unused1156=b244.#p()
  Void unused1157=b244.#e()
  Void unused1158=b244.#space()
  Void unused1159=b244.#s()
  Void unused1160=b244.#y()
  Void unused1161=b244.#s()
  Void unused1162=b244.#t()
  Void unused1163=b244.#e()
  Void unused1164=b244.#m()
  Void unused1165=b244.#space()
  Void unused1166=b244.#s()
  Void unused1167=b244.#h()
  Void unused1168=b244.#o()
  Void unused1169=b244.#u()
  Void unused1170=b244.#l()
  Void unused1171=b244.#d()
  Void unused1172=b244.#space()
  Void unused1173=b244.#m()
  Void unused1174=b244.#a()
  Void unused1175=b244.#k()
  Void unused1176=b244.#e()
  Void unused1177=b244.#space()
  Void unused1178=b244.#i()
  Void unused1179=b244.#t()
  Void unused1180=b244.#space()
  Void unused1181=b244.#n()
  Void unused1182=b244.#o()
  Void unused1183=b244.#t()
  Void unused1184=b244.#space()
  Void unused1185=b244.#c()
  Void unused1186=b244.#a()
  Void unused1187=b244.#l()
  Void unused1188=b244.#l()
  Void unused1189=b244.#e()
  Void unused1190=b244.#d()
  b244
  ))
class method 
lent This0 #apply(read This3.Abstract.CollectionsMut.MutListAny that, This3.Abstract.Size from, This3.Abstract.Size maxTo, This3.Abstract.Size minTo) 
read method 
This3.Abstract.Bool isFill() This3.Abstract.Bool.false()
read method 
read This2 filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b245=This3.Abstract.X.#builder()
  Void unused1191=b245.#F()
  Void unused1192=b245.#i()
  Void unused1193=b245.#l()
  Void unused1194=b245.#l()
  Void unused1195=b245.#e()
  Void unused1196=b245.#d()
  Void unused1197=b245.#space()
  Void unused1198=b245.#c()
  Void unused1199=b245.#a()
  Void unused1200=b245.#l()
  Void unused1201=b245.#l()
  Void unused1202=b245.#e()
  Void unused1203=b245.#d()
  Void unused1204=b245.#space()
  Void unused1205=b245.#o()
  Void unused1206=b245.#n()
  Void unused1207=b245.#space()
  Void unused1208=b245.#n()
  Void unused1209=b245.#o()
  Void unused1210=b245.#t()
  Void unused1211=b245.#space()
  Void unused1212=b245.#f()
  Void unused1213=b245.#i()
  Void unused1214=b245.#l()
  Void unused1215=b245.#l()
  Void unused1216=b245.#space()
  Void unused1217=b245.#i()
  Void unused1218=b245.#t()
  Void unused1219=b245.#e()
  Void unused1220=b245.#r()
  Void unused1221=b245.#a()
  Void unused1222=b245.#t()
  Void unused1223=b245.#o()
  Void unused1224=b245.#r()
  Void unused1225=b245.#comma()
  Void unused1226=b245.#space()
  Void unused1227=b245.#s()
  Void unused1228=b245.#h()
  Void unused1229=b245.#o()
  Void unused1230=b245.#u()
  Void unused1231=b245.#l()
  Void unused1232=b245.#d()
  Void unused1233=b245.#space()
  Void unused1234=b245.#n()
  Void unused1235=b245.#e()
  Void unused1236=b245.#v()
  Void unused1237=b245.#e()
  Void unused1238=b245.#r()
  Void unused1239=b245.#space()
  Void unused1240=b245.#h()
  Void unused1241=b245.#a()
  Void unused1242=b245.#p()
  Void unused1243=b245.#p()
  Void unused1244=b245.#e()
  Void unused1245=b245.#n()
  b245
  ))
mut method 
mut This2 #filled() error This3.Abstract.X.#from(builder:(
  mut This3.Abstract.S.SBuilder b246=This3.Abstract.X.#builder()
  Void unused1246=b246.#F()
  Void unused1247=b246.#i()
  Void unused1248=b246.#l()
  Void unused1249=b246.#l()
  Void unused1250=b246.#e()
  Void unused1251=b246.#d()
  Void unused1252=b246.#space()
  Void unused1253=b246.#c()
  Void unused1254=b246.#a()
  Void unused1255=b246.#l()
  Void unused1256=b246.#l()
  Void unused1257=b246.#e()
  Void unused1258=b246.#d()
  Void unused1259=b246.#space()
  Void unused1260=b246.#o()
  Void unused1261=b246.#n()
  Void unused1262=b246.#space()
  Void unused1263=b246.#n()
  Void unused1264=b246.#o()
  Void unused1265=b246.#t()
  Void unused1266=b246.#space()
  Void unused1267=b246.#f()
  Void unused1268=b246.#i()
  Void unused1269=b246.#l()
  Void unused1270=b246.#l()
  Void unused1271=b246.#space()
  Void unused1272=b246.#i()
  Void unused1273=b246.#t()
  Void unused1274=b246.#e()
  Void unused1275=b246.#r()
  Void unused1276=b246.#a()
  Void unused1277=b246.#t()
  Void unused1278=b246.#o()
  Void unused1279=b246.#r()
  Void unused1280=b246.#comma()
  Void unused1281=b246.#space()
  Void unused1282=b246.#s()
  Void unused1283=b246.#h()
  Void unused1284=b246.#o()
  Void unused1285=b246.#u()
  Void unused1286=b246.#l()
  Void unused1287=b246.#d()
  Void unused1288=b246.#space()
  Void unused1289=b246.#n()
  Void unused1290=b246.#e()
  Void unused1291=b246.#v()
  Void unused1292=b246.#e()
  Void unused1293=b246.#r()
  Void unused1294=b246.#space()
  Void unused1295=b246.#h()
  Void unused1296=b246.#a()
  Void unused1297=b246.#p()
  Void unused1298=b246.#p()
  Void unused1299=b246.#e()
  Void unused1300=b246.#n()
  b246
  ))
mut method 
Void #next() exception Void (
  Void unused1131=this.from(that:(
    This3.Abstract.Size imm$opPar148=this.from()
    This3.Abstract.Size imm$opPar149=This3.Abstract.Size.#from(builder:(
      mut This3.Abstract.S.SBuilder b238=This3.Abstract.Size.#builder()
      Void unused1133=b238.#1()
      b238
      ))
    imm$opPar148.#plus#0left(right:imm$opPar149)
    ))
  Void unused1132=(
    This3.Abstract.Bool cond31=(
      This3.Abstract.Bool imm$opPar154=(
        This3.Abstract.Size imm$opPar150=this.maxTo()
        This3.Abstract.Size imm$opPar151=This3.Abstract.Size.#from(builder:(
          mut This3.Abstract.S.SBuilder b239=This3.Abstract.Size.#builder()
          Void unused1134=b239.#0()
          b239
          ))
        imm$opPar150.#right#0left(right:imm$opPar151)
        )
      This3.Abstract.Bool imm$opPar155=(
        This3.Abstract.Size imm$opPar152=this.from()
        This3.Abstract.Size imm$opPar153=this.maxTo()
        imm$opPar152.#rightequal#0left(right:imm$opPar153)
        )
      imm$opPar154.#and#0left(right:imm$opPar155)
      )
    (
      Void unused1135=cond31.#checkTrue()
      
      catch exception Void catched546 void
      
      (exception void)
      )
    )
  (
    This3.Abstract.Bool cond32=(
      This3.Abstract.Bool imm$opPar158=this.isFill().#bang()
      This3.Abstract.Bool imm$opPar159=(
        This3.Abstract.Size imm$opPar156=this.from()
        This3.Abstract.Size imm$opPar157=this.that().size()
        imm$opPar156.#rightequal#0left(right:imm$opPar157)
        )
      imm$opPar158.#and#0left(right:imm$opPar159)
      )
    (
      Void unused1136=cond32.#checkTrue()
      
      catch exception Void catched549 void
      
      (exception void)
      )
    )
  )
read method 
Void #checkEnd() (
  This3.Abstract.Bool cond33=(
    This3.Abstract.Size opNorm12=this.from()
    (
      This3.Abstract.Size imm$opPar160=this.minTo()
      imm$opPar160.#right#0left(right:opNorm12)
      )
    )
  (
    Void unused1137=cond33.#checkTrue()
    
    catch exception Void catched552 void
    
    (error This3.Abstract.CollectionsMut.CollectionErrors.iterationTermination(from:this.from(), minTo:this.minTo(), size:this.that().size()))
    )
  )
read method 
read This2 #inner() this.readInner()
read method 
Void #close() void}}}
Action: {interface implements This1.Abstract.Concept.ToS, This1.Abstract.Concept.Equals
refine read method 
This1.Abstract.S toS() 
refine read method 
This1.Abstract.Bool #equalequal#0left(read Any right) 
mut method 
Void #apply(This1.Event event) }
Button: {implements This1.Widget, This1.Abstract.Concept.Base, This1.Abstract.Concept.ToS, This1.Abstract.Concept.Classable, This1.Abstract.Concept.Equals
read method 
Void #invariant_$_591() void
class method 
mut This0 #apply_$_591(fwd This1.Abstract.S id, fwd This1.Abstract.Size left, fwd This1.Abstract.Size top, fwd This1.Abstract.Size width, fwd This1.Abstract.Size height, fwd mut This1.Action action, fwd This1.Abstract.S content) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.Abstract.S readableName() This1.PrImpl1_$_634.GetMyName.#apply(that:This0)
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Abstract.Bool is(class This1.Abstract.Concept.Classable subtype) (
  Void unused35862=(
    Void unused35863=(
      class This0 subtype1=(
        Void unused35865=return subtype
        
        catch return class This0 casted9 casted9
        
        catch return class Any casted9 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18282 void
      
      (
        Void unused35866=return This1.Abstract.Bool.true()
        void
        )
      )
    Void unused35864=return This1.Abstract.Bool.false()
    void
    )
  
  catch return This1.Abstract.Bool result142 result142
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine read method 
class This0 class() This0
refine class method 
read This0 cast(read This1.Abstract.Concept.Classable that) (
  Void unused35867=(
    Void unused35868=(
      read This0 that4=(
        Void unused35870=return that
        
        catch return read This0 casted10 casted10
        
        catch return read Any casted10 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18287 void
      
      (
        Void unused35871=return that4
        void
        )
      )
    Void unused35869=error This1.PrImpl1_$_634.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return read This0 result143 result143
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
mut This0 #cast(mut This1.Abstract.Concept.Classable that) (
  Void unused35872=(
    Void unused35873=(
      mut This0 that5=(
        Void unused35875=return that
        
        catch return mut This0 casted11 casted11
        
        catch return mut Any casted11 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18292 void
      
      (
        Void unused35876=return that5
        void
        )
      )
    Void unused35874=error This1.PrImpl1_$_634.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return mut This0 result144 result144
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
mut This1.Action #action() this.#action_$_591()
mut method 
mut This1.Action #action_$_591() 
refine read method 
This1.Abstract.S color() This1.Abstract.S.#from(builder:(
  mut This1.Abstract.S.SBuilder b916=This1.Abstract.S.#builder()
  Void unused40468=b916.#g()
  Void unused40469=b916.#r()
  Void unused40470=b916.#a()
  Void unused40471=b916.#y()
  b916
  ))
refine read method 
read This1.Widget.List children() This1.Widget.List.#from(seqBuilder:(
  mut This1.Widget.List b917=This1.Widget.List.#seqBuilder()
  b917
  ))
refine read method 
This1.Abstract.S toS() this.id()
refine mut method 
This1.Abstract.Bool dispatch(This1.Event that) (
  Void unused40472=(
    Void unused40473=(
      This1.Abstract.Bool cond129=(
        This1.Abstract.S read$opPar118=this.id()
        This1.Abstract.S read$opPar119=that.targetId()
        read$opPar118.#equalequal#0left(right:read$opPar119)
        )
      (
        Void unused40475=cond129.#checkTrue()
        
        catch exception Void catched47426 void
        
        (
          Void unused40476=(
            mut This1.Action rcv1=this.#action()
            rcv1.#apply(event:that)
            )
          return This1.Abstract.Bool.true()
          )
        )
      )
    Void unused40474=return This1.Abstract.Bool.false()
    void
    )
  
  catch return This1.Abstract.Bool result173 result173
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
mut This0 #apply(This1.Abstract.S id, This1.Abstract.Size left, This1.Abstract.Size top, This1.Abstract.Size width, This1.Abstract.Size height, mut This1.Action action, This1.Abstract.S content) (
  mut This0 r13=this.#apply_$_591(id:id, left:left, top:top, width:width, height:height, action:action, content:content)
  Void unused48868=r13.#invariant_$_591()
  r13
  )
class method 
This0 #immK(This1.Abstract.S id, This1.Abstract.Size left, This1.Abstract.Size top, This1.Abstract.Size width, This1.Abstract.Size height, This1.Action action, This1.Abstract.S content) (
  This0 r14=this.#apply_$_591(id:id, left:left, top:top, width:width, height:height, action:action, content:content)
  Void unused48869=r14.#invariant_$_591()
  r14
  )
method 
This0 with(This1.Abstract.S id) This0.#immK(id:id, left:this.left(), top:this.top(), width:this.width(), height:this.height(), action:this.action(), content:this.content())
method 
This0 with(This1.Abstract.Size left) This0.#immK(id:this.id(), left:left, top:this.top(), width:this.width(), height:this.height(), action:this.action(), content:this.content())
method 
This0 with(This1.Abstract.Size top) This0.#immK(id:this.id(), left:this.left(), top:top, width:this.width(), height:this.height(), action:this.action(), content:this.content())
method 
This0 with(This1.Abstract.Size width) This0.#immK(id:this.id(), left:this.left(), top:this.top(), width:width, height:this.height(), action:this.action(), content:this.content())
method 
This0 with(This1.Abstract.Size height) This0.#immK(id:this.id(), left:this.left(), top:this.top(), width:this.width(), height:height, action:this.action(), content:this.content())
method 
This0 with(This1.Action action) This0.#immK(id:this.id(), left:this.left(), top:this.top(), width:this.width(), height:this.height(), action:action, content:this.content())
method 
This0 with(This1.Abstract.S content) This0.#immK(id:this.id(), left:this.left(), top:this.top(), width:this.width(), height:this.height(), action:this.action(), content:content)
read method 
This1.Abstract.S #invariantToS() (
  This1.Abstract.S.Continue rcv70=(
    This1.Abstract.S rcv71=This1.Abstract.S.#from(builder:(
      mut This1.Abstract.S.SBuilder b667=This1.Abstract.S.#builder()
      Void unused35667=b667.#oSquare()
      b667
      ))
    rcv71.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b668=rcv71.#seqBuilder()
      Void unused35668=b668.#add(that:this.baseToS3_$_619())
      b668
      ))
    )
  rcv70.#from(builder:(
    mut This1.Abstract.S.SBuilder b669=rcv70.#builder()
    Void unused35669=b669.#cSquare()
    b669
    ))
  )
read method 
This1.Abstract.S #1baseToS13_$_592() This1.Abstract.S.#from(builder:(
  mut This1.Abstract.S.SBuilder b670=This1.Abstract.S.#builder()
  b670
  ))
class method 
Any val8_$_593() This1.Abstract.S._private(_binaryRepr: {/*@stringU
id
*/})
class method 
This1.Abstract.S fN7_$_594() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val8_$_593()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val9_$_595() This1.Abstract.S._private(_binaryRepr: {/*@stringU
left
*/})
class method 
This1.Abstract.S fN8_$_596() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val9_$_595()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS7_$_597() (
  Void unused35590=(
    This1.Abstract.S ts=this.id().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN7_$_594())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN7_$_594())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #2baseToS5_$_598() (
  Void unused35590=(
    This1.Abstract.S ts=this.left().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN8_$_596())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN8_$_596())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val10_$_599() This1.Abstract.S._private(_binaryRepr: {/*@stringU
top
*/})
class method 
This1.Abstract.S fN9_$_600() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val10_$_599()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS8_$_601() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS7_$_597())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS5_$_598())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS6_$_602() (
  Void unused35590=(
    This1.Abstract.S ts=this.top().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN9_$_600())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN9_$_600())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val11_$_603() This1.Abstract.S._private(_binaryRepr: {/*@stringU
width
*/})
class method 
This1.Abstract.S fN10_$_604() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val11_$_603()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS9_$_605() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS8_$_601())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS6_$_602())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS7_$_606() (
  Void unused35590=(
    This1.Abstract.S ts=this.width().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN10_$_604())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN10_$_604())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val12_$_607() This1.Abstract.S._private(_binaryRepr: {/*@stringU
height
*/})
class method 
This1.Abstract.S fN11_$_608() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val12_$_607()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS10_$_609() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS9_$_605())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS7_$_606())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS8_$_610() (
  Void unused35590=(
    This1.Abstract.S ts=this.height().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN11_$_608())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN11_$_608())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
class method 
Any val13_$_611() This1.Abstract.S._private(_binaryRepr: {/*@stringU
action
*/})
class method 
This1.Abstract.S fN12_$_612() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val13_$_611()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS11_$_613() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS10_$_609())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS8_$_610())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS9_$_614() ((
  This1.Abstract.S.Continue rcv16=(
    This1.Abstract.S rcv17=This1.Abstract.S.#from(builder:(
      mut This1.Abstract.S.SBuilder b586=This1.Abstract.S.#builder()
      b586
      ))
    rcv17.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b587=rcv17.#seqBuilder()
      Void unused35432=b587.#add(that:This0.fN12_$_612())
      b587
      ))
    )
  rcv16.#from(builder:(
    mut This1.Abstract.S.SBuilder b588=rcv16.#builder()
    Void unused35433=b588.#colon()
    Void unused35434=b588.#dot()
    Void unused35435=b588.#dot()
    b588
    ))
  ))
class method 
Any val14_$_615() This1.Abstract.S._private(_binaryRepr: {/*@stringU
content
*/})
class method 
This1.Abstract.S fN13_$_616() (
  Void unused35124=(
    Void unused35125=(
      Any val=this.val14_$_615()
      (
        This1.Abstract.S val1=(
          Void unused35127=return val
          
          catch return This1.Abstract.S casted4 casted4
          
          catch return Any casted4 exception void
          
          error  {/*@stringU
CastT-Should be unreachable code
*/}
          )
        
        catch exception Void catched17930 void
        
        (
          Void unused35128=return val1
          void
          )
        )
      )
    Void unused35126=error This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#from(builder:(
      mut This1.Abstract.S.SBuilder b548=This1.PrImpl1_$_634.Resource.ProvidedValueNotOfExpectedType.#builder()
      b548
      ))
    void
    )
  
  catch return This1.Abstract.S result121 result121
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S #1baseToS12_$_617() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS11_$_613())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS9_$_614())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
read method 
This1.Abstract.S #2baseToS10_$_618() (
  Void unused35590=(
    This1.Abstract.S ts=this.content().toS()
    Void unused35591=(
      This1.Abstract.Bool cond116=ts.beginsWith(that:This1.Abstract.S.#from(builder:(
        mut This1.Abstract.S.SBuilder b616=This1.Abstract.S.#builder()
        Void unused35593=b616.#oSquare()
        b616
        )))
      (
        Void unused35594=cond116.#checkTrue()
        
        catch exception Void catched18106 void
        
        (return (
          This1.Abstract.S.Continue rcv34=(
            This1.Abstract.S rcv35=(
              This1.Abstract.S.Continue rcv36=(
                This1.Abstract.S rcv37=This1.Abstract.S.#from(builder:(
                  mut This1.Abstract.S.SBuilder b617=This1.Abstract.S.#builder()
                  b617
                  ))
                rcv37.#from(seqBuilder:(
                  mut This1.Abstract.S.SConcat b618=rcv37.#seqBuilder()
                  Void unused35595=b618.#add(that:This0.fN13_$_616())
                  b618
                  ))
                )
              rcv36.#from(builder:(
                mut This1.Abstract.S.SBuilder b619=rcv36.#builder()
                Void unused35596=b619.#colon()
                b619
                ))
              )
            rcv35.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b620=rcv35.#seqBuilder()
              Void unused35597=b620.#add(that:ts)
              b620
              ))
            )
          rcv34.#from(builder:(
            mut This1.Abstract.S.SBuilder b621=rcv34.#builder()
            b621
            ))
          ))
        )
      )
    Void unused35592=return (
      This1.Abstract.S.Continue rcv38=(
        This1.Abstract.S rcv39=(
          This1.Abstract.S.Continue rcv40=(
            This1.Abstract.S rcv41=This1.Abstract.S.#from(builder:(
              mut This1.Abstract.S.SBuilder b622=This1.Abstract.S.#builder()
              b622
              ))
            rcv41.#from(seqBuilder:(
              mut This1.Abstract.S.SConcat b623=rcv41.#seqBuilder()
              Void unused35598=b623.#add(that:This0.fN13_$_616())
              b623
              ))
            )
          rcv40.#from(builder:(
            mut This1.Abstract.S.SBuilder b624=rcv40.#builder()
            Void unused35599=b624.#colon()
            b624
            ))
          )
        rcv39.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b625=rcv39.#seqBuilder()
          Void unused35600=b625.#add(that:This1.Abstract.S.doubleQuote())
          Void unused35601=b625.#add(that:ts)
          Void unused35602=b625.#add(that:This1.Abstract.S.doubleQuote())
          b625
          ))
        )
      rcv38.#from(builder:(
        mut This1.Abstract.S.SBuilder b626=rcv38.#builder()
        b626
        ))
      )
    void
    )
  
  catch return This1.Abstract.S result132 result132
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.S baseToS3_$_619() (
  This1.Abstract.S.Continue rcv20=(
    This1.Abstract.S rcv21=(
      This1.Abstract.S.Continue rcv22=(
        This1.Abstract.S rcv23=This1.Abstract.S.#from(builder:(
          mut This1.Abstract.S.SBuilder b592=This1.Abstract.S.#builder()
          b592
          ))
        rcv23.#from(seqBuilder:(
          mut This1.Abstract.S.SConcat b593=rcv23.#seqBuilder()
          Void unused35484=b593.#add(that:this.#1baseToS12_$_617())
          b593
          ))
        )
      rcv22.#from(builder:(
        mut This1.Abstract.S.SBuilder b594=rcv22.#builder()
        Void unused35485=b594.#comma()
        Void unused35486=b594.#space()
        b594
        ))
      )
    rcv21.#from(seqBuilder:(
      mut This1.Abstract.S.SConcat b595=rcv21.#seqBuilder()
      Void unused35487=b595.#add(that:this.#2baseToS10_$_618())
      b595
      ))
    )
  rcv20.#from(builder:(
    mut This1.Abstract.S.SBuilder b596=rcv20.#builder()
    b596
    ))
  )
refine read method 
This1.Abstract.Bool #equalequal#0left(read Any right) (
  Void unused35813=(
    Void unused35814=(
      read This0 right1=(
        Void unused35816=return right
        
        catch return read This0 casted8 casted8
        
        catch return read Any casted8 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched18243 void
      
      (
        Void unused35817=return this.equals(that:right1)
        void
        )
      )
    Void unused35815=return This1.Abstract.Bool.false()
    void
    )
  
  catch return This1.Abstract.Bool result138 result138
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #1equals13_$_620(read This0 that) This1.Abstract.Bool.true()
refine read method 
This1.Abstract.S id() this.id_$_591()
read method 
This1.Abstract.S id_$_591() 
refine read method 
This1.Abstract.Size left() this.left_$_591()
read method 
This1.Abstract.Size left_$_591() 
read method 
This1.Abstract.Bool #1equals7_$_621(read This0 that) (
  This1.Abstract.S read$opPar95=this.id()
  This1.Abstract.S read$opPar96=that.id()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Bool #2equals3_$_622(read This0 that) (
  This1.Abstract.Size read$opPar95=this.left()
  This1.Abstract.Size read$opPar96=that.left()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
refine read method 
This1.Abstract.Size top() this.top_$_591()
read method 
This1.Abstract.Size top_$_591() 
read method 
This1.Abstract.Bool #1equals8_$_623(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals7_$_621(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals3_$_622(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #2equals4_$_624(read This0 that) (
  This1.Abstract.Size read$opPar95=this.top()
  This1.Abstract.Size read$opPar96=that.top()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
refine read method 
This1.Abstract.Size width() this.width_$_591()
read method 
This1.Abstract.Size width_$_591() 
read method 
This1.Abstract.Bool #1equals9_$_625(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals8_$_623(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals4_$_624(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #2equals5_$_626(read This0 that) (
  This1.Abstract.Size read$opPar95=this.width()
  This1.Abstract.Size read$opPar96=that.width()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
refine read method 
This1.Abstract.Size height() this.height_$_591()
read method 
This1.Abstract.Size height_$_591() 
read method 
This1.Abstract.Bool #1equals10_$_627(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals9_$_625(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals5_$_626(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #2equals6_$_628(read This0 that) (
  This1.Abstract.Size read$opPar95=this.height()
  This1.Abstract.Size read$opPar96=that.height()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
read This1.Action action() this.action_$_591()
read method 
read This1.Action action_$_591() 
read method 
This1.Abstract.Bool #1equals11_$_629(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals10_$_627(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals6_$_628(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #2equals7_$_630(read This0 that) (
  read This1.Action read$opPar93=this.action()
  read This1.Action read$opPar94=that.action()
  read$opPar93.#equalequal#0left(right:read$opPar94)
  )
read method 
This1.Abstract.S content() this.content_$_591()
read method 
This1.Abstract.S content_$_591() 
read method 
This1.Abstract.Bool #1equals12_$_631(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals11_$_629(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals7_$_630(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This1.Abstract.Bool #2equals8_$_632(read This0 that) (
  This1.Abstract.S read$opPar95=this.content()
  This1.Abstract.S read$opPar96=that.content()
  read$opPar95.#equalequal#0left(right:read$opPar96)
  )
read method 
This1.Abstract.Bool equals(read This0 that) (
  Void unused35796=(
    Void unused35797=(
      This1.Abstract.Bool cond120=this.#1equals12_$_631(that:that).#bang()
      (
        Void unused35799=cond120.#checkTrue()
        
        catch exception Void catched18237 void
        
        (return This1.Abstract.Bool.false())
        )
      )
    Void unused35798=return this.#2equals8_$_632(that:that)
    void
    )
  
  catch return This1.Abstract.Bool result137 result137
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #invariant() void}
Abstract: {
Alu: {/*@plugin
L42.is/connected/withAlu
*/}
ExitCode: {
class method /*To signal normal program completion
*/Library normal() 
class method /*To signal a failure in program completion
*/Library failure() }
Bool: {implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
read method 
Library _binaryRepr() 
class method 
mut This0 #apply(Library _binaryRepr) 
read method 
This0 clone() 
read method 
Library #binaryRepr() 
class method 
mut This0 #from(Library binaryRepr) 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This0 is(class This1.Concept.Classable subtype) 
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine read method 
This1.S toS() 
refine read method 
This0 #equalequal#0left(read Any right) 
read method 
Void #checkTrue() exception Void 
class method 
This0 true() 
class method 
This0 false() 
method 
This0 #and#0left(This0 right) 
method 
This0 #or#0left(This0 right) 
method 
This0 #bang() 
read method 
This0 equals(read This0 that) 
class method 
This0 fromS(read This1.Concept.ToS that) 
class method 
Any parseError(This1.S that) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1 is(class This2.Concept.Classable subtype) 
refine read method 
This1 #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This1 equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Size: {implements This1.Concept.ToS, This1.Concept.Equals, This1.Concept.Classable/*@_private
*/
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(This1.S.SBuilder builder) 
refine read method 
This1.S toS() 
method 
This0 #plus#0left(This0 right) 
method 
This0 #less#0left(This0 right) 
method 
This0 #times#0left(This0 right) 
method 
This0 #divide#0left(This0 right) 
read method 
This1.Bool equals(read This0 that) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
method 
This1.Bool #right#0left(This0 right) 
method 
This1.Bool #rightequal#0left(This0 right) 
method 
mut This0.Iterator vals() 
method 
mut This0.Iterator vals(This0 upTo) 
class method 
This0 #0() 
class method 
This0 #1() 
class method 
This0 #2() 
class method 
This0 #3() 
class method 
This0 #4() 
class method 
This0 #5() 
class method 
This0 #6() 
class method 
This0 #7() 
class method 
This0 #8() 
class method 
This0 #9() 
class method 
This0 #10() 
class method 
This0 #11() 
class method 
This0 #12() 
class method 
This0 #13() 
class method 
This0 #14() 
class method 
This0 #15() 
class method 
This0 #16() 
class method 
This0 #17() 
class method 
This0 #18() 
class method 
This0 #19() 
class method 
This0 #20() 
class method 
This0 #21() 
class method 
This0 #22() 
class method 
This0 #23() 
class method 
This0 #24() 
class method 
This0 #25() 
class method 
This0 #26() 
class method 
This0 #27() 
class method 
This0 #28() 
class method 
This0 #29() 
class method 
This0 #30() 
class method 
This0 #31() 
class method 
This0 #32() 
class method 
This0 #33() 
class method 
This0 #34() 
class method 
This0 #35() 
class method 
This0 #36() 
class method 
This0 #37() 
class method 
This0 #38() 
class method 
This0 #39() 
class method 
This0 #40() 
class method 
This0 #41() 
class method 
This0 #42() 
class method 
This0 #43() 
class method 
This0 #44() 
class method 
This0 #45() 
class method 
This0 #46() 
class method 
This0 #47() 
class method 
This0 #48() 
class method 
This0 #49() 
class method 
This0 #50() 
class method 
This0 #51() 
class method 
This0 #52() 
class method 
This0 #53() 
class method 
This0 #54() 
class method 
This0 #55() 
class method 
This0 #56() 
class method 
This0 #57() 
class method 
This0 #58() 
class method 
This0 #59() 
class method 
This0 #60() 
class method 
This0 #61() 
class method 
This0 #62() 
class method 
This0 #63() 
class method 
Any parseError(This1.S that) 
Iterator: {
mut method 
Void start(This1 that) 
read method 
This1 start() 
read method 
This1 end() 
class method 
mut This0 #apply(This1 start, This1 end) 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This1 #inner() 
read method 
Void #close() }
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Num: {implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
class method 
This0 fromS(This1.Concept.ToS that) 
class method 
This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
Any parseError(This1.S that) 
refine read method 
This1.S toS() 
method 
This1.S toSDouble() 
method 
This0 #plus#0left(This0 right) 
method 
This0 #less#0left(This0 right) 
method 
This0 #times#0left(This0 right) 
method 
This0 #divide#0left(This0 right) 
read method 
This1.Bool equals(read This0 that) 
method 
This1.Bool #right#0left(This0 right) 
method 
This1.Bool #rightequal#0left(This0 right) 
Plg: {/*@plugin
L42.is/connected/withNumbers
*/}
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
S: {implements This1.Concept.Base/*, Concept.Equals //needed until we do (also refine) normalization
*/, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals, This1.Concept.ToS
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library _binaryRepr() 
read method 
This0 clone() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This0 readableName() 
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
method 
This0 #plusplus#0left(This0 right) 
read method 
This1.Bool equals(read This0 that) 
method 
This0 #less#0left(This0 right) 
method 
This1.Bool #rightright#0left(This0 right) 
method 
This1.Bool #rightrightequal#0left(This0 right) 
method 
This1.Bool #right#0left(This0 right) 
method 
This1.Size indexOfLeft(This0 val) 
method 
This1.Size indexOfLeft(This0 val, This1.Size start) 
method 
This1.Size indexOfRight(This0 val) 
method 
This0 withoutLeft(This0 val) 
method 
This0 withoutRight(This0 val) 
method 
This0 withoutAll(This0 val) 
method 
This1.Bool isEmpty() 
method 
This0 val(This1.Size that) 
method 
This1.Size #default#val(Void that) 
method 
This0 left() 
method 
This0 right() 
method 
This0 with(This1.Size that, This0 val) 
method 
This1.Size #default#with(Void that) 
method 
This0 withLeft(This0 that) 
method 
This0 withRight(This0 that) 
method 
This0 withAlso(This1.Size that, This0 val) 
method 
This1.Size #default#withAlso(Void that) 
method 
This0 withAlsoLeft(This0 that) 
method 
This0 withAlsoRight(This0 that) 
method 
This0 without(This1.Size index) 
method 
This1.Size #default#without(Void index) 
method 
This0 without(This1.Size index, This1.Size skipNum) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
method 
This1.Bool contains(This0 that) 
method 
This0 #apply(This1.Size start, This1.Size end) 
method 
This0 #apply(This1.Size that) 
method 
This0 #apply(This1.Size start) 
method 
This0 #apply(This1.Size end) 
method 
This1.Size #default##apply(Void that) 
method 
This1.Size #default##apply(Void end) 
method 
This1.Size #default##apply(Void start) 
method 
This1.Size size() 
method 
This1.Bool subStrEq(This0 that, This1.Size start) 
method 
This1.Bool beginsWith(This0 that) 
class method 
This0 aSCIILowerCase() 
class method 
This0 aSCIIUpperCase() 
method 
This1.Bool isASCIILowerCase(This1.Size that) 
method 
This1.Bool isASCIIUpperCase(This1.Size that) 
class method 
This0 doubleQuote() 
class method 
This0 nl() 
method 
This0 replace(This0 that, This0 into) 
method 
This0 as42MultilineString() 
method 
This0.Continue #from(This0.SConcat seqBuilder) 
method 
mut This0.SConcat #seqBuilder() 
class method 
This0 #from(This0.SBuilder builder) 
class method 
mut This0.SBuilder #builder() 
refine read method 
This0 toS() 
method 
This1.Strings splitOn(This0 chars) 
Continue: {
read method 
This1 that() 
class method 
This0 #apply(This1 that) 
method 
mut This1.SBuilder #builder() 
method 
This1 #from(This1.SBuilder builder) }
SConcat: {
read method 
This1 old() 
mut method 
Void accumulator(This1 that) 
read method 
This1 accumulator() 
class method 
mut This0 #apply(This1 old, This1 accumulator) 
mut method 
Void #add(read This2.Concept.ToS that) 
mut method 
Void #add(read This2.Concept.ToS that, This2.Concept.ToS sep) }
SBuilder: {
mut method 
Void _binaryRepr(Library that) 
read method 
Library _binaryRepr() 
class method 
mut This0 _private(Library _binaryRepr) 
read method 
Library #binaryRepr() 
mut method 
Void acc(Library that) 
class method 
mut This0 empty() 
mut method 
Void #0() 
mut method 
Void #1() 
mut method 
Void #2() 
mut method 
Void #3() 
mut method 
Void #4() 
mut method 
Void #5() 
mut method 
Void #6() 
mut method 
Void #7() 
mut method 
Void #8() 
mut method 
Void #9() 
mut method 
Void #q() 
mut method 
Void #w() 
mut method 
Void #e() 
mut method 
Void #r() 
mut method 
Void #t() 
mut method 
Void #y() 
mut method 
Void #u() 
mut method 
Void #i() 
mut method 
Void #o() 
mut method 
Void #p() 
mut method 
Void #a() 
mut method 
Void #s() 
mut method 
Void #d() 
mut method 
Void #f() 
mut method 
Void #g() 
mut method 
Void #h() 
mut method 
Void #j() 
mut method 
Void #k() 
mut method 
Void #l() 
mut method 
Void #z() 
mut method 
Void #x() 
mut method 
Void #c() 
mut method 
Void #v() 
mut method 
Void #b() 
mut method 
Void #n() 
mut method 
Void #m() 
mut method 
Void #Q() 
mut method 
Void #W() 
mut method 
Void #E() 
mut method 
Void #R() 
mut method 
Void #T() 
mut method 
Void #Y() 
mut method 
Void #U() 
mut method 
Void #I() 
mut method 
Void #O() 
mut method 
Void #P() 
mut method 
Void #A() 
mut method 
Void #S() 
mut method 
Void #D() 
mut method 
Void #F() 
mut method 
Void #G() 
mut method 
Void #H() 
mut method 
Void #J() 
mut method 
Void #K() 
mut method 
Void #L() 
mut method 
Void #Z() 
mut method 
Void #X() 
mut method 
Void #C() 
mut method 
Void #V() 
mut method 
Void #B() 
mut method 
Void #N() 
mut method 
Void #M() 
mut method 
Void #%() 
mut method 
Void #left() 
mut method 
Void #right() 
mut method 
Void #bang() 
mut method 
Void #tilde() 
mut method 
Void #plus() 
mut method 
Void #times() 
mut method 
Void #divide() 
mut method 
Void #less() 
mut method 
Void #and() 
mut method 
Void #or() 
mut method 
Void #oRound() 
mut method 
Void #cRound() 
mut method 
Void #oSquare() 
mut method 
Void #cSquare() 
mut method 
Void #oCurly() 
mut method 
Void #cCurly() 
mut method 
Void #dQuote() 
mut method 
Void #sQuote() 
mut method 
Void #hQuote() 
mut method 
Void #equal() 
mut method 
Void #qMark() 
mut method 
Void #hat() 
mut method 
Void #comma() 
mut method 
Void #semicolon() 
mut method 
Void #colon() 
mut method 
Void #dot() 
mut method 
Void #underscore() 
mut method 
Void #hash() 
mut method 
Void #at() 
mut method 
Void #backslash() 
mut method 
Void #dollar() 
mut method 
Void #space() 
mut method 
Void #newline() }
U: {
class method 
mut This1.SBuilder #builder() 
class method 
This1 #from(This1.SBuilder builder) }}
Concept: {
ToS: {interface 
read method 
This2.S toS() }
Classable: {interface 
class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This0 that) 
class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This0 that) 
read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This0 subtype) }
Base: {interface implements This1.ToS, This1.Classable, This1.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This1.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Classable that) 
refine class method 
mut This0 #cast(mut This1.Classable that) }
Wrapper: {interface 
read method 
Any inner() }
ClassWrapper: {interface 
read method 
class Any inner() }
MutWrapper: {interface 
read method 
read Any inner() 
mut method 
mut Any #inner() }
Equals: {interface 
read method 
This2.Bool #equalequal#0left(read Any right) }
Comparable: {interface 
read method 
This2.Bool greater(read Any that) }
Boollable: {interface 
read method 
Void #checkTrue() exception Void }
Decorator: {interface }
Contains: {interface 
read method 
This2.Bool contains(read Any that) }
Parsable: {interface }
RandomAccess: {interface 
read method 
read Any get(This2.Size that) 
mut method 
mut Any #get(This2.Size that) }
Sizable: {interface 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() }
Iterator: {interface 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Void #close() }}
Message: {interface implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine class method 
read This1.Concept.Base cast(read This1.Concept.Classable that) 
refine class method 
mut This1.Concept.Base #cast(mut This1.Concept.Classable that) 
class method 
This1.S kind() 
read method 
This1.S text() 
read method 
This0.Opt responseOf() 
refine read method 
class This0 class() 
EqualMessages: {
class method 
This2.Bool #apply(read This1 that, read This1 other) }
$: {
class method 
This0 #apply() 
class method 
Library #leftrightleft#0left(Library right) 
class method 
Library messageTrait() }
Opt: {/*will be Fixed in AdamTowel02
*/
method 
This0.TOpt that() 
class method 
This0 #new(This0.TOpt that) 
method 
This1 get() exception This2.Guard.Operation 
method 
This1 #get() 
method 
This2.Bool isPresent() 
class method 
This0 #apply() 
class method 
This0 #apply(This1 that) 
TOpt: {interface 
method 
This2 get() }
TEmpty: {implements This1.TOpt
class method 
This0 #apply() 
refine method 
This2 get() }
TOf: {implements This1.TOpt
method 
This2 that() 
class method 
This0 #apply(This2 that) 
refine method 
This2 get() }}}
Guard: {/* exception as Guard bureocracy, error as Guard detection
-is a check guarenteed to be performed, program logic can rely on this being enforced.
  as exceptions, Guards objects are a way to report/guard complex operations,
 where checking the shape of the input can be unconvenient.
as errors, they represent precondition violations.
Turning an exception Guard into an error Guard
 is equivalent of declaring that such misuse should not happen (blame on the caller),
 still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed
*/interface implements This1.Message, This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine class method 
read This1.Concept.Base cast(read This1.Concept.Classable that) 
refine class method 
mut This1.Concept.Base #cast(mut This1.Concept.Classable that) 
refine class method 
This1.S kind() 
refine read method 
This1.S text() 
refine read method 
This1.Message.Opt responseOf() 
refine read method 
class This1.Message class() 
Operation: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Parameter: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Precondition: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
ParseFail: {interface implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() }
CastFail: {implements This1, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
System: {
Guard: {/* implements Outer.Guard soon (remove "interface" for a bad translation bug: This1_System_Guard is not abstract and does not override abstract method MtoS()
*/interface implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() 
PluginFailure: {implements This1, This3.Guard, This3.Message, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
read method 
This3.S _text() 
read method 
This3.Message.Opt cause() 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
refine class method 
This3.S kind() 
refine read method 
This3.S text() 
refine read method 
This3.Message.Opt responseOf() 
method 
This0 #apply(This3.Message that) 
refine read method 
This3.S toS() 
read method 
This3.Bool equals(read This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
read method 
This4.S that() 
class method 
This0 #apply(This4.S that) 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}}}
X: {
class method 
This0.AssertionFail #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
mut This0.Tests #seqBuilder() 
class method 
Void #from(This0.Tests seqBuilder) 
NotImplementedYet: {implements This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
AssertionFail: {implements This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Pre: {
class method 
mut This1.Tests #seqBuilder() 
class method 
Void #from(This1.Tests seqBuilder) }
Test: {
read method 
This2.Bool that() 
read method 
This2.S msg() 
class method 
This0 #apply(This2.Bool that, This2.S msg) }
Tests: {implements This2.Concept.ToS, This2.Concept.Classable
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
This1.Test val(This2.Size that) 
read method 
class This2.Size #default#val(Void that) 
read method 
This1.Test left() 
read method 
This1.Test right() 
mut method 
Void #apply(This2.Size that, This1.Test val) 
mut method 
Void left(This1.Test that) 
mut method 
Void right(This1.Test that) 
mut method 
Void add(This2.Size that, This1.Test val) 
mut method 
Void add(This1.Test right) 
mut method 
Void add(This1.Test left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1.Test right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This1.Test val) 
method 
This0 withLeft(This1.Test that) 
method 
This0 withRight(This1.Test that) 
method 
This0 withAlso(This2.Size that, This1.Test val) 
method 
This0 withAlsoLeft(This1.Test that) 
method 
This0 withAlsoRight(This1.Test that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Test filled) 
read method 
lent This0.IteratorValFill vals(This1.Test filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
mut method 
Void #add(This2.Bool that, This2.Concept.ToS msg) 
mut method 
Void #add(This2.Bool that) 
read method 
This2.S collapse() 
Cast: {
class method 
This2.Test #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
This2.Test filled() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This2.Test filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Test filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Test filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Test #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(This2.Test that) 
read method 
This3.Bool isFill() 
read method 
This2.Test filled() }}}
Strings: {implements This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This1.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This1.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
read method 
read This1.Collections.MutListAny inner() 
mut method 
mut This1.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This1.Collections.MutListAny inner) 
class method 
This0 #immK(This1.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This1.Bool isEmpty() 
read method 
class This1.Size #default#val(Void that) 
read method 
This1.S left() 
read method 
This1.S right() 
mut method 
Void #apply(This1.Size that, This1.S val) 
mut method 
Void left(This1.S that) 
mut method 
Void right(This1.S that) 
mut method 
Void add(This1.Size that, This1.S val) 
mut method 
Void add(This1.S right) 
mut method 
Void add(This1.S left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1.S right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This1.Size that, This1.S val) 
method 
This0 withLeft(This1.S that) 
method 
This0 withRight(This1.S that) 
method 
This0 withAlso(This1.Size that, This1.S val) 
method 
This0 withAlsoLeft(This1.S that) 
method 
This0 withAlsoRight(This1.S that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This1.Size from, This1.Size maxTo, This1.Size minTo) 
read method 
lent This0.IteratorVal vals(This1.Size minTo) 
read method 
lent This0.IteratorVal vals(This1.Size from, This1.Size to) 
read method 
lent This0.IteratorValFill vals(This1.Size from, This1.Size maxTo, This1.Size minTo, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.Size minTo, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.Size from, This1.Size to, This1.S filled) 
read method 
lent This0.IteratorValFill vals(This1.S filled) 
mut method 
lent This0.IteratorVar #vals(This1.Size from, This1.Size maxTo, This1.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This1.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This1.Size from, This1.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This1.S toS() 
read method 
This1.Size size() 
read method 
This1.S val(This1.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.S that) 
read method 
lent This0.IteratorVal vals() 
read method 
This1.Bool contains(This1.S that) 
method 
This0 #less#0left(This1.S right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This1.Bool #rightright#0left(This0 right) 
method 
This1.Bool #rightrightequal#0left(This0 right) 
method 
This1.Bool #right#0left(This1.S right) 
read method 
This1.Bool equals(read This0 that) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
read method 
This1.Size indexOfLeft(This1.S val) 
read method 
This1.Size indexOfRight(This1.S val) 
method /*from VectorTrait
*/This0 without(This1.Size index) 
method 
This0 withoutLeft(This1.S val) 
method 
This0 withoutRight(This1.S val) 
method 
This0 withoutAll(This1.S val) 
mut method /*from VectorTrait
*/Void remove(This1.Size that) 
mut method 
Void removeAll(This1.S val) 
mut method 
Void removeLeft(This1.S val) 
mut method 
Void removeRight(This1.S val) 
Cast: {
class method 
This2.S #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
read method 
read This2.Collections.MutListAny _that() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size from() 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
read method 
This2.S filled() 
read method 
read This2.Collections.MutListAny that() 
class method 
lent This0 #apply(read This2.Collections.MutListAny _that, This2.Size from, This2.Size maxTo, This2.Size minTo, This2.S filled) 
class method 
lent This0 #apply(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo, This2.S filled) 
read method 
This2.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() 
read method 
read This2.Collections.MutListAny that() 
mut method 
mut This2.Collections.MutListAny #that() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size from() 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
class method 
mut This0 #apply(mut This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
Void inner(This2.S that) 
read method 
This2.Bool isFill() 
read method 
This2.S filled() }
IteratorVal: {
read method 
read This2.Collections.MutListAny _that() 
mut method 
Void from(This2.Size that) 
read method 
This2.Size from() 
read method 
This2.Size maxTo() 
read method 
This2.Size minTo() 
read method 
read This2.Collections.MutListAny that() 
class method 
lent This0 #apply(read This2.Collections.MutListAny _that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
class method 
lent This0 #apply(read This2.Collections.MutListAny that, This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
This2.Bool isFill() 
read method 
This2.S filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.S #inner() 
read method 
Void #close() }}
Debug: {
class method 
Void #apply(read This1.Concept.ToS that) 
class method 
Void incrementCounter(read This1.Concept.ToS that) 
class method 
Void printCounter(read This1.Concept.ToS that) 
class method 
Void #apply(Library lib) 
class method 
Void #$(This1.Concept.ToS fileName, This1.Concept.ToS content) 
class method 
This1.S #$readFile(This1.Concept.ToS fileName) 
class method 
This1.S #$localToAbsolute(This1.Concept.ToS fileName) 
class method 
Void test(read This1.Concept.ToS that, read This1.Concept.ToS expected, This1.S message) 
class method 
Void test(read This1.Concept.ToS that, read This1.Concept.ToS expected) 
Test: {/* Builder to look like a list and run a series of debug.test calls.
 Does not actually make an instance or store the list of calls anywhere :-)
*/
class method 
class This0 #seqBuilder() 
class method 
Void #from(class This0 seqBuilder) 
class method 
Void #add(read This2.Concept.ToS that, read This2.Concept.ToS expected) 
class method 
Void #add(read This2.Concept.ToS that, read This2.Concept.ToS expected, This2.S message) }}
ConceptMap: {interface 
method 
This1.Alu _Alu() 
method 
This1.ExitCode _ExitCode() 
method 
This1.Bool _Bool() 
method 
This1.Size _Size() 
method 
This1.Num _Num() 
method 
This1.S _S() 
method 
This1.Concept _Concept() 
method 
This1.Message _Message() 
method 
This1.Guard _Guard() 
method 
This1.System _System() 
method 
This1.X _X() 
method 
This1.Strings _Strings() 
method 
This1.Debug _Debug() 
method 
This0 _ConceptMap() 
method 
This1.Url _Url() 
method 
This1.Path _Path() 
method 
This1.Selector _Selector() 
method 
This1.Location _Location() 
method 
This1.Refactor2 _Refactor2() 
method 
This1.Optimize _Optimize() 
method 
This1.Opt _Opt() 
method 
This1.Use _Use() 
method 
This1.Collections _Collections() 
method 
This1.CollectionsMut _CollectionsMut() 
method 
This1.K _K() 
method 
This1.Alphanumeric _Alphanumeric() 
method 
This1.DeployTowel _DeployTowel() 
method 
This1.Composers _Composers() 
method 
This1.Load _Load() }
Url: {implements This1.Concept.ToS
read method 
This1.S inner() 
class method 
This0 #apply(This1.S inner) 
refine read method 
This1.S toS() 
method 
Library #binaryRepr() 
class method /* if you do not implement it, it is a constructor?
may become an interface Concept.Parsable method?
*/This0 from(This1.Concept.ToS string) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() }
Path: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart java.util.List
*/implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This1.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This0 from(This1.Concept.ToS string) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
method 
This1.Strings names() 
class method 
This0 from(read This1.Strings names) 
class method 
This0 fresh() 
method 
This1.S name(This1.Size that) 
method 
This1.Size nameSize() 
refine read method 
This1.S toS() 
method 
This0 #plusplus#0left(This0 right) 
method 
This1.Bool isUnique() 
class method 
This0 fresh(This0 like) 
method 
This1.Size size() 
class method 
Any parseError(This1.S that) 
class method 
Any parseError(This1.S that, This1.Message cause) 
PlgPath: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart is.L42.connected.withSafeOperators.refactor.PathAdapter
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This2.S name(This1 that, This2.Size index) 
class method 
This1 concat(This1 that, This1 and) 
class method 
This2.Bool isUnique(This1 that) 
class method 
This1 fresh(This1 that) 
class method 
This1 rawFromS(This2.S that) 
class method 
This2.S toS(read This1 that) }
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals, This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Selector: {/*@plugin  toFix 
@pluginPart ast.Ast$MethodSelector
*/implements This1.Concept.Base, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This1.Bool equals(read This0 that) 
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This1.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This1.Concept.Classable that) 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This0 parse(This1.S that) 
class method 
This0 from(This1.Concept.ToS string) 
class method 
This0 #from(This1.S.SBuilder builder) 
class method 
mut This1.S.SBuilder #builder() 
class method 
This0 from(This1.S name, This1.Strings names) 
method 
This1.S nameAsField() 
method 
This1.S prefixAsField() 
method 
This1.Bool isOperator() 
method 
This1.Bool isUnique() 
method 
This1.S nameToS() 
method 
This1.S name() 
method 
This1.Size nameSize() 
method 
This1.S name(This1.Size that) 
method 
This1.Strings names() 
class method 
This0 fresh(This0 like) 
class method /*will be private
*/This1.S leftAsASCIIUpperCase(This1.S that) 
method 
This0 with(This1.S prefix) 
method 
This0 with(This1.S name) 
method 
This0 with(This1.Strings names) 
class method 
Any parseError(This1.S that) 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals, This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}}
Location: {interface implements This1.Concept.Base/*that is equals, toS and "know your class"
*/, This1.Concept.ToS, This1.Concept.Classable, This1.Concept.Equals
refine read method 
This1.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This1.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This1.Bool is(class This1.Concept.Classable subtype) 
refine read method 
This1.Bool #equalequal#0left(read Any right) 
refine read method 
class This1.Concept.Base class() 
refine class method 
read This1.Concept.Base cast(read This1.Concept.Classable that) 
refine class method 
mut This1.Concept.Base #cast(mut This1.Concept.Classable that) 
method 
This1.Size originSize() 
method 
This0.Origin origin(This1.Size that) 
method 
This0 location() 
method 
This0.Doc doc() 
NotAvailable: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Mdf: {implements This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
read method 
This2.Size inner() 
class method 
This0 #apply(This2.Size inner) 
read method 
This2.S name() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 fromS(This2.S that) 
class method 
This2.Strings names() 
class method 
This0 cmpImm() 
method 
This2.Bool isCmpImm() 
class method 
This0 cmpMut() 
method 
This2.Bool isCmpMut() 
class method 
This0 cmpRead() 
method 
This2.Bool isCmpRead() 
class method 
This0 cmpLent() 
method 
This2.Bool isCmpLent() 
class method 
This0 cmpCapsule() 
method 
This2.Bool isCmpCapsule() 
class method 
This0 cmpClass() 
method 
This2.Bool isCmpClass() 
class method 
This0 fwdImm() 
method 
This2.Bool isFwdImm() 
class method 
This0 fwdMut() 
method 
This2.Bool isFwdMut() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine read method 
class This0 class() 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
ParseFail: {implements This3.Guard.ParseFail, This3.Guard, This3.Message, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
read method 
This3.S _text() 
read method 
This3.Message.Opt cause() 
class method 
This0 #apply(This3.S _text, This3.Message.Opt cause) 
refine class method 
This3.S kind() 
refine read method 
This3.S text() 
refine read method 
This3.Message.Opt responseOf() 
method 
This0 #apply(This3.Message that) 
refine read method 
This3.S toS() 
read method 
This3.Bool equals(read This0 that) 
class method 
This0 #apply(This3.S text) 
class method 
This0 #apply(This3.S text, This3.Message cause) 
class method 
mut This3.S.SBuilder #builder() 
class method 
This0 #from(This3.S.SBuilder builder) 
method 
This0.Continue #from(This3.S.SConcat seqBuilder) 
method 
mut This3.S.SConcat #seqBuilder() 
Continue: {
read method 
This4.S that() 
class method 
This0 #apply(This4.S that) 
method 
mut This4.S.SBuilder #builder() 
method 
This1 #from(This4.S.SBuilder builder) }}
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Origin: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Origin
*/implements This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
read method 
This2.S fileName() 
read method 
This2.Size lineStart() 
read method 
This2.Size lineEnd() 
read method 
This2.Size columnStart() 
read method 
This2.Size columnEnd() 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
This0 #apply(This2.S fileName, This2.Size lineStart, This2.Size lineEnd, This2.Size columnStart, This2.Size columnEnd) 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
PUnresponsive: {
class method 
Library #leftrightleft#0left(Library right) 
class method 
Library #apply() }
This$Impl: {
class method 
Library #leftrightleft#0left(Library right) 
class method 
Library #apply() }
PlgClass: {
class method 
Library #leftrightleft#0left(Library right) }
Lib: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.location.Lib
*/implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This2.Bool equals(read This0 that) 
method 
This1.Origin.List origins() 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This1.Doc doc() 
method 
This0.List nesteds() 
method 
This0.List allNesteds() 
method 
class This2.Path #default#nested(Void path) 
method 
This0 nested(This2.Path path) exception This1.NotAvailable 
method 
class This2.Path #default#has(Void path) 
method 
This2.Bool has(This2.Path path) 
method 
This1.Method.List methods() 
method 
class This2.Selector #default#method(Void selector) 
method 
This1.Method method(This2.Selector selector) exception This1.NotAvailable 
method 
class This2.Selector #default#has(Void selector) 
method 
This2.Bool has(This2.Selector selector) 
method 
This1.Type.Implemented.List implements() 
method 
This2.Bool implements(class Any classObj) 
method 
class This2.Path #default#implements(Void path) 
method 
This2.Bool implements(This2.Path path) 
class method 
This0 #apply(class Any classObj) 
class method 
This0 #apply(Library that) 
method 
This0 navigate(This2.Path that) 
class method 
This0 newFromClass(class Any that) 
class method 
This0 newFromLibrary(Library that) 
method 
This1.Type.Implemented implemented(This2.Size that) 
method 
This2.Size implementedSize() 
method 
This2.Bool isBinded() 
method 
This2.Bool isCloseState() 
method /*as in EnsureCoherent<><
*/This2.Bool isEnsuredCoherent() 
method 
This2.Bool isInterface() 
method 
This2.Bool isPotentialInterface() 
method 
This2.Bool isRedirectable() 
method 
This1.Method method(This2.Size that) 
method 
This2.Size methodSize() 
method 
This0 nested(This2.Size that) 
method /*empty doc if it is root
*/This1.Doc nestedDoc() 
method 
This2.Size nestedSize() 
method /*last is its name, empty path for root
*/This2.Path path() 
method 
This0 root() 
refine method /*implemented but refined
*/This0 location() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Method: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Method
*/implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This2.Bool equals(read This0 that) 
method 
This1.Origin.List origins() 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This1.Doc doc() 
refine method 
This1.Lib location() 
method 
This2.Bool isAbstract() 
method 
This2.Bool isRefine() 
method 
This2.Selector selector() 
method 
This1.Type.Return returnType() 
method 
This2.Size parameterTypeSize() 
method 
This1.Type.Parameter parameterType(This2.Size that) 
method 
This1.Type.Parameter.List parameterTypes() 
method 
This2.Size exceptionTypeSize() 
method 
This1.Type.Exception exceptionType(This2.Size that) 
method 
This1.Type.Exception.List exceptionTypes() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This3.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This3.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
read method 
read This3.Collections.MutListAny inner() 
mut method 
mut This3.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This3.Collections.MutListAny inner) 
class method 
This0 #immK(This3.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This3.Bool isEmpty() 
read method 
class This3.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This3.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This3.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This3.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This3.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size minTo) 
read method 
lent This0.IteratorVal vals(This3.Size from, This3.Size to) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size maxTo, This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This3.Size from, This3.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This3.Size from, This3.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This3.S toS() 
read method 
This3.Size size() 
read method 
This1 val(This3.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This3.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This3.Bool #rightright#0left(This0 right) 
method 
This3.Bool #rightrightequal#0left(This0 right) 
method 
This3.Bool #right#0left(This1 right) 
read method 
This3.Bool equals(read This0 that) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
read method 
This3.Size indexOfLeft(This1 val) 
read method 
This3.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This3.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This3.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
This2 filled() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo, This2 filled) 
read method 
This4.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This4.Collections.MutListAny that() 
mut method 
mut This4.Collections.MutListAny #that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
class method 
mut This0 #apply(mut This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This4.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This4.Collections.MutListAny _that() 
mut method 
Void from(This4.Size that) 
read method 
This4.Size from() 
read method 
This4.Size maxTo() 
read method 
This4.Size minTo() 
read method 
read This4.Collections.MutListAny that() 
class method 
lent This0 #apply(read This4.Collections.MutListAny _that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
class method 
lent This0 #apply(read This4.Collections.MutListAny that, This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
This4.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Type: {interface implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine read method 
class This2.Concept.Base class() 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This1 location() 
refine method 
This1.Doc doc() 
method 
This0.RefTo refTo() 
method 
This2.Size mdfS() 
method 
This1.Mdf mdf() 
DispatchRefTo: {
class method 
This1.RefTo #apply(Library that) }
Return: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Return
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Method location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() }
Parameter: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Parameter     
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Method location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
method 
This3.Size pos() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Exception: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Exception
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Method location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
method 
This3.Size pos() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
Implemented: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Type$Implemented
*/implements This1, This2, This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Origin.List origins() 
refine method 
This3.Size originSize() 
refine method 
This2.Origin origin(This3.Size that) 
refine method 
This2.Doc doc() 
refine method 
This3.Size mdfS() 
refine method 
This2.Lib location() 
refine method 
This1.RefTo refTo() 
refine method 
This2.Mdf mdf() 
method 
This3.Size pos() 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}
RefTo: {interface implements This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine read method 
class This3.Concept.Base class() 
refine class method 
read This3.Concept.Base cast(read This3.Concept.Classable that) 
refine class method 
mut This3.Concept.Base #cast(mut This3.Concept.Classable that) 
Lib: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Lib
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
method 
This3.Lib referredLib() 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }
Unavailable: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Unavailable
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }
Binded: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Binded
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1/*includes primitives
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
method 
class Any referredClassObj() 
class method 
This0 #apply(class Any classObj) 
class method 
This4.Bool equalsClassObj(class Any that, class Any and) 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }
Missing: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.TypeRefTo$Missing
*/implements This4.Concept.Base, This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals, This1
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This4.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This4.Concept.Classable that) 
refine read method 
class This0 class() }}}
Doc: {/*user will need typecase to discover precise type, location() not refined
@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Doc
*/implements This1, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
read method 
This2.Bool equals(read This0 that) 
method 
This1.Origin.List origins() 
refine method 
This2.Size originSize() 
refine method 
This1.Origin origin(This2.Size that) 
refine method 
This0 doc() 
refine method 
This1 location() 
method 
This2.Size annotationSize() 
method 
This0.Annotation annotation(This2.Size that) 
method 
This0.Annotation.List annotations() 
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
class This0 class() 
Annotation: {/*@plugin  toFix 
@pluginPart is.L42.connected.withSafeOperators.location.Doc$Annotation
*/implements This3.Concept.Base, This3.Concept.ToS, This3.Concept.Classable, This3.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This3.Bool equals(read This0 that) 
method 
This2.Type.RefTo title() 
method 
This3.S text() 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
refine read method 
This3.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Bool is(class This3.Concept.Classable subtype) 
refine read method 
This3.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This3.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This3.Concept.Classable that) 
refine read method 
class This0 class() 
List: {implements This4.Concept.ToS, This4.Concept.Classable, This4.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This4.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This4.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This4.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This4.Bool is(class This4.Concept.Classable subtype) 
read method 
read This4.Collections.MutListAny inner() 
mut method 
mut This4.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This4.Collections.MutListAny inner) 
class method 
This0 #immK(This4.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This4.Bool isEmpty() 
read method 
class This4.Size #default#val(Void that) 
read method 
This1 left() 
read method 
This1 right() 
mut method 
Void #apply(This4.Size that, This1 val) 
mut method 
Void left(This1 that) 
mut method 
Void right(This1 that) 
mut method 
Void add(This4.Size that, This1 val) 
mut method 
Void add(This1 right) 
mut method 
Void add(This1 left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1 right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This4.Size that, This1 val) 
method 
This0 withLeft(This1 that) 
method 
This0 withRight(This1 that) 
method 
This0 withAlso(This4.Size that, This1 val) 
method 
This0 withAlsoLeft(This1 that) 
method 
This0 withAlsoRight(This1 that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size minTo) 
read method 
lent This0.IteratorVal vals(This4.Size from, This4.Size to) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size maxTo, This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size minTo, This1 filled) 
read method 
lent This0.IteratorValFill vals(This4.Size from, This4.Size to, This1 filled) 
read method 
lent This0.IteratorValFill vals(This1 filled) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size maxTo, This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This4.Size from, This4.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This4.S toS() 
read method 
This4.Size size() 
read method 
This1 val(This4.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1 that) 
read method 
lent This0.IteratorVal vals() 
read method 
This4.Bool contains(This1 that) 
method 
This0 #less#0left(This1 right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This4.Bool #rightright#0left(This0 right) 
method 
This4.Bool #rightrightequal#0left(This0 right) 
method 
This4.Bool #right#0left(This1 right) 
read method 
This4.Bool equals(read This0 that) 
refine read method 
This4.Bool #equalequal#0left(read Any right) 
read method 
This4.Size indexOfLeft(This1 val) 
read method 
This4.Size indexOfRight(This1 val) 
method /*from VectorTrait
*/This0 without(This4.Size index) 
method 
This0 withoutLeft(This1 val) 
method 
This0 withoutRight(This1 val) 
method 
This0 withoutAll(This1 val) 
mut method /*from VectorTrait
*/Void remove(This4.Size that) 
mut method 
Void removeAll(This1 val) 
mut method 
Void removeLeft(This1 val) 
mut method 
Void removeRight(This1 val) 
Cast: {
class method 
This2 #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
This2 filled() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo, This2 filled) 
read method 
This5.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() 
read method 
read This5.Collections.MutListAny that() 
mut method 
mut This5.Collections.MutListAny #that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
class method 
mut This0 #apply(mut This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
mut method 
Void inner(This2 that) 
read method 
This5.Bool isFill() 
read method 
This2 filled() }
IteratorVal: {
read method 
read This5.Collections.MutListAny _that() 
mut method 
Void from(This5.Size that) 
read method 
This5.Size from() 
read method 
This5.Size maxTo() 
read method 
This5.Size minTo() 
read method 
read This5.Collections.MutListAny that() 
class method 
lent This0 #apply(read This5.Collections.MutListAny _that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
class method 
lent This0 #apply(read This5.Collections.MutListAny that, This5.Size from, This5.Size maxTo, This5.Size minTo) 
read method 
This5.Bool isFill() 
read method 
This2 filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2 #inner() 
read method 
Void #close() }}}}}
Refactor2: {/*------------------------------
Infrastructure
------------------------------
*/
class method 
Library compose(Library that, Library and) exception This0.MethodClash, This0.ClassClash, This0.SubtleSubtypeViolation 
class method 
class This1.Path #default#rename(Void path) 
class method 
class This1.Path #default#rename(Void into) 
class method 
This0.RenameClass rename(This1.Path path, This1.Path into) 
class method 
class This1.Path #default#hide(Void path) 
class method 
This0.HideClass hide(This1.Path path) 
class method 
class This1.Path #default#toAbstract(Void path) 
class method 
This0.ToAbstractClass toAbstract(This1.Path path) 
class method 
This0.ToAbstract toAbstract(This1.Selector selector) 
class method 
This0.ToAbstractDest toAbstract(This1.Selector selector, This1.Selector into) 
class method 
This0.ToAbstractPath toAbstract(This1.Selector selector, This1.Path of) 
class method 
This0.ToAbstractPathDest toAbstract(This1.Selector selector, This1.Path of, This1.Selector into) 
class method 
class This1.Selector #default#toAbstract(Void selector) 
class method 
class This1.Selector #default#toAbstract(Void into) 
class method 
class This1.Path #default#toAbstract(Void of) 
class method 
class This1.Path #default#redirect(Void path) 
class method 
This0.Redirect redirect(This1.Path path, class Any into) 
class method 
This0.RedirectRefTo redirect(This1.Path path, This1.Location.Type.RefTo intoRefTo) 
class method 
Library makeDoc(This1.S that) 
class method 
This0.SumMethods sumMethods(This1.Selector that, This1.Selector and, This1.Path of, This1.S over, This1.Selector into) 
Fail: {interface implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
This2.S toS() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This2.Concept.Base cast(read This2.Concept.Classable that) 
refine class method 
mut This2.Concept.Base #cast(mut This2.Concept.Classable that) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
class This2.Message class() }
ErrorW: {
class method 
Library trait() 
class method 
Library #leftrightleft#0left(Library right) }
ParseFail: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ParseFail
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.S string() 
method 
This2.S expected() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
UnresolvedOverloading: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$UnresolvedOverloading
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
ClassUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
MethodUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
ClassClash: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$ClassClash
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Location.Lib left() 
method 
This2.Location.Lib right() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
MethodClash: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$MethodClash
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Location.Method left() 
method 
This2.Location.Method right() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
PathUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$PathUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Path path() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
SelectorUnfit: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SelectorUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
method 
This2.Path path() 
method 
This2.Selector selector() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
IncoherentMapping: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SelectorUnfit
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
PrivacyCoupuled: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$PrivacyCoupuled
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
SubtleSubtypeViolation: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$SubtleSubtypeViolation
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
DeployL42TypeError: {/*@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.RefactorErrors$DeployL42TypeError
@plugin is.L42.connected.withSafeOperators
*/implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
read method 
This2.Bool equals(read This0 that) 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
refine read method 
This2.S text() 
refine read method 
class This0 class() 
refine class method 
This2.S kind() 
refine read method 
This2.Message.Opt responseOf() 
refine read method 
This2.S toS() 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
JavaImport: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart is.L42.connected.withSafeOperators.pluginWrapper.PlgWrapperGenerator
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library #pluginUnresponsive(Library binaryRepr) 
class method 
Library #leftrightleft#0left(Library right) exception This1.UnresolvedOverloading, This1.ClassUnfit, This1.MethodUnfit 
class method 
Library main(Library that) exception This1.UnresolvedOverloading, This1.ClassUnfit, This1.MethodUnfit }
Compose: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.Compose
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library compose(Library left, Library right) exception This1.MethodClash, This1.ClassClash, This1.SubtleSubtypeViolation }
PlgRenameClass: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.Rename
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library renameClassJ(Library that, This2.Path src, This2.Path dest) exception This1.PathUnfit, This1.MethodClash, This1.ClassClash, This1.SubtleSubtypeViolation 
class method 
Library hideClassJ(Library that, This2.Path src) exception This1.PathUnfit, This1.ClassUnfit }
RenameClass: {
method 
This2.Path src() 
method 
This2.Path dest() 
class method 
This0 #apply(This2.Path src, This2.Path dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.MethodClash, This1.ClassClash, This1.SubtleSubtypeViolation }
HideClass: {
method 
This2.Path src() 
class method 
This0 #apply(This2.Path src) 
method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.ClassUnfit }
PlgAbstractClass: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.AbstractClass
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library toAbstractJ(Library that, This2.Path src) exception This1.PathUnfit, This1.PrivacyCoupuled }
ToAbstractClass: {
read method 
This2.Path src() 
class method 
This0 #apply(This2.Path src) 
method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.PrivacyCoupuled }
PlgToAbstract: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.ToAbstract
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library toAbstractPathDestJ(Library that, This2.Path path, This2.Selector src, This2.Selector dest) exception This1.SelectorUnfit, This1.PathUnfit, This1.MethodClash 
class method 
Library toAbstractPathJ(Library that, This2.Path path, This2.Selector src) exception This1.SelectorUnfit, This1.PathUnfit 
class method 
Library toAbstractDestJ(Library that, This2.Selector src, This2.Selector dest) exception This1.SelectorUnfit, This1.MethodClash 
class method 
Library toAbstractJ(Library that, This2.Selector src) exception This1.SelectorUnfit }
ToAbstract: {
method 
This2.Selector src() 
class method 
This0 #apply(This2.Selector src) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit }
ToAbstractDest: {
method 
This2.Selector src() 
method 
This2.Selector dest() 
class method 
This0 #apply(This2.Selector src, This2.Selector dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit, This1.MethodClash }
ToAbstractPath: {
method 
This2.Path path() 
method 
This2.Selector src() 
class method 
This0 #apply(This2.Path path, This2.Selector src) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit, This1.PathUnfit }
ToAbstractPathDest: {
method 
This2.Path path() 
method 
This2.Selector src() 
method 
This2.Selector dest() 
class method 
This0 #apply(This2.Path path, This2.Selector src, This2.Selector dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.SelectorUnfit, This1.PathUnfit, This1.MethodClash }
PlgRedirect: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.Redirect
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library redirectJ(Library that, This2.Path src, class Any dest) exception This1.ClassUnfit, This1.IncoherentMapping, This1.MethodClash, This1.PathUnfit }
Redirect: {
method 
This2.Path src() 
method 
class Any dest() 
class method 
This0 #apply(This2.Path src, class Any dest) 
method 
Library #leftrightleft#0left(Library right) exception This1.ClassUnfit, This1.IncoherentMapping, This1.MethodClash, This1.PathUnfit }
RefToUnfit: {implements This1.Fail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
RedirectRefTo: {
read method 
This2.Path src() 
read method 
This2.Location.Type.RefTo into() 
class method 
This0 #apply(This2.Path src, This2.Location.Type.RefTo into) 
method 
Library #leftrightleft#0left(Library right) exception This1.ClassUnfit, This1.IncoherentMapping, This1.MethodClash, This1.ClassClash, This1.PathUnfit, This1.RefToUnfit, This1.SubtleSubtypeViolation }
PlgMethod: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.RenameMethods
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
This0 #apply() 
method 
Library act(Library that) exception This1.PathUnfit, This1.SelectorUnfit, This1.MethodClash, This1.ClassUnfit 
method 
This0 addRenameJ(This2.Path path, This2.Selector src, This2.Selector dest) 
method 
This0 addHideJ(This2.Path path, This2.Selector src) 
method 
This0 addCloseJ(This2.Path path) 
method 
This0 addAbstractJ(This2.Path path, This2.Selector src) 
method 
This0 addAbstractAliasJ(This2.Path path, This2.Selector src, This2.Selector dest) }
Method: {
mut method 
Void inner(This1.PlgMethod that) 
read method 
This1.PlgMethod inner() 
class method 
mut This0 #apply(This1.PlgMethod inner) 
read method 
Library #leftrightleft#0left(Library right) exception This1.PathUnfit, This1.SelectorUnfit, This1.MethodClash, This1.ClassUnfit 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
class method 
class This2.Path #default##square(Void of) 
class method 
class This2.Path #default##square(Void closeState) 
class method 
class This2.Selector #default##square(Void hide) 
class method 
class This2.Selector #default##square(Void rename) 
class method 
class This2.Selector #default##square(Void into) 
class method 
class This2.Selector #default##square(Void abstract) 
class method 
class This2.Selector #default##square(Void alias) 
mut method 
Void #add(This2.Selector hide, This2.Path of) 
mut method 
Void #add(This2.Selector hide) 
mut method 
Void #add(This2.Selector rename, This2.Path of, This2.Selector into) 
mut method 
Void #add(This2.Selector rename, This2.Selector into) 
mut method 
Void #add(This2.Path closeState) 
mut method 
Void #add(This2.Selector abstract, This2.Path of) 
mut method 
Void #add(This2.Selector abstract, This2.Path of, This2.Selector alias) 
mut method 
Void #add(This2.Selector abstract) 
mut method 
Void #add(This2.Selector abstract, This2.Selector alias) }
MakeDoc: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.MakeDoc
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library makeDoc(This2.S that) }
PlgSumMethods: {/*@plugin  toFix
@pluginPart is.L42.connected.withSafeOperators.refactor.SumMethods
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Void #pluginUnresponsive(Library binaryRepr) 
class method 
Library sumMethodsJ(Library lib, This2.Path path, This2.Selector src1, This2.Selector src2, This2.Selector dest, This2.S name) exception This1.MethodClash, This1.PathUnfit, This1.SelectorUnfit }
SumMethods: {
read method 
This2.Selector that() 
read method 
This2.Selector and() 
read method 
This2.Path of() 
read method 
This2.S over() 
read method 
This2.Selector into() 
class method 
This0 #apply(This2.Selector that, This2.Selector and, This2.Path of, This2.S over, This2.Selector into) 
method 
Library #leftrightleft#0left(Library right) exception This1.MethodClash, This1.PathUnfit, This1.SelectorUnfit }}
Optimize: {
RemoveUnreachableCode: {
class method 
Library #leftrightleft#0left(Library right) }}
Opt: {
class method 
Library #apply(class Any that) 
class method 
Library optTrait() }
Use: {
mut method 
Void fillMaps() 
mut method 
Void fillMaps(This1.Location.Lib li, This1.Size i) 
mut method 
Void fillMaps(This1.Location.Lib lij, This1.Composers.Selectors ssj, This1.Path pj, This1.Size i) 
mut method 
This1.Selector superName(This1.Selector selector, This1.Size i) 
class method 
mut This1.Composers.Libs #seqBuilder() 
class method 
mut This0.Decorator #from(mut This1.Composers.Libs seqBuilder) 
mut method 
mut This1.Composers.RenameMethods openMaps() 
mut method 
mut This1.Refactor2.Method close() 
read method 
read This1.Composers.Libs inputs() 
mut method 
mut This1.Composers.Libs #inputs() 
read method 
Library input() 
read method 
This1.Location.Lib.List ls() 
read method 
This1.Location.Lib l0() 
read method 
This1.Location.Lib.List l0ns() 
read method 
This1.Composers.Selectorss sels() 
class method 
mut This0 #apply(mut This1.Composers.Libs libs, Library lib0) 
mut method 
mut This1.Refactor2.Method open(This1.Size that) 
mut method 
Void fillMapsPatch(This1.Location.Lib top, This1.Path fix) 
class method 
mut This0 #apply(Library top, This1.Path fix) exception This1.Location.NotAvailable 
class method 
class This1.Path #default##apply(Void patch) 
class method 
mut This0.Patcher #apply(This1.Path patch) 
class method 
mut This0 #apply(fwd mut This1.Composers.RenameMethods openMaps, fwd mut This1.Refactor2.Method close, fwd mut This1.Composers.Libs inputs, fwd Library input, fwd This1.Location.Lib.List ls, fwd This1.Location.Lib l0, fwd This1.Location.Lib.List l0ns, fwd This1.Composers.Selectorss sels) 
mut method 
Void op(This1.Path p, This1.Location.Method m, This1.Size i) 
Over: {
mut method 
Void fillMaps() 
mut method 
Void fillMaps(This2.Location.Lib li, This2.Size i) 
mut method 
Void fillMaps(This2.Location.Lib lij, This2.Composers.Selectors ssj, This2.Path pj, This2.Size i) 
mut method 
This2.Selector superName(This2.Selector selector, This2.Size i) 
class method 
mut This2.Composers.Libs #seqBuilder() 
class method 
mut This0.Decorator #from(mut This2.Composers.Libs seqBuilder) 
mut method 
mut This2.Composers.RenameMethods openMaps() 
mut method 
mut This2.Refactor2.Method close() 
read method 
read This2.Composers.Libs inputs() 
mut method 
mut This2.Composers.Libs #inputs() 
read method 
Library input() 
read method 
This2.Location.Lib.List ls() 
read method 
This2.Location.Lib l0() 
read method 
This2.Location.Lib.List l0ns() 
read method 
This2.Composers.Selectorss sels() 
class method 
mut This0 #apply(mut This2.Composers.Libs libs, Library lib0) 
mut method 
mut This2.Refactor2.Method open(This2.Size that) 
mut method 
Void fillMapsPatch(This2.Location.Lib top, This2.Path fix) 
class method 
mut This0 #apply(Library top, This2.Path fix) exception This2.Location.NotAvailable 
class method 
class This2.Path #default##apply(Void patch) 
class method 
mut This0.Patcher #apply(This2.Path patch) 
class method 
mut This0 #apply(fwd mut This2.Composers.RenameMethods openMaps, fwd mut This2.Refactor2.Method close, fwd mut This2.Composers.Libs inputs, fwd Library input, fwd This2.Location.Lib.List ls, fwd This2.Location.Lib l0, fwd This2.Location.Lib.List l0ns, fwd This2.Composers.Selectorss sels) 
mut method 
Void op(This2.Path p, This2.Location.Method m, This2.Size i) 
Decorator: {
read method 
read This3.Composers.Libs inner() 
mut method 
mut This3.Composers.Libs #inner() 
class method 
mut This0 #apply(mut This3.Composers.Libs inner) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation 
method 
Library foldLeft(Library resolver) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation }
Patcher: {
read method 
This3.Path patch() 
class method 
mut This0 #apply(This3.Path patch) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation, This3.Refactor2.PathUnfit, This3.Refactor2.SelectorUnfit, This3.Refactor2.ClassUnfit, This3.Location.NotAvailable }}
Override: {
mut method 
Void fillMaps() 
mut method 
Void fillMaps(This2.Location.Lib li, This2.Size i) 
mut method 
Void fillMaps(This2.Location.Lib lij, This2.Composers.Selectors ssj, This2.Path pj, This2.Size i) 
mut method 
This2.Selector superName(This2.Selector selector, This2.Size i) 
class method 
mut This2.Composers.Libs #seqBuilder() 
class method 
mut This0.Decorator #from(mut This2.Composers.Libs seqBuilder) 
mut method 
mut This2.Composers.RenameMethods openMaps() 
mut method 
mut This2.Refactor2.Method close() 
read method 
read This2.Composers.Libs inputs() 
mut method 
mut This2.Composers.Libs #inputs() 
read method 
Library input() 
read method 
This2.Location.Lib.List ls() 
read method 
This2.Location.Lib l0() 
read method 
This2.Location.Lib.List l0ns() 
read method 
This2.Composers.Selectorss sels() 
class method 
mut This0 #apply(mut This2.Composers.Libs libs, Library lib0) 
mut method 
mut This2.Refactor2.Method open(This2.Size that) 
mut method 
Void fillMapsPatch(This2.Location.Lib top, This2.Path fix) 
class method 
mut This0 #apply(Library top, This2.Path fix) exception This2.Location.NotAvailable 
class method 
class This2.Path #default##apply(Void patch) 
class method 
mut This0.Patcher #apply(This2.Path patch) 
class method 
mut This0 #apply(fwd mut This2.Composers.RenameMethods openMaps, fwd mut This2.Refactor2.Method close, fwd mut This2.Composers.Libs inputs, fwd Library input, fwd This2.Location.Lib.List ls, fwd This2.Location.Lib l0, fwd This2.Location.Lib.List l0ns, fwd This2.Composers.Selectorss sels) 
mut method 
Void op(This2.Path p, This2.Location.Method m, This2.Size i) 
Decorator: {
read method 
read This3.Composers.Libs inner() 
mut method 
mut This3.Composers.Libs #inner() 
class method 
mut This0 #apply(mut This3.Composers.Libs inner) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation 
method 
Library foldLeft(Library resolver) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation }
Patcher: {
read method 
This3.Path patch() 
class method 
mut This0 #apply(This3.Path patch) 
mut method 
Library #leftrightleft#0left(Library right) exception This3.Refactor2.MethodClash, This3.Refactor2.ClassClash, This3.Refactor2.SubtleSubtypeViolation, This3.Refactor2.PathUnfit, This3.Refactor2.SelectorUnfit, This3.Refactor2.ClassUnfit, This3.Location.NotAvailable }}
Decorator: {
read method 
read This2.Composers.Libs inner() 
mut method 
mut This2.Composers.Libs #inner() 
class method 
mut This0 #apply(mut This2.Composers.Libs inner) 
mut method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.MethodClash, This2.Refactor2.ClassClash, This2.Refactor2.SubtleSubtypeViolation 
method 
Library foldLeft(Library resolver) exception This2.Refactor2.MethodClash, This2.Refactor2.ClassClash, This2.Refactor2.SubtleSubtypeViolation }
Patcher: {
read method 
This2.Path patch() 
class method 
mut This0 #apply(This2.Path patch) 
mut method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.MethodClash, This2.Refactor2.ClassClash, This2.Refactor2.SubtleSubtypeViolation, This2.Refactor2.PathUnfit, This2.Refactor2.SelectorUnfit, This2.Refactor2.ClassUnfit, This2.Location.NotAvailable }}
Collections: {
class method 
Library vector(class Any ofMut) 
class method 
Library vector(class Any of) 
class method 
Library minimal(class Any that) 
class method 
Library eq(class Any that) 
IterationFailure: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
CollectionErrors: {
class method 
Any negBound(This2.Size that, This2.Size listSize) 
class method 
Any outBound(This2.Size that, This2.Size listSize) 
class method 
Any cast() 
class method 
Any iterationTermination(This2.Size from, This2.Size minTo, This2.Size size) 
class method 
Void checkBound(This2.Size that, This2.Size listSize) 
class method 
Void checkBoundAdd(This2.Size that, This2.Size listSize) }
MutListAny: {implements This2.Concept.ToS
mut method 
Void head(This0.Cell that) 
read method 
This0.Cell head() 
mut method 
Void size(This2.Size that) 
read method 
This2.Size size() 
class method 
mut This0 #apply(This0.Cell head, This2.Size size) 
class method 
mut This0 empty() 
read method 
Any val(This2.Size that) 
mut method 
Void #apply(This2.Size that, Any val) 
mut method 
Void add(This2.Size that, Any val) 
mut method 
Void remove(This2.Size that) 
method 
This0 without(This2.Size that) 
method 
This0 withAlso(This2.Size that, Any val) 
method 
This0 with(This2.Size that, Any val) 
refine read method 
This2.S toS() 
Cell: {interface 
method 
Any get(This3.Size that) 
method 
This0 set(This3.Size that, Any val, This3.Bool add) 
method 
This0 remove(This3.Size that) }
CellNext: {implements This1.Cell
read method 
Any val() 
read method 
This1.Cell next() 
class method 
mut This0 #apply(Any val, This1.Cell next) 
refine method 
Any get(This3.Size that) 
refine method 
This1.Cell set(This3.Size that, Any val, This3.Bool add) 
refine method 
This1.Cell remove(This3.Size that) }
CellEnd: {implements This1.Cell
class method 
mut This0 #apply() 
refine method 
Any get(This3.Size that) 
refine method 
This1.Cell set(This3.Size that, Any val, This3.Bool add) 
refine method 
This1.Cell remove(This3.Size that) }}
VectorTrait: {
class method 
Library #apply() }
CodeEq: {
class method 
Library #apply() }}
CollectionsMut: {
class method 
Library vector(class Any of) 
class method 
Library minimal(class Any that) 
class method 
Library eq(class Any that) 
IterationFailure: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
CollectionErrors: {
class method 
Any negBound(This2.Size that, This2.Size listSize) 
class method 
Any outBound(This2.Size that, This2.Size listSize) 
class method 
Any cast() 
class method 
Any iterationTermination(This2.Size from, This2.Size minTo, This2.Size size) 
class method 
Void checkBound(This2.Size that, This2.Size listSize) 
class method 
Void checkBoundAdd(This2.Size that, This2.Size listSize) }
MutListAny: {implements This2.Concept.ToS
mut method 
Void head(mut This0.Cell that) 
read method 
read This0.Cell head() 
mut method 
mut This0.Cell #head() 
mut method 
Void size(This2.Size that) 
read method 
This2.Size size() 
class method 
mut This0 #apply(fwd mut This0.Cell head, This2.Size size) 
class method 
mut This0 empty() 
read method 
read Any val(This2.Size that) 
mut method 
mut Any #val(This2.Size that) 
mut method 
Void #apply(This2.Size that, mut Any val) 
mut method 
Void add(This2.Size that, mut Any val) 
mut method 
Void remove(This2.Size that) 
method 
This0 without(This2.Size that) 
method 
This0 withAlso(This2.Size that, Any val) 
method 
This0 with(This2.Size that, Any val) 
refine read method 
This2.S toS() 
Cell: {interface 
read method 
read Any get(This3.Size that) 
mut method 
mut Any #get(This3.Size that) 
read method 
read This0 set(This3.Size that, read Any val, This3.Bool add) 
mut method 
mut This0 #set(This3.Size that, mut Any val, This3.Bool add) 
read method 
read This0 remove(This3.Size that) 
mut method 
mut This0 #remove(This3.Size that) }
CellNext: {implements This1.Cell
read method 
read Any val() 
mut method 
mut Any #val() 
read method 
read This1.Cell next() 
mut method 
mut This1.Cell #next() 
class method 
mut This0 #apply(fwd mut Any val, fwd mut This1.Cell next) 
refine read method 
read Any get(This3.Size that) 
refine mut method 
mut Any #get(This3.Size that) 
refine read method 
read This1.Cell set(This3.Size that, read Any val, This3.Bool add) 
refine mut method 
mut This1.Cell #set(This3.Size that, mut Any val, This3.Bool add) 
refine read method 
read This1.Cell remove(This3.Size that) 
refine mut method 
mut This1.Cell #remove(This3.Size that) }
CellEnd: {implements This1.Cell
class method 
mut This0 #apply() 
refine read method 
read Any get(This3.Size that) 
refine mut method 
mut Any #get(This3.Size that) 
refine read method 
read This1.Cell set(This3.Size that, read Any val, This3.Bool add) 
refine mut method 
mut This1.Cell #set(This3.Size that, mut Any val, This3.Bool add) 
refine read method 
read This1.Cell remove(This3.Size that) 
refine mut method 
mut This1.Cell #remove(This3.Size that) }}
VectorTrait: {
class method 
Library #apply() }
CodeEq: {
class method 
Library #apply() }}
K: {
class method 
Library #leftrightleft#0left(Library right) exception This1.Refactor2.ClassUnfit 
class method 
This0.Decorator #apply(This1.S name, This1.Path path, This1.S excluded, This1.Bool immK, This1.Bool isFwd) 
PlgK: {/*@plugin is.L42.connected.withSafeOperators
@pluginPart is.L42.connected.withSafeOperators.refactor.MakeK
*/
class method 
mut This0 #from(Library binaryRepr) 
read method 
Library #binaryRepr() 
class method 
Void #exceptionIf(Library binaryRepr) exception This0 
class method 
Library makeKJ(Library that, This2.S name, This2.Path path, This2.S excluded, This2.Bool immK, This2.Bool isFwd) 
class method 
Library #pluginUnresponsive(Library binaryRepr) }
Imm: {
class method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.ClassUnfit }
$: {
class method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.ClassUnfit }
Decorator: {
read method 
This2.S name() 
read method 
This2.Path path() 
read method 
This2.S excluded() 
read method 
This2.Bool immK() 
read method 
This2.Bool isFwd() 
class method 
This0 #apply(This2.S name, This2.Path path, This2.S excluded, This2.Bool immK, This2.Bool isFwd) 
method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.ClassUnfit }}
Alphanumeric: {
class method 
Library #leftrightleft#0left(Library right) exception This0.Fail 
ParseFail: {implements This2.Guard.ParseFail, This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Fail: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
Trait: {
class method 
Any val() 
class method 
Library #apply() }}
DeployTowel: {/*@untrusted
*/
read method 
This1.Url fileName() 
class method 
mut This0 #$(This1.Url fileName) 
mut method 
Library #leftrightleft#0left(Library right) 
FileSystemAccess:/*@_private
*/ {/*@plugin
L42.is/connected/withFileSystem
*/}}
Composers: {/*
Main feature of Composers:
you implement an
  mut method Void op(Path p, Location.Method m, Size i)
       op(p,meth,i) for example can be
         s=meth.selector()
         s2=this.superName(s,i)
         this.open(i).op(p,s,s2)//#add(rename:s of:p into:s2)
         this.close().op(p,s2)//hide selector of
*/
class method 
Library composerTrait() 
class method 
read Library #leftrightleft#0left(Library right) exception This1.Refactor2.MethodClash, This1.Refactor2.ClassClash, This1.Refactor2.SubtleSubtypeViolation 
class method 
This1.Location.Lib.List filterClash(This1.Location.Lib.List ls) 
class method 
This0.Selectors filterClash(This1.Location.Method.List ms) 
class method 
This1.Bool noClash(This1.Location.Method m) 
class method 
This1.Bool noClash(This1.Location.Lib l) 
class method 
This1.Path removePrefix(This1.Path path, This1.Path prefix) 
Selectors: {implements This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This2.Bool isEmpty() 
read method 
class This2.Size #default#val(Void that) 
read method 
This2.Selector left() 
read method 
This2.Selector right() 
mut method 
Void #apply(This2.Size that, This2.Selector val) 
mut method 
Void left(This2.Selector that) 
mut method 
Void right(This2.Selector that) 
mut method 
Void add(This2.Size that, This2.Selector val) 
mut method 
Void add(This2.Selector right) 
mut method 
Void add(This2.Selector left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This2.Selector right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This2.Selector val) 
method 
This0 withLeft(This2.Selector that) 
method 
This0 withRight(This2.Selector that) 
method 
This0 withAlso(This2.Size that, This2.Selector val) 
method 
This0 withAlsoLeft(This2.Selector that) 
method 
This0 withAlsoRight(This2.Selector that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This2.Selector filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This2.Selector filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This2.Selector filled) 
read method 
lent This0.IteratorValFill vals(This2.Selector filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
read method 
This2.Size size() 
read method 
This2.Selector val(This2.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This2.Selector that) 
read method 
lent This0.IteratorVal vals() 
read method 
This2.Bool contains(This2.Selector that) 
method 
This0 #less#0left(This2.Selector right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This2.Bool #rightright#0left(This0 right) 
method 
This2.Bool #rightrightequal#0left(This0 right) 
method 
This2.Bool #right#0left(This2.Selector right) 
read method 
This2.Bool equals(read This0 that) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
read method 
This2.Size indexOfLeft(This2.Selector val) 
read method 
This2.Size indexOfRight(This2.Selector val) 
method /*from VectorTrait
*/This0 without(This2.Size index) 
method 
This0 withoutLeft(This2.Selector val) 
method 
This0 withoutRight(This2.Selector val) 
method 
This0 withoutAll(This2.Selector val) 
mut method /*from VectorTrait
*/Void remove(This2.Size that) 
mut method 
Void removeAll(This2.Selector val) 
mut method 
Void removeLeft(This2.Selector val) 
mut method 
Void removeRight(This2.Selector val) 
Cast: {
class method 
This3.Selector #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This3.Selector #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This3.Selector filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, This3.Selector filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This3.Selector filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This3.Selector #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(This3.Selector that) 
read method 
This3.Bool isFill() 
read method 
This3.Selector filled() }
IteratorVal: {
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
This3.Selector filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This3.Selector #inner() 
read method 
Void #close() }}
Selectorss: {implements This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
read method 
mut This0 reverse() 
read method 
This2.Bool isEmpty() 
read method 
class This2.Size #default#val(Void that) 
read method 
This1.Selectors left() 
read method 
This1.Selectors right() 
mut method 
Void #apply(This2.Size that, This1.Selectors val) 
mut method 
Void left(This1.Selectors that) 
mut method 
Void right(This1.Selectors that) 
mut method 
Void add(This2.Size that, This1.Selectors val) 
mut method 
Void add(This1.Selectors right) 
mut method 
Void add(This1.Selectors left) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This1.Selectors right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This1.Selectors val) 
method 
This0 withLeft(This1.Selectors that) 
method 
This0 withRight(This1.Selectors that) 
method 
This0 withAlso(This2.Size that, This1.Selectors val) 
method 
This0 withAlsoLeft(This1.Selectors that) 
method 
This0 withAlsoRight(This1.Selectors that) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, This1.Selectors filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, This1.Selectors filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, This1.Selectors filled) 
read method 
lent This0.IteratorValFill vals(This1.Selectors filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
read method 
This2.Size size() 
read method 
This1.Selectors val(This2.Size that) 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(This1.Selectors that) 
read method 
lent This0.IteratorVal vals() 
read method 
This2.Bool contains(This1.Selectors that) 
method 
This0 #less#0left(This1.Selectors right) 
method 
This0 #lessless#0left(This0 right) 
method 
This0 #and#0left(This0 right) 
method 
This2.Bool #rightright#0left(This0 right) 
method 
This2.Bool #rightrightequal#0left(This0 right) 
method 
This2.Bool #right#0left(This1.Selectors right) 
read method 
This2.Bool equals(read This0 that) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
read method 
This2.Size indexOfLeft(This1.Selectors val) 
read method 
This2.Size indexOfRight(This1.Selectors val) 
method /*from VectorTrait
*/This0 without(This2.Size index) 
method 
This0 withoutLeft(This1.Selectors val) 
method 
This0 withoutRight(This1.Selectors val) 
method 
This0 withoutAll(This1.Selectors val) 
mut method /*from VectorTrait
*/Void remove(This2.Size that) 
mut method 
Void removeAll(This1.Selectors val) 
mut method 
Void removeLeft(This1.Selectors val) 
mut method 
Void removeRight(This1.Selectors val) 
Cast: {
class method 
This2.Selectors #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Selectors #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
This2.Selectors filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Selectors filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, This2.Selectors filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Selectors #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(This2.Selectors that) 
read method 
This3.Bool isFill() 
read method 
This2.Selectors filled() }
IteratorVal: {
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
This2.Selectors filled() 
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
This2.Selectors #inner() 
read method 
Void #close() }}
RenameMethods: {implements This2.Concept.ToS, This2.Concept.Classable
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.CollectionsMut.MutListAny inner() 
mut method 
mut This2.CollectionsMut.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.CollectionsMut.MutListAny inner) 
class method 
This0 #immK(This2.CollectionsMut.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(mut This2.Refactor2.Method that) 
mut method 
mut This0 #reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
read This2.Refactor2.Method val(This2.Size that) 
mut method 
mut This2.Refactor2.Method #val(This2.Size that) 
read method 
class This2.Size #default#val(Void that) 
read method 
read This2.Refactor2.Method left() 
read method 
read This2.Refactor2.Method right() 
mut method 
mut This2.Refactor2.Method #left() 
mut method 
mut This2.Refactor2.Method #right() 
mut method 
Void #apply(This2.Size that, mut This2.Refactor2.Method val) 
mut method 
Void left(mut This2.Refactor2.Method that) 
mut method 
Void right(mut This2.Refactor2.Method that) 
mut method 
Void add(This2.Size that, mut This2.Refactor2.Method val) 
mut method 
Void add(mut This2.Refactor2.Method right) 
mut method 
Void add(mut This2.Refactor2.Method left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(This2.Refactor2.Method right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, This2.Refactor2.Method val) 
method 
This0 withLeft(This2.Refactor2.Method that) 
method 
This0 withRight(This2.Refactor2.Method that) 
method 
This0 withAlso(This2.Size that, This2.Refactor2.Method val) 
method 
This0 withAlsoLeft(This2.Refactor2.Method that) 
method 
This0 withAlsoRight(This2.Refactor2.Method that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, read This2.Refactor2.Method filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, read This2.Refactor2.Method filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, read This2.Refactor2.Method filled) 
read method 
lent This0.IteratorValFill vals(read This2.Refactor2.Method filled) 
mut method 
mut This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
mut This0.IteratorVar #vals(This2.Size minTo) 
mut method 
mut This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
mut This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
Cast: {
class method 
read This3.Refactor2.Method #apply(read Any that) 
class method 
mut This3.Refactor2.Method mut(mut Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
read This3.Refactor2.Method readInner() 
mut method 
mut This3.Refactor2.Method mutInner() 
read method 
Void #close() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.CollectionsMut.MutListAny that() 
mut method 
mut This3.CollectionsMut.MutListAny #that() 
class method 
lent This0 #apply(read This3.CollectionsMut.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
read This3.Refactor2.Method #inner() 
read method 
This3.Bool isFill() 
read method 
read This3.Refactor2.Method filled() 
mut method 
mut This3.Refactor2.Method #filled() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
read This3.Refactor2.Method readInner() 
mut method 
mut This3.Refactor2.Method mutInner() 
read method 
Void #close() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Refactor2.Method filled() 
mut method 
mut This3.Refactor2.Method #filled() 
read method 
read This3.CollectionsMut.MutListAny that() 
mut method 
mut This3.CollectionsMut.MutListAny #that() 
class method 
lent This0 #apply(read This3.CollectionsMut.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, read This3.Refactor2.Method filled) 
read method 
read This3.Refactor2.Method #inner() 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
read This3.Refactor2.Method readInner() 
mut method 
mut This3.Refactor2.Method mutInner() 
read method 
Void #close() 
read method 
read This3.CollectionsMut.MutListAny that() 
mut method 
mut This3.CollectionsMut.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.CollectionsMut.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(mut This3.Refactor2.Method that) 
mut method 
mut This3.Refactor2.Method #inner() 
read method 
This3.Bool isFill() 
read method 
read This3.Refactor2.Method filled() 
mut method 
mut This3.Refactor2.Method #filled() }}
Libs: {implements This2.Concept.ToS, This2.Concept.Classable
refine class method /*
  Cast a (read/imm) object to this type.
  A class implementing this method should refine the return type to This.
  if is(subtype) is true, then cast(that) must produce a result.
  */read This0 cast(read This2.Concept.Classable that) 
refine class method /*
  Cast a (mutable) object to this type.
  A class implementing this method should refine the return type to This.
  if cast(that) produces a result, then #cast(that) also must produce a result.
  */mut This0 #cast(mut This2.Concept.Classable that) 
refine read method /*
  Extracts the class singleton from another instance of this class
  */class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
read method 
read This2.Collections.MutListAny inner() 
mut method 
mut This2.Collections.MutListAny #inner() 
class method 
mut This0 #apply(fwd mut This2.Collections.MutListAny inner) 
class method 
This0 #immK(This2.Collections.MutListAny inner) 
class method 
mut This0 empty() 
class method 
mut This0 #seqBuilder() 
class method 
mut This0 #from(mut This0 seqBuilder) 
mut method 
Void #add(Library that) 
read method 
mut This0 reverse() 
read method 
This2.Size size() 
read method 
This2.Bool isEmpty() 
read method 
Library val(This2.Size that) 
read method 
class This2.Size #default#val(Void that) 
read method 
Library left() 
read method 
Library right() 
mut method 
Void #apply(This2.Size that, Library val) 
mut method 
Void left(Library that) 
mut method 
Void right(Library that) 
mut method 
Void add(This2.Size that, Library val) 
mut method 
Void add(Library right) 
mut method 
Void add(Library left) 
mut method 
Void remove(This2.Size that) 
mut method 
Void removeLeft() 
mut method 
Void removeRight() 
method 
This0 #plus#0left(Library right) 
method 
This0 #plusplus#0left(This0 right) 
method 
This0 with(This2.Size that, Library val) 
method 
This0 withLeft(Library that) 
method 
This0 withRight(Library that) 
method 
This0 withAlso(This2.Size that, Library val) 
method 
This0 withAlsoLeft(Library that) 
method 
This0 withAlsoRight(Library that) 
method 
This0 without(This2.Size index) 
method 
This0 withoutLeft() 
method 
This0 withoutRight() 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size minTo) 
read method 
lent This0.IteratorVal vals(This2.Size from, This2.Size to) 
read method 
lent This0.IteratorVal vals() 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size maxTo, This2.Size minTo, Library filled) 
read method 
lent This0.IteratorValFill vals(This2.Size minTo, Library filled) 
read method 
lent This0.IteratorValFill vals(This2.Size from, This2.Size to, Library filled) 
read method 
lent This0.IteratorValFill vals(Library filled) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size maxTo, This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size minTo) 
mut method 
lent This0.IteratorVar #vals(This2.Size from, This2.Size to) 
mut method 
lent This0.IteratorVar #vals() 
refine read method 
This2.S toS() 
Cast: {
class method 
Library #apply(Any that) }
IteratorTrait: {
class method 
Library #apply() }
IteratorVal: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
read method 
This3.Bool isFill() 
read method 
Library filled() }
IteratorValFill: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny _that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
read method 
Library filled() 
read method 
read This3.Collections.MutListAny that() 
class method 
lent This0 #apply(read This3.Collections.MutListAny _that, This3.Size from, This3.Size maxTo, This3.Size minTo, Library filled) 
class method 
lent This0 #apply(read This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo, Library filled) 
read method 
This3.Bool isFill() }
IteratorVar: {
mut method 
Void #next() exception Void 
read method 
Void #checkEnd() 
read method 
Library #inner() 
read method 
Void #close() 
read method 
read This3.Collections.MutListAny that() 
mut method 
mut This3.Collections.MutListAny #that() 
mut method 
Void from(This3.Size that) 
read method 
This3.Size from() 
read method 
This3.Size maxTo() 
read method 
This3.Size minTo() 
class method 
mut This0 #apply(mut This3.Collections.MutListAny that, This3.Size from, This3.Size maxTo, This3.Size minTo) 
mut method 
Void inner(Library that) 
read method 
This3.Bool isFill() 
read method 
Library filled() }}}
Load: {/*shape of a loadable library:
 This contains actual library, but
 Abstract:{} contains abstract classes, and
 Abstract.ConceptMap maps concepts names to abstract classes
*/
class method 
Library cacheTowel() 
class method 
Library #leftrightleft#0left(Library right) exception This0.ConceptMapMismatch, This0.ConceptMapUnavailable 
ConceptMapMismatch: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
ConceptMapUnavailable: {implements This2.Guard, This2.Message, This2.Concept.Base, This2.Concept.ToS, This2.Concept.Classable, This2.Concept.Equals
refine read method 
class This0 class() 
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This2.S readableName() 
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This2.Bool is(class This2.Concept.Classable subtype) 
refine read method 
This2.Bool #equalequal#0left(read Any right) 
refine class method 
read This0 cast(read This2.Concept.Classable that) 
refine class method 
mut This0 #cast(mut This2.Concept.Classable that) 
read method 
This2.S _text() 
read method 
This2.Message.Opt cause() 
class method 
This0 #apply(This2.S _text, This2.Message.Opt cause) 
refine class method 
This2.S kind() 
refine read method 
This2.S text() 
refine read method 
This2.Message.Opt responseOf() 
method 
This0 #apply(This2.Message that) 
refine read method 
This2.S toS() 
read method 
This2.Bool equals(read This0 that) 
class method 
This0 #apply(This2.S text) 
class method 
This0 #apply(This2.S text, This2.Message cause) 
class method 
mut This2.S.SBuilder #builder() 
class method 
This0 #from(This2.S.SBuilder builder) 
method 
This0.Continue #from(This2.S.SConcat seqBuilder) 
method 
mut This2.S.SConcat #seqBuilder() 
Continue: {
read method 
This3.S that() 
class method 
This0 #apply(This3.S that) 
method 
mut This3.S.SBuilder #builder() 
method 
This1 #from(This3.S.SBuilder builder) }}
DeployLibrary: {/*@untrusted
*/
read method 
This2.Path path() 
read method 
This2.Url url() 
class method 
mut This0 #$(This2.Path path, This2.Url url) 
class method 
Library moveToAbstract(This2.Path that, Library of) 
class method 
This2.X.AssertionFail msg(This2.Path that, Library of) 
class method 
Library exposeAsLibrary(Library that, This2.Path path) exception This2.Refactor2.PathUnfit, This2.Refactor2.PrivacyCoupuled, This2.Location.NotAvailable 
class method 
Void checkTargetExists(Library that, This2.Path path) exception This2.Refactor2.PathUnfit 
mut method 
Library #leftrightleft#0left(Library right) exception This2.Refactor2.PathUnfit, This2.Refactor2.PrivacyCoupuled, This2.Location.NotAvailable }}}
GuiPlugin: {/*@plugin
L42.is/connected/withHtml
*/}
Iterator: {/*@untrusted
*/
read method 
This1.Abstract.S id() 
mut method 
Void current(This1.Abstract.S that) 
read method 
This1.Abstract.S current() 
class method 
This1.Abstract.S #$auxFetchEvent(This1.Abstract.S id) exception Void (
  Void unused40451=(
    Library s=use This1.GuiPlugin check eventPending(wName:id.#binaryRepr()) exception void
    
    catch error Library x exception void
    
    (
      Void unused40452=return This1.Abstract.S.#from(binaryRepr:s)
      void
      )
    )
  
  catch return capsule This1.Abstract.S result170 result170
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
mut method 
Void #next() exception Void (
  Void unused40453=(
    This1.Abstract.S s=This0.#$auxFetchEvent(id:this.id())
    Void unused40454=return this.current(that:s)
    void
    )
  
  catch return Void result171 result171
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
Void #checkEnd() void
read method 
This1.Abstract.S #inner() (this.current())
read method 
Void #close() void
class method 
mut This0 #$(fwd This1.Abstract.S id, fwd This1.Abstract.S current) }
PrImpl1_$_634: {
Resource: {
ProvidedValueNotOfExpectedType: {implements This3.Abstract.Guard, This3.Abstract.Message, This3.Abstract.Concept.Base, This3.Abstract.Concept.ToS, This3.Abstract.Concept.Classable, This3.Abstract.Concept.Equals
refine read method 
class This0 class() This0
refine class method /*
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  
  A readable name for this class. Do not need to follow the rule of paths,
  and once defined will not be automatically influenced by
  base metaprogramming operations.
  */This3.Abstract.S readableName() This2.GetMyName.#apply(that:This0)
refine class method /*
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  
  subtype test; similar to java 'instanceof'.
  if is(subtype) is true, then cast(that) must produce a result.
  */This3.Abstract.Bool is(class This3.Abstract.Concept.Classable subtype) (
  Void unused481=(
    Void unused482=(
      class This0 subtype4=(
        Void unused484=return subtype
        
        catch return class This0 casted15 casted15
        
        catch return class Any casted15 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched248 void
      
      (
        Void unused485=return This3.Abstract.Bool.true()
        void
        )
      )
    Void unused483=return This3.Abstract.Bool.false()
    void
    )
  
  catch return This3.Abstract.Bool result30 result30
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine read method 
This3.Abstract.Bool #equalequal#0left(read Any right) (
  Void unused486=(
    Void unused487=(
      read This0 right4=(
        Void unused489=return right
        
        catch return read This0 casted16 casted16
        
        catch return read Any casted16 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched253 void
      
      (
        Void unused490=return this.equals(that:right4)
        void
        )
      )
    Void unused488=return This3.Abstract.Bool.false()
    void
    )
  
  catch return This3.Abstract.Bool result31 result31
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
read This0 cast(read This3.Abstract.Concept.Classable that) (
  Void unused471=(
    Void unused472=(
      read This0 that7=(
        Void unused474=return that
        
        catch return read This0 casted13 casted13
        
        catch return read Any casted13 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched238 void
      
      (
        Void unused475=return that7
        void
        )
      )
    Void unused473=error This2.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return read This0 result28 result28
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
refine class method 
mut This0 #cast(mut This3.Abstract.Concept.Classable that) (
  Void unused476=(
    Void unused477=(
      mut This0 that8=(
        Void unused479=return that
        
        catch return mut This0 casted14 casted14
        
        catch return mut Any casted14 exception void
        
        error  {/*@stringU
CastT-Should be unreachable code
*/}
        )
      
      catch exception Void catched243 void
      
      (
        Void unused480=return that8
        void
        )
      )
    Void unused478=error This2.GetMyName.classCastError(that:that, classObj:This0)
    void
    )
  
  catch return mut This0 result29 result29
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This3.Abstract.S _text() 
read method 
This3.Abstract.Message.Opt cause() 
class method 
This0 #apply(This3.Abstract.S _text, This3.Abstract.Message.Opt cause) 
refine class method 
This3.Abstract.S kind() this.readableName()
refine read method 
This3.Abstract.S text() this._text()
refine read method 
This3.Abstract.Message.Opt responseOf() this.cause()
method 
This0 #apply(This3.Abstract.Message that) This0.#apply(text:this.text(), cause:that)
refine read method 
This3.Abstract.S toS() (
  Void unused672=(
    Void unused673=(
      This3.Abstract.Bool cond14=this.cause().isPresent().#bang()
      (
        Void unused676=cond14.#checkTrue()
        
        catch exception Void catched331 void
        
        (return (
          This3.Abstract.S imm$opPar84=This0.kind()
          This3.Abstract.S imm$opPar85=(
            This3.Abstract.S imm$opPar82=This3.Abstract.S.doubleQuote()
            This3.Abstract.S imm$opPar83=(
              This3.Abstract.S imm$opPar80=this.text()
              This3.Abstract.S imm$opPar81=This3.Abstract.S.doubleQuote()
              imm$opPar80.#plusplus#0left(right:imm$opPar81)
              )
            imm$opPar82.#plusplus#0left(right:imm$opPar83)
            )
          imm$opPar84.#plusplus#0left(right:imm$opPar85)
          ))
        )
      )
    var This3.Abstract.S res=This0.kind()
    Void unused674=(
      This3.Abstract.Bool cond15=(
        This3.Abstract.S read$opPar19=this.text()
        This3.Abstract.S read$opPar20=This3.Abstract.S.#from(builder:(
          mut This3.Abstract.S.SBuilder b159=This3.Abstract.S.#builder()
          b159
          ))
        read$opPar19.#equalequal#0left(right:read$opPar20)
        ).#bang()
      (
        Void unused677=cond15.#checkTrue()
        
        catch exception Void catched334 (res := (
          This3.Abstract.S imm$opPar86=This3.Abstract.S.#from(builder:(
            mut This3.Abstract.S.SBuilder b160=This3.Abstract.S.#builder()
            Void unused678=b160.#oSquare()
            b160
            ))
          res.#plusplus#0left(right:imm$opPar86)
          ))
        
        (res := (
          This3.Abstract.S imm$opPar95=(
            This3.Abstract.S imm$opPar93=This3.Abstract.S.#from(builder:(
              mut This3.Abstract.S.SBuilder b161=This3.Abstract.S.#builder()
              Void unused679=b161.#oSquare()
              Void unused680=b161.#t()
              Void unused681=b161.#e()
              Void unused682=b161.#x()
              Void unused683=b161.#t()
              Void unused684=b161.#colon()
              b161
              ))
            This3.Abstract.S imm$opPar94=(
              This3.Abstract.S imm$opPar91=This3.Abstract.S.doubleQuote()
              This3.Abstract.S imm$opPar92=(
                This3.Abstract.S imm$opPar89=this.text()
                This3.Abstract.S imm$opPar90=(
                  This3.Abstract.S imm$opPar87=This3.Abstract.S.doubleQuote()
                  This3.Abstract.S imm$opPar88=This3.Abstract.S.#from(builder:(
                    mut This3.Abstract.S.SBuilder b162=This3.Abstract.S.#builder()
                    Void unused685=b162.#comma()
                    Void unused686=b162.#space()
                    Void unused687=b162.#c()
                    Void unused688=b162.#a()
                    Void unused689=b162.#u()
                    Void unused690=b162.#s()
                    Void unused691=b162.#e()
                    Void unused692=b162.#colon()
                    b162
                    ))
                  imm$opPar87.#plusplus#0left(right:imm$opPar88)
                  )
                imm$opPar89.#plusplus#0left(right:imm$opPar90)
                )
              imm$opPar91.#plusplus#0left(right:imm$opPar92)
              )
            imm$opPar93.#plusplus#0left(right:imm$opPar94)
            )
          res.#plusplus#0left(right:imm$opPar95)
          ))
        )
      )
    Void unused675=return (
      This3.Abstract.S.Continue rcv16=res.#from(seqBuilder:(
        mut This3.Abstract.S.SConcat b163=res.#seqBuilder()
        Void unused693=b163.#add(that:this.cause().#get())
        b163
        ))
      rcv16.#from(builder:(
        mut This3.Abstract.S.SBuilder b164=rcv16.#builder()
        Void unused694=b164.#cSquare()
        b164
        ))
      )
    void
    )
  
  catch return This3.Abstract.S result36 result36
  
  error  {/*@stringU
CurlyBlock-Should be unreachable code
*/}
  )
read method 
This3.Abstract.Bool equals(read This0 that) This3.Abstract.Message.EqualMessages.#apply(that:this, other:that)
class method 
This0 #apply(This3.Abstract.S text) This0.#apply(_text:text, cause:This3.Abstract.Message.Opt.#apply())
class method 
This0 #apply(This3.Abstract.S text, This3.Abstract.Message cause) (/*next part could become a trait on its own (but S must keep its version)
*/This0.#apply(_text:text, cause:This3.Abstract.Message.Opt.#apply(that:cause)))
class method 
mut This3.Abstract.S.SBuilder #builder() This3.Abstract.S.SBuilder.empty()
class method 
This0 #from(This3.Abstract.S.SBuilder builder) This0.#apply(text:This3.Abstract.S.#from(builder:builder))
method 
This0.Continue #from(This3.Abstract.S.SConcat seqBuilder) This0.Continue.#apply(that:(
  This3.Abstract.S imm$opPar96=seqBuilder.old()
  This3.Abstract.S imm$opPar97=seqBuilder.accumulator()
  imm$opPar96.#plusplus#0left(right:imm$opPar97)
  ))
method 
mut This3.Abstract.S.SConcat #seqBuilder() This3.Abstract.S.SConcat.#apply(old:this.text(), accumulator:This3.Abstract.S.#from(builder:(
  mut This3.Abstract.S.SBuilder b165=This3.Abstract.S.#builder()
  b165
  )))
Continue: {
read method 
This4.Abstract.S that() 
class method 
This0 #apply(This4.Abstract.S that) 
method 
mut This4.Abstract.S.SBuilder #builder() This4.Abstract.S.SBuilder.empty()
method 
This1 #from(This4.Abstract.S.SBuilder builder) This1.#apply(text:(
  This4.Abstract.S imm$opPar98=this.that()
  This4.Abstract.S imm$opPar99=This4.Abstract.S.#from(builder:builder)
  imm$opPar98.#plusplus#0left(right:imm$opPar99)
  ))}}}
GetMyName: {
class method 
This2.Abstract.S #1#apply2_$_214(class Any that) This2.Abstract.S.#from(builder:(
  mut This2.Abstract.S.SBuilder b157=This2.Abstract.S.#builder()
  Void unused632=b157.#less()
  Void unused633=b157.#less()
  Void unused634=b157.#N()
  Void unused635=b157.#a()
  Void unused636=b157.#m()
  Void unused637=b157.#e()
  Void unused638=b157.#S()
  Void unused639=b157.#t()
  Void unused640=b157.#i()
  Void unused641=b157.#l()
  Void unused642=b157.#l()
  Void unused643=b157.#T()
  Void unused644=b157.#o()
  Void unused645=b157.#F()
  Void unused646=b157.#i()
  Void unused647=b157.#x()
  Void unused648=b157.#less()
  Void unused649=b157.#less()
  b157
  ))
class method 
Any #1classCastError1_$_215(read This2.Abstract.Concept.Classable that, class This2.Abstract.Concept.Classable classObj) This2.Abstract.S.#from(builder:(
  mut This2.Abstract.S.SBuilder b158=This2.Abstract.S.#builder()
  Void unused650=b158.#less()
  Void unused651=b158.#less()
  Void unused652=b158.#C()
  Void unused653=b158.#a()
  Void unused654=b158.#s()
  Void unused655=b158.#t()
  Void unused656=b158.#S()
  Void unused657=b158.#t()
  Void unused658=b158.#i()
  Void unused659=b158.#l()
  Void unused660=b158.#l()
  Void unused661=b158.#T()
  Void unused662=b158.#o()
  Void unused663=b158.#F()
  Void unused664=b158.#i()
  Void unused665=b158.#x()
  b158
  ))
class method 
This2.Abstract.S #apply(class Any that) This2.Abstract.Location.Type.RefTo.Binded.#apply(classObj:that).toS().withoutLeft(val:This2.Abstract.S.#from(builder:(
  mut This2.Abstract.S.SBuilder b741=This2.Abstract.S.#builder()
  Void unused36334=b741.#T()
  Void unused36335=b741.#h()
  Void unused36336=b741.#i()
  Void unused36337=b741.#s()
  Void unused36338=b741.#0()
  Void unused36339=b741.#dot()
  b741
  )))
class method 
Any classCastError(read This2.Abstract.Concept.Classable that, class This2.Abstract.Concept.Classable classObj) (
  This2.Abstract.Guard.CastFail.Continue rcv96=(
    This2.Abstract.Guard.CastFail rcv97=(
      This2.Abstract.Guard.CastFail.Continue rcv98=(
        This2.Abstract.Guard.CastFail rcv99=(
          This2.Abstract.Guard.CastFail.Continue rcv100=(
            This2.Abstract.Guard.CastFail rcv101=This2.Abstract.Guard.CastFail.#from(builder:(
              mut This2.Abstract.S.SBuilder b742=This2.Abstract.Guard.CastFail.#builder()
              Void unused36340=b742.#N()
              Void unused36341=b742.#o()
              Void unused36342=b742.#t()
              Void unused36343=b742.#space()
              b742
              ))
            rcv101.#from(seqBuilder:(
              mut This2.Abstract.S.SConcat b743=rcv101.#seqBuilder()
              Void unused36344=b743.#add(that:This0.#apply(that:that.class()))
              b743
              ))
            )
          rcv100.#from(builder:(
            mut This2.Abstract.S.SBuilder b744=rcv100.#builder()
            Void unused36345=b744.#left()
            Void unused36346=b744.#equal()
            b744
            ))
          )
        rcv99.#from(seqBuilder:(
          mut This2.Abstract.S.SConcat b745=rcv99.#seqBuilder()
          Void unused36347=b745.#add(that:This0.#apply(that:classObj))
          b745
          ))
        )
      rcv98.#from(builder:(
        mut This2.Abstract.S.SBuilder b746=rcv98.#builder()
        Void unused36348=b746.#semicolon()
        Void unused36349=b746.#space()
        Void unused36350=b746.#p()
        Void unused36351=b746.#r()
        Void unused36352=b746.#o()
        Void unused36353=b746.#v()
        Void unused36354=b746.#i()
        Void unused36355=b746.#d()
        Void unused36356=b746.#e()
        Void unused36357=b746.#d()
        Void unused36358=b746.#space()
        Void unused36359=b746.#o()
        Void unused36360=b746.#b()
        Void unused36361=b746.#j()
        Void unused36362=b746.#e()
        Void unused36363=b746.#c()
        Void unused36364=b746.#t()
        Void unused36365=b746.#space()
        Void unused36366=b746.#i()
        Void unused36367=b746.#s()
        Void unused36368=b746.#space()
        Void unused36369=b746.#o()
        Void unused36370=b746.#f()
        Void unused36371=b746.#space()
        Void unused36372=b746.#t()
        Void unused36373=b746.#y()
        Void unused36374=b746.#p()
        Void unused36375=b746.#e()
        Void unused36376=b746.#space()
        b746
        ))
      )
    rcv97.#from(seqBuilder:(
      mut This2.Abstract.S.SConcat b747=rcv97.#seqBuilder()
      Void unused36377=b747.#add(that:This0.#apply(that:that.class()))
      b747
      ))
    )
  rcv96.#from(builder:(
    mut This2.Abstract.S.SBuilder b748=rcv96.#builder()
    b748
    ))
  )}}}