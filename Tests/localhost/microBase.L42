{
Bool:{interface
  type method Outer0 ()
  method Void #checkTrue() exception Void
  method Outer0 & (Outer0 that)
  method Outer0 | (Outer0 that)
  method Outer0 ! ()
  }
True:{_private() <:Bool
  method () (this._private())
  method #checkTrue() (void)
  method &(that) (that)
  method |(that) (this)
  method !() (False())
  }
False:{_private() <:Bool
  method () (this._private())
  method #checkTrue() (exception void)
  method &(that) (this)
  method |(that) (that)
  method !() (True())
  }

ExitCode:{
  type method
  Library normal(){return {'@exitStatus
     '0
    }}
  type method
  Library failure(){return {'@exitStatus
     '42000
    }}
  }
Alu:{'@plugin
  'L42.is/connected/withAlu
  }
N:{(Library that)
  type method N #numberParser(Library that) (
    N(using Alu
      check stringToInt32(that)
      error void))
  method N +(N that) (
    N(using Alu
      check sumInt32(n1:this.that() n2:that.that())
      error void))
  method N -(N that) (
    N(using Alu
      check subInt32(n1:this.that() n2:that.that())
      error void))
  method N *(N that) (
    N(using Alu
      check mulInt32(n1:this.that() n2:that.that())
      error void))
  method N /(N that) (
    N(using Alu
      check divInt32(n1:this.that() n2:that.that())
      error void))

  method Bool ==(N that) {
    using Alu
      check ifInt32EqualDo(n1:this.that() n2:that.that())
      return True()
    return False()
    }
  method Bool <(N that) {
    using Alu
      check ifInt32GrtDo(n1:this.that() n2:that.that())
      return True()
    return False()
    }
  method Bool <=(N that) {
    using Alu
      check ifInt32GEqDo(n1:this.that() n2:that.that())
      return True()
    return False()
    }
  method Bool !=(N that) {
    using Alu
      check ifInt32EqualDo(n1:this.that() n2:that.that())
      return False()
    return True()
    }
  method Bool >(N that) {
    using Alu
      check ifInt32GEqDo(n1:this.that() n2:that.that())
      return False()
    return True()
    }
  method Bool >=(N that) {
    using Alu
      check ifInt32GrtDo(n1:this.that() n2:that.that())
      return False()
    return True()
    }
  }

S:{#stringParser(Library that)
  method S ++ (S that) (
    S.#stringParser(using Alu
      check stringConcat(s1:this.that(),s2:that.that())
      error void) )
  method Bool != (S that) !(this==that)
  method Bool == (S that) {
    using Alu
      check ifStringEqualDo(s1:this.that(),s2:that.that())
      return True()
    return False()}
  method
  S (N start, N end)
    S.#stringParser(using Alu
      check stringSubstring(this.that(),start:start.that(),end:end.that())
      error void )

  method
  S (N that) this(start:that, end:that+1N)  method N size () (
    N(using Alu
      check stringSize(this.that())
      error void) )
  }

IntrospectionPlugin:{'@plugin
  'L42.is/connected/withItself
  ()
  type method Library sumLib(Library l1,Library l2) using Outer0 check sumLib(l1:l1,l2:l2) error {sumLib()}
  type method Library adaptLib(Library l1 Library l2) using Outer0 check adaptLib(l1:l1,l2:l2) error {adaptLib()}
  type method Library nameToAdapter(Library that) using Outer0 check nameToAdapter(that) error {nameToAdapter()}
  type method Library typeNameToAdapter(type Any that) using Outer0 check typeNameToAdapter(that) error {typeNameToAdapter()}
  }
Collections:{()
  type method Library listRow() { _new(Cell head)
   T:{}
    Cell:{interface
      method mut Iterator #vals(Bool that)
      method Cell #next() exception Void
      method Void checkEmpty() exception Void
      method T #inner()
      method Void #checkEnd()
      }
    CellEnd:{()<:Cell
      method #vals(that) (Iterator(this,terminate:that))
      method #next() (exception void)
      method checkEmpty() (exception void)
      method #inner() (error {innerOnCellEnd()})
      method #checkEnd() (void)
      }
    CellNext:{(T elem, Cell _next)<:Cell
      method #vals(that) (Iterator(CellNext(elem:this.elem(), _next:this), terminate:that))
      method #next() ( this._next() )
      method checkEmpty() (void)
      method #inner() (this.elem())
      method #checkEnd() (
        this._next().checkEmpty()
        catch exception (on Void void)
        error {iterationNotComplete()})
      }
    type method
    Outer0 () (Outer0._new(head:CellEnd()))
    method
    Outer0 #add(T that) (
      Outer0._new(head:CellNext(
        elem:that,
        _next:this.head()))
      )
    type method
    Outer0 #begin() Outer0()
    method
    Outer0 #end() (
      var res=Outer0()
      with elem in this.vals() (
        res:=res.#add(elem)
        )
      res
      )
    method Bool isEmpty() { with x=this.head() (on CellEnd  return True() default return False() )}
    method T top() ( this.head().#inner() )
    method
    mut Iterator vals() ( this.head().#vals(True()))
    method
    mut Iterator valsCut() ( this.head().#vals(False()))
    method Outer0 pop() {
      return Outer0._new(head:this.head().#next())
      catch exception (on Void error {popOnEmpyList()})}
    Iterator:{mut (var Cell that,Bool terminate)
      mut method Void #next() exception Void ( x=this.that().#next(),x.checkEmpty() this.that(x) )
      read method Void #checkEnd() (if this.terminate() (this.that().#checkEnd()))
      read method T #inner() (this.that().#inner())
      read method Void #close() (void)
      }
    }
type method Library list(type Any that){
  map=IntrospectionPlugin.typeNameToAdapter(that)
  tRen=IntrospectionPlugin.nameToAdapter(S"T".that())
  'If I remove this. from under, I get a stupid error msg
  ' vars MUST have positions too :(
  return this.list(adapter: IntrospectionPlugin.adaptLib(l1:map,l2:tRen))
  }
type method Library list(Library adapter){
  return IntrospectionPlugin.adaptLib(l1:this.listRow(),l2:adapter)
  }
}

Name:{(Library adapter)
  type method Name #stringParser(Library that) (Name(adapter:
    using IntrospectionPlugin check nameToAdapter(that) error {nameToAdapter()}
    ))
  type method Name (type Any that) (Name(adapter:
    using IntrospectionPlugin check typeNameToAdapter(that) error {typeNameToAdapter()}
    ))
  }
}
