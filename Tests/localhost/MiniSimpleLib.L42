{
class method 
Void printHelloWorld() This.Debug.#apply(that:This.S.#stringParser(that:{//@stringU
//Hello World 
}).#plusplus(that:This.N.#numberParser(that:{//@stringU
//42
}).toS()))
Bool:{<:Outer1.S.ToS
  method Void #checkTrue() exception Void 
  class method This true() 
  class method This false() 
  method This #and(This that) 
  method This #or(This that) 
  method This #bang() }
N:{<:Outer1.S.ToS
  class method This #numberParser(Library that) 
  method This #plus(This that) 
  method This #less(This that) 
  method This #times(This that) 
  method This #divide(This that) 
  method Outer1.Bool #equalequal(This that) 
  method Outer1.Bool #left(This that) 
  method Outer1.Bool #leftequal(This that) 
  method Outer1.Bool #bangequal(This that) 
  method Outer1.Bool #right(This that) 
  method Outer1.Bool #rightequal(This that) 
  method Library binaryRepr() }
S:{<:This.ToS
  class method This #stringParser(Library that) 
  ToS:{interface method Outer1 toS() }
  method This #plusplus(This that) 
  method Outer1.Bool #bangequal(This that) 
  method Outer1.Bool #equalequal(This that) 
  method This #apply(Outer1.N that) 
  method Outer1.N size() 
  class method This doubleQuote() 
  method This replace(This that, This into) 
  method Library binaryRepr() }
Debug:{class method Void #apply(Outer1.S.ToS that) }}