{  (mut MutListAny inner)
class method This #immK(MutListAny inner)
class method mut This #builder() This(inner:MutListAny.empty())
class method mut This #from(mut This builder) builder
mut method Void #use(Elem that) this.add(right:that)

class method This #begin()  this.#builder()
method  This #end()  this
method This #add(Elem that) this.withAlso(\size, val:that)


Elem:{}
class method Elem cast(Any that) {with that (on Elem return that   default error CollectionErrors.cast())}

read method  Elem val(N that) This.cast(this.inner().val(that) )
mut method  Void (N that,Elem val) this.#inner()(that, val:val)
mut method  Void add(N that, Elem val) this.#inner().add(that,val:val)
mut method  Void add(Elem right) this.#inner().add(\size,val:right)
mut method  Void remove(N that) this.#inner().remove(that)

method This without(N that) This.#immK(inner:this.inner().without(that))
method This withAlso(N that, Any val) This.#immK(inner:this.inner().withAlso(that,val:val))
method This with(N that, Any val) This.#immK(inner:this.inner().with(that,val:val))

read method N size() this.inner().size()
read method Bool isEmpty() this.size()!=0N

IteratorDelegator:{class method Library () ...}

'not offering fill yet :(
read method  lent IteratorVal vals(N from, N to, N stopOk) IteratorVal(this.inner(), from:from,to:to,stopOk:stopOk)
read method lent IteratorVal vals(N stopOk) this.vals(from:0N-1N, to:0N-2N, stopOk:stopOk)
read method lent IteratorVal vals(N from, N to) this.vals(from:from, to:to, stopOk:this.inner().size() )
read method lent IteratorVal vals() this.vals(from:0N-1N, to:0N-2N, stopOk:this.inner().size() )
IteratorVal: SafeOperatorsAccess.compose(left:IteratorDelegator(),
   right:  { (read MutListAny that, var N from, N to, N stopOk)} )


mut method  lent IteratorVar #vals(N from, N to, N stopOk) IteratorVar(this.#inner(), from:from,to:to,stopOk:stopOk)
mut method lent IteratorVar #vals(N stopOk) this.#vals(from:0N-1N, to:0N-2N, stopOk:stopOk)
mut method lent IteratorVar #vals(N from, N to) this.#vals(from:from, to:to, stopOk:this.inner().size() )
mut method lent IteratorVar #vals() this.#vals(from:0N-1N, to:0N-2N, stopOk:this.inner().size() )
IteratorVar: SafeOperatorsAccess.compose(left:IteratorDelegator(),
  right:  { (mut MutListAny that, var N from, N to, N stopOk)
    mut method Void inner(Elem that) this.#that()(this.from(),val:that)})
}