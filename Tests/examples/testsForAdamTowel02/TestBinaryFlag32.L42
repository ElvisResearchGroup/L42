{reuse L42.is/AdamTowel02
Enum:{
  class method Library<<(Library that) exception MetaGuard//TODO: handle errors
    Use[Refactor.RenamePath(Path"Top" to:Path"This")<<this.enumTrait()]<<that

  class method Library enumTrait() {
    ParseFail:Message.$<<{<:Guard.ParseFail}
    Top:Use[Concept.solidTrait()]<<{(N that)<:Concept.ToS
      method toS()
        This.myName()++S"."++This.names().val(this.that())
      read method Bool ==(read This that) this.that()==that.that()
      class method Strings names()
      class method
      This fromS(S that){
        with n in 0N.vals(), d in This.names().vals() (
          if d==that (return This(n))
          )
        error ParseFail"The provided string is not valid: "[that]""
      }
    }
    class method mut Set #seqBuilder() Set.empty()
    class method Set #from(Set seqBuilder)seqBuilder
    Set:Use[Concept.solidTrait()]<<{(var BinaryFlag32 that)<:Concept.ToS
      class method mut This #seqBuilder() this.empty()
      class method mut This empty() This(0BinaryFlag32)
      class method This #from(This seqBuilder) seqBuilder
      mut method Void #add(Top that) this.that(\that | (1BinaryFlag32<<that.that()))
      method This ++(This that) This(this.that() | that.that())
      method This --(This that) This(this.that() & ~that.that())
      method This &(This that) This(this.that() & that.that())
      method Bool >(Top that)  this.that() == (this.that() | 1BinaryFlag32<<that.that())
      method toS()
        This.myName()++S"["[
          with n in 0N.vals(), d in Top.names().vals() (
            if this>Top(n) (use[ d separedBy:S";"])
            )]"]"

      read method Bool ==(read This that) this.that()==that.that()
      }
  }
}

Mdf:Enum<<{
  class method Strings names()Strings[S"capsule";S"mutable";S"lent";S"readable";S"immutable";S"class"]
  class method This capsule() This(0N)
  class method This mutable() This(1N)
  class method This lent() This(2N)
  class method This readable() This(3N)
  class method This immutable() This(4N)
  class method This class() This(5N)
  }

Main:{
  bf=101BinaryFlag32
  Debug(bf)
  Debug(bf.that())
  Debug(bf | 10100000BinaryFlag32)
  Debug(Mdf.mutable()!=Mdf.class())
  Debug(Mdf.mutable())
  Debug(Mdf[\mutable;\readable])
  return ExitCode.normal()
  }
}