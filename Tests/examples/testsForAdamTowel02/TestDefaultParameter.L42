{reuse L42.is/AdamTowel02
DefaultParameter:{
  (Selector that, Path of,S name, Selector by)

  ParameterNameNotPresent:Message::$[]<<{<:MetaGuard}
  DefaultValueInvalid:Message::$[]<<{<:MetaGuard}
  
  method Library <<(Library that)exception ParameterNameNotPresent,DefaultValueInvalid{
    origin=this.that()
    p=this.of()
    name=this.name()
    provider=this.by()
    newSelector= (
      var found=Bool.false()
      newNames=Strings[with n in origin.names().vals() (
        if n!=name (use[n])
        else found:=Bool.true()
        )]
      if !found (exception ParameterNameNotPresent"Parameter name '"[name]"' not present in '"[origin]"'")
      Selector.from(name:origin.name(),names:newNames)
      )
   
   'can be more precise, stating that provider needs to be a no arg method with the same type of the parameter, and with compatible this modifier.
    return Refactor::SumMethods[
      provider and:origin of:p over:name to: newSelector]<<that
    error on MetaGuard
      DefaultValueInvalid""
    }
  }
C:DefaultParameter(Selector"foo(bar)"
  of:Path"Outer0",
  name:S"bar"
  by: Selector"beer()"
  )<<{type method Void foo(S bar) Debug(bar) type method S beer()S"Hello"}


Main:{
  C.foo()
  C.foo(bar:S"World -- 42")
  return ExitCode.normal()
  }
}
