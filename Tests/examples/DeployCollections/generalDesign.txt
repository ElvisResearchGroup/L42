design

mut list imm/mut/...

read method TR left()
mut method T #left()
mut method Void left(T that)

read method TR right()
mut method T #right()
mut method Void right(that)

read method TR val(N that)
mut method T #val(N that)
mut method Void (N that, T val)

mut method remove(index)
mut method removeLeft()
mut method removeRight()
mut method removeAll(elem:)
mut method removeLeft(elem:)
mut method removeRight(elem:)

mut method Void add(T left)
mut method Void add(T right)
mut method Void add(N that T val)

method List without(N index)
method List withoutLeft()
method List withoutRight()
method List withoutAll(elem:)
method List withoutLeft(elem:)
method List withoutRight(elem:)

method List withLeft()
method List withRight()
method List with(N that, T val)

method List withAlso(T left)
method List withAlso(T right)
method List withAlso(N that, T val)

read method N size()
read method Boolean isEmpty()

method List +(T that)
method List ++(List that)
method List -(T that) //removeAll
method List --(List that)//set remove

method List &(List that)//set intersection
method List |(List that)//set union// do we need | since we have ++

method Bool >(T that)  //contains
method Bool !>(T that)
method Bool >=(List that)  //superseteq
method Bool >>(List that) //superset
method Bool !>>(List that)
method Bool !>=(List that)

class method mut List []


plus functionalList with
implements Flist? but with no generics?
read top
mut #top
top(that)

read bottom
mut #bottom
bottom(that)

val(that)
#val(that)
(that val)

size
isEmpty

pop(index)
popTop  need imm constr
popBottom   need imm constr
popAll(elem:)
popFirst
popLast


iteratorVals vals()
iterator?Vals #vals()
iteratorVars   vars()


------
enumerations:
Mdf:{(N inner)<: Concept::ToS
  method S name(){
    if this.inner()==1N.B return S"class"
    if this.inner()==10N.B return S"capsule"
    if this.inner()==100N.B return S"imm"
    if this.inner()==1000N.B return S"mut"
    if this.inner()==10000N.B return S"lent"
    if this.inner()==100000N.B return S"read"
    }
  method toS(){}

  Set:{
    }

  }