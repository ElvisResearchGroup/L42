{
type method '@private
Library generateVector(type Any that, Library lib){
  var res=lib
  res:=Refactor.RenamePath(Path"VectorStruct" to:Path"This")<<res
  res:=Refactor.Redirect(Path"Elem" to: that)<<res
  res:=Refactor.MakePrivatePath(Path"Cell")<<res
  res:=Refactor.MakePrivatePath(Path"CellNext")<<res
  res:=Refactor.MakePrivatePath(Path"CellEnd")<<res
  'res:=Refactor.MakePrivatePath(Path"Iterator")<<res
  'res:=Refactor.MakePrivatePath(Path"VarIterator")<<res
  return res
  catch exception Guard err error err
  }
  
type method Library vector(type Any of)
  This.generateVector(of,lib:{Elem:{} Kind:'@private
      {interface 
      type method Elem elem() 
      type method Elem elemRead()
      }
  VectorStruct:...
  })
type method Library vector(type Any ofMut)
  This.generateVector(ofMut,lib:{Elem:{} Kind:'@private
      {interface 
      type method mut Elem elem() 
      type method read Elem elemRead()
      }
  VectorStruct:...
  })

'type method Library vector(type Any ofType) This.generateVector(ofType,lib:{
'  Elem:{} Kind:'@private
'    {interface 
'    type method type Elem elem() 
'    type method type Elem elemRead()
'    }
'  VectorStruct:...
'  })
      'read/lent/mut/type/capsule/

}
