{
GetMyName:{
  class method
  This2.S (class Any that)
    Introspection(clazz:that).externalTypeToS()
  }
Message:{Opt:{
  TOpt:{interface method This2 get() }
  TEmpty:{ implements TOpt
    method get()
      error This4.Guard.Operation
        "TEmpty.get() Value not present in Optional"
  }}}
Guard:{interface ParseFail:{interface  implements Guard}}
Bool:{
  ParseFail:This2.Message.$<<{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid bool: "[that]""
  }
N:{
  ParseFail:This2.Message.$<<{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid Int32: "[that]""
  }
S:{
  SubStringNotPresent:This2.Message.$<<{ implements Guard}
  class method Void subStringNotPresent(This2.S string, This2.S subString)
    error SubStringNotPresent"string["[string]"] do not contains ["[subString]""
  }
Selector:{
  ParseFail:This2.Message.$<<{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid selector: "[that]""
  }
Path:{
  ParseFail:This2.Message.$<<{ implements Guard.ParseFail}
  class method
  Any parseError(This2.S that)
    ParseFail"The provided string is not a valid path: "[that]""
  class method
  Any parseError(This2.S that,This2.Message cause)
    ParseFail"The provided string is not a valid internalized path: "[that]""(cause)
  }

  Debug:{
    class method
    Void (Library lib)
      use Alu
        check stringDebug(DeployTowel.binaryReprFrom(lib:lib))
        void
    }
  MetaGuard:{interface
    RecordWrapper:{
    class method This3.S libToS(Library that) (
      i=Introspection(lib:that)
      ncs=i.nestedClasses().vals()
      This3.S"["[This3.S.nl()]""[with nc in ncs (
        use[nc.pathFromRoot();This3.S":";nc.doc();This3.S.nl()]
        )]"]"
      )
    }
  }
  //Assert:{
  //  $:{(B that, S msg)
  //  $s:Use[Collections.vector(of:This)]<<{
  //    mut method
  //    Void #add(Bool that, Concept.ToS msg)
  //        this.add(right: $(that,msg:S""[msg;S.nl()]"number:"[this.size()]" failed") )
  //    mut method
  //    Void #add(Bool that)
  //        this.add(right: $(that,msg:S"Condition number "[this.size()]" failed") )
  //    }
  //  class method mut $s #seqBuilder() $s.empty()
  //  class method Void #from($s seqBuilder) (
  //      res=S""[with a in seqBuilder.vals() (
  //        if a.that() ( use[a.msg(), separedBy:S.nl()] )
  //        )]""
  //    )
  //  }
  //}
}