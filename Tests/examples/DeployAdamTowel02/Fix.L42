{
GetMyName:{
  type method
  S (type Any that)
    Introspection(clazz:that).externalTypeToS()
  }
Guard:{interface ParseFail:{interface <:Guard}}
Bool:{
  ParseFail:Message::$[]<<{<:Guard::ParseFail}
  type method
  Any parseError(S that)
    ParseFail(text:
      S"The provided string is not a valid bool: "[that]""
      )
  }
N:{
  ParseFail:Message::$[]<<{<:Guard::ParseFail}
  type method
  Any parseError(S that)
    ParseFail(text:
      S"The provided string is not a valid Int32: "[that]""
      )
  }
Selector:{
  ParseFail:Message::$[]<<{<:Guard::ParseFail}
  type method
  Any parseError(S that)
    ParseFail(text:
      S"The provided string is not a valid selector: "[that]""
      )
  }
Path:{
  ParseFail:Message::$[]<<{<:Guard::ParseFail}
  type method
  Any parseError(S that)
    ParseFail(text:
      S"The provided string is not a valid path: "[that]""
      )
  type method
  Any parseError(S that,Message cause)
    ParseFail(text:
      S"The provided string is not a valid internalized path: "[that]""
      cause:cause
      )
  }
  MetaGuard:{interface
    RecordWrapper:{
    type method S libToS(Library that) (
      i=Introspection(lib:that)
      ncs=i.nestedClasses().vals()
      S"["[S.nl()]""[with nc in ncs (
        use[nc.pathFromRoot();S":";nc.doc();S.nl()]
        )]"]"
      )
    }
  }
}