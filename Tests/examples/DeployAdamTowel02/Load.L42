{
'shape of a loadable library:
' Outer0 contains actual library, but
' Abstract:{} contains abstract classes, and 
' Abstract::ConceptMap mapps concepts names to abstract classes
  type method Outer0 #begin()'constructor
  method Outer0 #end() this
  ConceptMapMismatch:Message::$[]<<{<:MetaGuard}
  ConceptMapUnavailable:Message::$[]<<{<:MetaGuard}
  method
  Library << (Library that)
  exception ConceptMapMismatch, ConceptMapUnavailable
    {
    return Refactor::Redirect[Path"Abstract::ConceptMap" to:ConceptMap]<<that
    catch exception err (
      on MetaGuard::MemberUnavailable exception ConceptMapUnavailable"provided library do not offers Abstract::ConceptMap"
      on MetaGuard::SourceUnfit exception ConceptMapMismatch""(err)
      on MetaGuard::MethodClash exception ConceptMapMismatch""(err)
      on MetaGuard::IncoherentRedirectMapping exception ConceptMapMismatch""(err)
      on MetaGuard::InvalidOnTopLevel error Assert::CodeNotReachable""
      )
    }
  DeployLibrary:...
}