{
StateUnfit:Message.$<<{ implements MetaGuard}
 //make state private will be another decorator now
Invariant:...
AddImmK:...
Wither:...
AddToS:...
AddEquals:...

class method Library nameTrait(){ implements  Concept.Classable, Concept.Named  //may be Parsable?
    method classAny() This
    read method class This class() This
    method myName() GetMyName(This)
  }

class method
Library << (Library that)
exception StateUnfit, MetaGuard
 {
  var Library res=that
  res:=AddImmK<<res
  res:=Wither<<res
  res:=AddToS<<res
  res:=AddEquals<<res
  res:=Invariant<<res
  res:=Use[this.nameTrait()]<<res
  return res
  //data: toS == class named,  invariant, with  ---  Still missing: fromS, clone mutk
  }

}