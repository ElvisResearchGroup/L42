{
//initial delegation
class method
Library<<(Library that) {
  return Use[that]<<this.equalsTrait(Introspection(lib:that))
  error on MetaGuard
    Assert.CodeNotReachable"AddToS.<<"
  }

//code generation
class method
Library equalsTrait(Introspection.NestedClass that) {
  state=that.state()
  if state.isEmpty() (error S"TODO")
  fs=state.left()

  //accumulation
  acc=Use[with fn in fs.selector().names().vals(), ft in fs.parameterTypes().vals() (
    fSel=Selector.fromS(fn++S"()")
    // with meth in that.methods().vals() (    if meth.selector()==that (...)      )//we may want to see if we need to add an #
    needClass=ft.isInterface()
    var Library action=Refactor.Tools.specializeField(selector:fSel, type:ft,
      forReadable:{
          read method Bool baseEquals(read This that) this.f().equals(that.f())
          T:{<:Concept.Equals}
          read method read T f()
          }
      forClass:{
        read method Bool baseEquals(read This that) Introspection(clazz:this.f())==Introspection(clazz:that.f())
        T:{}
        read method class T f()
        }
      )
   use[action]
    )]
  lib=acc.foldLeft(resolver:{
      read method Bool #1baseEquals(read This that)
      read method Bool #2baseEquals(read This that)
      read method Bool baseEquals(read This that) {
        if !this.#1baseEquals(that:that) (return Bool.false())
        return this.#2baseEquals(that:that)
        }
     })

  //final wrapping
  miniEquals={<:Concept.Equals
    read method Bool baseEquals(read This that) Bool.true()//no fields
    method equals(that) {
      with that (on read This return this.baseEquals(that))
      return Bool.false()
      }
    method
    Bool ==(This that) this.baseEquals(that)
    method
    Bool !=(This that) !(this==that)
    }
  return Refactor.MakePrivateSelector(Selector"baseEquals(that)" of:Path"This")<<Extends[miniEquals]<<lib
  error on MetaGuard Assert.CodeNotReachable"AddEquals.finalWrapping - MakePrivate"
  }
}