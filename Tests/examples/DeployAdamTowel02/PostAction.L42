{(Selector that,Path of,  Library action,Selector deprecated)
//can be used as
// PostAction(Selector"foo(bar)" of:Path"A"
//   action:{method N (N that) that+that}
//   deprecated: Selector"fooOld(bar)")<<myCode
method
Library <<(Library that)
exception InvalidAction{
  this.checkAction(this.action())// check action well formed

  src=this.that() //src selector of the method
  dest=this.deprecated()//dest selector for the copy of the method
  p=this.of()// path of the method
  fresh=Selector.fresh(Selector"#apply(that)")// will be the name of the action

  var Library acc=that
  acc:=Refactor.MoveImplementationSelector(src of:p to:dest)<<acc
  //now src is abstract
  acc:=this.composeAction(acc,fresh:fresh)
  acc:={return Refactor.SumMethods(dest and:fresh of:p over:S"that" to:src)<<acc
    exception on MetaGuard.ParameterMismatch
      InvalidAction"Action class signature does not fit decorated method"
    }
  acc:=Refactor.MakePrivateSelector(fresh of:p)<<acc
  //we do not need to refer to the action any more
  return acc
  error on MetaGuard
    Assert.CodeNotReachable"PostAct.Action1"
  }

method //@private
Library composeAction(Library that,Selector fresh){
  var Library acc=this.action()
  acc:=Refactor.RenamePath(Path"This" to:this.of())<<acc
  acc:=Refactor.RenameSelector(Selector"#apply(that)" of:this.of() to:fresh)<<acc
  acc:=Refactor.compose(left:that,right:acc)
  //ok since action res has fresh name
  return acc
  error on MetaGuard
    Assert.CodeNotReachable"PostAct.ActionCompose"
  }

method //@private
Void checkAction(Library that)
exception InvalidAction (
  defM=Introspection(lib: that).methodFromSelector(Selector"#apply(that)")
  exception on MetaGuard
    InvalidAction"action method not present"
  pt=defM.parameterTypes().left()
  rt=defM.returnType()
  if pt.toS()!=rt.toS() (
    exception InvalidAction"action return class need to be equal to parameter class"
    )
  )
//InvalidAction: Message.$ <>< { implements MetaGuard}
InvalidAction:Message.$<<{<:MetaGuard}
}