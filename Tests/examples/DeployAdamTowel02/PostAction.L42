{(Selector that,Path of,  Library action,Selector deprecated)

InvalidAction:Message::$[]<<{<:MetaGuard}

method
Library <<(Library that)
exception InvalidAction{
  this.checkAction(this.action())' check action well formed
  src=this.that() 'src selector of the method
  dest=this.deprecated()'dest selector for the copy of the method
  p=this.of()' path of the method
  fresh=this.actionName()
  var acc=that  
  acc:=Refactor::MoveImplementationSelector[
    src of:p to:dest]<<acc
  'now src is abstract
  acc:=this.composeAction(acc,fresh:fresh)
  paramName=fresh.names().top()'the name of the (only) parameter
  acc:={return Refactor::SumMethods[
    dest and:fresh of:p over:paramName to: src]<<acc
    catch exception MetaGuard::ParameterMismatch parm
      exception InvalidAction
        "Action type signature do not fit with.. PostAct::Action0"(parm) 
    }
  acc:=Refactor::MakePrivateSelector[fresh of:p]<<acc
  'we do not need to refer to the action any more
  return acc    
  catch exception MetaGuard cnr
    error Assert::CodeNotReachable"PostAct::Action1"(cnr)
  }
  
method
Selector actionName()
  Selector.fresh(Selector"#apply(that)")

method Library composeAction(Library that,Selector fresh){
  var res=this.action()
  res:=Refactor::RenamePath[
    Path"Outer0" to:this.of()]<<res  
  res:=Refactor::RenameSelector[
    Selector"#apply(that)" of:this.of() to:fresh]<<res
  return Refactor.compose(left:that,right:res)
  'ok since action res has fresh name
  catch exception MetaGuard cnr
    error Assert::CodeNotReachable"PostAct::ActionCompose"(cnr)
  }
method
Void checkAction(Library that) exception InvalidAction (
  defS=Selector"#apply(that)"
  defM=Introspection(lib: that)
    .methodFromSelector(defS)
  catch exception MetaGuard err 
    exception InvalidAction"action method not present"(err) 
  pt=defM.parameterTypes().top()
  rt=defM.returnType()
  if pt.toS()!=rt.toS() (exception InvalidAction"action return type need to be equal to parameter type" )
  ) 
}
