{ _private(Library _binaryRepr)'@private
  type method Outer0 #stringParser(Library that) Outer0._private(_binaryRepr:that)

  method Library binaryRepr() this._binaryRepr()

  method Outer0 ++(Library that) Outer0._private(_binaryRepr:
    use Alu
    check stringConcat(s1:this.binaryRepr(),s2:that)
    error void)

  type method Outer0 empty() Outer0._private(_binaryRepr:{
    '@stringU
    '
    })
  
  'NUMBERS:
  
  method Outer0 #0() this++{'@stringU
    '0
  }method Outer0 #1() this++{'@stringU
    '1
  }method Outer0 #2() this++{'@stringU
    '2
  }method Outer0 #3() this++{'@stringU
    '3
  }method Outer0 #4() this++{'@stringU
    '4
  }method Outer0 #5() this++{'@stringU
    '5
  }method Outer0 #6() this++{'@stringU
    '6
  }method Outer0 #7() this++{'@stringU
    '7
  }method Outer0 #8() this++{'@stringU
    '8
  }method Outer0 #9() this++{'@stringU
    '9
  }
    'LOWERCASE:
    
  method Outer0 #q() this++{'@stringU
    'q
  }method Outer0 #w() this++{'@stringU
    'w
  }method Outer0 #e() this++{'@stringU
    'e
  }method Outer0 #r() this++{'@stringU
    'r
  }method Outer0 #t() this++{'@stringU
    't
  }method Outer0 #y() this++{'@stringU
    'y
  }method Outer0 #u() this++{'@stringU
    'u
  }method Outer0 #i() this++{'@stringU
    'i
  }method Outer0 #o() this++{'@stringU
    'o
  }method Outer0 #p() this++{'@stringU
    'p
  }method Outer0 #a() this++{'@stringU
    'a
  }method Outer0 #s() this++{'@stringU
    's
  }method Outer0 #d() this++{'@stringU
    'd
  }method Outer0 #f() this++{'@stringU
    'f
  }method Outer0 #g() this++{'@stringU
    'g
  }method Outer0 #h() this++{'@stringU
    'h
  }method Outer0 #j() this++{'@stringU
    'j
  }method Outer0 #k() this++{'@stringU
    'k
  }method Outer0 #l() this++{'@stringU
    'l
  }method Outer0 #z() this++{'@stringU
    'z
  }method Outer0 #x() this++{'@stringU
    'x
  }method Outer0 #c() this++{'@stringU
    'c
  }method Outer0 #v() this++{'@stringU
    'v
  }method Outer0 #b() this++{'@stringU
    'b
  }method Outer0 #n() this++{'@stringU
    'n
  }method Outer0 #m() this++{'@stringU
    'm
  }
  
  'UPPERCASE:

   method Outer0 #Q() this++{'@stringU
    'Q
  }method Outer0 #W() this++{'@stringU
    'W
  }method Outer0 #E() this++{'@stringU
    'E
  }method Outer0 #R() this++{'@stringU
    'R
  }method Outer0 #T() this++{'@stringU
    'T
  }method Outer0 #Y() this++{'@stringU
    'Y
  }method Outer0 #U() this++{'@stringU
    'U
  }method Outer0 #I() this++{'@stringU
    'I
  }method Outer0 #O() this++{'@stringU
    'O
  }method Outer0 #P() this++{'@stringU
    'P
  }method Outer0 #A() this++{'@stringU
    'A
  }method Outer0 #S() this++{'@stringU
    'S
  }method Outer0 #D() this++{'@stringU
    'D
  }method Outer0 #F() this++{'@stringU
    'F
  }method Outer0 #G() this++{'@stringU
    'G
  }method Outer0 #H() this++{'@stringU
    'H
  }method Outer0 #J() this++{'@stringU
    'J
  }method Outer0 #K() this++{'@stringU
    'K
  }method Outer0 #L() this++{'@stringU
    'L
  }method Outer0 #Z() this++{'@stringU
    'Z
  }method Outer0 #X() this++{'@stringU
    'X
  }method Outer0 #C() this++{'@stringU
    'C
  }method Outer0 #V() this++{'@stringU
    'V
  }method Outer0 #B() this++{'@stringU
    'B
  }method Outer0 #N() this++{'@stringU
    'N
  }method Outer0 #M() this++{'@stringU
    'M
  }method Outer0 #%() this++{'@stringU
    '%
  }method Outer0 #$() this++{'@stringU
    '$
  }    
  'OPERATORS:
   method Outer0 <() this++{'@stringU
    '<
  }method Outer0 >() this++{'@stringU
    '>
  }method Outer0 !() this++{'@stringU
    '!
  }method Outer0 ~() this++{'@stringU
    '~
  }method Outer0 +() this++{'@stringU
    '+
  }method Outer0 *() this++{'@stringU
    '*
  }method Outer0 /() this++{'@stringU
    '/
  }method Outer0 -() this++{'@stringU
    '-
  }method Outer0 &() this++{'@stringU
    '&
  }method Outer0 |() this++{'@stringU
    '|
  }
  
  'SYMBOLS- Parenthesis:

   method Outer0 #oRound() this++{'@stringU
    '(
  }method Outer0 #cRound() this++{'@stringU
    ')
  }method Outer0 #oSquare() this++{'@stringU
    '[
  }method Outer0 #cSquare() this++{'@stringU
    ']
  }method Outer0 #oCurly() this++{'@stringU
    '{
  }method Outer0 #cCurly() this++{'@stringU
    '}
  }method Outer0 #dQuote() this++{'@stringU
    '"
  }method Outer0 #sQuote() this++{'@stringU
    ''
  }method Outer0 #hQuote() this++{'@stringU
    '`
  }
  
  'SYMBOLS- Unused operators:
   method Outer0 #equal() this++{'@stringU
    '=
  }method Outer0 #qMark() this++{'@stringU
    '?
  }method Outer0 #hat() this++{'@stringU
    '^
  }method Outer0 #comma() this++{'@stringU
    ',
  }method Outer0 #semicolon() this++{'@stringU
    ';
  }method Outer0 #colon() this++{'@stringU
    ':
  }method Outer0 #dot() this++{'@stringU
    '.
  }method Outer0 #underscore() this++{'@stringU
    '_
  }method Outer0 #hash() this++{'@stringU
    '#
  }method Outer0 #at() this++{'@stringU
    '\u0040
  }method Outer0 #backslash() this++{'@stringU
    '\
  }method Outer0 #space() this++{'@stringU
    ' 
  }method Outer0 #newLine() this++{'@stringU
    '
    '
  }
}