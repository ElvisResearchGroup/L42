{(Library binaryRepr)<:S::ToS '  toPutAs private
  method Void #checkTrue() exception Void 
    using Alu
      check ifInt32EqualDo(n1:this.binaryRepr() n2:0N.binaryRepr())
      exception void
  type method Outer0 true() Outer0(binaryRepr:1N.binaryRepr())
  type method Outer0 false() Outer0(binaryRepr:0N.binaryRepr())

  method Outer0 &(Outer0 that){
    if this (return that)
    return this
    }
  method Outer0 |(Outer0 that){
    if this (return this)
    return that
    }
  method Outer0 !(){
    if this (return Outer0.false())
    return Outer0.true()
    }
  method toS(){
    if this (return S"true")
    return S"false"
    }
  type method
  Outer0 fromS(S::ToS that){
    if that.toS()==S"true" (return Outer0.true())
    if that.toS()==S"false" (return Outer0.false())
    error ParseFail""
    }
  ParseFail:{
  '@private
  (S inner) <:S::ToS '<:Guard TODO: is circular to use Guard, an embrowdery should make a fix with a sum
  type method Outer0 #stringParser(Library that) Outer0(S.#stringParser(that))
  type method Outer0 (S::ToS that) Outer0(inner:that.toS())
  method S ~() this.inner()
  method toS()  S"ParseFail["[this.inner()]"]"
  method Library binaryRepr() this.inner().binaryRepr()
  method Bool != (Outer0 that) !(this==that)
  method Bool == (Outer0 that) this.inner()==that.inner()
  method Bool equals(Any that) {
    with that (on Outer0 return this==that)
    return Bool.false()
    }
  }
}