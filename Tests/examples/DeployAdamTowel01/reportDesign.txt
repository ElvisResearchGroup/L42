Many top level interfaces?

Guard: exception as Guard bureocracy, error as Guard detection
-is a check guarenteed to be performed, program logic can rely on this being enforced.
  as exceptions, Guards objects are a way to report/guard complex operations,
 where checking the shape of the input can be unconvenient.
as errors, they represent precondition violations. 
Turning an exception Gard into an error Gard
 is equivalent of declaring that such misuse should not happen (blame on the caller),
 still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed

--compose must enter in refactor as just a type method
Guard:{
  Operation: if "this" is unfit
  Parameter:
  Precondition: if it is about multiple parameters
  }
Refactor::Guard::{ all the metaprogramming guards
  ' like MetaprogrammingGuard: for composition operators
'all misuse?
SourceUnfit:
ClassClash:
MethodClash:
InvalidOnTopLevel:
MemberUnavailable:
PrivacyCoupuled:
NSBMissing:
}

System::Guard{
  PluginFailure:'to report the inability of a plugin to act
  Memory/Stack overflow? how to handle them?
  }



 'assert is a class, offers functionalities
Assert: only as error, logic error detected
-can be omitted for perfomance
Assert::ObservedBug:
 'if this happens, then the programmer had wrong assumption on the code behaviour.
 'is about logic errors
Assert::CodeNotReachable: 
 'in an ideal world, a static analysis would verify this
Assert::CatchCaseNotReachable:
 code not reachable can wrap a Report (often a Misuse) to declare that such Report should
    happen (responsabilty on the code logic)
Assert::NotImplementedYet:
Assert::AssertionFailure: the interface

