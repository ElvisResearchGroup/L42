{
  ListCode: { class method Library () ... }

  class method
  Library list(class Any that)
    SafeOperatorsAccess.redirect(ListCode(),srcBinaryRepr:S"Elem".binaryRepr(),dest:that)
    
  class method
  Library eqList(class Any that) (
    lib=SafeOperatorsAccess.compose(left:ListCode(),right:ListCodeEq())
    SafeOperatorsAccess.redirect(lib,srcBinaryRepr:S"Elem".binaryRepr(),dest:that)
    )
  
  ListCodeEq:{ class method Library() {
    Elem:{<:Concept.Equals}
    class method This #begin()
    method This #add(Elem that)
    method This #end()
    method mut Iterator vals()
    Iterator:{
      mut method Void #next() exception Void
      read method Void #checkEnd()
      read method Elem #inner()
      read method Void #close()
      }
    method 
    Bool contains(Elem that){
      with e in this.vals() (
        if e.equals(that) (return Bool.true()) 
        )
      return Bool.false()
      }
    method
    This remove(Elem that)
      This[with e in this.vals() (if !e.equals(that) (use[e]))]      
    method
    Bool ==(This that){
      with e1 in this.vals(), e2 in that.vals() (
        if !e1.equals(e2) (return Bool.false())
        )
      return Bool.true()
      }
    method
    Bool equals(Any that){
      with that (on This return this==that)
      return Bool.false()
      }
    }
  } 
}