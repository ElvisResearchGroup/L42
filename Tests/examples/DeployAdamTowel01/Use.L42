{ (Libs myLibs)
  Libs:'  toPutAs private
    LinkedList.list(Library)
    
  method
  Outer0 #add(Library that)
    Outer0(myLibs:this.myLibs().#add(that))
    
  type method
  Outer0 #begin()
    Outer0(myLibs:Libs[])

  method
  Outer0 #end() this

  method
  Library << (Library that) exception Report::ClassClash,Report::MethodClash{
    i=Introspection(lib:i)
    var acc=that
    with lib in myLibs().vals() (
      libi=this.renameSupers(lib, intro:i) 
      acc:=IntrospectionPlugin.sumLib(l1:acc,l2:libi)
      )
    with lib in myLibs().vals() (
      acc:=this.makePrivateSupers(lib,acc:acc,intro:i)
      )
    return acc
    }

  method '  toPutAs private
  Library renameSupers(Library that,Introspection(lib) intro) exception Report::ClassClash, Report::MethodClash {
    return SafeOperators.compose(left:left,right:right)
    catch error err (on Library (
      report=Introspection::Record(lib:err) 'Introspection(lib:err).report()
      with x=report"Kind" (
        case x== S"ClassClash"  (exception Report::ClassClash(report:report))
        case x== S"MethodClash"  (exception Report::MethodClash(report:report))
        default error err)))
    }
  method
  Library accumulate(Library l1,Library l2) exception Report::ClassClash,Report::MethodClash{
    return this.liftErrorsCompose(left:l1,right:l2)
    catch exception x (on Any (
      if !this.resolver().isPresent() (error x) 'boh, why is not working? with exception
      ms=Introspection(lib:~this.resolver()).methods()
      Selector name=ms.pop().pop().top().selector()
      Selector nameLeft=ms.pop().top().selector()
      Selector nameRight=ms.top().selector()
      Debug(S"name is: "++name)
      Debug(S"nameLeft is: "++nameLeft)
      Debug(S"nameRight is: "++nameRight)
      error Report::NotImplementedYet"DO ADAPTER"
      'Name name=Name.#stringParser(_name.binaryRepr())
      'Name nameLeft=Name.#stringParser(_nameLeft.binaryRepr())
      'Name nameRight=Name.#stringParser(_nameRight.binaryRepr())
      'l1A=Adapt[name into:nameLeft;]<<l1
      'l2A=Adapt[name into:nameRight;]<<l2
      'var result=IntrospectionPlugin.sumLib(l1:l1A,l2:l2A)
      'result:=IntrospectionPlugin.sumLib(l1:!this.resolver(),l2:result)
      'result:=MakePrivate(nameLeft into:result)
      'result:=MakePrivate(nameRight into:result)
      'return result
      ))
    }
  method Outer0 ++ (Outer0 that) {
    list=this.myLibs()++that.myLibs()
    Resolver res={
      if that.resolver().isPresent() (return that.resolver())
      return this.resolver()
      }
    return Outer0(resolver:res, myLibs:list)
    }
  }