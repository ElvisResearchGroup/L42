{ (Libs myLibs)
  Libs:'  toPutAs private
    LinkedList.list(Library)
    
  method
  Outer0 #add(Library that)
    Outer0(myLibs:this.myLibs().#add(that))
    
  type method
  Outer0 #begin()
    Outer0(myLibs:Libs[])

  method
  Outer0 #end()
    Outer0(myLibs:this.myLibs().#end())

  method
  Library << (Library that) exception Report::ClassClash,Report::MethodClash{
    i=Introspection(lib:that)
    var map=SrcDests[]
    var acc={}
    with lib in this.myLibs().vals(), index in 0N.vals() (
      var libi=lib
      with ren in this.renameMap(lib,prefix:S"#"[index]"", intro:i).vals() (
        map:=map.#add(ren)
        libi:=Refactor::RenameSelector[ren.src() of:ren.path() to:ren.dest()]<<libi
        )
      acc:=Refactor.compose(left:acc,right:libi)
      )
    acc:=Refactor.compose(left:acc,right:that)
    with mapi in map.vals() (
      acc:=Refactor::MakePrivateSelector[mapi.dest() of:mapi.path()]<<acc
      )
    return acc
    catch exception (on Report::MemberUnavailable error Report::CodeNotReachable())
    }

  SrcDest:{(Path path, Selector src,Selector dest)}
  SrcDests:LinkedList.list(SrcDest)
  method '  toPutAs private
  SrcDests renameMap(Library that,S prefix,Introspection::NestedClass intro) {
    var acc=SrcDests[]
    path=intro.pathFromRoot()
    thatI=Introspection(lib:that, path:path)
    catch exception (on Report::MemberUnavailable return SrcDests[])
    with meth in intro.methods().vals() (
      case !meth.isPrivate() (
        destSel=Selector.fromS(prefix++meth.selector().toS())
        ' if the selector can not be prefixed
        catch error (on Guard void)
        meth2=thatI.methodFromSelector(meth.selector())
        catch exception (on Report::MemberUnavailable void)
        if !meth2.isPrivate() (
          acc:=acc.#add(SrcDest(path:path,src:meth.selector(),dest:destSel))
          )
        )
      )
    with nested in intro.nestedClasses().vals() (
      acc++=this.renameMap(that,prefix:prefix,intro:nested)
      )
    return acc
    }      
  method Outer0 ++ (Outer0 that)
    Outer0(myLibs:this.myLibs()++that.myLibs())
  }