{ _private(Library _binaryRepr)
<: Concept.ToS Concept.Equals Concept.Named'@private
  method myName()GetMyName(This)

  class method This #from(Library binaryRepr) This._private(_binaryRepr:binaryRepr)

  method Library binaryRepr() this._binaryRepr()

  method toS() this

  method
  S ++ (S that) S.#from(binaryRepr: use Alu
      check stringConcat(s1:this.binaryRepr(),s2:that.toS().binaryRepr())
      error void)

  method Bool != (This that) !(this==that)

  method
  Bool == (This that) {
    use Alu
      check ifStringEqualDo(s1:this.binaryRepr(),s2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method equals(that){
    with that (on This return this==that)
    return Bool.false()
    }

  method
  S (N start, N end)
    S.#from(binaryRepr:use Alu
      check stringSubstring(this.binaryRepr(),start:start.binaryRepr(),end:end.binaryRepr())
      error void )

  method
  S (N that) this(start:that, end:that+1N)

  method
  S (N start) this(start:start, end:this.size())

  method
  S (N end) this(start:0N, end:end)

  method
  Bool beginsWith(S that) this(end:that.size())==that

  method '@private
  N auxFirstIndexOf(S that) {
    var current=0N
    while current<this.size() (
      if this(start:current).beginsWith(that) (return current)
      current+=1N
      )
    return 0N-1N
    error This.subStringNotPresent(string:this,subString:that)
    }
  method
  N firstIndexOf(S that) { 'TODO: discuss if should be exception or error
    res=this.auxFirstIndexOf(that)
    if res>=0N (return res)
    error This.subStringNotPresent(string:this,subString:that)
    }
  class method Void subStringNotPresent(S string, S subString) void
  
  method
  Bool contains(S that){
    res=this.auxFirstIndexOf(that)
    'Debug(S"S.contains(this:"[this]" that:"[that]")="[res]"")
    if res>=0N (return Bool.true())
    return Bool.false()
    }
  method
  Bool isASCIILowerCase(N that)
    S"qwertyuiopasdfghjklzxcvbnm".contains(this(that))
  method
  Bool isASCIIUpperCase(N that) (
    'Debug(S"S.isASCIIUpperCase(this:"[this]" that:"[that]")")
    S"QWERTYUIOPASDFGHJKLZXCVBNM".contains(this(that))
    )
    
  method N size()
    N(_binaryRepr: use Alu
      check stringSize(this.binaryRepr())
      error void)

  class method
  S doubleQuote()
    S"
    '"
    "(0N)
  
  class method
  S nl()
    S"
    '
    "
  method
  S replace(S that, S into)
    S.#from(binaryRepr:use Alu
      check stringReplace(this.binaryRepr(),
        src:that.binaryRepr()
        dest:into.binaryRepr())
      error void)

  method
  SConcat #begin()
    SConcat(old:this,accumulator:S"")
    
  SConcat:{(S old,S accumulator)
    method
    SConcat #add(Concept.ToS that)
      SConcat(old:this.old(),
        accumulator:this.accumulator()++that.toS())
    method
    SConcat #add(Concept.ToS that, Concept.ToS separedBy) (
      var newAcc=that.toS()
      if this.accumulator()!=S"" (
        newAcc:=this.accumulator()++separedBy.toS()++newAcc
        )
      SConcat(old:this.old(),accumulator:newAcc)
      )
    method
    SConcat #end()
      this
    method mut S.SBuilder #builder()S.SBuilder.empty()
    method S #from(S.SBuilder builder)
      this.old()++this.accumulator()++S.#from(builder:builder)
    }
    
  SBuilder:...
  class method This #from(S.SBuilder builder) 
    This._private(_binaryRepr:builder.binaryRepr())
  class method mut S.SBuilder #builder() S.SBuilder.empty()
  }