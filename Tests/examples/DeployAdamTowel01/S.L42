{ _private(Library _binaryRepr)<: ToS '@private

  type method Outer0 #stringParser(Library that) Outer0._private(_binaryRepr:that)

  method Library binaryRepr() this._binaryRepr()

  ToS:{interface method S toS()}

  method toS() this

  method
  S ++ (ToS that) S.#stringParser(using Alu
      check stringConcat(s1:this.binaryRepr(),s2:that.toS().binaryRepr())
      error void)

  method Bool != (S that) !(this==that)

  method
  Bool == (S that) {
    using Alu
      check ifStringEqualDo(s1:this.binaryRepr(),s2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method
  S (N start, N end)
    S.#stringParser(using Alu
      check stringSubstring(this.binaryRepr(),start:start.binaryRepr(),end:end.binaryRepr())
      error void )

  method
  S (N that) this(start:that, end:that+1N)

  method
  S (N start) this(start:start, end:this.size())

  method
  S (N end) this(start:0N, end:end)

  method
  Bool beginsWith(S that) this(end:that.size())==that

  method
  N firstIndexOf(S that) {
    var current=0N
    while current<this.size() (
      if this(start:current).beginsWith(that) (return current)
      current+=1N
      )
    error SubstringNotPresent(string:this,subString:that)
    }
  SubstringNotPresent:{(S string, S subString)}

  method N size ()
    N(_binaryRepr: using Alu
      check stringSize(this.binaryRepr())
      error void)

  type method
  S doubleQuote()
    S"
    '"
    "(0N)

  method
  S replace(S that, S into)
    S.#stringParser(using Alu
      check stringReplace(this.binaryRepr(),
        src:that.binaryRepr()
        dest:into.binaryRepr())
      error void)

  }