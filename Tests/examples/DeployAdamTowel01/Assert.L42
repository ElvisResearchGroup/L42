{interface <:Message
NotImplementedYet:Message::$[]<<{<:Outer1}

ObservedBug:Message::$[]<<{<:Outer1}
  'if this happens, then the programmer had wrong assumption on the code behaviour.
  'is about logic errors

CodeNotReachable:Message::$[]<<{<:Outer1}
  'Can wrap a captured error/exception (often a Guard)
  'to declare that is a bug if such case 
  'happens (responsabilty on the code logic).
  'In an ideal world, a static analysis would verify this
  
$:{(N that)
  type method Outer0 #begin() Outer0(0N)
  method Void #end() void
  method Outer0 #add(Bool that){
    if that (return Outer0(this.that()+1N))
    error AssertMessage(text:S"Condition number "[this.that()]" failed")
    }
  method Outer0 #add(Bool that, Concept::ToS msg){
    if that (return Outer0(this.that()+1N))
    error AssertMessage(text:msg.toS()[S.nl()]"number:"[this.that()]" failed")
    }
  }
AssertMessage:Message::$[]<<{<:Outer1}
}