{'findMeIntrospection

type method
NestedClass(Library lib)(
  root=MirrorPr::Lib(lib:lib).introspectReport(root:root,path:Path"Outer0")
  catch exception x (on TargetUnavailable error S"UnreachableCode")
  root
  )

'type method
'NestedClass(type Any cls) NestedClass(mirror:MirrorPr::Class(lib:cls))

MirrorPr:... 'Todo:remove Pr later.


Record:'@private
  {(MirrorPr that)
  method S #stringParser(Library that) {
    path=Path.#stringParser(that)
    return this.that().introspectDocAsString(path:path)
    catch exception x (on TargetUnavailable error x )
    }
  method
  Doc docOf(Path path){
    with mirror=this.that() (
      on MirrorPr::Lib return Doc(
        SafeOperators.renameClass(mirror.lib(), src:path, dest:Path"Outer0")
        'This can not be done for circular reference Refactor::RenamePath[path to:Path"Outer0"]<<mirror.lib()
        )
      )
    error S"UnreachableCode"
    }
  'this is how I would like it to be
  'type method Member dispatch(NestedClass^ root,Path path,MirrorPr mirror, N memberN,Library report) {
  '  _report =Introspection(lib:report).report()
  '  with x=_report"MemberKind" (
  '    case x== S"NestedClass"  (return NestedClass(root:root,path:path,mirror:mirror,report:_report))
  '    case x== S"InterfaceImplementedMethod" (return Method(root:root,path:path,memberN:memberN,report:_report))
  '    case x== S"ImplementedMethod" (return Method(root:root,path:path,memberN:memberN,report:_report))
  '    case x== S"AbstractMethod" (return Method(root:root,path:path,memberN:memberN,report:_report))
  '    default error S"invalid member kind "++x
  '    )
  '  }
  'instead, I have to write this :-(
  RootForMember:'@private
    {interface method Member (NestedClass^ root)}
  NestedForMember:'@private
    {(Path path,MirrorPr mirror,Record _report)<:RootForMember
      method(root)NestedClass(root:root,path:this.path(),mirror:this.mirror(),report:this._report())}
  MethodForMember:'@private
    {(Path path,N memberN,Record _report)<:RootForMember
      method(root)Method(root:root,path:this.path(),memberN:this.memberN(),report:this._report())}
  type method Member dispatch(NestedClass^ root,Path path,MirrorPr mirror, N memberN,Library report) (
    _report =Introspection(lib:report).report()
    RootForMember result={ with x=_report"MemberKind" (
      case x== S"NestedClass" (
        return NestedForMember(path:path,mirror:mirror,_report:_report)
        )
      case x== S"InterfaceImplementedMethod" (
        return MethodForMember(path:path,memberN:memberN,_report:_report)
        )
      case x== S"ImplementedMethod" (
        return MethodForMember(path:path,memberN:memberN,_report:_report)
        )
      case x== S"AbstractMethod" (
        return MethodForMember(path:path,memberN:memberN,_report:_report)
        )
      default error S"invalid member kind "++x
      )}
    result(root:root)
    )
  }
Member:{interface}
Members:LinkedList.list(Member)
Method:...
Methods:LinkedList.list(Method)
NestedClass:...
NestedClasses:LinkedList.list(NestedClass)
Type:...
Types:LinkedList.list(Type)
}