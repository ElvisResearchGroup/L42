{'findMeIntrospection

type method
NestedClass(Library lib)(
  root=MirrorPr::Lib(lib:lib).introspectReport(root:root,path:Path"Outer0")
  catch exception x (on Report::MemberUnavailable error Report::CodeNotReachable())
  root
  )
type method
NestedClass(Library lib,Path path) exception Report::MemberUnavailable
  Outer0(lib:lib).nestedClassFromRoot(path)

'type method
'NestedClass(type Any cls) NestedClass(mirror:MirrorPr::Class(lib:cls))

MirrorPr:... 'Todo:remove Pr later.


Record:...
Member:{interface<:S::ToS}
Members:LinkedList.list(Member)
Method:...
Methods:LinkedList.list(Method)
NestedClass:...
NestedClasses:LinkedList.list(NestedClass)
Type:...
Types:LinkedList.list(Type)
}