{ _private(Library _binaryRepr, Annotations _annotations)<:Concept.ToS,Concept.Named '@private
  method myName()GetMyName(This)
  Annotation:{(Library _binaryRepr, S text, N index)<:Concept.ToS,Concept.Named
    method myName()GetMyName(This)
    method toS() this.text()
    method class Any referredClass() {
      return Introspection.Record(lib:this._binaryRepr()).that()
        .introspectDocPath(path:Path"This",annotationN:this.index())
      catch exception MetaGuard.NestedClassUnavailable x error Assert.CodeNotReachable"Doc1"(x)
      catch exception Void x error Assert.ObservedBug"Plugin introspection bug"
      }
    method Bool hasReferredClass() (
      res=this.text()!=S"" &
        this.text().isASCIIUpperCase(0N)
      'Debug(S"Doc.hasReferredClass(this:"[this]")="[res]"")
      res
      )
    }
  Annotations:Collections.vector(of:Annotation)
  class method This (Library that) (
    Annotations res=(
      result=Annotations.empty()
      var N aN=1N
      while Bool.true() (' to be able to break
        result.add(right:Annotation(
          _binaryRepr:that,
          text:Introspection.Record(lib:that).that()
            .introspectDocAsString(path:Path"This",annotationN:aN)
          index:aN
          ))
        aN+=1N
        )
      catch exception MetaGuard.NestedClassUnavailable x error Assert.CodeNotReachable"Doc2"(x)
      result
      )
    This._private(_binaryRepr:that, _annotations:res)
    )
  class method mut S.SBuilder #builder()S.SBuilder.empty()
  class method This #from(S.SBuilder builder)
    This(builder.binaryRepr())
  method Library binaryRepr() this._binaryRepr()


  method toS() {
    return Introspection.Record(lib:this._binaryRepr()).that()
      .introspectDocAsString(path:Path"This")
    catch exception MetaGuard.NestedClassUnavailable x error Assert.CodeNotReachable"Doc3"(x)
   }
   method Annotations annotations()this._annotations()
  }