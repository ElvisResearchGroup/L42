{'findMeReport
Type:{(Introspection root,Outer3::Path path, N memberN, N typeN,Introspection report)}

Parameter:{(Introspection root,Outer3::Path path, N memberN, N typeN,Introspection report)}

Path:{'findMePath
  (Introspection root,Outer3::Path path,Introspection report)
  method S classKind() this.report()"ClassKind"
  }

Method:{(Introspection root,Outer3::Path path, N memberN,Introspection report)<:Member
  method
  Selector key()
    Selector.#stringParser(this.report()"Key".binaryRepr())
  method'need to be called only on methodWithType
  Parameters parameters()
  }

NestedClass:{(Introspection root,Outer3::Path path, N memberN,Introspection report)<:Member
  }

type method Member dispatch(Introspection root,Outer2::Path path, N memberN,Library report) {
  _report =Introspection(lib:report)
  with x=_report"MemberKind" (
    case x== S"NestedClass"  (return NestedClass(root:root,path:path,memberN:memberN,report:_report))
    case x== S"InterfaceImplementedMethod" (return Method(root:root,path:path,memberN:memberN,report:_report))
    case x== S"ImplementedMethod" (return Method(root:root,path:path,memberN:memberN,report:_report))
    case x== S"AbstractMethod" (return Method(root:root,path:path,memberN:memberN,report:_report))
    default error S"invalid member kind "++x
    )
  }

Member:{interface}
Members:LinkedList.list(Member)
Methods:LinkedList.list(Method)
NestedClasses:LinkedList.list(NestedClass)
Parameters:LinkedList.list(Parameter)
}