constructor: Introspection(Library lib)  and Introspection(type Any cls) 

1  method Report::Path query(Path path)
2  method Report::Member query(Path path, N memberNum)
3  method Report::Type query(Path path, Report::Method method, N parameterNum)
4  method Report::Type query(Path path, Report::Method method, N exceptionNum)
//NO, PUT IN REPORT return type? 5  method Report::Type query(Path path, Report::Method method)

1  method Report::Method query(Path path, Selector selector)
//Ok to remove, but need to add firstIndexOf in lists! 2  method Report::Type query(Path path, Selector selector, N parameterName)
//3  method Report::Type query(Path path, Selector selector, N exceptionNum)
//4  method Report::Type Path queryReturnType(Path path, Selector selector)

1  method Report::Members queryMembers(Path path)
2  method Report::Methods queryMethods(Path path)
3  method Report::NestedClasses queryNestedClasses(Path path)
4  method Report::Types queryExceptions(Path path, Report::Method method)//or selector?
5  method Report::Types queryParameterTypes(Path path, Report::Method method)//or selector?

16  method Report::Method Path queryConstructor(Path path)


Report:{

  Path:{(
    Doc doc 'added!!
    S classKind
    N memberNumber
    N implementedNumber
    S allAsString
    )}

  Member:{interface}

  Method:{(
    Doc doc
    S thisMdf
    Selector key
    N exceptionNumber
    N parameterNumber
    S memberKind
    S allAsString
    )<:Member}

  NestedClass:{(
    Doc doc
    Path key
    S allAsString
    )<:Member}

  Type:{(
    S typeKind '{InternalNormal,ExternalNormal,InternalAlias,ExternalAlias, InternalAliasUnresolvable,ExternalAliasUnresolvable,InternalExternalAlias}
    S mdf
    S resolvedMdf ' "" on *Normal
    Path iPath 'error on External* 
    type Any ePath 'error on Internal*
    Path iResolvedPath 'error on ExternalAlias, InternalExternalAlias
    type Any eResolvedPath' error on InternalAlias
    Bool partial
    Bool resolvedPartial 'false on *Normal and *Unresolvable
    S suffix' "" on *Normal
    Doc doc
    S allAsString
    )}
  }


2*  Selector s s.name(N), s.names()

iterare sui campi -> meth name+ names(), and parameterTypes

Plugin: isValidPath, isValidSelector
























------------
Or, with reports as internal pointers:
----------
Introspection:{
  Member:{interface}
  NestedClass:{<:Member
    method NestedClass root()
    method Doc nestedDoc()'empty for Outer0
    method Doc doc() 'of the library literal
    method Path pathFromRoot() ' invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
    method type Any externalType() 'if the corresponding library litera is binded, it is the corresponding metaclass.
    method S classKind()
    method S allAsString()  'equal to libraryLiteralAsString for Outer0 
    method S libraryLiteralAsString()    
    type method Outer0 (Library lib)
    type method Outer0 (Library lib,Path path) exception TargetUnavailable
    type method Outer0 (type Any cls)    
    method Members members()
    method Methods methods()
    method NestedClasses nestedClasses()
    method Types implementedInterfaces()
    method Method constructor()    
    method Method method(Selector that) exception TargetUnavailable 
    method NestedClass nestedClassFromRoot(Path that) exception TargetUnavailable 
    }
    
  Method:{<:Member
    method NestedClass root()
    method Doc doc()
    method S thisMdf()
    method Path pathFromRoot() 'what for introspection on type Any?
    method Selector selector()
    method S memberKind()
    method S allAsString()
    method Type returnType()
    method Types exceptions()
    method Types parameterTypes()    
    }
  
  Type:{
    method NestedClass root()
    method S typeKind() '{Normal,Alias,AliasUnresolvable}
    method S mdf()
    method NestedClass referencedPath()
    method NestedClass resolvedReferencedPath() 'error on AliasUnresolvable
    method Bool partial()
    method Bool resolvedPartial() 'error on Normal
    method S suffix()  'error on Normal
    method Doc doc()
    method S allAsString()
    }
    Members: ...
    Methods: ...
    NestedClasses: ...
    Types:...
  }