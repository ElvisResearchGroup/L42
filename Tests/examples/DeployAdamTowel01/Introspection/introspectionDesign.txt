Introspection:{
  type method Outer0 (Library lib)
  type method Outer0 (Library lib,Path path) exception TargetUnavailable
  type method Outer0 (type Any cls)    

  Member:{interface}
  NestedClass:{<:Member
    method NestedClass root()
    method Doc nestedDoc()' error  for Outer0
    method Doc doc() 'of the library literal
    method Path pathFromRoot() ' invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
    method type Any externalType() ' explanation to improve if the corresponding library litera is binded, it is the corresponding metaclass.
    method S classKind()
    method S allAsString()  'just the library literal 
    method S preamble() ' nested name, colon and documentation, error if Outer0    
    method Members members()
    method Methods methods()
    method NestedClasses nestedClasses()
    method Types implementedInterfaces()
    method Method constructor()    
    method Method method(Selector that) exception TargetUnavailable 
    method NestedClass nestedClassFromRoot(Path that) exception TargetUnavailable 
    }
    
  Method:{<:Member
    method NestedClass root()
    method Doc doc()
    method S thisMdf()
    method Path pathFromRoot()' invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
    method Selector selector()
    method S memberKind()
    method S allAsString()
    method Type returnType()
    method Types exceptions()
    method Types parameterTypes()    
    }
  
  Type:{
    method NestedClass root()
    method S typeKind() '{Normal,Alias,AliasUnresolvable}
    method S mdf()
    method NestedClass referencedPath()
    method NestedClass resolvedReferencedPath() 'error on AliasUnresolvable
    method Bool partial()
    method Bool resolvedPartial() 'error on Normal
    method S suffix()  'error on Normal
    method Doc doc()
    method S allAsString()
    }
    Members: ...
    Methods: ...
    NestedClasses: ...
    Types:...
  }