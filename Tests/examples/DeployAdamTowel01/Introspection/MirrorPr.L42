{interface
  method
  NestedClass introspectReport(NestedClass^ root,Path path) exception Report::MemberUnavailable
  method
  Member introspectReportMember(NestedClass^ root,Path path, N memberN) exception Report::MemberUnavailable,Void
  method
  Type introspectReportType(NestedClass^ root,Path path, N memberN, N typeN) exception Report::MemberUnavailable,Void
  method
  S introspectDocAsString(Path path) exception Report::MemberUnavailable
  method
  S introspectDocAsString(Path path, N annotationN) exception Report::MemberUnavailable,Void
  method
  type Any introspectDocPath(Path path, N annotationN) exception Report::MemberUnavailable,Void

  Lib:{(Library lib)<:Outer1
    method
    introspectReport(root, path) (
      result=NestedClass(root:root,path:path,mirror:this,record:Record(Lib(lib:
        using SafeOperators
          check introspectLibraryReport(this.lib(), path:path.binaryRepr())
          error Report::PluginFailure"SafeOperators.introspectLibraryReport")))
      catch error x (on Library exception Report::MemberUnavailable(record:Record(lib:x)))
      result)

    method
    introspectReportMember(root,path,memberN) (
      result=Record.dispatch(root:root,path:path,mirror:this,memberN:memberN,record:
        using SafeOperators
          check introspectLibraryReportMember(this.lib(), path:path.binaryRepr(),memberN:memberN.binaryRepr())
          exception void)
      catch error x (on Library exception Report::MemberUnavailable(record:Record(lib:x)))
      result)

    method
    introspectReportType(root,path,memberN,typeN) (
      result=Type(root:root,path:path,memberN:memberN,typeN:typeN,record: Record(Lib(lib:
        using SafeOperators
          check introspectLibraryReportType(this.lib()
            path:path.binaryRepr()
            memberN:memberN.binaryRepr()
            typeN:typeN.binaryRepr())
          exception void)))
      catch error x (on Library exception Report::MemberUnavailable(record:Record(lib:x)))
      result)

    method
    introspectDocAsString(path,annotationN) (
      result=S.#stringParser(using SafeOperators
        check introspectLibraryDocAsString(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        exception void)
      catch error x (on Library exception Report::MemberUnavailable(record: Record(lib:x)))
      result)

    method
    introspectDocAsString(path) (
      result=S.#stringParser(using SafeOperators
        check introspectLibraryDocAsString(this.lib(), path:path.binaryRepr(),annotationN:0N.binaryRepr())
        error Report::PluginFailure"SafeOperators.introspectLibraryDocAsString")
      catch error x (on Library exception Report::MemberUnavailable(record:Record(lib:x)))
      result)

    method
    introspectDocPath(path,annotationN) (
      type Any result=using SafeOperators
        check introspectLibraryDocPath(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        error Report::PluginFailure"SafeOperators.introspectLibraryDocPath"
      catch error x (on Library exception Report::MemberUnavailable(record:Record(lib:x)))
      result)
    }


  Class:{(type Any lib)<:Outer1
  method
    introspectReport(root, path) (
      record=Record(lib:using SafeOperators
        check introspectTypeReport(this.lib(), path:path.binaryRepr())
        error Report::PluginFailure"SafeOperators.introspectTypeReport")
      realRootType=record.docOf(path:Path"MyClass").annotations().top().referredClass()
      result=NestedClass(root:result,path:Path"Outer0",mirror:Outer0(lib:realRootType),record: record)
      catch error x (on Library exception Report::MemberUnavailable(record:Record(lib:x)))
      result)

    method
    introspectReportMember(root,path,memberN) (
      result=Record.dispatch(root:root,path:path,mirror:this,memberN:memberN,record:
        using SafeOperators
          check introspectTypeReportMember(this.lib(), path:path.binaryRepr(),memberN:memberN.binaryRepr())
          exception void)
      catch error x (on Library exception Report::MemberUnavailable(record:Record(lib:x)))
      result)

    method
    introspectReportType(root,path,memberN,typeN) (
      result=Type(root:root,path:path,memberN:memberN,typeN:typeN,record: Record(Lib(lib:
        using SafeOperators
          check introspectTypeReportType(this.lib()
            path:path.binaryRepr()
            memberN:memberN.binaryRepr()
            typeN:typeN.binaryRepr())
          exception void)))
      catch error x (on Library exception Report::MemberUnavailable(record: Record(lib:x)))
      result)

    method
    introspectDocAsString(path,annotationN) (
      result=S.#stringParser(using SafeOperators
        check introspectTypeDocAsString(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        exception void)
      catch error x (on Library exception Report::MemberUnavailable(record: Record(lib:x)))
      result)

    method
    introspectDocAsString(path) (
      result=S.#stringParser(using SafeOperators
        check introspectTypeDocAsString(this.lib(), path:path.binaryRepr(),annotationN:0N.binaryRepr())
        error Report::PluginFailure"SafeOperators.introspectTypeDocAsString")
      catch error x (on Library exception Report::MemberUnavailable(record: Record(lib:x)))
      result)

    method
    introspectDocPath(path,annotationN) (
      type Any result=using SafeOperators
        check introspectTypeDocPath(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        error Report::PluginFailure"SafeOperators.introspectTypeDocPath"
      catch error x (on Library exception Report::MemberUnavailable(record: Record(lib:x)))
      result)
    }
  }