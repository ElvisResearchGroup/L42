{interface <:Concept.ToS
  method
  NestedClass introspectReport(fwd NestedClass root,Path path) exception MetaGuard.NestedClassUnavailable
  method
  Member introspectReportMember(fwd NestedClass root,Path path, N memberN) exception MetaGuard.MemberUnavailable,Void
  method
  Type introspectReportType(fwd NestedClass root,Path path, N memberN, N typeN) exception MetaGuard.MemberUnavailable,Void
  method
  S introspectDocAsString(Path path) exception MetaGuard.NestedClassUnavailable
  method
  S introspectDocAsString(Path path, N annotationN) exception MetaGuard.NestedClassUnavailable,Void
  method
  class Any introspectDocPath(Path path, N annotationN) exception MetaGuard.NestedClassUnavailable, Void

  Lib:{(Library lib)<:This1
    method toS() Introspection(lib:this.lib()).toS()
    method
    introspectReport(root, path) (
      result=NestedClass(_root:root,path:path,mirror:this,record:Record(Lib(lib:
        use SafeOperators
          check introspectLibraryReport(this.lib(), path:path.binaryRepr())
          error System.Guard.PluginFailure"SafeOperators.introspectLibraryReport")))
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)

    method
    introspectReportMember(root,path,memberN) (
      result=Record.dispatch(root:root,path:path,mirror:this,memberN:memberN,record:
        use SafeOperators
          check introspectLibraryReportMember(this.lib(), path:path.binaryRepr(),memberN:memberN.binaryRepr())
          exception void)
      catch error Library x exception MetaGuard.DispatchMemberUnavailable(x) 
      result)

    method
    introspectReportType(root,path,memberN,typeN) (
      result=Type(root:root,path:path,memberN:memberN,typeN:typeN,record: Record(Lib(lib:
        use SafeOperators
          check introspectLibraryReportType(this.lib()
            path:path.binaryRepr()
            memberN:memberN.binaryRepr()
            typeN:typeN.binaryRepr())
          exception void)))
      catch error Library x exception MetaGuard.DispatchMemberUnavailable(x)
      result)

    method
    introspectDocAsString(path,annotationN) (
      result=S.#from(binaryRepr: use SafeOperators
        check introspectLibraryDocAsString(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        exception void)
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)

    method
    introspectDocAsString(path) (
      result=S.#from(binaryRepr: use SafeOperators
        check introspectLibraryDocAsString(this.lib(), path:path.binaryRepr(),annotationN:0N.binaryRepr())
        error System.Guard.PluginFailure"SafeOperators.introspectLibraryDocAsString")
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)

    method
    introspectDocPath(path,annotationN) (
      class Any result=use SafeOperators
        check introspectLibraryDocPath(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        error System.Guard.PluginFailure"SafeOperators.introspectLibraryDocPath"
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)
    }


  Class:{(class Any lib)<:This1
  method toS() Introspection(clazz:this.lib()).toS()
  method
    introspectReport(root, path) (
      record=Record(lib:use SafeOperators
        check introspectTypeReport(this.lib(), path:path.binaryRepr())
        error System.Guard.PluginFailure"SafeOperators.introspectTypeReport")
      realRootType=record.docOf(path:Path"MyClass").annotations().top().referredClass()
      result=NestedClass(_root:result,path:Path"This",mirror:This(lib:realRootType),record: record)
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)

    method
    introspectReportMember(root,path,memberN) (
      result=Record.dispatch(root:root,path:path,mirror:this,memberN:memberN,record:
        use SafeOperators
          check introspectTypeReportMember(this.lib(), path:path.binaryRepr(),memberN:memberN.binaryRepr())
          exception void)
      catch error Library x exception MetaGuard.DispatchMemberUnavailable(x)
      result)

    method
    introspectReportType(root,path,memberN,typeN) (
      result=Type(root:root,path:path,memberN:memberN,typeN:typeN,record: Record(Lib(lib:
        use SafeOperators
          check introspectTypeReportType(this.lib()
            path:path.binaryRepr()
            memberN:memberN.binaryRepr()
            typeN:typeN.binaryRepr())
          exception void)))
      catch error Library x exception MetaGuard.DispatchMemberUnavailable(x)
      result)

    method
    introspectDocAsString(path,annotationN) (
      result=S.#from(binaryRepr: use SafeOperators
        check introspectTypeDocAsString(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        exception void)
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)

    method
    introspectDocAsString(path) (
      result=S.#from(binaryRepr: use SafeOperators
        check introspectTypeDocAsString(this.lib(), path:path.binaryRepr(),annotationN:0N.binaryRepr())
        error System.Guard.PluginFailure"SafeOperators.introspectTypeDocAsString")
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)

    method
    introspectDocPath(path,annotationN) (
      class Any result=use SafeOperators
        check introspectTypeDocPath(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        error System.Guard.PluginFailure"SafeOperators.introspectTypeDocPath"
      catch error Library x exception MetaGuard.NestedClassUnavailable(record:Record(lib:x),lib:x)
      result)
    }
  }