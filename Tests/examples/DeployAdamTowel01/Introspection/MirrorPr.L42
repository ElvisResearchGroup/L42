{interface
  method
  NestedClass introspectReport(NestedClass^ root,Path path) exception Report::TargetUnavailable
  method
  Member introspectReportMember(NestedClass^ root,Path path, N memberN) exception Report::TargetUnavailable,Void
  method
  Type introspectReportType(NestedClass^ root,Path path, N memberN, N typeN) exception Report::TargetUnavailable,Void
  method
  S introspectDocAsString(Path path) exception Report::TargetUnavailable
  method
  S introspectDocAsString(Path path, N annotationN) exception Report::TargetUnavailable,Void
  method
  type Any introspectDocPath(Path path, N annotationN) exception Report::TargetUnavailable,Void

  Lib:{(Library lib)<:Outer1
    method
    introspectReport(root, path) (
      result=NestedClass(root:root,path:path,mirror:this,report:Record(Lib(lib:
        using SafeOperators
          check introspectLibraryReport(this.lib(), path:path.binaryRepr())
          error Report::PluginFailure"SafeOperators.introspectReport")))
      catch error x (on Library exception Report::TargetUnavailable(report:Record(lib:x)))
      result)

    method
    introspectReportMember(root,path,memberN) (
      result=Record.dispatch(root:root,path:path,mirror:this,memberN:memberN,report:
        using SafeOperators
          check introspectLibraryReportMember(this.lib(), path:path.binaryRepr(),memberN:memberN.binaryRepr())
          exception void)
      catch error x (on Library exception Report::TargetUnavailable(report:Record(lib:x)))
      result)

    method
    introspectReportType(root,path,memberN,typeN) (
      result=Type(root:root,path:path,memberN:memberN,typeN:typeN,report: Record(Lib(lib:
        using SafeOperators
          check introspectLibraryReportType(this.lib()
            path:path.binaryRepr()
            memberN:memberN.binaryRepr()
            typeN:typeN.binaryRepr())
          exception void)))
      catch error x (on Library exception Report::TargetUnavailable(report:Record(lib:x)))
      result)

    method
    introspectDocAsString(path,annotationN) (
      result=S.#stringParser(using SafeOperators
        check introspectLibraryDocAsString(this.lib(), path:path.binaryRepr(),annotationN:(1N+annotationN).binaryRepr())
        exception void)
      catch error x (on Library exception Report::TargetUnavailable(report:Record(lib:x)))
      result)

    method
    introspectDocAsString(path) (
      result=S.#stringParser(using SafeOperators
        check introspectLibraryDocAsString(this.lib(), path:path.binaryRepr(),annotationN:0N.binaryRepr())
        error Report::PluginFailure"SafeOperators.introspectLibraryDocAsString")
      catch error x (on Library exception Report::TargetUnavailable(report:Record(lib:x)))
      result)

    method
    introspectDocPath(path,annotationN) (
      type Any result=using SafeOperators
        check introspectLibraryDocPath(this.lib(), path:path.binaryRepr(),annotationN:annotationN.binaryRepr())
        error Report::PluginFailure"SafeOperators.introspectLibraryDocPath"
      catch error x (on Library exception Report::TargetUnavailable(report:Record(lib:x)))
      result)
    }


Class:{(type Any lib)<:Outer1
  method
  introspectReport(root,path) error Report::NotImplementedYet()
  method
  introspectReportMember(root, path, memberN) error Report::NotImplementedYet()
  method
  introspectReportType(root,path, memberN, typeN) error Report::NotImplementedYet()
  method
  introspectDocAsString(path) error Report::NotImplementedYet()
  method
  introspectDocAsString(path,annotationN) error Report::NotImplementedYet()
  method
  introspectDocPath(path,annotationN) error Report::NotImplementedYet()
  }
  }