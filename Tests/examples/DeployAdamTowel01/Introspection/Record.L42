{(MirrorPr that)
  type method
  Outer0(type Any clazz)
    Outer0(MirrorPr::Class(lib:clazz))
  type method
  Outer0 (Library lib)
    Outer0(MirrorPr::Lib(lib:lib))
    'Outer0(Introspection(lib:lib).mirror())
  method Void dbg()
    with x=this.that() (
      on MirrorPr::Lib Debug(lib:x.lib())
      default Debug(S"Sorry, can not print class mirrors")
      )

  method S #stringParser(Library that) {
    path=Path.#stringParser(that)
    return this.that().introspectDocAsString(path:path)
    catch exception x (on Report::MemberUnavailable error x )
    }
  method
  Doc docOf(Path path){
    with mirror=this.that() (
      on MirrorPr::Lib return Doc(
        SafeOperators.renameClass(mirror.lib(), src:path, dest:Path"Outer0")
        'This can not be done for circular reference Refactor::RenamePath[path to:Path"Outer0"]<<mirror.lib()
        )
      )
    error Report::CodeNotReachable()
    }
  'this is how I would like it to be
  'type method Member dispatch(NestedClass^ root,Path path,MirrorPr mirror, N memberN,Library record) {
  '  _report =Introspection(lib:report).record()
  '  with x=_report"MemberKind" (
  '    case x== S"NestedClass"  (return NestedClass(root:root,path:path,mirror:mirror,record:_report))
  '    case x== S"InterfaceImplementedMethod" (return Method(root:root,path:path,memberN:memberN,record:_report))
  '    case x== S"ImplementedMethod" (return Method(root:root,path:path,memberN:memberN,record:_report))
  '    case x== S"AbstractMethod" (return Method(root:root,path:path,memberN:memberN,record:_report))
  '    default error Report::ObservedBug(S"invalid member kind "[x]"")
  '    )
  '  }
  'instead, I have to write this :-(
  RootForMember:' toPutAs private
    {interface method Member (NestedClass^ root)}
  RootForNested:' toPutAs private
    {(Path path,MirrorPr mirror,Record _report)<:RootForMember
      method(root) (
      'Debug(S"logRootForNested")
      path=Path.#stringParser(this._report()"Key".binaryRepr())
      NestedClass(root:root,path:path,mirror:this.mirror(),record: this._report())
      )}
  RootForMethod:' toPutAs private
    {(Path path,N memberN,Record _report)<:RootForMember
      method(root) (
        'Debug(S"logRootForMethod")
        Method(root:root,path:this.path(),memberN:this.memberN(),record:this._report())
        )}
  type method Member dispatch(NestedClass^ root,Path path,MirrorPr mirror, N memberN,Library record) (
    _report =Record(lib:record)
    'Debug(S"MemberKind(in dispatch) is"[_report]"MemberKind")
    'Debug(S"ReportAsString is ")
    'Debug(lib: record)
    RootForMember result={ with x=_report"MemberKind" (
      case x== S"InterfaceImplementedMethod" (
        return RootForMethod(path:path,memberN:memberN,_report:_report)
        )
      case x== S"ImplementedMethod" (
        return RootForMethod(path:path,memberN:memberN,_report:_report)
        )
      case x== S"AbstractMethod" (
        return RootForMethod(path:path,memberN:memberN,_report:_report)
        )
      case x== S"NestedClass" (
        return RootForNested(path:path,mirror:mirror,_report:_report)
        )

      default error Report::ObservedBug(S"invalid member kind "[x]"")
      )}
    result(root:root)
    )
  }