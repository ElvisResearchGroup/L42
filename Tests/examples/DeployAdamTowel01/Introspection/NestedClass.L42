{'findMeNestedClass
(NestedClass root,Path path,Record nestedClassReport, Record pathReport)<:Member

method 'empty for Outer0
Doc nestedDoc()(
  if this.path()==Path"Outer0" (
    error UnsupportedOperation(target:this,
      selector:Selector"nestedDoc()", reason:S"The NestedClass Object refers to Outer0"
    )
  this.nestedClassReport().docOf(path:Path"Doc")
  )
method 'of the library literal
Doc doc() this.pathReport().docOf(path:Path"Doc")

method Path pathFromRoot() this.path() ' invariant NestedClass(...).nestedClassFromRoot(path).pathFromRoot()==path
method type Any externalType(){
  if this.path()!=Path"Outer0" (
    error UnsupportedOperation(target:this,
      selector:Selector"externalType()",reason:S"The NestedClass Object refers to "++this.path()
      )
  with mirror=this.mirror() (
    on Mirror::Class return mirror.lib()
    default error UnsupportedOperation(target:this,
      selector:Selector"externalType()",reason:S"The NestedClass Object is unbound"
      )
    )
  }

method S classKind() this.pathReport()"ClassKind"
method S allAsString() this.pathReport()"AllAsString"  'just the library literal 
method S preamble() this.nestedClassReport()"AllAsString"' nested name, colon and documentation, error if Outer0    
method
Members members() (
  var result=Members[]
  var mN=1N
  while Bool.true() (' to be able to break
    result:=result.#add(this.mirror()
      .introspectReportMember(root:this,path:that,memberN:mN))
    mN+=1N
    )
  result)
  
method
Methods methods()
  Methods[with m in this.members(that).vals() ( on Method m)]

method
NestedClasses nestedClasses(Path that)
  NestedClasses[with m in this.members(that).vals() ( on NestedClass m)]

method Types implementedInterfaces() (
  var result=Types[]
  var tN=-1N
  while Bool.true() (' to be able to break
    result:=result.#add(this.mirror()
      .introspectReportType(root:this,path:that,memberN:0N,typeN:tN))
    tN-=1N
    )
  result)

method Method constructor()  error S"NotImplementedYet"
method Method method(Selector that) exception TargetUnavailable  error S"NotImplementedYet"
method NestedClass nestedClassFromRoot(Path that) exception TargetUnavailable  error S"NotImplementedYet"

}
