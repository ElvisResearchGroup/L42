{
' exception as Guard bureocracy, error as Guard detection
'-is a check guarenteed to be performed, program logic can rely on this being enforced.
'  as exceptions, Guards objects are a way to report/guard complex operations,
' where checking the shape of the input can be unconvenient.
'as errors, they represent precondition violations. 
'Turning an exception Gard into an error Gard
' is equivalent of declaring that such misuse should not happen (blame on the caller),
' still, there is no bug in the program at this stage. Is legit for the caller to try and be blamed

interface<:S::ToS 'all other guards should implement this one
Operation:'if "this" is unfit
  StringableU[]<<{<:Guard method Void invariant() void }
Parameter:' if a parameter is unfit
  StringableU[]<<{<:Guard method Void invariant() void }
Precondition:' if it is about multiple parameters
  StringableU[]<<{<:Guard method Void invariant() void }

}