{
  Squares:'@private
    {type method
    Library < (Library that) exception MethodClash,ClassClash
      Compose[that]<{
        type method
        type Outer0 begin() Outer0
        method
        Outer0 end() this
        }
    }
  Redirect:Squares<{#add(Path that, type Any to)
    method
    Library < (Library that)exception TargetUnavailable,InvalidOnTopLevel,SourceUnfit,MethodClash{
      return SafeOperators.redirect(that,src:this.that(),dest:this.to())
      catch error err (on Library (
        mirror=Introspection::MirrorLibrary(lib:err)
        with x=Introspection(mirror,p:Path"Kind") (
          case x== S"TargetUnavailable"  (exception TargetUnavailable(mirror:mirror))
          case x== S"InvalidOnTopLevel"  (exception InvalidOnTopLevel(mirror:mirror))
          case x== S"MethodClash"  (exception MethodClash(mirror:mirror))
          case x== S"SourceUnfit"  (exception SourceUnfit(mirror:mirror))
          default error err)))
      }
    }
  
}