{
  class method
  Library compose(Library left,Library right)
  exception MetaGuard.ClassClash, MetaGuard.MethodClash {
    return SafeOperators.compose(left:left,right:right)
    catch error Library err (
      MetaGuard.ClassClash(lift:err)
      MetaGuard.MethodClash(lift:err)
      error err)
    }
  class method
  Void checkTargetExists(Library that,Path path) exception MetaGuard.NestedClassUnavailable (
    unused=AddDocumentationPath(path doc:Introspection.Doc"JustToSeeIfItIsThere")<<that
    catch exception MetaGuard.InvalidOnTopLevel x
      error Assert.CodeNotReachable"Refactor4" //TODO: if you omit Assert. the error reporting is horrible
    void
    )
    
  Redirect:{(Path that, class Any to)
    method
    Library << (Library that)
    exception
        MetaGuard.NestedClassUnavailable,
        MetaGuard.InvalidOnTopLevel,
        MetaGuard.SourceUnfit,
        MetaGuard.MethodClash,
        MetaGuard.IncoherentRedirectMapping{
      return SafeOperators.redirect(that,src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)
        MetaGuard.InvalidOnTopLevel(lift:err)
        MetaGuard.SourceUnfit(lift:err)
        MetaGuard.MethodClash(lift:err)
        MetaGuard.IncoherentRedirectMapping(lift:err)
        error err)
      }
    }
  RenameSelector:{(Selector that, Path of, Selector to)
    method
    Library << (Library that)
    exception MetaGuard.MemberUnavailable,MetaGuard.MethodClash{
      return SafeOperators.renameMethod(that,path:this.of() src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        MetaGuard.MethodClash(lift:err)
        error err)
      }
    }
  RenamePath:{(Path that, Path to)
    method
    Library << (Library that)exception MetaGuard.NestedClassUnavailable,MetaGuard.MethodClash,MetaGuard.ClassClash{
      return SafeOperators.renameClass(that,src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)
        MetaGuard.MethodClash(lift:err)
        MetaGuard.ClassClash(lift:err)
        error err
        )
      }
    }
  RemoveImplementationSelector:{(Selector that, Path of)
    method
    Library << (Library that)
    exception MetaGuard.MemberUnavailable{
      return SafeOperators.removeImplementation(that,path:this.of(),selector:this.that())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        error err)
      }
    }
  MoveImplementationSelector:{(Selector that, Path of,Selector to)
    method
    Library << (Library that)
    exception MetaGuard.MemberUnavailable,MetaGuard.MethodClash{
      return SafeOperators.moveImplementation(that,path:this.of(),src:this.that(),dest:this.to())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)
        MetaGuard.MethodClash(lift:err)
        error err)
      }
    }
  RemoveImplementationPath:{(Path that)
    method
    Library << (Library that)
    exception 
        MetaGuard.NestedClassUnavailable,
        MetaGuard.PrivacyCoupuled{
      return SafeOperators.removeImplementation(that,path:this.that())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)MetaGuard.PrivacyCoupuled(lift:err)
        error err)
      }
    }
  AddDocumentationSelector:{(Selector that, Path of,Introspection.Doc doc)
    method
    Library << (Library that)
    exception MetaGuard.MemberUnavailable{
      return SafeOperators.addDocumentation(that,path:this.of() selector:this.that(),doc:this.doc())
      catch error Library err (     
        MetaGuard.DispatchMemberUnavailable(err)
        error err)
      }
    }
  AddDocumentationPath:{(Path that,Introspection.Doc doc)
    method
    Library << (Library that)
    exception
        MetaGuard.NestedClassUnavailable,
        MetaGuard.InvalidOnTopLevel{
      return SafeOperators.addDocumentation(that,path:this.that(),doc:this.doc())
      catch error Library err (
        MetaGuard.NestedClassUnavailable(lift:err)
        MetaGuard.InvalidOnTopLevel(lift:err)
        error err)
      }
    }
  MakePrivatePath:{(Path that)
    method
    Library << (Library that)
    exception 
        MetaGuard.MemberUnavailable,
        MetaGuard.InvalidOnTopLevel
      AddDocumentationPath(this.that(),doc:Introspection.Doc({//@private
        }))<<that
    }
  MakePrivateSelector:{(Selector that, Path of)
    method
    Library << (Library that)
    exception MetaGuard.MemberUnavailable
      AddDocumentationSelector(this.that() of:this.of() doc:Introspection.Doc({//@private
        }))<<that
    }
  
  SumMethods:{
    (Selector that,Selector and, Path of, S over, Selector to)
    
    method
    Library << (Library that)
    exception
        MetaGuard.MemberUnavailable,
        MetaGuard.MethodClash,
        MetaGuard.ParameterMismatch{
      return SafeOperators.sumMethods(that,path:this.of() src1:this.that(),src2:this.and(), dest:this.to(),name:this.over())
      catch error Library err (
        MetaGuard.DispatchMemberUnavailable(err)MetaGuard.MethodClash(lift:err)
        MetaGuard.ParameterMismatch(lift:err)
        error err)
      }
    }
  Tools:...
  
}