{ _private(Library _binaryRepr) implements Concept.ToS Concept.Equals Concept.Named//@private
  method myName()GetMyName(This)

  class method
  This fromS(Concept.ToS that)
    This.#from(binaryRepr: that.toS().binaryRepr())

  class method This #from(S.SBuilder builder)
    This.#from(binaryRepr: builder.binaryRepr())

  class method mut S.SBuilder #builder() S.SBuilder.empty()

  class method
  This #from(Library binaryRepr) (
    use SafeOperators
      check ifInvalidDo(selector:binaryRepr)
      error This.parseError(S.#from(binaryRepr: binaryRepr))
    This._private(_binaryRepr:binaryRepr)
    )
  class method
  Any parseError(S that)
    S"Selector.UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"

  class method
  This from(S name,Strings names) {
    if names.isEmpty() (return This.fromS(name++S"()"))
    pars=S"("[with n in names.vals() (use[n++S","])]""
    return This.fromS(name++pars(end:pars.size()-1N)++S")")
    //This.fromS(name[pars(end:#-1N)]")")
    }
  method S nameAsField() {
    n=this.name()
    if n(0N)==S"#" (return n(start:1N))
    return n
    }
  method S prefixAsField() {
    if this.toS()(0N)==S"#" (return S"#")
    return S""
    }
  method Library binaryRepr() this._binaryRepr()


  method toS() S.#from(binaryRepr: this._binaryRepr())


  method Bool != (This that) !(this==that)

  method
  Bool == (This that) {
    use Alu
      check ifStringEqualDo(s1:this.binaryRepr(),s2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method equals(that){
    with that (on This return this==that)
    return Bool.false()
    }

  method
  Bool isOperator(){
    if this.name().size()==0N (return Bool.true() )
    return this.name()(0N)==S"#"
    }
  method
  S name() (
    str=this.toS()
    str(end:str.firstIndexOf(S"("))
    )

  method
  Strings names(){
    var S str=this.toS()
    str:=str(start:str.firstIndexOf(S"(")+1N, end:str.size()-1N)++S","
    // from foo(a,b,c) to a,b,c,
    result=Strings.empty()
    if str==S"," (return result)
    while str!=S"" (
      pos=str.firstIndexOf(S",")
      result.add(right:str(end:pos))
      str:=str(start:pos+1N)
      )
    return result
  }

  class method
  Selector fresh(Selector that) {
    var S name=that.name()
    if name==S"" (name:= S"fresh")
    fName=SafeOperators.freshName(name)
    var S tot=fName++S"("
    with n in that.names().vals() (
      tot++=n++S","
      )
    tot:=tot(start:0N end:tot.size()-1N)++S")"
    return Selector.fromS(tot)
    }
  //we still need to add check validity, and fields name, list parameters, and ways to add/remove parameters
  }