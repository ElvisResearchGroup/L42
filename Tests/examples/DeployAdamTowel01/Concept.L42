{
ToS:{interface
  read method S toS()
  }
Classable:{interface
  read method class Any classAny()
  //read method class This clazz()
  }
Named:{interface
  class method S myName() //className? merge with Classable?
  }
 //boxes: class capsule imm mut lent read & var novar
//but to avoid initialization/update cast: novar, capsule==lent
//class imm mut lent read
Wrapper:{interface read method Any inner() }
TypeWrapper:{interface read method class Any inner() }
ReadWrapper:{interface read method read Any inner() }
MutWrapper:{interface <:ReadWrapper mut method mut Any #inner()}
LentWrapper:{interface <:ReadWrapper mut method lent Any #inner()}

Equals:{interface
  read method Bool equals(read Any that)
  //read method Bool ==(read This that)
  }
//a<b == b>a
Comparable:{interface
  read method Bool greater(read Any that)
  //read method Bool >(read This that)
  }
Boollable:{interface
  read method Void #checkTrue() exception Void
  }
Decorator:{interface
  //method Library>>(Library that) exception MetaGuard(specific)
  //method Library decorate(Library that) exception MetaGuard I can link metaguard for circularity
  }
Contains:{interface
  //read method Bool >>(read Elem that)
  read method Bool contains(read Any that)
  }
Parsable:{interface
  //class method capsule This fromS(S that) exception Guard.Parameter(specific) invalid string
  //////class method capsule This #fromS(S that) exception Guard.Parameter
  }
Invariant:{interface
  read method // can throw error or return false, as more opportune
  Bool invariant()
  }
RandomAccess:{interface
  //read method read Elem (N that)
  //mut method mut Elem #(N that)
  read method read Any get(N that)
  mut method mut Any #get(N that)
  }
//RandomUpdate:{interface
  //mut method Void (N that, mut Elem val)
//  mut method Void set(N that, mut Any val) exception Guard.Parameter ???
//  }
Sizable:{interface
  read method N size()
  read method Bool isEmpty()
  }
Iterator:{interface
  mut method Void #next() exception Void
  read method Void #checkEnd()
  read method Void #close()
  //will also implement one of the wrapper kind
  //read method read Elem #inner()
  //mut method mut Elem #inner()
  //mut method Void #inner(mut Elem that)
  //mut method Void #inner(Elem that) //is this the form?
  // no idea how to put the unsatisfactory version
  //iterator, iterexposer, variterator, variterexposer???
  }

class method Library solidTrait(){//Data is more than Solid, and Liquid, Gas, Plasma can be good methafores
//data: toS == class named, fromS, invariant, with clone mutk
    <:ToS,Equals,Classable,Named  //may be Parsable?
    method classAny() This
    read method class This class() This
    method myName() GetMyName(This)
    method equals(that) {
      with that (on This return that==this)
      return Bool.false()
      }
    read method
    Bool ==(read This that) this.toS()==that.toS()
    read method
    Bool !=(read This that) !(this==that)
  }
}