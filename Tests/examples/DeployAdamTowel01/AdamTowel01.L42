{
//--layer-- Bool N S -     and first layer of unsafe operators
Alu:{//@plugin
  //L42.is/connected/withAlu
  }
ExitCode:...
Bool:...
N:...
S:...
Debug:...
Count:...
SafeOperatorsAccess:  ...
Concept:...
GetMyName:{class method S (class Any that) S"--NameStillToFix--"}
//will be overridden and then become private later
//--layer-- Message backbone organization
Message:...
Guard:...
System:...
Assert:...
//--layer-- linked list and its test
Collections:...
Strings:Collections.vector(ofEq:S)
CTest:( Strings ss=Strings[S"foo"] {()}  ) //check lists are usable
//--layer-- introspection layer, and MetaGuard
Path:...
Selector:...
SafeOperators:...
//BinaryFlag32:...
Enum:...
Introspection:...
MetaGuard:...
//--layer-- Refactor, one fat feature
Refactor:...
// more composition
Opt:...
PreferentialComposition:...
Extends:PreferentialComposition<<{ implements PreferentialComposition.$
  method solveConflict(that,location){
    return Refactor.MoveImplementationSelector(location.src() of:location.path() to:location.dest())<<that
    error on MetaGuard Assert.CodeNotReachable""
    }
  }
Use:PreferentialComposition<<{ implements PreferentialComposition.$
  method solveConflict(that,location){
    return Refactor.RenameSelector(location.src() of:location.path() to:location.dest())<<that
    error on MetaGuard Assert.CodeNotReachable""
    }
  }
Patch:...
Default:...
Url:Default.Parsable<<...
DeployTowel:... //uses Url
}