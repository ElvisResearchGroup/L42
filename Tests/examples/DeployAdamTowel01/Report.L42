{interface<:S::ToS
ObservedBug:
'if this happens, then the programmer had wrong assumption on the code behaviour.
{(S reason)<:S::ToS
  type method Outer0 #stringParser(Library that) Outer0(reason:S.#stringParser(that))
  type method Outer0 () Outer0(S"")
  type method Outer0 (S that) Outer0(reason:that)
  method toS()  S"ObservedBug["[this.reason()]"]"
  }

Misuse:
'If this happens, then the library client is calling a function with wrong parameters or in a wrong way.
'It is a shorter name for Precondition Violation
'If the violation is because the "this" parameter is not suitable to perform the requested operation,
'consider using UnsupportedOperation instead
{(S reason)<:S::ToS
  type method Outer0 #stringParser(Library that) Outer0(reason:S.#stringParser(that))
  type method Outer0 () Outer0(S"")
  type method Outer0 (S that) Outer0(reason:that)
  method toS()  S"Misuse["[this.reason()]"]"
  }
UnsupportedOperation:
'to report that a target do not support a certain selector.
'to be used when a class have a method available only on certain instances.
'For example, getting the element out of an optional type that is not present.
'is this a kind of misuse?
{(S reason)<:S::ToS
  type method Outer0 #stringParser(Library that) Outer0(reason:S.#stringParser(that))
  type method Outer0 () Outer0(S"")
  type method Outer0 (S that) Outer0(reason:that)
  method toS()  S"UnsupportedOperation["[this.reason()]"]"
  }

PluginFailure:
'to report the inability of a plugin to act
  {(S reason)<:S::ToS
  type method Outer0 #stringParser(Library that) Outer0(reason:S.#stringParser(that))
  type method Outer0 () Outer0(S"")
  type method Outer0 (S that) Outer0(reason:that)
  method toS()  S"PluginFailure["[this.reason()]"]"
  }
CodeNotReachable:{(S reason)<:S::ToS
  type method Outer0 #stringParser(Library that) Outer0(reason:S.#stringParser(that))
  type method Outer0 () Outer0(S"")
  type method Outer0 (S that) Outer0(reason:that)
  method toS()  S"CodeNotReachable["[this.reason()]"]"
  }
NotImplementedYet:{(S reason)<:S::ToS
  type method Outer0 #stringParser(Library that) Outer0(reason:S.#stringParser(that))
  type method Outer0 () Outer0(S"")
  type method Outer0 (S that) Outer0(reason:that)
  method toS()  S"CodeNotReachable["[this.reason()]"]"
  }
'in the following, a set of reports for composition operators

SourceUnfit:{(Introspection::Record record) <:Report 'TODO: here, when typechecking introspection, for bug introspection can not see itself back. fix tomorrow. ADDED Has been fixed?
  method toS() S"SourceUnfit"
  }
ClassClash:{'findMeClassClash
(Introspection::Record record) <:Report
  method toS() S"ClassClash"
  }
MethodClash:{(Introspection::Record record) <:Report
  method toS() S"MethodClash"
  }
InvalidOnTopLevel:{(Introspection::Record record) <:Report
  method toS() S"InvalidOnTopLevel"
  }
MemberUnavailable:{(Path path,S _selector,InvalidKind invalidKind)<:Report
  InvalidKind:{(S inner)<:S::ToS method toS() this.inner()}
  type method
  Outer0 privatePath(Path path)
    Outer0(path:path,_selector:S"",invalidKind:InvalidKind(inner:S"PrivatePath"))
  type method
  Outer0 privateMethod(Path path, Selector selector)
    Outer0(path:path, _selector:selector.toS(), invalidKind:InvalidKind(inner:S"PrivateMethod"))
  type method
  Outer0 nonExistentPath(Path path)
    Outer0(path:path,_selector:S"",invalidKind:InvalidKind(inner:S"NonExistentPath"))
  type method 
  Outer0 nonExistentMethod(Path path, Selector selector)
    Outer0(path:path, _selector:selector.toS(), invalidKind:InvalidKind(inner:S"NonExistentMethod"))    
  
  type method
  Outer0 (Introspection::Record record) 
    Outer0(
      path:Path.fromS(record"Path"),
      _selector:record"Selector", 'selector may not exists, would be S""
      invalidKind:InvalidKind(inner:record"InvalidKind")
      )
  method
  Selector selector() {
    if this.hasSelector() (return Selector.fromS(this._selector()))
    error Report::Misuse"the MemberUnavailable is a path"
    }
  method
  Bool hasSelector() this._selector()!=S""
  method toS() S"MemberUnavailable[path:"[this.path();{
    if this.hasSelector() (return S" selector:"[this.selector()]"")
    return S""
    }]" kind:"[this.invalidKind()]"]"
  }
PrivacyCoupuled:{(Introspection::Record record) <:Report
  method toS() S"PrivacyCoupuled"
  }
NSBMissing:{(Report report) <:Report
  method toS() S"NSBMissing "[this.report()]""
  }


}