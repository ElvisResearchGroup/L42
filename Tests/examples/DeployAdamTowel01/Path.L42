{ _private(Library _binaryRepr)<:Concept.ToS Concept.Equals Concept.Named'@private
  method myName()GetMyName(This)

  class method
  This fromDocInternalizedS(S that){
    if that==S"@."++S.nl() (return This.fromS(S"This"))
    'Debug(S"["++that++S"]")
    return This.fromS(that(start:2N end:that.size()-1N))
    catch error Message x
      error This.parseError(that,cause:x)
    }
  class method
  This fromS(Concept.ToS that)
    This.#from(binaryRepr: that.toS().binaryRepr())

  class method This #from(S.SBuilder builder)
    This.#from(binaryRepr: builder.binaryRepr())
  class method mut S.SBuilder #builder() S.SBuilder.empty()

  class method This #from(Library binaryRepr) (
    use SafeOperators
      check ifInvalidDo(path:binaryRepr)
      error This.parseError(S.#from(binaryRepr: binaryRepr))
    This._private(_binaryRepr:binaryRepr)
    )
  class method
  Any parseError(S that)
    S"Path1.["[that]"] UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"
  class method
  Any parseError(S that, Message cause)
    S"Path2.["[that]"] UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"

  method Library binaryRepr() this._binaryRepr()


  method toS() S.#from(binaryRepr: this._binaryRepr())


  method Bool != (This that) !(this==that)

  method
  Bool == (This that) {
    use Alu
      check ifStringEqualDo(s1:this.binaryRepr(),s2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method equals(that){
    with that (on This return this==that)
    return Bool.false()
    }
  method
  Path ++(Path that){
    if this==Path"This" (return that)
    if that==Path"This" (return this)
    return Path.#from(binaryRepr:
      this.toS()[S".";that]"".binaryRepr()
      )
    }
  method
  mut Strings names(){
    var S str=this.toS()
    if str==S"This" (return Strings.empty())
    str++=S"."
    result=Strings.empty()
    while str!=S"" (
      pos=str.firstIndexOf(S".")
      result.add(right:str(end:pos))
      str:=str(start:pos+1N)
      )
    return result
    }
  class method
  Path from(read Strings names) {
    if names.isEmpty() (return Path"This")
    s=S""[with n in names.vals() (use[n separedBy:S"."])]""
    return This.fromS(s) '(end:s.size()-1N)
    }
  class method
  Path fresh(S name)
    Path.fromS(SafeOperators.freshName(name))

  class method
  Path fresh()
    this.fresh(name:S"Fresh")

  class method
  Path fresh(Path path) {
    mut Strings names=path.names()
    if names.isEmpty() (return this.fresh())
    right=SafeOperators.freshName(names.right())
    names.right(right)
    return Path.from(names:names)
    }
  }