{ _private(Library _binaryRepr)<:Concept::ToS Concept::Equals Concept::Named'@private
  method myName()GetMyName(Outer0)
  type method
  Outer0 fromS(Concept::ToS that)
    Outer0.#stringParser(that.toS().binaryRepr())
  type method Outer0 #stringParser(Library that) (
    using SafeOperators 
      check ifInvalidDo(selector:that)
      error S.#stringParser(that) 'will be improved later
    Outer0._private(_binaryRepr:that)
    )

  method Library binaryRepr() this._binaryRepr()


  method toS() S.#stringParser(this._binaryRepr())


  method Bool != (Outer0 that) !(this==that)

  method
  Bool == (Outer0 that) {
    using Alu
      check ifStringEqualDo(s1:this.binaryRepr(),s2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method equals(that){
    with that (on Outer0 return this==that)
    return Bool.false()
    }
  method
  Path ++(Path that){
    if this==Path"Outer0" (return that)
    if that==Path"Outer0" (return this)
    return Path.#stringParser(
      this.toS()[S"::";that]"".binaryRepr()
      )
    }
  }