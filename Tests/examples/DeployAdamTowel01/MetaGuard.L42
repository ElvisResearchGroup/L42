{ interface<:Guard
  
 RecordWrapper:'@private
    {
    type method Library recordWrapperToSTrait(){<:MetaGuard 
      method toS() Outer0.myName()    
      }
    type method Library recordWrapperTrait(){<:MetaGuard
      method kind() Outer0.myName()
      method text() S""
      method responseOf() Message::Opt()
      method myName()GetMyName(Outer0)
      method equals(that){
        with that (on Outer0 return this==that)
        return Bool.false()
        }
      method clazz() Outer0
      method classAny() Outer0
      type method Outer0(Introspection::Record record) 
      method Bool != (Outer0 that) !(this==that)
      method Bool == (Outer0 that) Message::EqualMessages(this,other:that)
      }
    type method Library <<(Library that) (
      res=SafeOperatorsAccess.compose(left:that,right:Outer0.recordWrapperTrait())
        {
        return SafeOperatorsAccess.compose(left:res,right:Outer0.recordWrapperToSTrait())
        catch error (on Library return res)
        }
      )
    }
SourceUnfit:RecordWrapper<<{}
IncoherentRedirectMapping:RecordWrapper<<{}
ClassClash:RecordWrapper<<{}
MethodClash:RecordWrapper<<{}
InvalidOnTopLevel:RecordWrapper<<{}
PrivacyCoupuled:RecordWrapper<<{}
ParameterMismatch:RecordWrapper<<{}

MemberUnavailable:{interface<:MetaGuard}
DispatchMemberUnavailable:{
type method MemberUnavailable(Library that){
  record=Introspection::Record(lib:that)
  with x=record"Kind" (
    case x== S"MemberUnavailable" (
      if record"InvalidKind".contains(S"Method") (
        return MethodUnavailable(record:record) )
      return NestedClassUnavailable(record:record)
      )
'    case x== S"MethodClash" (return MetaGuard::MethodClash(record:record))
'    case x== S"ClassClash" (return MetaGuard::ClassClash(record:record))
    )
  error Assert::ObservedBug"error dispatching failing"
  }
}
NestedClassUnavailable:RecordWrapper<<{(Path path,Bool isPrivate)<:MemberUnavailable
  method toS() Outer0.myName()++S"[path:"[this.path()]",isPrivate:"[this.isPrivate()]"]"
  type method Outer0 (Introspection::Record record) 
    Outer0(path:Path.fromDocInternalizedS(record"Path"),isPrivate:Bool.fromS(record"IsPrivate"))
  }
MethodUnavailable:RecordWrapper<<{(Path path,Selector selector,Bool isPrivate)<:MemberUnavailable
  method toS() Outer0.myName()++S"[path:"[this.path()]", selector:"[this.selector()]",isPrivate:"[this.isPrivate()]"]"
  type method Outer0 (Introspection::Record record) 
    Outer0(path:Path.fromDocInternalizedS(record"Path"),selector:Selector.fromS(record"Selector"),isPrivate:Bool.fromS(record"IsPrivate"))
  }
}