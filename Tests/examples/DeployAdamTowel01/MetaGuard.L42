{ interface<:Guard
  
 RecordWrapper:' can not be private, I need to Patch it.
    {
    type method S libToS(Library that) S"TO FIX"
    
    type method Library recordWrapperToSTrait(){<:MetaGuard 
      method toS() Outer0.myName()++Outer1.libToS(this.lib())
      method Library lib()      
      }
    type method Library recordWrapperTrait(){<:MetaGuard
      method kind() Outer0.myName()
      method text() S""
      method responseOf() Message.Opt()
      method myName()GetMyName(Outer0)
      method equals(that){
        with that (on Outer0 return this==that)
        return Bool.false()
        }
      method clazz() Outer0
      method classAny() Outer0
      type method Outer0(Introspection.Record record, Library lib)
      method Bool != (Outer0 that)
        !(this==that)
      method Bool == (Outer0 that)
        Message.EqualMessages(this,other:that)
      type method S libName()
      type method Void (Library lift) exception Outer0 (
        record=Introspection.Record(lib:lift)
        x=record"Kind"
        if x==Outer0.libName() (
          exception Outer0(record:record,lib:lift)
          )
        )
      }
      
    type method Library <<(Library that) (
      'either that provides a toS, or I have a default impl, that requires lib()
      res=SafeOperatorsAccess.compose(left:that,right:Outer0.recordWrapperTrait())
        {
        return SafeOperatorsAccess.compose(left:res,right:Outer0.recordWrapperToSTrait())
        catch error Library return res
        }
      )
    }
SourceUnfit:RecordWrapper<<{type method S libName()S"SourceUnfit"}
IncoherentRedirectMapping:RecordWrapper<<{type method S libName()S"IncoherentRedirectMapping"}
ClassClash:RecordWrapper<<{type method S libName()S"ClassClash"}
MethodClash:RecordWrapper<<{type method S libName()S"MethodClash"}
InvalidOnTopLevel:RecordWrapper<<{type method S libName()S"InvalidOnTopLevel"}
PrivacyCoupuled:RecordWrapper<<{type method S libName()S"PrivacyCoupuled"}
ParameterMismatch:RecordWrapper<<{type method S libName()S"ParameterMismatch"}

MemberUnavailable:{interface<:MetaGuard}
DispatchMemberUnavailable:{
  type method Void(Library that)
  exception MemberUnavailable(
    record=Introspection.Record(lib:that)
    x=record"Kind"
    if x== S"MemberUnavailable" (
      if record"InvalidKind".contains(S"Method") (
        exception MethodUnavailable(record:record,lib:that) )
      exception NestedClassUnavailable(record:record,lib:that)
      )
    )
  }
NestedClassUnavailable:RecordWrapper<<{(Path path,Bool isPrivate)<:MemberUnavailable
  method toS() Outer0.myName()++S"[path:"[this.path()]",isPrivate:"[this.isPrivate()]"]"
  type method Outer0 (Introspection.Record record, Library lib) 
    Outer0(path:Path.fromDocInternalizedS(record"Path"),isPrivate:Bool.fromS(record"IsPrivate"))
  type method S libName()S"MemberUnavailable"
  }
MethodUnavailable:RecordWrapper<<{(Path path,Selector selector,Bool isPrivate)<:MemberUnavailable
  method toS() Outer0.myName()++S"[path:"[this.path()]", selector:"[this.selector()]",isPrivate:"[this.isPrivate()]"]"
  type method Outer0 (Introspection.Record record, Library lib) 
    Outer0(path:Path.fromDocInternalizedS(record"Path"),selector:Selector.fromS(record"Selector"),isPrivate:Bool.fromS(record"IsPrivate"))
  type method S libName()S"MemberUnavailable"
  }
}