{
  class method Library<<(Library that) //TODO: handle errors for the better version
    //Use[Refactor.RenamePath(Path"Top" to:Path"This")<<this.enumTrait()]<<that
    SafeOperatorsAccess.compose(
        left:SafeOperatorsAccess.renameClass(this.enumTrait(), src:S"Top" , dest:S"This")
        right:that)

  class method Library enumTrait() {
    ParseFail:Message.$<<{<:Guard.ParseFail}
    Top: SafeOperatorsAccess.compose(left:Concept.solidTrait() //Use[Concept.solidTrait()]<<
      right:{(N that)<:Concept.ToS
      method toS()
        This.myName()++S"."++this.name()
      method
      S name()
        This.names().val(this.that())
      read method Bool ==(read This that) this.that()==that.that()
      class method Strings names()
      class method
      This fromS(S that){
        with n in 0N.vals(), d in This.names().vals() (
          if d==that (return This(n))
          )
        error ParseFail"The provided string is not valid: "[that]""
      }
    })//end compose
    List:Collections.vector(ofEq:Top)
    //class method mut Set #seqBuilder() Set.empty()
    //class method Set #from(Set seqBuilder)seqBuilder
    //Set: SafeOperatorsAccess.compose(left:Concept.solidTrait() //Use[Concept.solidTrait()]<<
    //  right:{(var BinaryFlag32 that)<:Concept.ToS
    //  class method mut This #seqBuilder() this.empty()
    //  class method mut This empty() This(0BinaryFlag32)
    //  class method This #from(This seqBuilder) seqBuilder
    //  mut method Void #add(Top that) this.that(\that | (1BinaryFlag32<<that.that()))
    //  method This ++(This that) This(this.that() | that.that())
    //  method This --(This that) This(this.that() & ~that.that())
    //  method This &(This that) This(this.that() & that.that())
    //  method Bool >(Top that)  this.that() == (this.that() | 1BinaryFlag32<<that.that())
    //  method toS()
    //    This.myName()++S"["[
    //      with n in 0N.vals(), d in Top.names().vals() (
    //        if this>Top(n) (use[ d separedBy:S";"])
    //        )]"]"
   //
   //   read method Bool ==(read This that) this.that()==that.that()
   //   })//end compose
  }
}