{(Library _binaryRepr) implements Concept.ToS Concept.Equals Concept.Named//@private
  method myName()GetMyName(This)
  class method
  This fromS(Concept.ToS that) (
    s=that.toS()
    N(_binaryRepr: use Alu
      check stringToInt32(s.binaryRepr())
      error This.parseError(s))
    )
  class method
  This #from(Library binaryRepr)
    N(_binaryRepr:binaryRepr)
  method
  Library binaryRepr() this._binaryRepr()

  class method
  mut S.SBuilder #builder()
    S.SBuilder.empty()

  class method
  N #from(S.SBuilder builder)
    N(_binaryRepr: use Alu
      check stringToInt32(builder.binaryRepr())
      error This.parseError(S.#from(builder: builder)))

  class method
  Any parseError(S that)
    S"N.UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"

  method
  toS()
    S.#from(binaryRepr: use Alu
      check int32ToString(this.binaryRepr())
      error void)

  method
  N +(N that)
    N(_binaryRepr:use Alu
      check sumInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N -(N that)
    N(_binaryRepr:use Alu
      check subInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N *(N that)
    N(_binaryRepr:use Alu
      check mulInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N /(N that)
    N(_binaryRepr: use Alu
      check divInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  Bool ==(This that) {
    use Alu
      check ifInt32EqualDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method equals(that){
    with that (on This return this==that)
    return Bool.false()
    }

  method
  Bool <(N that) {
    use Alu
      check ifInt32GrtDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method
  Bool <=(N that) {
    use Alu
      check ifInt32GEqDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method Bool !=(This that) !(this==that)

  method Bool >(N that)  !(this<=that)


  method Bool >=(N that) !(this<that)

  method
  mut Iterator vals()
    Iterator(start:this,end:N"-1")

  method
  mut Iterator vals(N upTo)
    Iterator(start:this,end:upTo)

  Iterator:{mut (var This1 start, This1 end)
    mut method
    Void #next() exception Void (
      if this.end() <0N | this.start()<this.end() (this.start(this.start()+1N))
      else exception void
      )

    read method
    Void #checkEnd() void

    read method
    This1 #inner() this.start()-1N

    read method
    Void #close() void
    }
  }