{(Library _binaryRepr)<:Concept::ToS Concept::Equals Concept::Named'@private
  method myName()GetMyName(Outer0)
  type method
  Outer0 fromS(Concept::ToS that)
    Outer0.#numberParser(that.toS().binaryRepr())
  method
  Library binaryRepr() this._binaryRepr()
  
  type method
  N #numberParser(Library that)
    N(_binaryRepr: using Alu
      check stringToInt32(that)
      error Outer0.parseError(S.#stringParser(that)))
  type method
  Any parseError(S that)
    S"UnsatisfactoryErrorToAvoidCycle, replace in AdamT2"

  method
  toS() S.#stringParser(using Alu
      check int32ToString(this.binaryRepr())
      error void)

  method
  N +(N that)
    N(_binaryRepr:using Alu
      check sumInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N -(N that)
    N(_binaryRepr:using Alu
      check subInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N *(N that)
    N(_binaryRepr:using Alu
      check mulInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N /(N that)
    N(_binaryRepr:using Alu
      check divInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  Bool ==(Outer0 that) {
    using Alu
      check ifInt32EqualDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }
  method equals(that){
    with that (on Outer0 return this==that)
    return Bool.false()
    }

  method
  Bool <(N that) {
    using Alu
      check ifInt32GrtDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method
  Bool <=(N that) {
    using Alu
      check ifInt32GEqDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method Bool !=(Outer0 that) !(this==that)

  method Bool >(N that)  !(this<=that)


  method Bool >=(N that) !(this<that)
  
  method 
  mut Iterator vals()
    Iterator(start:this,end:-1N)
  
  method 
  mut Iterator vals(N upTo)
    Iterator(start:this,end:upTo)
  
  Iterator:{mut(var Outer1 start, Outer1 end)
    mut method
    Void #next() exception Void (
      if this.end() <0N | this.start()<this.end() (this.start(this.start()+1N))
      else exception void 
      )
     
    read method
    Void #checkEnd() void
    
    read method
    Outer1 #inner() this.start()

    read method
    Void #close() void
    }
  }