{(Library _binaryRepr)<:S::ToS
  type method
  Outer0 fromS(S::ToS that)
    Outer0.#numberParser(that.toS().binaryRepr())
  method
  Library binaryRepr() this._binaryRepr()

  type method
  N #numberParser(Library that)
    N(_binaryRepr:using Alu
      check stringToInt32(that)
      error void)

  method
  toS() S.#stringParser(using Alu
      check int32ToString(this.binaryRepr())
      error void)

  method
  N +(N that)
    N(_binaryRepr:using Alu
      check sumInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N -(N that)
    N(_binaryRepr:using Alu
      check subInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N *(N that)
    N(_binaryRepr:using Alu
      check mulInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  N /(N that)
    N(_binaryRepr:using Alu
      check divInt32(n1:this.binaryRepr() n2:that.binaryRepr())
      error void)

  method
  Bool ==(Outer0 that) {
    using Alu
      check ifInt32EqualDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method
  Bool <(N that) {
    using Alu
      check ifInt32GrtDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method
  Bool <=(N that) {
    using Alu
      check ifInt32GEqDo(n1:this.binaryRepr() n2:that.binaryRepr())
      return Bool.true()
    return Bool.false()
    }

  method Bool !=(Outer0 that) !(this==that)

  method Bool >(N that)  !(this<=that)


  method Bool >=(N that) !(this<that)
  }