{ _private(Library _binaryRepr, Annotations annotations)<: S::ToS '  toPutAs private
  Annotation:{(Library _binaryRepr, S text, N index)<:S::ToS
    method toS() this.text()
    method type Any referredClass() {
      return Introspection::Record(lib:this._binaryRepr()).that()
        .introspectDocPath(path:Path"Outer0",annotationN:this.index())
      catch exception x (
        on Report::MemberUnavailable error Report::CodeNotReachable() 'x
        on Void error Report::ObservedBug"Plugin introspection bug"
        )
      }
    method Bool hasReferredClass()
      this.text()!=S"" &
      this.text().isASCIIUpperCase(0N)
    }
  Annotations:LinkedList.list(Annotation)
  type method Outer0 (Library that) (
    var result=Annotations[]
    var aN=1N
    while Bool.true() (' to be able to break
      result:=result.#add(Annotation(
        _binaryRepr:that,
        text:Introspection::Record(lib:that).that()
          .introspectDocAsString(path:Path"Outer0",annotationN:aN)
        index:aN
        ))
      aN+=1N
      )
    catch exception x (on Report::MemberUnavailable error Report::CodeNotReachable())
    result:=result.#end() 'reverse the list
    Outer0._private(_binaryRepr:that, annotations:result)
    )
  type method Outer0 #stringParser(Library that) Outer0(that)
    
  method Library binaryRepr() this._binaryRepr()
  
  
  method toS() {
    return Introspection::Record(lib:this._binaryRepr()).that()
      .introspectDocAsString(path:Path"Outer0")
    catch exception x (on Report::MemberUnavailable error Report::CodeNotReachable()) 
   }
  }