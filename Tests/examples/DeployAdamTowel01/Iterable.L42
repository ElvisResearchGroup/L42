{

type method Library opt() {
  Opt:{#new(TOpt that)
      TOpt:{interface method Outer2 get() }
      TEmpty:{()<:TOpt method get() error Guard::Operation"TEmpty.get() Value not present in Optional" }
      TOf:{(Outer2 that)<:TOpt method get() this.that()}
      method T ~() this.that().get()
      method Bool isPresent() {
        unused=~this
        return Bool.true()
        catch error (on Any return Bool.false())
        }
      type method Outer0 () Outer0.#new(TEmpty())
      type method Outer0 (T that) Outer0.#new(TOf(that))
      }
  Iterator:{interface 
    mut method
    Void #next() exception Void
    read method
    Void #checkEnd()
    read method
    Outer1 #inner()
    read method
    Void #close()
  }
}