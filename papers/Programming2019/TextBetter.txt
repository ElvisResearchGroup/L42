Gordon
x1=e1
x2=e2
m(x1,x2)
FV(e1) is all imm/capsule
or 
FV(e2) is all imm/capsule


res=s.runStackOverflow(()->{do stuff}, soe->{})

----------
Recently, a new design for type modifier has emerged, that
radically improve their usability. (while preserving strong properties)
Three different research languages are being independently developed relying
on this new design: Gordon, Pony and 42.
Those type modifiers provide opt-in restrictions/guarantees:
A programmer can declare all types as mut and the language feels like Java.
However, when immutable and capsule are used some code may perform better on a multi core machine, either automatically (gordon) or if the program uses actors (pony).
42 developers also recognize that those modifiers may provide benefit for parallelism, but they focus on the implications on third party library usage safety.

In this paper we show that a language supporting type modifiers as in gordon,pony,42
can support a sound and efficient form of run-time  verification that we call
validation.
We implemented validation on 42 and we show [efficiency]
We prove that our system is sound on any language supporting certain basic properties.
[explain validation]


Class invariants are allowed to be broken in a controlled way, this create difficulties to ensure soundness of invaraint
checking. To allow formal reasoning all the sound approaches that we know just use the invariant propery to generate a stronger property that always hold [cites]
For example, in the case of specSharp, such propery will be 'unpacked or invariant'.
In this article we call this propery 'validity'. This is clearly a more primitive property with respect to class invaraint:
for example, "shouldHold->invariant" is just a special case of "shouldHold1->invariant1 & .. & shouldHoldn->invariantn". This is similar to
plaid typestate[]


Comparision with D/Effeil/Jose/JML
Ease of use: easier +2
Sound: nope -3
Efficiency: shit -10
generality: +3

Comparision with SpecSharp
Ease of use: harder -10
Sound: backdoors + throw exceptions + capability -2
Efficiency: shit +1
generality: +2
annotation burden is high and defaults do not help a lot


there is a need for brakable properties, but
 there is also a need for always-hold properties
the wish for braking the invariant is instrumental:
programmer just want to express properties. If they could easily express all needed properties wihtout breaking the invariant, they would love it
critics of common/widspread invariants model(D, eiffel):
 parkinson: 'invariants the end of the road'
 speckshapr: 'Verification of object-oriented programs with invariants'
[more explain validation]
All approaches we have found in literature that guarantee sound checking on invariants
pose limits on what information can be accessed by the invariant property.
Those limitaitons are about enforcing determinism of the invariant mehtod and prevent aliasing concerns.
Our application is not different in this respect; our limitations are sigtly different since we leverage on the same restriction used
by pony,gordon and 42.

While of course our validation can co-exists with any other verificaiton technique
(because our restricitons are opt-in),
if is possible to express the invariant property using only capsule/imm fields (our patterns can help here) then such invariant inherit soundness and efficiency
For example, in many cases ..isaac comments..


Performance
we tested our system on a simple gui application.
Our gui has 4*4=16 buttons +4 containes + outer frame
for a total of 21 widgets
the widget tree has a max dept of 5(check).
Invariant77Matches on our system

Invariant5490-OnJustRed against 34 (618)

Invariant@2Layers:545,035 against 51 (15141)

SW{
  Box{  Button(Box)
    SW{Box{  Button(Box)}}
    }
}

when call o.foo()
    check that object o is peer-consistent, it is known 'o.invariant == true'

    
    
    
    sound consitency
      invariant protocol:
        box pattern->stability
        
    
    
