class Person {
    mut method Bool needsMoney(read Account that) { 
        return that.balance < 5;
    }
    static method Void spend(read AccountBox that) { 
        that.expenses += 5; // just spend some money for no reason!
    }
}

class Transaction {
	// gain some money, and/or lose some money
	method Void apply(mut AccountBox that) {
		this.income += 4;
		this.expenses += 2;
	}
}
class AccountBox { UInt income, expenses, balance; }
class Account {
    capsule AccountBox box;
    mut Person owner; // dosn't need to be encapsulated!

    read method Bool invariant() {
        return this.box.income > this.box.expenses && this.box.balance == this.box.income - this.box.expenses;
    }
    
    mut method Void applyTransactions(Transactions transactions) {
        if (this.owner.needsMoney()) {
            this.applyDonation(charity); // ok, not an access to a capsule field, so not a capsule mutator!
        }
    }
    private mut method Void applyDonation(Charity charity) { // a capsule mutator! Only uses this once
        mut AccountBox b = this.box;
        charity.donateTo(b)
        expense.apply(b); // give a b to some external code
        b.balance = b.income - b.expenses;
        // does an invariant check here!
    }
    ...
}
