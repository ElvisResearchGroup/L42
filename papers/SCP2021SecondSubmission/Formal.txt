Grammar
e::= x | true | false | e.m(es) 
  | this.f | this.f = e | new C(es)
  | try {e1} catch {e2}
  | L | L.f | L.f = e | M(l;e1;e2) 
  | tryσ{e1} catch {e2}
L ::=µ l
v ::= L | true | false
σ ::= l1:C1{vs1}..ln:Cn{vsn}//L or l in vsn
Ev::= [] | Ev.m(e) | v.m(v1, Ev, e2) 
  | v.f = Ev | new C(v1, Ev, e2) | M(l;Ev;e)
  | M(l;v;Ev) | tryσ{Ev} catch {e}
E ::= [] | E.m(es) | e.m(es1, E, es2) 
  | E.f | E.f = e | e.f = E | new C(es1, E, es2)
  | M(l;E;e) | M(l;e;E) | tryσ?{E} catch {e} 
  | tryσ?{e} catch {E}
CD::= class C implements C{F M} 
  | interface C implements C{M}
F ::= T f;
M ::= µ method T m(T1 x1,..., Tn xn) e?
µ ::= mut | imm | capsule | read
T ::= µ C
Er::= Ev[[].m(v)] | Ev[v.m(v1, [], v2)] 
  | Ev[[].f ] | Ev[[].f = v] | Ev[v.f = []]
  | Ev[new C(v1, [], v2)]
error ::= Ev[M(l;v;false)],
  where Ev not of form Ev′[tryσ?{Ev′′} catch { }]

Big question: 
-does the language above support subject reduction?

Well-formedness
1-after desugaring, all fields are either imm or mut
So capsule fields are desugared away and read fields never existed.

2- the reduction form σ;E|e is well formed if there are no dangling pointers, that is,
forall l in E[e] l in dom(σ)
forall l in σ(_) l in dom(σ)

3-capsules are used at most once
formally S;G|-e:T is well formed iff capsOnce(G,e) is defined.

#Define capsOnce(G,e) = G'
capsOnce(G,x) = x:G(x)
capsOnce(G,true) = capsOnce(G,false) = empty
capsOnce(G,e0.m(e1..en))
  = capsOnce(G,e0) U .. U capsOnce(G,en)
capsOnce(G,e.f) = capsOnce(G,e)
capsOnce(G,new C(e1..en))
  = capsOnce(G,e1) U .. U capsOnce(G,en)
capsOnce(G,tryσ?{e1} catch {e2})
  = capsOnce(G,e1) U capsOnce(G,e2)
capsOnce(G,M(l;e1;e2))
  = capsOnce(G,e1) U capsOnce(G,e2)
  | tryσ{e1} catch {e2}
  
4-G U G' =G" well defined only if 
  forall x in dom(G) cup dom(G') G(x)=G'(x) and G(x) not of form capsule _

5-σ;E|e well formed iff
 forall E' such that e=E'[capsule l]
   encapsulated(σ,E[E'],l)
 forall E' such that e=E'[imm l]
   immutable(σ,E[E'],l)

#Define immutable(σ,E,l)
immutable(σ,E,l)
  forall µ l' in E:
    if µ in {mut,capsule} then 
      ROG(σ,l) disj mutRog(σ,l')//mutRog contains l'

Reduction

(update)
σ;E|(mut l).f = v
→ σ[l.f = v];E|M(l;mut l;(read l).invariant())
//σ[l.f = v] will also adjust the µ inside v

(new)
σ;E|new C(vs) 
→ σ, l:C{vs};E|M(l;mut l;(read l).invariant())


(mcall)
σ;E|L.m(v1,..,vn) → σ|e"
  e'=e[this=µ l:µ C,x1=v1:T1,..,xn=vn:Tn]
  σ(l) = C{_}
  C.m = µ' method T m(T1 x1..Tn xn) e
  
  if capsMutator(C.m) then	
	e" = M(l;e';(read l).invariant())
  else:
    e" = e'

#Define v:T = v'
  true:µ Bool = true
  false:µ Bool = false
  µ l :µ' C = µ' l iff µ<=µ'

(monitor exit)
σ;E|M(l;v;true) → σ;E|v

(ctxv)
σ0;E|Ev[e0] → σ1|Ev[e1]
  σ0;E[Ev]|e0 → σ1;E[Ev]|e1

(try enter)
σ;E|try {e1} catch {e2} 
→ σ;E|tryσ{e1} catch {e2}

(try ok)
σ, σ′;E|tryσ{v} catch {_} → σ, σ′;E|v

(try error)
σ, σ′;E|tryσ{error} catch {e} → σ, σ′;E|e

(access)
σ;E|(µ l).f → σ;E|(µ.µ') l'
  l'=σ[l.f]
  σ(l)=C{_}
  C.f = µ' C'

(capsPromotion)
σ;E|mut l→ σ|capsule l
//  encapsulated(σ,E,l) //redundant

#Define encapsulated(σ,E,l)
-there is no µ l in E
-no danglying pointers in σ/mutROG(σ,l);E|true
//No we need to remove more from σ because of garbage
//Isaac can put the old version here

//This seams to be different from the current definition of encapsulated. Is it about the difference between caps fields and caps ref?

#Define capsMutator(C.m)
capsMutator(C.m)
  C.m = µ method T m(T1 x1..Tn xn) e
  µ = mut 
  Exists f such that C.f = capsule//before the sugar? or rep mut
  and e = E[this.f]

Sugar //note fields are this private anyway
[class C implements C{Fs Ms}] 
= class C implements C{Fs Ms}
  if capsule C f notin Fs
[class C implements C{Fs capsule C f Fs' Ms}]
=
[class C implements C{Fs mut C f Fs' Ms' Ms[f]}]
Ms'=
  read method read C f() this.f
  mut method Void f(capsule C that) this.f=that
Mi=µ method T m(T1 x1..Tn xn) e

//Ms[f] trivially propagates on the subexpressions
//and replaces e of form this.f / this.f = e
M1..Mn[f]=M1[f]..Mn[f]
(µ method T m(T1 x1..Tn xn) e)[f]
= µ method T m(T1 x1..Tn xn) (e[f])

x[f] = x
true[f] = true
false[f] = false
e.m(e1..en)[f] = e[f].m(e1[f]..en[f])
this.f[f] = this.f()
this.f'[f] = this.f' if f'!=f
(this.f=e)[f] = this.f(e[f])
(this.f'=e)[f] = this.f'=(e[f])  if f'!=f
new C(e1..en)[f] = new C(e1[f]..en[f])
try{e1}catch{e2}[f] = try{e1[f]}catch{e2[f]}


Assumptions
Assumption 1 (Subject Reduction)
  ok
Assumption 2 (Type Consistency)
  OK
Assumption 3 (Method Consistency).
  //method bodies are typed inside as outside
  //problematic
Assumption 4 (Imm Consistency).
Assumption 5 (Mut Consistency).
Assumption 6 (Capsule Consistency).
  We require that a capsule reference be encapsulated; and require that capsule is a subtype of mut:
  Trivialish//explicitly proved in paper Cone
Assumption 7 (Mut Update)
  We require that field updates only be performed on mut receivers:
  Trivial
Assumption 8 (Mut Access)
  We additionally require that field accesses only be typed as mut, if their receiver is also mut:
  Trivial
Assumption 9 (Read Consistency)
  x not subtype of mut //trivial
  x not promotable to mut
Assumption 10 (Strong Exception Safety).
  //can not see/obtain the external world as mut
  //stonger then progress since it could modify it and put it back
  //is it needed?

Typing

G ::=x1:T1..xn:Tn //gamma
S ::=l1:C1..ln:Cn //Sigma (memory type)

(subs)
S;G|- e:T
  S;G|- e:T'
  T<T'

(var)
S;G|-x :G(x)

(location)
S;G|- µ l: µ S(l)

(bTrue)
S;G|-true: imm Bool

(bFalse)
S;G|-false: imm Bool

(mCall)
S;G|-e0.m(e1..en):T
  forall i in 0..n S;G|-ei:Ti
  T0 = µ C
  C.m = µ method T m(T1 x1..Tn xn)_

(fAcc)
S;G|-e0.f: (µ0.µ) C
  S;G|-e0:µ0 C0
  C0.f = µ C

#Define µ0.µ=µ1 
  read.mut=read
  read.imm=imm
  read.capsule=read//if we put back capsule fields
  capsule.mut=mut
  capsule.imm=imm
  capsule.capsule=capsule//
  imm.µ=imm
  mut.mut=mut
  mut.imm=imm
  mut.capsule=mut  
//can be made more compact, 
//but this is more explicit

(fUpt)
S;G|-e0.f=e1 : mut C0
  S;G|-e0:mut C0
  S;G|-e1:µ C1
  C0.f = µ C1

(newC)
S;G|-new C(e1..en): mut C
  S;G|-ei:Ti
  C.fi = Ti

(unTry)
S;G|-tryσ?{e1} catch {e2} :T//both forms of try
  S;G[mut=read]|-e1:T
  S;G|-e2:T
  σ? either empty or dom(σ?) in dom(S)

(monitor)
S;G|-M(l;e1;e2):T
  l in dom(S)
  S;G|-e1:T
  S;G|-e2:imm Bool  

(capsPromotion)
σ;G;E|-e:capsule C
  σ;G[mut=read]|-e':mut C
  e'=readify(σ,E,e)

#Define readify(σ,E,e) = e'
readify(σ,E, mut l) = mut l if encapsulate(σ,E,l))
readify(σ,E, mut l) = read l otherwise
readify(σ,E, µ l) = µ l, µ != mut
readify(σ,E, e.f) = readify(σ,E,e).f
... // propogate on subexpressions

//TODO: type rules for well typed interface, class and method, the method may need the cpasule mutator case
//well formedness for invariant is present
//type rule for invariant constraints (or invariant)

#Define G[mut=read]
(x1:T1..xn:Tn)[mut=read] 
= x1:T1[mut=read]..xn:Tn[mut=read]
mut C[mut=read] = read C
µ C[mut=read] = µ C iff µ!=mut

//T.m also checks that the mdf of T is
//a subtype of the methd modifier




//Typos:
that catch checked exceptions doe not this restriction.
*doe->does

v ::= µ l | true | false //This was only l in the formal