

Understanding metaprogramming
   work of others
   42


Propose your ideas
  rust traits miss *** and this get real problems
  and can be solved with varions of your idea on template specialization inheritance



Next submission
  aplas: too early
  popl:if we decide to go, the rest have to slow down




cap fn foo(...) {
    % native calls...
    % call other cap functions
}
========================================
class C { // can't new C(), can only 'cap new C()'
        cap method foo(...) {
           % can native call
            % can cap new
        }

}
    

capability ReadFiles /*Foo1, ..., Foon*/ {
    fn read_file() {
        ...
    }
}

capability ReadFiles2 { ... }
ReadFiles fn f() {
    // ReadFiles...
}

fn f() {
    // CANNOT ReadFiles
}

ReadFiles2 fn f() {
    // Read Files...
}



new Print Foo // Print Foo
cap class C1{/*unrestricted native*/}

C1 C1 c1=new C1 C1();
C1 Foo foo=new C1 Foo(c1);
foo.bar()

capability Print { // ONLY Every one instance of this
    method print(String s) {
        // Call c function 'printf..'
    }
}

capability Print extends PrintASCII {
    
}

capability PrintChinese restricts Print {
    fn print(String s) {
        if s is chinese:
            Print.print(...);
    }
}


class Foo {
    Print method Print Bar f() {
        new Read r(); //...
        new PrintChinese //
    }
}

class Bar {
    Print Foo f;
    
}

fn foo(Bar b) { // Won't print anything right?
    b.f.f();
}

capability Main: Print ... {
    method main() {
        
    }
}


class Foo{
    C1 C1 inner;
    C1 method Nat fileSize(String name){
        return this.inner.fileEnd()-this.inner.fileStart()
    }

}

(ReadFiles f) {
    // everything f
    f.read_arbitrary(...)
}
fn foo(ReadFiles Foo f)
    f.read_f() // defined to read file called 'f'
    ReadFiles.read_file("g"); // CANT DO THIS, we don't have capability
}


0 mdf::=norm|cap
1 mdf::=norm|cap1|..|capn
2 

unrestricted fn foo() {


}

if G\cap|-e:T and e-->+e' then evaluation do not do native calls and is deterministic
