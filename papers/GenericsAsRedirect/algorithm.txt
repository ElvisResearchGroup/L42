A := // Possible Redirects
E := // Impossible redirects

GU := // Unprocessed redirects
GP := // Processed redirects
--------------------------------


Remove an 'unprocessed' Cs->P from U:

Trim(Cs,P)	// Trim's the two paths to outer-most
		// C that is in the redirect set...

// S is the state of the algorithm
RedirectCheckClass(Cs->P) =
	let L := p(This0.Cs)[from This0.Cs]
	let L' := p(P)[from P]

	ERROR if not InterfaceCheck(L, L'):
	ERROR if dom(L) not subseteq dom(L')

	// Check the implements
	RedirectCheckImpls(L.Pz; P, L'.Pz)

	for all C in dom(L.NCz)
		// This will terminate at the leaf nested-classes
		RedirectCheckClass(Cs.C->P.C)

	for all MS in dom(L.Mwtz):
		RedirectCheckM(L(MS).Mt, L'(MS).Mt)

RedirectCheckImpls(This0.Csz,Pz; Pz')
	ERROR IF Pz not subseteq Pz'

	for each Cs in Csz
		RequireRedirect(This0.Cs; Pz')

RedirectCheckM(Ts->T;This0.Csz,Pz | Ts'->T';Pz'''):
	forall (T, T') in Zip(T,Ts; T',Ts')
		ERROR if T.mdf != T'.mdf
		RequireRedirect(T.P; T'.P)

	Pz'' = Pz''' intersect Pz
	Pz'  = Pz''' \ Pz

	ERROR if #Pz' > #Csz
	for P' in Pz':
		RequireRedirect(This0.Csz; P')


/*
	P1 -> P2	| Outer(P1)
	This0.Cs -> P
	This0.Cs -> Pz
	This0.Csz -> P
*/
RequirRedirect(Pz;Pz) // ??? could evaluate to ERROR, or ortherwise do some state manipulation

EI: {interface Void foo()}
{
	I: interface { }
	C: {implements I }
}[I=>EI]






