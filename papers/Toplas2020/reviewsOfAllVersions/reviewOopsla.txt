OOPSLA 2019 Paper #60 Reviews and Comments
===========================================================================
Paper #60 Using Type Modifiers for Sound Runtime Invariant Checking


Review #60A
===========================================================================

Overall merit
-------------
D. Reject

Reviewer expertise
------------------
X. Expert

Paper summary
-------------
The paper discusses an invariant enforcement protocol that builds on top of an
object and reference mutability system. After giving an overview of the problem
and an introduction to the mutability system, the paper introduces its invariant
protocol and formalizes a language model for it.
The paper then discusses examples of invariants over immutable state and
invariants over encapsulated state, before discussing a GUI case study.
The system requires fewer annotations than a similar Spec# version and the
invariant check is executed 5 order of magnitude fewer times.

Assessment
----------
Pros:
- Reducing the annotation effort and increasing the efficiency of runtime
invariant checks are important goals.
- The paper contains many interesting examples.

Cons:

- The structure of the paper makes it hard to appreciate the novel contributions
of the paper. Too much space early on in the paper discusses things that are not
clearly motivated yet. A clear explanation of the invariant protocol that is
proposed would be useful early in the paper.
- Using "type modifiers" for a specific mutability system is very misleading.
From the paper title and abstract I expected something very different.
- The trade-offs between the flexibility of Spec# annotations and the
restrictions that the L42 protocol enforces could be explained more directly -
what are the "10 annotations, of 8 different kinds" that Spec# uses and how are
these examples handled in L42? How are helper methods handled that must be able
to work on temporarily invalid objects?

Detailed comments
-----------------
Questions to be answered:

- What is the relation to the invariant protocols discussed in [Summers et al.
2009]?
- The protocol description in Section 3 mentions "as does the very similar
concept of owner-as-modifier", but then I couldn't find a detailed explanation
or comparison. What is the relationship?

Detailed comments:

- In the title and abstract, the use of the generic "type modifiers" does not
  get the intended dependency on a reference and object capability system
  across.
- Before the example on Page 2, some comment about the language would be useful.
  The 'read' and 'imm by default' annotations come without explanations until
  page 5.
- The `moveTo` method directly accesses a field through something other than
  this. It would be useful in the discussion of 'Relaxations' on page 10 to
  explain why this is allowed.
- Bottom of page 3: It would be interesting to understand why `Object.Equals`
  couldn't be overridden in Point.
- Page 4, footnote 2: "but is implemented AS a meta-programming" add "as".
- "non trivial task" should be "non-trivial task". Similarly many other
  compounds miss hyphens, e.g. "non deterministic method", "non private field".
- Page 5: "every non-immutable object" An object can only be mutable or
  immutable. So isn't "non-immutable" the same as "mutable"? Or are there also
  "read" objects?
- Page 6: indentation of code example changes in the middle.
- Page 7: "that not object mutated within" Should the "not" be "no"?
- Page 7: "caused by such failures" the "such" isn't quite clear to me. Does
  this refer to invariant failures? An example that shows how an invariant
  failure can be caught would be helpful.
- Page 8: "provided they do not affect program execution" How would the system
  know whether the print operation modifies an array that might be aliased?
- Page 9: "even if the invariant was broken during the method call." A capsule
  mutator is the only kind of method that can break an invariant, right? Such a
  method can only contain a single use of 'this' and only imm/capsule
  parameters. Are there examples of capsule mutators that are more than just a
  single field update? What is meant with "during" the method call, if seemingly
  nothing else can happen?
- Page 10: "Invariants" explains that the `invariant` method can only refer to
  `imm` or `capsule` fields. "Monitoring" explains that a call to `invariant` is
  inserted after both a field update and a capsule mutator method return. Why
  are both needed? Are the field update checks only necessary for `imm` fields?
  The `capsule` fields can only be modified in a capsule mutator, which already
  generates an invariant check.
- As you can tell, by this point I'm pretty confused about what is happening.
- Page 10: "we allow a couple of sound relaxations". How do you know they are
  sound? For the first relaxation, don't you need some kind of method annotation
  to specify the additional restriction on the called methods?
- Page 10: "were to support... traditional sub-classing". I'm not sure what the
  "traditional" should mean. What restrictions on sub-classing are imposed?
  "Subtyping" only appears once in the first sentence of the paper (and two more
  times restricted to TM subtyping). Also "subclassing" appears only a handful
  of times. Some more explanation would be useful.
- Figure 1, "method": what is the `e` with over-brackets?
- Page 12, "Well-Formedness Criteria": "satisfy the restrictions in Section 3."
  Spelling them out formally would be useful for concreteness.
- "Method bodies do not contain any l or M expressions": wouldn't it be useful
  to separate the static expressions from the runtime expressions? Can
  "try^{\sigma}" expressions appear in method bodies?
- Figure 2: Neither (TRY OK) nor (TRY ERROR) use the \sigma that appears in the
  "try^{\sigma}". I don't understand why (TRY ENTER) maintains it.
- End of Section 4: A brief summary of the soundness proof would be helpful,
  together with a reference to the full proof.
- Page 14, second line: `mut method String name(String name)` Should this return
  `Void`? Or should there be a `return`?
- Page 14: "If we were to relax... or even eliminate (as in Java), the support
  for TMs..." Aren't there several type systems for Java that could be used to
  enforce owner-as-modifier and then this invariant protocol?
- Page 14: "could break our guarantee that (manually) calling invariant always
  returns true." Why is "manually" in parentheses? Generated invariant calls
  could fail.
- Page 16: `mut method imm Void multi...` Is the `imm` on `Void` necessary?
- Page 22: The discussion of method calls in specifications could benefit from:
  A. Rudich and A. Darvas and Muller, P.: Checking Well-Formedness of
  Pure-Method Specifications. Formal Methods (FM), 2008.
  A. Darvas and K. R. M. Leino: Practical reasoning about invocations and
  implementations of pure methods Fundamental Approaches to Software Engineering
  (FASE), 2007.
- Page 23: "syntax sugar" should be "syntactic sugar".



Review #60B
===========================================================================

Overall merit
-------------
B. Weak accept

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
This paper considers the problem of efficiently checking object-level invariants in object-oriented programs. The approach presented is essentially a combination of static and dynamic analysis, where the static analysis takes the form of a type checker, and the dynamic analysis consists of run-time invariant checking inserted at points dictated by the static analysis (or, more precisely, by the design of the host language). The substance of the paper is a language design which uses a language of modifiers (qualifiers) applying (mostly) to reference types. Using these, the type-checking rules control aliasing and mutability sufficiently that only a relatively small number of dynamic checks need be dispatched. The language supports a number of dynamic features including exceptions and non-deterministic I/O. There is a comparative case study using a synthetic GUI application which is implemented in both Spec# and the authors' system, the latter being found to require fewer annotations or non-obvious idioms. A proof of soundness is provided -- here "sound" in the sense not of only passing invariant-maintaining code, but rather one of ensuring dynamic safety (all feasibly invariant-breaking points are dynamically checked).

Assessment
----------
For:
+ considerable technical work
+ novel design-space point, successfully balancing difficult goals
+ well situated in relation to other work in the area

Against:
- synthetic example is not particularly compelling
- design trade-offs are not tackled head-on
- writing is poorly structured and a little sloppy

This is a pleasingly in-depth paper about some difficult problems in an interesting area of language design.

It is a bit hard to follow, especially over pages 5--10 which are for me the critical part of the exposition. The wording is generally clear, but the high-level picture is obscured by a focus on smaller details. I was wondering whether it would be possible to factor the exposition into (1) the desired soundness properties, (2) the invariants over the object graph / program state that are enforced in order to obtain those properties (e.g. "no mut refs to objects reachable from a capsule ref, except..."), then (3) the type-checking and other semantic rules that are used to conservatively maintain those invariants. That's just one possible formulation, but overall I was grasping for a bigger picture during a lot of the language design details.

I would rather have seen a more convincing real example. What realistic and/or complex systems can be built straightforwardly with such a design? The single GUI example, and a synthetic GUI to boot (cf. reimplementation of something pre-existing), doesn't really convince. I am less concerned about soundness if the basic viability of the language design is still in doubt. Still, this may be a matter of taste... I realise that there is always more work to do and that the presented material amounts to quite a lot of effort. Still, it seems that the authors may have gathered more experience than they explicitly discuss -- e.g. on what basis were the relaxations on p10 found useful/necessary?

Another issue is with positioning and even-handedness. Like any design work, there are many trade-offs going on and, in the absence of long-term experience with such a design, we rely on argument of a design's merits relative to others. For me, some of the critical points about the design trade-offs were discussed much too late, and rather breezily. For example, one paragraph in the Conclusions section (1102--1112, about doubly-linked lists) belongs somewhere in the first half of the paper, since it is a nice illustration of what is being traded for what.

The GUI example also fares well because it is heavy on reads and light on writes. Efficiency-wise, the work's key observation seems to be that it's faster if you only check on writes than if you check on all public/qualifying method calls. That's not too surprising (and the language design arranges that writes only jeopardize local objects' invariants, not unbounded / far-away objects' ones). So what about a workload where writes are very common? As the text notes, in the GUI example "the number of checks is exponential in the depth of the GUI". It's not hard to do better than your competitors when they suffer a pessimizing exponential like that. But surely not all workloads have this property.

Detailed comments
-----------------
Since programmers often manually pepper critical code with assertions about local invariants, would it be possible to compare somehow against real examples of that practice? I'd find that interesting.

Very detailed comments:

Title and elsewhere: "runtime" => "run-time" (adjective not noun)

I've never understood why "class invariants" is the phrase, given that they're about objects and O-O languages do not need to involve classes.

28 and elsewhere: for me it would be more readable if "invariant" were written "invariant()", i.e. sigpost that it's a method. Similarly for some other method names used elsewhere.

40: "checked only by the pack operation" -- I was unclear on when pack operations occur. Are calls to pack() inserted automatically or manually?

41: "In order for this to be sound, some form of aliasing and/or mutation control is necessary." Is this really true? Surely it's about simultaneous soundness and efficiency?

50: "verify aliasing and immutability" -- should maybe be "verify the *absence* of aliasing and/or mutability"?

61: I wrote "need an example here, + explicit contrast with conventional case"

63: "See section 3..." -- fine, but you could state the general idea ("check on writes, not on method returns") up-front in a sentence or two. It is weird to see these cross-references (also to Appendix D!) at this point in the paper.

64: "leverage on" => "leverage" (or pick a different word... "exploit" maybe)

73: would appreciate forewarning that the code is using "mut" and "read" and "capsule" in ways that explained afterwards. Even better would be an up-front introduction of what they mean

105--107: "Our system performs..." -- there are three things here, so itemize them or at least use semicolons to better separate them

108: "there is only a single occurrence of this" -- clarify "*in moveTo* there is only..."

113: the analogy with pack/unpack wasn't really working for me... far better to make the protocol itself clearer by this point

118: the point here seems disingenous; TMs and their checking rules amount to system-wide restrictions, after all

Spec# example: could use an explanation of "expose", maybe around line 159 (or earlier!).

156--159: OK, but better to say what these keywords/annotations *do* than how many different kinds there are

161: start a new sentence at "We" (there are lots of run-ons like this)

167: "annotation burden was 4 times higher" -- measured how? say "annotation count" perhaps

182: "others work" => "others' work"

184--: again, punting this discussion to an appendix is not very nice

200: start new sentence at "here we"

200: "restrict, but not prevent" -- not clear what this means

216 and other places: "of [Gordon et al. 2016]" -- better would be "of Gordon et al [2016]", and also avoiding duplication of names where it occurs

223--4: "on aliasing mutation" => "on aliasing or mutation"

240: would be far clearer to say up-front that "capsule" means different things for fields versus locals

246: arguably better not to use the same highlighting for Java "final" as for the authors' language (is "final" even a keyword there?)

250: arguably clearer to swap this with the footnote about C, or at least hoist it into the main text... the two uses of "const" in C are exactly the right analogy to explain this, whereas "final" only works one way

272: ambiguous: "the same was as *it* [Pony] treats capsule variables"?

282: "and Gordon et al's language" => "and to the language of Gordon et al.".

296: don't give us a "glimpse"; explain it!

309: "mindlessly" -- a bit judgemental!

317: "that was being mutated" -- maybe clarify that this means an object with a possibly broken invariant

325: "objects" => "object's"

326: "This works since SES guarantees" -- YES, important point. say it sooner!

327: "not object" => "no object" (?)

332: "where access to resources are encoded as objects" -- doesn't really get the essence of object capabilities. "Where access *rights* to resources are encoded as *references to* objects" would be better.

337: "non deterministic" => "non-deterministic". It wasn't completely clear why determinism is so important here... this became clearer after one of the examples from later (the "schrodinger" on p14)

346 and later: introducing "capability object" and "capability method" and "capability class" really grated. Fundamentally a capability is a reference and not an object. So "capability object" cannot mean an object that is a capability, and "capability class" cannot mean a class of capability. But those would be the natural English interpretations of those phrases. Presumably the point is that "capability objects" are objects to which references have object-capability semantics. Inventing a new term like "cap-object" seems a clearer way to denote this.

379:"Gorodn"

389: "would be capability methods" => "would need to be capability methods, because..."

399: "all fields are instance private" => "all fields are instance-private"

403: ", see below for a discussion" => ". (See below for a discussion.)"

405--425: this section is explained backwards. Say what restrictions on reachability/access you want (the part in 419--426), then say what rules you picked to achieve this (the top bit).

422: "only a capsule mutator can see o.f as mut" -- insert "or its ROG" after "o.f", assuming I understood

427: perhaps worth reiterating: this restricts sharing, and that's exactly the point (capsule references don't point to shared object graphs)

455: "this will be garbage collectable" -- doesn't it depend what is done with "this" by the single operation which reads it? Or explain why not... e.g. maybe it's not possible to pass the value anywhere that will store it

459: "it is pure {footnote}" -- spacing

460: start new sentence at "if such a call..."

476: "We allow a couple of sound relaxations" -- what experience led you to conclude that these were desirable/necessary?

479: "the semantics of such methods must be reinterpreted..." -- not sure what this means. Those methods must be coded defensively?

485: "instead one" -- start new sentence here

491: "such as Gordon et al's" => "such as that of Gordon et al"

491: I'd have liked another section explaining all these "how to encode..." patterns. That's currently in the Appendix material, but for me would be more interesting to include some in the main body, maybe compensating by removing some of section 4's proof material into an Appendix.

510: reference to TAPL -- OK, but any particular chapter/section within that rather large book? 

575: "pretty standard" -- delete "pretty"

580: "uniform access principle" -- could use a reference

642: "is not final" -- could use some syntax highlighting (though as mentioned earlier, perhaps not the usual maroon)

658: "harder -- harder for whom?

674: remind us the invariant ("name is non-empty")

678: "prevented" => "forbidden" (you can't stop people trying...)

681: would like a reference to Javari paper(s) here

703: "in [Gordon et al 2012] they discuss" => "Gordon et al [2012] discuss"

704: "a few trusted primitives" -- give us a flavour?

721: "is unsound and would break out protocol" -- OK, but argue why this doesn't your problem? Why is it OK not to allow this?

780: hoist this footnote into the main text -- it merits it. You can get away with only one citation of Bloch.

789: "contained" -- clarify that this is "contained" positionally in X-Y space, not in an object containment sense

825: "circular" => "cyclic"

909: OK but this is at least pleasingly readable (and not actually very long)

922--930: hoist footnotes 19, 20 and 21 into the text

926: unsound alternatives are still worth comparing against, since they are what programmers currently do (e.g. peppering assert() calls everywhere)

943: "deep/strong interpretation" -- what does this mean?

945: "the work of Gordon et al's" => "the work of Gordon et al"

948: "unsuitable" -- for what/whom? suggest deleting this and just letting the downsides speak for themselves

948: "weaker properties" -- e.g. not what?

948: "doors which" => "doors, which"

951: new paragraph for ownership. What are the drawbacks of these approaches?

961: "must be final with only" => "must be final and have only"

972: "seem" => "seek"?

977: really no better reference than Wikipedia for class invariants? If no, at least give a precise retrieval date.

985: this citation is messed up... too long and shouldn't include first names

1007: "This is less problematic with a type system..." -- Devil's advocate would say it's not less problematic, it's just defined not to matter (getting the thing to type-check is the programmer's problem, and involves expressing your code in a more constrained language)

1012: "You can see our approach" => "One can see our approach"

1017: "Parkinson [Parkinson" => "Parkinson [" and delete "in his short paper he"

1020: in dynamic class-loading, why doesn't a load-time check (of a proof) suffice?

1023: new sentence at "It adds"

1039: "intentionally unsound" -- is this fundamental or incidental to Spec#'s design?

1047: "highly restrictive" -- more so than your language? say how if so

1055: what's the real problem with "||"? Fine to include it in a specification language; it's just a different operator than logical OR (if you want that, write "\/" or something)

1080: "non final" => "non-final"

1081: new sentence after "[Flanagan 2006]", and move the author name out of the brackets as usual

1089: comma after "invalid objects". In fact this whole sentence is a mess... rewrite to avoid two layers of colons.

1095: "less checks" => "fewer checks"

1097: "Spec#, (" -- delete comma

1102--1112: as noted, this belongs sooner in the paper



Review #60C
===========================================================================

Overall merit
-------------
D. Reject

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
The paper presents techniques to improve run-time checking
of invariants using type modifiers, which are already in use
for other purposes.

Assessment
----------
Type modifiers are in line of a long tradition of type
modifiers that aim to support encapsulation, uniqueness, and
immutability in object-oriented languages. OOP certainly
does seem to need some mechanisms along those lines for any
sort of scalable reasoning about programs.

The paper points out how bad naive run time checking for
invariants is in, e.g. Eiffel and D, where there are tens of
millions of checks performed instead of 77. A million times
improvement sounds good. But Spec# also achieves this, so the
discussion becomes more of an opinion on preference in the
flexibility/conciseness tradeoff.

Verifying effects in the presence of callbacks is
challenging, as we would normally like to have polymorphic
effects. This applies to absence of IO in particular. It is
not clear to me that type modifiers solve this in fully
satisfactory way. There are technical reports cited to make
the case that object capabilities are good enough, but I would
need a little more evidence.

My main concern is that the actual contribution of this
paper are somewhat thin once we have such an object
confinement system in place, so the paper is more
of a case in point of design of these languages than
a solid evaluation of run-time checking results.

Overall, I consider this work to be very promising
direction, but I do not consider the paper to be ready for
publication in this venue, especially given major presentation
concerns.

Detailed comments
-----------------
Questions:

Line 384: returning "true" in finite number of steps implies
termination. How does the system ensure termination when
traversing cyclic object graphs?

Presentation:

The paper spends 4 pages on reviewing existing language
features. This may be acceptable as the language is new, if
there is space.

But the paper moves a lot of important content into
appendix, even including related work comparisons and
proofs.  I find this choice very for a technical paper. I
would almost suggest to swap the roles of the paper body and
its appendix!

The related work appears to go off on a tangent from time
to time, more like notes after reading related paper than
comparisons of relevance of those related works. Then,
part of related work did not fit so it was moved to appendix.

Typesetting: the paper is using some non-standardly narrow
fonts, presumably to make formalizations fit within page
limits. I fear ACM publishers might not accept them.

L301: "mc is obviously ok" - this writing seems informal