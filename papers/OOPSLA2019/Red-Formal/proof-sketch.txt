// A sketch of the proof, plus some definitions only used internally by
// (i.e. they are not used by the algorithm, nor the properties we are trying to proove about it)

What we want to prove?
=================================================================================
forall (p, R) in ValidProblems: CollectMap(p; R) == BestMap(p; R)

Where:
  // '==' works on undefined as you would expect...

  BestMap(p; R) = StableMostSpecific(p; R; ValidMaps)
  //StableMostSpecific
  StableMostSpecific(p; R; f) = R' iff:
    forall p' in SimilarPrograms(p): MostSpecificMap(p'; f(p', R)) = R'
    with f a function (p,R)->Rz

// TODO: Other things to prove?
// The input Redirect passes to CollectMap is in ValidProblems
//    Thus Redircet[CollectMap := BestMap] == Redirect
// Proof Meta-level soudnes ++ internal stability <==> validredirection
=============================================================================================
p' in SimilarPrograms(p) iff p <= p' and p.top() = p'.top()
=================================================
// Core definitions for the proof

R' in SatisfiedMaps(p; R) iff SatisfiedSolutions(p; R; CollectConstraints(p; R))
R' in SatisfiedSolutions(CCz)(p; R) iff
  R satisfies_p CCz && PossibleTargets(p; R) && R' in PossibleMaps(p; R) && R consistent_p CCz

// Reminder:
//CollectMap(p; R) = CollectSolution(p; R; CollectConstraints(p; R))

BestSatisfiedMap(p; R) = BestSatisfiedSolution(p; R; CollectConstraints(p; R))
BestSatisfiedSolution(p; R; CCz) = StableMostSpecific(p; R; SatisfiedSolutions(CCz))
Define R in CollectMappings(p; CCz), iff:
  dom(R) = dom(CCz)
  forall Cs in dom(CCz): R(Cs) in CollectTargets(p; CCz; Cs)

------------------------------------------------------
Proof that forall (p, R) in ValidProblems: CollectMap(p; R) == BestMap(p; R)
------------------------------------------------------
Suppose (p, R) in ValidProblems

Let CCz = CollectConstraints(p; R)
// Proof that CCz is finite:
//    It has to be, as we never pull Cs's or P's out of thin air,
//    rather we always get them from somehwere in the program (or our current constraint set), since R and p are neccesarily finite, it follows that CCz is also

// Proof that CCz is consitantly defined:
// I.e. that we cant show that CC in CCz and CC not in CCz at the same time
//    well Collect never checks whether something is not in Collect, i.e.
//    we can never derive a proof that CC is not in CCz directly, we can only derive proofs of CC in CCz (So it's all good)
// TODO: Prove that CCz is computable? (i.e. we can print everything)
//    Well it's finite, and everything it uses is computable/decidable...



Theorem 1: Forall (p, R) in ValidProblems, and CCz = CollectConstraints(p; R):
  //you can come up with a redirection in a larger program that is not applicable in the original one
  If not CompletedConstraints(p; CCz) and ValidMaps(p; R) != {} then
   exists p' in SimilarPrograms(p) and R' in ValidMaps(p'; R) such that range(R') not subseteq dom(p)
  // Proof by construction


  If not CompletedConstraints(p; CCz) and ValidMaps(p; R) != {} then
   exists p' in SimilarPrograms(p) and R' in ValidMaps(p'; R) such that range(R') not subseteq dom(p)

!A & B!={} => E p' in S s.t. (E R' in V(p') s.t. notRange(R'))

!A & B!={} => !V p' in S, R' in V(p') !notRange(R')

V p' in S, R' in V(p') !notRange(R') => A || B=={}
===========================================================
!A & B != {} => E p' in S s.t.    (E R' in V(p') s.t. notRange(R'))
!A & B != {} => !(V p' in S s.t. !(E R' in V(p') s.t. notRange(R')))


!A & B!={} => !(V p' in S, R' in V(p') !notRange(R'))

(V p' in S, R' in V(p') !notRange(R')) => (A || B={})



-----------
Theorem 1.b:
Forall (p, R) in ValidProblems, p' in SimilarPrograms(p), R' in ValidMaps(p'; R)
  if range(R') subseteq dom(p) then
  either CompletedConstraints(p;CollectConstraints(p; R)) or ValidMaps(p; R) == {}

By theorem 5, R' in ValidMaps(p; R) thus
Theorem 1.c:
Forall (p, R) in ValidProblems, p' in SimilarPrograms(p), R' in ValidMaps(p'; R)
  if range(R') subseteq dom(p) then CompletedConstraints(p;CollectConstraints(p; R))

Theorem 1.d:
Forall (p, R) in ValidProblems,
  if (forall p' in SimilarPrograms(p), ValidMaps(p'; R) = ValidMaps(p; R) && ValidMaps(p; R) != {})
  then CompletedConstraints(p; CollectConstraints(p; R))

Forall (p, R) in ValidProblems,
  if !CompletedConstraints(p; CollectConstraints(p; R))
  then exists p' in SimilarPrograms(p), ValidMaps(p'; R) != ValidMaps(p; R) || ValidMaps(p; R) == {}
  

Theorem 1.e:
Forall (p, R) in ValidProblems,  
  if !CompletedConstraints(p; CCz) and ValidMaps(p; R) != {}
  then E p' in SimilarPrograms(p), ValidMaps(p'; R) != ValidMaps(p; R)


  If not CompletedConstraints(p; CCz) and ValidMaps(p; R) != {} then
   exists p' in SimilarPrograms(p) and R' in ValidMaps(p'; R) such that range(R') not subseteq dom(p)

  if not CompletedConstraints(p; CCz) and ValidMaps(p; R) != {} then
    exists p' in SimilarPrograms(p), ValidMaps(p'; R) != ValidMaps(p; R)

if not CompltedConstraints(p; CCz) and ValidMaps(p; R) != {}
  then BestMap(p; R) is undefined
  

if forall p' in SimilarPrograms(p), ValidMaps(p'; R) == ValidMaps(p; R)
then CompletedConstraints(p; CCz)


if forall p' in SimilarPrograms(p),  ValidMaps(p'; R) / ValidMaps(p; R) != {}//vr do not grow
then CompletedConstraints(p; CCz)

-when vr can grow
R' in ValidMaps(p; R),
range(R') has interface in method parameter

--
if exists R' in ValidMaps(p; R) s.t. Cs->P in R' has interface that do not appear as ret.type (or implements)
  p(P) is interface
  forall m in p(Cs) m.T !=Cs~~
then exists  p' in SimilarPrograms(p),  ValidMaps(p'; R) != ValidMaps(p; R)

if exists  p' in SimilarPrograms(p),  ValidMaps(p'; R) != ValidMaps(p; R)
then exists R' in ValidMaps(p; R) s.t. 
//   Cs->P in R' has interface that do not appear as ret.type (or implements)
  Cs->P in R' has interface, R do not constraint Cs
  Cs appear as meth parameter
  
---------------------------------------------------
//if not CompletedConstraints...
if ValidMaps grows...

There exists a P such that Cs <= P in CCz:
  P is an interface
  _ <= Cs not in CCz

  Let Csz = { Cs' | _ <= Cs' in CCz}
  Forall Cs' in Csz:
    Either Cs does not appear in p(Cs') as a return or implements type
  Exists Cs' in dom(R) such that
    Cs is reachable from p(Cs') by only passing through things in Csz

/* It is possible that there exists Cs' in Csz such that
  Cs' is only reachable from dom(R) by passing through Cs
*/
--------------------------------------------

By theorem 5:
  ValidMaps(p; R) subseteq ValidMaps(p'; R)
  if R' in V(p')/V(p) then range(R')notin dom(p)

exists R' in V(p'), with range(R') notin dom(p)

 



------
if not CompletedConstraints(p; CCz) then there is 
at least one Cs <=P (without the corresponding) where isInterface(p,P) //easy

then, Cs may be interface or class

if Cs class
  consider the case where Cs=P was a validMap,
  then consider p' where P is implemented (again) with P0,
  clearly Cs=P0 is a validMap such that range not subset
  B <=Any

otherwise no valid redirection has Cs=P....

EC: {interface implements EB Void m(EB x)}
EB: {interface Void m(EB x)}
EV: {method Void m(EB b)}
{ 
  B: {interface Void m(B x)}
  V: {method Void m(B b)}
  method Void stuff(B b) b.m(b)
  Class: {implements B Void m(B x) this.m(x)}
}<V=EV>//B=EC
*/
{ 
  //EC: {interface Void m(EC x)}
  //V: {method Void m(EC b)}
  method Void stuff(EC b) b.m(b)
  Class: {implements EC Void m(EC x) this.m(x)}
}
------------------------------
I:{interface}
//A:{interface implements I}
EV: {method Void m(I b)}
{ 
  B: {}
  V: {method Void m(B b)}
}<V=EV> // EV <= V <= EV, B <= I
//clearly B=A, B=I
--------------------------------
I  = interface {Void m(I)}
//A  = interface(I)  {Void m(I)}
EV = class     {Void m(I)}
{ 
  B = class    {Void m(B)}
  V = class    {Void m(B)}
}< V = EV> // EV <= V <= EV, B <= I
//clearly B=A, B=I
---------------------------------
EC  = interface {EB m()}
EB  = interface {EC m()}

//EC' = interface(EC)  {EB' m()}
//EB' = interface(EB)  {EC' m()}

//EC' = interface(EC)  {EB m()}
EV = class     {Void m(EB)}
{ 
  C = class    {B m()}
  B = class    {C m()}
  V = class    {Void m(B)}
  B stuff(B b) = (
    C x = b.m();
    x.m())

/*
  EB stuff(EB b) = (
    EC' x = b.m();
    x.m())
*/
}< V = EV> // EV <= V <= EV, B <= EC,
//clearly B=A, B=I
// B=EB, C=EC and B=EB', C=EC'

B stuff(B b) = b.m().m()
--------------------------------


Theorem 3: CollectSolution(p; R; CCz) in ValidMaps(p; R)
  // Proof by contradiction

Theorem 2: ValidMaps(p; R) subseteq SatisfiedSolutions(CCz)(p; R) // Moderetly hard, but definently true
  // Direct proof

Theorem 4: If forall p' in SimilarPrograms(p), f(p', R) = f(p, R) then
  StableMostSpecific(p; R; f) = MostSpecificMap(f(p; R))

Theorem 5: 
  // Making the program bigger can only add redirections that werent Possible in the original (e.g. because they reference paths that dont exist)
  forall p' in SimilarPrograms(p): (ValidMaps(p'; R) \ ValidMaps(p; R)) disjoint PossibleMaps(p; R)
  // True?

Lemma 1: If MostSpecificMap(p; R,Rz,Rz') = R, then MostSpecificMap(p; R,Rz) = R
  // Obviously

forall (p, R) in ValidProblems

CCz = CollectConstraints(p; R)
// trying to proove that, CollectSolution(p; R; CCz) == BestMap(p; R)

// Note: all the '~~~~~~~~~~~~~~~~~'s bellow indicate easy parts of the proof to fill in
// Whereass the theorems above are non trivial
1. Suppose CollectMap(p; R) is undefined, then BestMap(p; R) is undefined
  1.1. Suppose CompletedConstraints(p; CCz), then BestMap(p; R) is undefined
    1.1a. SatisfiedSolutions(CCz) = {}. 
      ~~~~~~~~~~~~~~~~~
    By Theorem 2, we have ValidMaps(p; R) = {}, therefore BestMap(p; R) is undefined.

  1.2. Suppose not CompletedConstraints(p; CCz), then BestMap(p; R) is undefined
    2.2a. CollectMap(p; R) is undefined.
      ~~~~~~~~~~~~~~~~
    By Theorem 1, BestMap(p; R) is undefined.

2. Suppose /*CompletedConstraints(p; CCz), and*/ CollectMap(p; R) = R', then BestMap(p; R) = R'
  2a. R' in SatisfiedSolutions(CCz)(p; R)
    ~~~~~~~~ // The only non-trivial part is that R' in PossibleMaps(p; R)
  2b. MostSpecificMap(SatisfiedSolutions(CCz)(p; R)) = R'
    ~~~~~~~~ // by definition of CollectSolutions
  2c. forall p' in SimilarPrograms(p), SatisfiedSolutions(CCz)(p; R) == SatisfiedSolutions(CCz)(p'; R)
    ~~~~~~~~
  2d. By 2a, 2b and 2c, and theorem 4, StableMostSpecific(p; R; SatisfiedSolutions(CCz)) = R'
    ~~~~~~~~~~~~~~~~~
  Obviously BestMap(p; R) in ValidMaps(p; R).
  By Theorem 2 and, Theorem 3 we have:
     R' in ValidMaps(p; R) subseteq SatisfiedSolutions(CCz)(p; R)
  And by 2b and Lemma 1 we have that
   R' = MostSpecificMap(ValidMaps(p; R)).
  // How do we show that this won't change with other p's?
  Since SatisfiedSolutions(CCz)(p; R) subseteq PossibleMaps(p; R), by Theorem 2 and 2c it follows that
    forall p' in SimilarPrograms(p), ValidMaps(p; R) == ValidMaps(p'; R)
  By theorem 4 it follows that BestMap(p; R) = StableMostSpecific(p; R; ValidMaps) = R'.

Therefore, forall (p, R) in ValidProblems: CollectMap(p; R) == BestMap(p; R)


=============
// Rules 3d, 4 and 5 ensure the other cases (i.e. implements, return types and paramater types)
// Proof sketch that the mapping
// can't have gone wrong due to an interface method return type not lining up
R(Cs1) = P1, R(Cs2) = P2
P1 <= Cs1 // by rule 11b
P1' <= Cs1 // by rule 4
P2 <= Cs2 // by rule 11b

         P2.s.P = P1'
Where: Cs2.s.Cs = Cs1

// So we have P1' <= P1
// By collectTargets, we have that
 Cs2 -> P2 consistent_p CCz
And so Cs1->P1' satisfies_p P1 <= Cs1
and P1 <= P1'
and hence P1' = P1,
a contradiction.

=============
For paramater types:
	note that rule 8d forces rule 7 to apply
	since we cannot refine paramater types,
	this will work!
===============================================

---------------
Proof 2b

Assumptions:
   (p, R0) in ValidProblems(p; R0)
   CCz = CollectConstraints(p; R0)
   CompletedConstraints(p; CCz)
   CollectMap(p; R0) is defined
Goal:
  SatisfiedMaps(p; R0) subseteq ValidMaps(p; R0)
----------------------------------------------------------------------
Assumptions:
  R in SatisfiedMaps(p; R0)
  R not in ValidMaps(p; R0)
Goal:
  contradiction
----------------------------
Since the only part of valid ValidMaps not ensured by SatisfiedMaps is:
  forall Cs in dom(R): p|- R(Cs); p[R(Cs)] <= Cs; R(p[Cs])
this must not be true.
-------------------------------------
Let:
  P = R(Cs)
  L = p[Cs]
  L' = p[P]

Assumptions:
  Cs in dom(R)
  p |/- P; L' <= Cs; R(L)
------------------------------
One of the conditions of the <= must have failed, it can't be a condition on the sdom or interface keyword,
because those are checked by PossibleTarget, so the only possible failures are that:
    exists P' in p.minimize(R(L.Pz)) such that: p |/- P <= P'
    exists s in sdom(L) such that:
        // Note: L'(s) must exist due to PossibleTarget
        p |/- L'(s).mt <= R(L(s).mt)
        if L.interface? = interface: p |/- R(L(s).mt) <= L'(s).mt
Due to PossibleTarget, the failure must be on a Cs', // TODO: Explain
As such, we have either
Case 1: exists Cs' in L.Pz, such that p |/- P <= R(Cs')
Case 2: exists s in sdom(L) such that p |/- L'(s).P <= R(L(s).Cs)
Case 3: exists s in sdom(L), and i, such that p |/- R(L(s).Csi) <= L'(s).Pi

Case 4: L.interface? = interface and exists s in sdom(L) such that p |/- R(L(s).Cs) <= L'(s).P
Case 5: L.interface? = interface and exists s in sdom(L), and i, such that p |/- L'(s).Pi <= R(L(s).Csi)

In particular, we must have that CCz does not imply one of the above relations.

Since CompletedConstraints(p; CCz) we must have a P' <= Cs in CCz, and by CollectSolution, we must have P' <= P
----------------------------------------------------------------------
Assumptions
  PL <= Cs in CCz, PL <= P
  PL' <= Cs' in CCz, PL' <= P'
  R(Cs') = P'
---------------------------------------------


Case 1: exists Cs' in L.Pz, such that p |/- P <= R(Cs')
============================================================
  Rule 3a/b/c/d & 8'd

Let Pz = {Px in SuperClasses(p; PL) | PossibleTarget(p; Cs'; Px)}

Suppose Rule 3a did apply,
  then MostSpecific(p; Pz) is defined, lets say it equals P2
  Since everything in Pz is a superclass of PL,
  it follows that PL <= P2, since we have PL <= P

  So we had the constraint, P2 <= Cs'
  and hence P2 <= P'
  And so PL <= P'
  And we have P </= P'

//  and We have PossibleTarget(p; Cs'; R(Cs')), so
 ........



Case 2: exists s in sdom(L) such that p |/- L'(s).Cs <= R(L(s).Cs)
------------------------------
Let L(s).Cs = Cs'
L'(s).Cs = P'

PL <= P = R(Cs)

  P' </= R(Cs')
Since we have PL <= P
  and s in sdom(L')
  We have s in sdom(p[PL])
  We must have p[PL](s).P = PLR

  PLR <= P'
  By rule 4
    we must have a constraint
         PLR <= R(Cs')

  PLR <= P' </= R(Cs')
  PLR <= R(Cs')






Theroem InternalStability:
  forall p ~R~ p',  BestMap_i(p; R) = BestMap_i(p'; R)

p ~R~ p'
  // RedirectSet* also includes nested classes?
  p.top()[only RedirectSet*(p; R)] = p'.top()[only RedirectSet*(p'; R)]
  // also delete method bodies...
--------------------------------------------------------------------------
