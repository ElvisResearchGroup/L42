reuse [AdamsTowel]

Secret = {...}//THIS FILE IS NOT COMMITTED. You have to fill it with you git access token, as in
//class method S #$of()=S"ghp_..."

//Module 1
HttpRequest = Trait:{...}
HttpRequestDeployed = System.extractModule(
  Class:HttpRequest['HttpRequest$Real=>'HttpRequest.Real],
  name='HttpRequest) //ready for load

//Module 2, depends from Module 1; inlines it internally
GitWriterLib = Trait({...})['GitWriter.HttpRequest.Fail=>'GitWriter.Fail]
GitWriterDeployed = System.extractModule( //ready for load
  Class:GitWriterLib, name='GitWriter)[
    hide='This.#apply(info,pre,center,contentBase64);
    hide='This.getSha(user,repository,path,branch);
    ]

//actually instantiate GW, we need it later
GW = Load:GitWriterDeployed.code()
/*
With the right secret, the code above would test GW, but it is very slow,
so much that it is not worth keeping this test
UseGW = (
  GW.#$of(
    token=Secret.#$of()
    message=S"now from 42 string repr"
    )(
    user=S"example42gdrive"
    repository=S"Example1"
    path=S"bar2/foo.txt"
    contentBase64=S"AbbbbA=="
    )
  )
*/

//Module 3
DeployLib = Trait:{...}
DeployLibDeployed = System.extractModule( //ready for load
  Class:DeployLib, name='LoadDeploy)

//now we can actually deploy on git
LoadDeploy = Load:DeployLibDeployed.code()
DeployGit = LoadDeploy.with(writer=GW)
Writer = {class method mut GW #$of(S that) = 
  GW.#$of(token=Secret.#$of(), message=that++S" automatic release 42V0.95")
  }




//Module 0  -- Towel AdamsTowel --> AdamsTowel
TaskDeployAdams = DeployGit.towel(Trait({reuse [AdamsTowel]})
  on=Url"github.com/%Secret.repo()/AdamsTowel.L42"
  writer=Writer.#$of(S"AdamsTowel")
  )

//Module 1
TaskDeployHttpRequest = DeployGit.towel(HttpRequestDeployed()
  on=Url"github.com/%Secret.repo()/HttpRequest.L42"
  writer=Writer.#$of(S"HttpRequest")
  )
//Module 2
TaskDeployGitWriterDeployed = DeployGit.towel(GitWriterDeployed()
  on=Url"github.com/%Secret.repo()/GitWriter.L42"
  writer=Writer.#$of(S"GitWriter")
  )
//Module 3
TaskDeployDeployLib = DeployGit.towel(DeployLibDeployed()
  on=Url"github.com/%Secret.repo()/Deploy.L42"
  writer=Writer.#$of(S"Deploy")
  )

ToJar=Trait:{reuse [AdamsTowel]
  Point = Data:{Num x, Num y, Any note}
  A={class method Void foo()=(
    p = Point(x=3Num,y=5Num, note=Name"Info.info()")
    Debug(S"hello WORLD ToJar %p")
    )}
  class method Void #$main()=A.foo()
  }
  
DeployJar = DeployGit.jar(ToJar()
  on=Url"github.com/%Secret.repo()/ExampleJar.L42"
  writer=Writer.#$of(S" Example Jar")
  )
  
AllDone = {}:Test"All done reached"(Bool.true())