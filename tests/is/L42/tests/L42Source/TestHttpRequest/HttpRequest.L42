reuse [AdamsTowel]
HttpRequest = {interface 
  Fail=Message:{[Message.Guard]}
  Response=Data:{I statusCode, S body}
  mut method Response (S request, S body)[Fail]
  }
HttpRequest$Real = Public:{
  [HttpRequest]
  @Public class method mut This #$of() = this.#$of::0()
  class method mut This #$of::0()
  @Public mut method HttpRequest.Response (S request, S body)[HttpRequest.Fail] = {
    res = This.#$makeRequest(request=request, body=body)
    index = res.indexOf(S.nl()) //must be present
    return \(
      statusCode=I(string=res.subString(0I to=index))
      body=res.subString(index+1I to=\size)
      )
    catch System.JavaException x exception HttpRequest.Fail"%x.text()"
    }
  class method S #$makeRequest(S request, S body)[System.JavaException] = native{
    httpSlave{}{
      record SPair(String s1, String s2) {
        static SPair of(String s, String sep){
          int index1=s.indexOf(sep);
          if (index1==-1) {throw new IllegalArgumentException("Separator "+sep+" not present in string "+s);}
          var s1 = s.substring(0,index1);
          var s2 = s.substring(index1+sep.length(),s.length());
          return new SPair(s1,s2);
          }
        }
      String request=#1, body=#2;
      var client = java.net.http.HttpClient.newHttpClient();
      SPair top = request.lines().limit(1).map(s->SPair.of(s," ")).findFirst().get();
      var b = java.net.http.HttpRequest.newBuilder();
      b = b.uri(java.net.URI.create(top.s2()));
      java.util.List<SPair> headers = request.lines()
        .skip(1)//It is better to have the list
        .map(s->SPair.of(s,":"))
        .collect(java.util.stream.Collectors.toUnmodifiableList());
      for(var pi:headers){
        b = b.header(pi.s1(),pi.s2());
        }
      java.net.http.HttpRequest.BodyPublisher bp=body.isEmpty()?
        java.net.http.HttpRequest.BodyPublishers.noBody():
        java.net.http.HttpRequest.BodyPublishers.ofString(body);
      b = b.method(top.s1(),bp);
      java.net.http.HttpResponse<String> response = client.send(b.build(), java.net.http.HttpResponse.BodyHandlers.ofString());
      return ""+response.statusCode()+"\n"+response.body();
    }} error void
  }