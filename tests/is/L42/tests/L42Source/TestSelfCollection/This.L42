reuse [AdamsTowel]
A=Organize:{
  L$={}
  L=Collection.list(L$)
  BoxL=Data:{L that}
  S$={}
  S=Collection.set(S$)
  BoxS=Data:{S that}
  SN=Collection.set(Num)
  SSN=Collection.set(SN)
  M$={} 
  M=Collection.map(key=M$ val=M$)
  BoxM=Data:{M that}
  O$={}
  O=Collection.optional(O$)
  BoxO=Data:{O that}
  Ol=Collection.optional(This1.S.List)
  Lol=Collection.list(Ol)
  Mol=Collection.map(key=This1.S, val=Ol)
  A={class method This()}
  OA=Collection.optional(A)
  Loa=Collection.list(OA)
  Soa=Collection.set(OA)
  Sos=Collection.set(This1.S.Opt)
  Mos=Collection.map(key=I,val=This1.S.Opt)
  La=Collection.list(A)
  Ola=Collection.optional(La)
  Mini=Collection.map(key=A, val=La)
  Sola=Collection.set(Ola)
  MM=Collection.map(key=M,val=M)
  MMBox=Data:{MM that}
  }
MainMMBox= (
  imm m = A.M()
  {}:Test""(
    actual=A.MMBox(\[key=\(), val=\()]) 
    expected=S"""
    |A.MMBox(mM1)
    |  where:
    |    mM1 = A.MM(hi=hi::114_2, hm=hm::114_3)
    |    hi::114_2 = A.MM.Hi::114{m4->m4}
    |    hm::114_3 = A.MM.Hm::114{}
    |    m4 = A.M(hi=hi::39_5, hm=hm::39_3)
    |    hi::39_5 = A.M.Hi::39{}
    """)
    //hm::114_3 and hm::39_3 
    //are both empty maps, thus identified
  {}:Test""(
    actual=A.MMBox(\[key=\[key=m val=m], val=\()]) 
    expected=S"""
    |A.MMBox(mM1)
    |  where:
    |    mM1 = A.MM(hi=hi::114_2, hm=hm::114_3)
    |    hi::114_2 = A.MM.Hi::114{m4->m5}
    |    hm::114_3 = A.MM.Hm::114{}
    |    m4 = A.M(hi=hi::39_6, hm=hm::39_3)
    |    m5 = A.M(hi=hi::39_7, hm=hm::39_3)
    |    hi::39_6 = A.M.Hi::39{m5->m5}
    |    hi::39_7 = A.M.Hi::39{}
    """)
  )
MainBoxes=(
  bl=A.BoxL(\())
  bs=A.BoxS(\())
  bm=A.BoxM(\())
  bo=A.BoxO(\())
  {}:Test""(expected=S"A.BoxL([])" actual=bl.toS())
  {}:Test""(expected=S"A.BoxS((set={}))" actual=bs.toS())
  {}:Test""(expected=S"A.BoxM((hi={}, hm={}))" actual=bm.toS())
  {}:Test""(expected=S"A.BoxO(<>)" actual=bo.toS())
  bl1=A.BoxL(\[\()])
  bs1=A.BoxS(\[\()])
  bm1=A.BoxM(\[key=\(),val=\()])
  bo1=A.BoxO(\(\()))
  {}:Test""(expected=S"A.BoxL([[]])" actual=bl1.toS())
  {}:Test""(expected=S"A.BoxS((set={(set={})}))" actual=bs1.toS())
  {}:Test""(expected=S"""
    |A.BoxM(m1)
    |  where:
    |    m1 = A.M(hi=hi::39_2, hm=hm::39_3)
    |    hi::39_2 = A.M.Hi::39{m4->m4}
    |    hm::39_3 = A.M.Hm::39{}
    |    m4 = A.M(hi=hi::39_5, hm=hm::39_3)
    |    hi::39_5 = A.M.Hi::39{}
    """,
    actual=bm1.toS())
  {}:Test""(expected=S"A.BoxO(<>)" actual=bo1.toS())
  bl2=A.BoxL((l=A.L() l.#add(right=l) l))
  //bs2=A.BoxS(..) circular set can not happen
  bm2=A.BoxM((m=A.M() m.#put(key=\() val=m) m))
  bo2=A.BoxO((o=A.O(o) o))
  A.O oo=(o=A.O(o) o)
  {}:Test""(expected=S"""
  |A.BoxL(l1)
  |  where:
  |    l1 = A.L[l1]
  """ actual=bl2.toS())
  {}:Test""(expected=S"""
  |A.BoxM(m1)
  |  where:
  |    m1 = A.M(hi=hi::39_3, hm=hm::39_2)
  |    hm::39_2 = A.M.Hm::39{m4->m1}
  |    hi::39_3 = A.M.Hi::39{}
  |    m4 = A.M(hi=hi::39_3, hm=hm::39_5)
  |    hm::39_5 = A.M.Hm::39{}
  """ actual=bm2.toS())
  {}:Test""(expected=S"""
  |A.BoxO(<<>>)//print is ok, fwd resolution is buggy
  """ actual=bo2.toS())
  {}:Test""(expected=S"""
  |<<<>>>//print is ok, fwd resolution is buggy
  """ actual=S" %oo, %oo.val(), %oo.val().val() ")
  void  
  )
  

MainMini=(
  mini=A.Mini[key=A.A(), val=A.La[]]
  Debug(mini)
  {}:Test""(expected=S"{A.A()->[]}" actual=mini)
  )
MainSoa=(
  soa0=A.Soa[A.OA()]
  Debug(soa0)
  {}:Test""(expected=S"{<>}" actual=soa0)
  soa1=A.Soa[A.OA(A.A())]
  Debug(soa1)
  {}:Test""(expected=S"{<A.A()>}" actual=soa1)
  )
MainLoa=(
  loa0=A.Loa[A.OA()]
  Debug(loa0)
  {}:Test""(expected=S"[<>]" actual=loa0)
  loa1=A.Loa[A.OA(A.A())]
  Debug(loa1)
  {}:Test""(expected=S"[<A.A()>]" actual=loa1)
  )
MainSola=(
  sola0=A.Sola[\()]
  Debug(sola0)
  {}:Test""(expected=S"{<>}" actual=sola0)
  sola1=A.Sola[\(A.La[])]
  Debug(sola1)
  {}:Test""(expected=S"{<[]>}" actual=sola1)
  )

MainMos=(
  mos=A.Mos[key=12\, val=S.Opt(S"hi")]
  Debug(mos)
  {}:Test""(expected=S"{12-><%S.dq()hi%S.dq()>}" actual=mos)
  )
MainMols=(
  imm ol=A.Ol()
  mol=A.Mol[key=S"hello" val=ol]
  Debug(mol)
  {}:Test""(expected=S"{%S.dq()hello%S.dq()-><>}" actual=mol)  
  )
MainSos=(
  sos=A.Sos[S.Opt(S"hi")]
  Debug(sos)
  {}:Test""(expected=S"{<%S.dq()hi%S.dq()>}" actual=sos)
  )

MainL=(
  l1=A.L()
  l2=A.L()
  imm l3=A.L()
  l1.#add(right=l2)
  l1.#add(right=l2)
  l1.add(right=l3)
  Debug(l1)
  Debug(l1.size())
  {}:Test""(expected=S"[[]; []; []]" actual=l1)
  {}:Test""(expected=3I actual=l1.size())
  )
MainSSN=(
  s1=A.SSN()
  imm s2=A.SN()
  imm s3=(
    s=A.SN()
    s.add(3Num)//s2
    s
    )
  s1.add(s2)
  Debug(s1)
  s1.add(s3)
  Debug(s1)
  Debug(s1.size())
  {}:Test""(expected=S"{{}; {3}}" actual=s1)
  {}:Test""(expected=2I actual=s1.size())
  )
MainS=(
  s1=A.S()
  imm s2=A.S()
  imm s3=(
    s=A.S()
    s.add(s2)
    s
    )
  s1.add(s2)
  Debug(s1)
  s1.add(s3)
  Debug(s1)
  Debug(s1.size())
  {}:Test""(expected=S"{{}; {{}}}" actual=s1)
  {}:Test""(expected=2I actual=s1.size())
  )
MainM=(
  mut m1=A.M()
  imm m2=A.M()
  mut mVal=A.M()
  imm m3=A.M[key=m2 mutVal=A.M()]
  m1.put(key=m2 val=m2)
  Debug(m1)
  m1.#put(key=m3 val=mVal)
  Debug(m1)
  Debug(m1.size())
  {}:Test""(expected=S"{{}->{}; {{}->{}}->{}}" actual=m1)
  {}:Test""(expected=2I actual=m1.size())
  )
MainO=(
  o1=A.O()
  o2=A.O(o1)
  o3=A.O(o2)
  Debug(o1)
  {}:Test""(expected=S"<>" actual=o1)
  Debug(o2)
  {}:Test""(expected=S"<<>>" actual=o2)
  {}:Test""(expected=S"<<<>>>" actual=o3)
  )
MainLols=(
  imm ss=S.List[S"hello"; S" ";S"world"]
  imm ol=A.Ol(ss)
  lol=A.Lol[ol;A.Ol();ol]
  Debug(lol)
  mol=A.Mol[key=lol.val(0\).val().val(0\) val=lol.val(2\)]
  Debug(mol)
  {}:Test""(expected=S"[<[%S.dq()hello%S.dq(); %S.dq() %S.dq(); %S.dq()world%S.dq()]>; <>; <[%S.dq()hello%S.dq(); %S.dq() %S.dq(); %S.dq()world%S.dq()]>]" actual=lol)
  {}:Test""(expected=S"{%S.dq()hello%S.dq()-><[%S.dq()hello%S.dq(); %S.dq() %S.dq(); %S.dq()world%S.dq()]>}" actual=mol)  
  )