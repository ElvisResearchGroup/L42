reuse [AdamsTowel]
Main=(
  Debug(S"Hello world")
  )
JSon = Organize:{
  Value = {interface}
  Member = Data:{S name, Value val}
  Object = Class:Trait({[Value]}):Collection.list(Member)
  Array = Class:Trait({[Value]}):Collection.list(Value)
  String = S.Alphanumeric:{[Value] class method This (S string) = This(string) } 
  Number = S.Alphanumeric:{[Value] class method This (S string) = This(string) }
  Bool$ = Collection.Enum:{[Value] True={} False={} }
  Null = Data:{[Value]}
  Parse =Data:{
    Fail = Message:{[Message.Guard]}
    S text
    var I index
    read method Bool *(S that) = this.text().startsWith(that, leftOffSet=this.index())
    mut method Void skipWs() = while this*S" " || this*S.nl() || this*S.tab() (this.index(\index+1\))
    class method Value (S that) = This(text=that,index=0I)<:This.value()//why this compiles? it is inferring mut This?
    mut method Value value() = {
      this.skipWs()
      if this*S"null" return Null()
      if this*S"true" return Bool.True()
      if this*S"false" return Bool.False()
      if this*S.dq() return this.string()
      if this*S"{" return this.object()
      if this*S"[" return this.array()
      return this.number()
      }
    mut method Value string()=(
      this.index(\index+1\)
      start=this.index()
      while !(this*S.dq()) (///no , this may just run out to infinity
        while !(this*S"\") || !(this*S.dq()) (this.index(\index+1\))
        if this*S"\" this.escape()
        )
      )
    mut method void escape() = {
      this.index(\index+1\)
      symb=this*S.dq() || this*S"\" || this*S"/" 
      feeds=symb || this*S"n" ||this*S"r"||this*S"t"
      all = feeds|| this*S"b" || this*S"f"
      if all return void
      if !this*S"u" error this.hex()hex hex hex hex
      }
    mut method Value hex()=(
      this.index(\index+1\)
      //digit | 'A' . 'F' | 'a' . 'f'
      )
    mut method Value object()=(error X"")
    mut method Value array()=(error X"")
    mut method Value number()=(error X"")
    }
  }

  
/*
value::= object | array | string | number | "true" | "false" | "null"
object::= '{' ws members '}' ///why this instead of ws in members
members::=member | member ',' ws members
member::= string ws ':' element
array::='[' ws elements ']'
elements::= element | element ',' ws elements
element::= ws value ws
string::= '"' characters '"'
characters::=""| character characters
character::= '0020' . '10FFFF' - '"' - '\' | '\' escape
escape::='"'|'\'|'/'|'b'|'f'|'n'|'r'|'t'|'u' hex hex hex hex
hex::=digit | 'A' . 'F' | 'a' . 'f'
number::= integer fraction exponent
integer::= digit | onenine digits | '-' digit | '-' onenine digits
digits::= digit | digit digits
digit::= '0' | onenine
onenine ::= '1' . '9'
fraction ::= "" | '.' digits
exponent ::= "" | 'E' sign digits | 'e' sign digits
sign ::= "" | '+' | '-'
ws::="" | '0020' ws | '000A' ws | '000D' ws | '0009' ws

*/