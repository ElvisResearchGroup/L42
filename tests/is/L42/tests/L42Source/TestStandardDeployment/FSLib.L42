reuse [AdamsTowel]
FileSystem = {interface 
  Fail=Message:{[Message.Guard]}
  mut method Void makeDirs(Url that)[Fail]
  mut method Void delete(Url that)[Fail]
  mut method Void write(Url on, S content)[Fail]
  mut method Void write(Url on, S contentBase64)[Fail]
  mut method S read(Url that)[Fail]
  mut method S readBase64(Url that)[Fail]
  @{
    Url as for the WhatWG URL Standard, where relative urls are allowed
    In particular, if the provided url is relative,
    it is resolved against the current location.
    For example
    "https://google.com/bla/foo" is absolute so is left untouched
    "bla/foo" becomes something like "file:/C:/Users/--/Desktop/--/--/bla/foo"
        Note that "./bla/foo" would resolve exactly as "bla/foo"  
    "/C:/bla/foo" becomes "file:///C:/bla/foo"
        Note that "C:/bla/foo" would not be allowed.
    "/bla/foo" becomes "file:///bla/foo"; that is, starting from the root
    names with spaces or other special characters must be percent encoded, so for example 
    "myFolder/bla%20foo.txt" will point to the file "bla foo.txt" inside "myFolder".
    }
  }
FileSystem$Real = Public:{
  [FileSystem]
  @{Capability factory.  
  Creates an object connected with the real file system.
  }
  @Public class method mut This #$of() = this.#$of::0()
  class method mut This #$of::0()
  
  @{Capability method.
  Creates the directory named by the @Url 'that', 
  including any necessary but nonexistent parent directories.
  Note that if this operation fails it may have succeeded in
  creating some of the necessary parent directories.
  }
  @Public mut method Void makeDirs(Url that)[FileSystem.Fail] = (
    _ = This.#$mkdirs(fileName=that.toS())//should we return the bool result?
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  @{Capability method.
  Deletes the file or directory denoted by the @Url 'that'.
  If it denotes a directory, then the directory must be empty in order to be deleted.
  }
  @Public mut method Void delete(Url that)[FileSystem.Fail] = (
    _ = This.#$delete(fileName=that.toS())
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  @{Capability method.
  It opens the file for writing, creating the file if it doesn't exist,
  or initially truncating an existing regular-file to a size of 0.
  The full @S 'content' is wrote to the file.
  The method ensures that the file is closed after this operation is completed.
  If an error occurs it may do so after the file has been created or truncated,
  or after some bytes have been written to the file.
  }
  @Public mut method Void write(Url on, S content)[FileSystem.Fail] = (
    _ = This.#$write(fileName=on.toS(),content=content)
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  @{Capability method.
  Similar to 'write(that content)', but it takes in input binary data 
  represented as a Base64 string, and writes them on the file in binary form. 
  }
  @Public mut method Void write(Url on, S contentBase64)[FileSystem.Fail] = (
    _ = This.#$write(fileName=on.toS(),contentBase64=contentBase64)
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  
  @{Capability method.
  Reads all the content from the @Url 'that' into the resulting string @S
  Any part of the input that is not directly representable as a character in @S
  is trimmed away.
  }
  @Public mut method S read(Url that)[FileSystem.Fail] = (
    s = This.#$read(fileName=that.toS())
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    s
    )
  @{Capability method.
  Reads all the binary content from the @Url 'that' into the resulting string @S
  The content is encoded as Base64.
  }
  @Public mut method S readBase64(Url that)[FileSystem.Fail] = (
    s = This.#$readBase64(fileName=that.toS())
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    s
    )
    
  //------------------------
  
  class method S #$mkdirs(S fileName)[System.JavaException] = native{
    ioSlave{}{
    String s=#1;
    var uri=new java.net.URI(s);
    if(!uri.isAbsolute()){ uri=java.nio.file.Path.of(".").toUri().resolve(uri); } 
    var file=new java.io.File(uri);
    var res=file.mkdirs();return ""+res;
    }} error void


  class method S #$delete(S fileName)[System.JavaException] = native{
    ioSlave{}{
    String s=#1;
    var uri=new java.net.URI(s);
    if(!uri.isAbsolute()){ uri=java.nio.file.Path.of(".").toUri().resolve(uri); } 
    var file=new java.io.File(uri);
    file.delete();return "";
    }} error void


  class method S #$write(S fileName,S content)[System.JavaException] = native{
    ioSlave{}{
    String s=#1;
    var content=#2.getBytes();
    try{
      var uri=new java.net.URI(s);
      if(!uri.isAbsolute()){ uri=java.nio.file.Path.of(".").toUri().resolve(uri); }
      java.nio.file.Files.write(new java.io.File(uri).toPath(), content);    
      return "";
      }
    catch(java.io.IOException|java.net.URISyntaxException ioe){throw new Error(ioe.getClass()+"\n"+ioe.getMessage());}
    }} error void
  
  
  class method S #$write(S fileName,S contentBase64)[System.JavaException] = native{
    ioSlave{}{
    String s=#1;
    var content=java.util.Base64.getMimeDecoder().decode(#2);
    try{
      var uri=new java.net.URI(s);
      if(!uri.isAbsolute()){ uri=java.nio.file.Path.of(".").toUri().resolve(uri); }
      java.nio.file.Files.write(new java.io.File(uri).toPath(), content);    
      return "";
      }
    catch(java.io.IOException|java.net.URISyntaxException ioe){throw new Error(ioe.getClass()+"\n"+ioe.getMessage());}
    }} error void


  class method S #$read(S fileName)[System.JavaException] = native{
    ioSlave{}{
    String s=#1;
    java.net.URI out=null;
    try{try {
      var uri=new java.net.URI(s);
      if(!uri.isAbsolute()){ out=java.nio.file.Path.of(".").toUri(); uri=out.resolve(uri); }
      try(var in=uri.toURL().openStream()){ return new String(in.readAllBytes()); }
      }
    catch(java.io.FileNotFoundException fnf){
      if(out==null){ throw fnf; }
      String location="File '"+s+"' not present in folder '";
      location+=out;
      location +="'\nexisting files are:   ";
      for (var pathname : new java.io.File(".").list()) { location +="'"+pathname+"'   "; }
      throw new Error(location);
      }}
    catch(java.io.IOException|java.net.URISyntaxException ioe){throw new Error(ioe.getClass()+"\n"+ioe.getMessage());}
    }} error void


  class method S #$readBase64(S fileName)[System.JavaException] = native{
    ioSlave{}{
    String s=#1;
    java.net.URI out=null;
    try{
      try{
        var uri=new java.net.URI(s);
        if(!uri.isAbsolute()){ out=java.nio.file.Path.of(".").toUri(); uri=out.resolve(uri); }
        try(var in=uri.toURL().openStream()){ 
          var res = java.util.Base64.getMimeEncoder()
            .encodeToString(in.readAllBytes());
          return res.replaceAll("\\n|\\r","");
          }
        }
      catch(java.io.FileNotFoundException fnf){
        if(out==null){ throw fnf; }
        String location="File '"+s+"' not present in folder '";
        location+=out;
        location +="'\nexisting files are:   ";
        for (var pathname : new java.io.File(".").list()) { location +="'"+pathname+"'   "; }
        throw new Error(location);
        }
      }
    catch(java.io.IOException|java.net.URISyntaxException ioe){throw new Error(ioe.getClass()+"\n"+ioe.getMessage());}
    }} error void
  }