reuse [AdamsTowel]

WebIntegrated42Lib = {
  GW = Load:This2.GitWriterDeployed.code()
  Deploy = Load:This2.DeployLibDeployed.code()
  Process = Load:This2.ProcessLibDeployed.code()
  Fs = Load:This2.FsLibDeployed.code()  
  DeployGit = Deploy.with(writer=GW)
  
  class method mut This #$of() = This.#$of::0()
  class method mut This #$of::0()
  class method S repo()
  class method S version()
  class method S name()
  class method S #$token()
 
  
  mut method mut GW gw() = (
    (version,name) = This
    GW.#$of(token=This.#$token(), message=name++S" automatic release 42V"++version)
    )
  mut method mut Fs fs() = Fs.Real.#$of()
  mut method Void deployTowel(Trait that)[_] = (
    (repo,version,name) = This
    DeployGit.towel(
      that
      on=Url"github.com/%repo/%version/%(name).L42"
      writer=this.gw()
      )
    )
  mut method Void deployModule(Trait that,Name nestedName)[_] = (
    (repo,version,name) = This
    DeployGit.module(that
      name=nestedName
      on=Url"github.com/%repo/%version/%(name).L42",
      writer=this.gw()
      )
    )  
  mut method mut DocsBuilder deployDocs(S that)[_] = (
    (repo,version,name) = This
    //m4 -P Doc.c > Doc.xhtml
    /*command for linux/mac*/
    Process.Result res={
      return Process.Real.#$of(\[S"m4";S"-P";that]).start(input=S"")
      catch Process.Fail f (
        /*command for win*/
        return Process.Real.#$of(\[S"../CommonHtmlDocumentation/m4.exe";S"-P";that]).start(input=S"")  
        )
      }
    X[res.err()==S"" msg=res.err()]
    DocsBuilder(this,content=res.out())
    )
  DocsBuilder = Data:{
    mut This1 that
    var S content
    mut method mut This overview(class Any that, S key)=(
      \content(\content.replace(S"[%key]" with=Info(that).toFullS()))
      this
      )
    mut method Void ~()[_] = (
      (repo,version,name) = This1
      writer = \#that.gw()
      writer.write(
        on=Url"github.com/%repo/%version/%(name).xhtml",
        contentBase64=this.content().encodeBase64() 
        )
      )
    mut method mut This supportFile(Url localName, S destination)[_] = (
      (repo,version,name) = This1
      fs = \#that.fs()
      writer = \#that.gw()
      writer.write(
        on=Url"github.com/%repo/%version/%destination",
        contentBase64=fs.readBase64(localName)
        )    
      Debug(S"writing done for %destination "++Url"github.com/%repo/%version/%destination".toS())
      this
      )
    }
  }
  /*
  Example of use
  
  Secret = Trait({...}):{class method S name()='LibName}
  Web = Class:Secret:Load:{reuse [L42.is/WebIntegrated42Lib]}
  TaskDeployLibName = Web.#$of().deployModule(Lib(), nestedName='Top)
  A=Load:{reuse[#$L42.is/LibName]}
  B=A(..)
  TaskDeployJavaServerDocs = ~Web.#$of()
   .deployDocs(\"Doc.c")
   .overview(A, key=S"OVERVIEW_HERE1")
   .overivew(B, key=S"OVERVIEW_HERE2")
  */