reuse [AdamsTowel]

Secret = {...}//THIS FILE IS NOT COMMITTED. You have to fill it with you git access token, as in
//class method S #$of()=S"ghp_..."

//Module 1
HttpRequest = Trait:{...}
HttpRequestDeployed = System.extractModule(
  Class:HttpRequest['HttpRequest$Real=>'HttpRequest.Real],
  name='HttpRequest) //ready for load

//Module 2, depends from Module 1; inlines it internally
GitWriterLib = Trait({...})['GitWriter.HttpRequest.Fail=>'GitWriter.Fail]
GitWriterDeployed = System.extractModule( //ready for load
  Class:GitWriterLib, name='GitWriter)[
    hide='This.#apply(info,pre,center,contentBase64);
    hide='This.getSha(user,repository,path,branch);
    ]

/*
With the right secret, the code above would test GW, but it is very slow,
so much that it is not worth keeping this test
UseGW = (
  GW.#$of(
    token=Secret.#$of()
    message=S"now from 42 string repr"
    )(
    user=S"example42gdrive"
    repository=S"Example1"
    path=S"bar2/foo.txt"
    contentBase64=S"AbbbbA=="
    )
  )
*/

//Module 3
DeployLib = Trait:{...}
DeployLibDeployed = System.extractModule( //ready for load
  Class:DeployLib, name='LoadDeploy)

ProcessLib = Trait({...})[
  'Process$Real=>'Process.Real;
  hide='Process.Result(that)]
ProcessLibDeployed = System.extractModule( //ready for load
  Class:ProcessLib,
  name='Process)

FSLib = Trait({...})['FileSystem$Real=>'FileSystem.Real]

FsLibDeployed = System.extractModule( //ready for load
  Class:FSLib,
  name='FileSystem)

WebIntegrated42Lib = Trait({...})
WebIntegrated42LibDeployed = System.extractModule(
  Class:WebIntegrated42Lib,
  name='WebIntegrated42Lib)
Web = Load:WebIntegrated42LibDeployed.code()

//now we can actually deploy on git


GW = Load:GitWriterDeployed.code()
Deploy = Load:DeployLibDeployed.code()
DeployGit = Deploy.with(writer=GW)
Process = Load:ProcessLibDeployed.code()

//Module 0  -- Towel AdamsTowel --> AdamsTowel
TaskDeployAdams = (
    w = Web.#$of(
      repo=Secret.repo(),version=Secret.version(),
      name='AdamsTowel,
      token=Secret.#$of())
    w.deployTowel(Trait({reuse [AdamsTowel]}))
    //~w.deployDocs(name)
    //  (key=.. overview=..)
    //  (localName=... destination=...)
    //  (key=.. overview=..)
    )

//Module 1
TaskDeployHttpRequest = (
    w = Web.#$of(
      repo=Secret.repo(),version=Secret.version(),
      name='HttpRequest,
      token=Secret.#$of())
    w.deployTowel(HttpRequestDeployed())
    )
//Module 2
TaskDeployGitWriterDeployed = (
    w = Web.#$of(
      repo=Secret.repo(),version=Secret.version(),
      name='GitWriter,
      token=Secret.#$of())
    w.deployTowel(GitWriterDeployed())
    )
//Module 3
TaskDeployDeployLib = (
    w = Web.#$of(
      repo=Secret.repo(),version=Secret.version(),
      name='Deploy,
      token=Secret.#$of())
    w.deployTowel(DeployLibDeployed())
    )
//Module 4
TaskProcessDeployLib = (
    w = Web.#$of(
      repo=Secret.repo(),version=Secret.version(),
      name='Process,
      token=Secret.#$of())
    w.deployTowel(ProcessLibDeployed())
    ~w.deployDocs(\"DocProcess.c")(
       key=S"OVERVIEW_HERE" overview=Process)
    )
//Module 5
TaskFsDeployLib = (
    w = Web.#$of(
      repo=Secret.repo(),version=Secret.version(),
      name='FileSystem,
      token=Secret.#$of())
    w.deployTowel(FsLibDeployed())
    )
//Module 6
TaskWebIntegrated42LibDeployLib = (
    w = Web.#$of(
      repo=Secret.repo(),version=Secret.version(),
      name='WebIntegrated42Lib,
      token=Secret.#$of())
    w.deployTowel(WebIntegrated42LibDeployed())
    )
//---------------

ToJar=Trait:{reuse [AdamsTowel]
  Point = Data:{Num x, Num y, Any note}
  A={class method Void foo()=(
    p = Point(x=3Num,y=5Num, note=Name"Info.info()")
    Debug(S"hello WORLD ToJar %p")
    )}
  class method Void #$main()=A.foo()
  }


DeployJar = DeployGit.jar(ToJar()
  on=Url"github.com/%Secret.repo()/ExampleJar.L42"
  writer=GW.#$of(token=Secret.#$of(),message=S"Example Jar deploy")
  )
  
AllDone = {}:Test"All done reached"(Bool.true())