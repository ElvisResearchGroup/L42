reuse [AdamsTowel]

//Module 1
HttpRequest = Trait:{...}
HttpRequestDeployed = System.extractModule(
  Class:HttpRequest['HttpRequest$Real=>'HttpRequest.Real],
  name='HttpRequest) //ready for load

//Module 2, depends from Module 1; inlines it internally
GitWriterLib = Trait({...})['GitWriter.HttpRequest.Fail=>'GitWriter.Fail]
GitWriterDeployed = System.extractModule( //ready for load
  Class:GitWriterLib, name='GitWriter)[
    hide='This.#apply(info,pre,center,contentBase64);
    hide='This.getSha(user,repository,path,branch);
    ]

//Module 3
DeployLib = Trait:{...}
DeployLibDeployed = System.extractModule( //ready for load
  Class:DeployLib, name='LoadDeploy)

ProcessLib = Trait({...})[
  'Process$Real=>'Process.Real;
  hide='Process.Result(that)]
ProcessLibDeployed = System.extractModule( //ready for load
  Class:ProcessLib,
  name='Process)

FSLib = Trait({...})['FileSystem$Real=>'FileSystem.Real]

FsLibDeployed = System.extractModule( //ready for load
  Class:FSLib,
  name='FileSystem)

WebIntegrated42Lib = Trait({...})
WebIntegrated42LibDeployed = System.extractModule(
  Class.Relax:WebIntegrated42Lib,
  name='WebIntegrated42Lib)

//** now we can actually deploy on git **

//THIS FILE IS NOT COMMITTED. You have to fill it with you git access token, as in
//class method S #$of()=S"ghp_..."
Secret = Trait({...}):Load:WebIntegrated42LibDeployed.code()

//Module 0  -- Towel AdamsTowel --> AdamsTowel
AdamTrait = Trait:{ reuse [AdamsTowel] }
WebAdams = Class:Secret:{class method S name()='AdamsTowel}

CollectionsExample={
  Point = Data:{Num x, Num y}
  Person = Data:{S name var Point location}
  ListPerson = Collection.list(Person)
  SetPerson  = Collection.set(Person)
  MapSPerson = Collection.map(key=S val=Person)
  OptPerson  = Collection.optional(Person)
  MatrixPerson  = Collection.matrix(ListPerson, row=10I, col=20I)
  LinkeListPerson = Collection.linkedList(Person)
  }
MessageExample={
  KindInformation = Message:{[Message.Guard]
    method S extra()=S"Wow that was a great explanation!"
    }
  }
TaskDeployAdams = WebAdams.#$of().deployTowel(AdamTrait())
TaskDeployAdamsDocs = ~WebAdams.#$of().deployDocs(\"DocAdams.c")
  .overview(trait=AdamTrait() key=S"OVERVIEW_HERE")
  .overview(CollectionsExample key=S"Collection_OVERVIEW_HERE")
  .overview(MessageExample key=S"Message_OVERVIEW_HERE")

//Module 1
WebHttpRequest = Class:Secret:{class method S name()='HttpRequest}
TaskDeployHttpRequest = WebHttpRequest.#$of().deployTowel(HttpRequestDeployed())
Http = Load:HttpRequestDeployed.code()
TaskDeployHttpDocs = ~WebHttpRequest.#$of().deployDocs(\"DocHttp.c")
  .overview(Http key=S"OVERVIEW_HERE")


//Module 2
WebGitWriter = Class:Secret:{class method S name()='GitWriter}
TaskDeployGW = WebGitWriter.#$of().deployTowel(GitWriterDeployed())
GW = Load:GitWriterDeployed.code()
TaskDeployGWDocs = ~WebGitWriter.#$of().deployDocs(\"DocGitWriter.c")
  .overview(GW key=S"OVERVIEW_HERE")

//Module 3
WebDeploy = Class:Secret:{class method S name()='Deploy}
TaskDeployDeployLib = WebDeploy.#$of().deployTowel(DeployLibDeployed())
Deploy = Load:DeployLibDeployed.code()
DeployGit = Deploy.with(writer=GW)
TaskDeployDeployDocs = ~WebDeploy.#$of().deployDocs(\"DocDeploy.c")
  .overview(Deploy key=S"OVERVIEW_HERE1")
  .overview(DeployGit key=S"OVERVIEW_HERE2")


//Module 4
WebProcess = Class:Secret:{class method S name()='Process}
TaskProcessDeployLib = WebProcess.#$of().deployTowel(ProcessLibDeployed())
Process = Load:ProcessLibDeployed.code()
TaskProcessDeployDocs = ~WebProcess.#$of().deployDocs(\"DocProcess.c")
  .overview(Process key=S"OVERVIEW_HERE")

//Module 5
WebFs = Class:Secret:{class method S name()='FileSystem}
TaskDeployFs = WebFs.#$of().deployTowel(FsLibDeployed())
Fs=Load:FsLibDeployed.code()
TaskDeployFsDocs = ~WebFs.#$of().deployDocs(\"DocFs.c")
  .overview(Fs key=S"OVERVIEW_HERE")


//Module 6
WebWeb = Class:Secret:{class method S name()='WebIntegrated42Lib}
TaskDeployWeb = WebWeb.#$of().deployTowel(WebIntegrated42LibDeployed())
Web = Load:WebIntegrated42LibDeployed.code()
TaskDeployWebDocs = ~WebWeb.#$of().deployDocs(\"DocWeb.c")
  .overview(Web key=S"OVERVIEW_HERE")

AllDone = {}:Test"All done reached"(Bool.true())