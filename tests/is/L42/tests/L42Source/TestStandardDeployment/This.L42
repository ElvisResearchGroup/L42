reuse [AdamsTowel]

//Module 1
HttpRequest = Trait:{...}
HttpRequestDeployed = System.extractModule(
  Class:HttpRequest['HttpRequest$Real=>'HttpRequest.Real],
  name='HttpRequest) //ready for load

//Module 2, depends from Module 1; inlines it internally
GitWriterLib = Trait({...})['GitWriter.HttpRequest.Fail=>'GitWriter.Fail]
GitWriterDeployed = System.extractModule( //ready for load
  Class:GitWriterLib, name='GitWriter)[
    hide='This.#apply(info,pre,center,contentBase64);
    hide='This.getSha(user,repository,path,branch);
    ]

/*
With the right secret, the code above would test GW, but it is very slow,
so much that it is not worth keeping this test
UseGW = (
  GW.#$of(
    token=Secret.#$of()
    message=S"now from 42 string repr"
    )(
    user=S"example42gdrive"
    repository=S"Example1"
    path=S"bar2/foo.txt"
    contentBase64=S"AbbbbA=="
    )
  )
*/

//Module 3
DeployLib = Trait:{...}
DeployLibDeployed = System.extractModule( //ready for load
  Class:DeployLib, name='LoadDeploy)

ProcessLib = Trait({...})[
  'Process$Real=>'Process.Real;
  hide='Process.Result(that)]
ProcessLibDeployed = System.extractModule( //ready for load
  Class:ProcessLib,
  name='Process)

FSLib = Trait({...})['FileSystem$Real=>'FileSystem.Real]

FsLibDeployed = System.extractModule( //ready for load
  Class:FSLib,
  name='FileSystem)

WebIntegrated42Lib = Trait({...})
WebIntegrated42LibDeployed = System.extractModule(
  Class.Relax:WebIntegrated42Lib,
  name='WebIntegrated42Lib)

//now we can actually deploy on git


GW = Load:GitWriterDeployed.code()
Deploy = Load:DeployLibDeployed.code()
DeployGit = Deploy.with(writer=GW)
Process = Load:ProcessLibDeployed.code()

//THIS FILE IS NOT COMMITTED. You have to fill it with you git access token, as in
//class method S #$of()=S"ghp_..."
Secret = Trait({...}):Load:WebIntegrated42LibDeployed.code()

//Module 0  -- Towel AdamsTowel --> AdamsTowel
WebAdams = Class:Secret:{class method S name()='AdamsTowel}
TaskDeployAdams = WebAdams.#$of().deployTowel(Trait({reuse [AdamsTowel]}))

//Module 1
WebHttpRequest = Class:Secret:{class method S name()='HttpRequest}
TaskDeployHttpRequest = WebHttpRequest.#$of().deployTowel(HttpRequestDeployed())

//Module 2
WebGitWriter = Class:Secret:{class method S name()='GitWriter}
TaskDeployGitWriterDeployed = WebGitWriter.#$of().deployTowel(GitWriterDeployed())

//Module 3
WebDeployLib = Class:Secret:{class method S name()='Deploy}
TaskDeployDeployLib = WebDeployLib.#$of().deployTowel(DeployLibDeployed())

//Module 4
WebDeployProcess = Class:Secret:{class method S name()='Process}
TaskProcessDeployLib = WebDeployProcess.#$of().deployTowel(ProcessLibDeployed())
TaskProcessDeployDocs = ~WebDeployProcess.#$of().deployDocs(\"DocProcess.c")
  .overview(Process key=S"OVERVIEW_HERE")

//Module 5
WebFsDeploy = Class:Secret:{class method S name()='FileSystem}
TaskFsDeployLib = WebFsDeploy.#$of().deployTowel(FsLibDeployed())

//Module 6
WebWebDeploy = Class:Secret:{class method S name()='WebIntegrated42Lib}
Task6 = WebWebDeploy.#$of().deployTowel(WebIntegrated42LibDeployed())

AllDone = {}:Test"All done reached"(Bool.true())