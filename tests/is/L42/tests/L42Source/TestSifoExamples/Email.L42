I id
S subject
imm @Top S body
var mut Client from
var S to
mut @Top MetaData metaData
class method fwd mut This (fwd mut Email$ that)
class method mut This (I id,S subject,
  @Top S body,mut Client from,S to,mut @Top MetaData metaData)
class method mut This create(mut Counter counter,S subject,@Top S body,mut Client from,S to) = (
  id  =  counter.emails()
  counter.emails(\emails+1I)
  capsule @Top MetaData metaData  =  MetaData(
    encryptionKey = 0I
    isEncrypted = Bool.false()
    signKey = 0I
    isSigned = Bool.false()
    isSignatureVerified = Bool.true()
    )
  This(id = id,subject = subject,body = body,from = from,to = to,metaData = metaData)
  )
mut method @Top Bool isReadable()  = (
  @Top Bool b = this.#metaData().isEncrypted()
  !b
  )
mut method Void printMail() = (
  Debug(S"ID:  %this.id()")
  Debug(S"FROM: %this.from()")
  Debug(S"TO: %this.to()")
  Debug(S"SUBJECT: %this.subject()")
  //Debug(S"IS_READABLE %this.isReadable()")//high
  //Debug(S"BODY: %this.body()")//high
  //Debug(S"ENCRYPTED %this.metaData().isEncrypted()")//high
  //Debug(S"SIGNED %this.metaData().isSigned()") //high
  //Debug(S"SIGNATURE %this.metaData().SignKey()")//high
  //Debug(S"SIGNATURE VERIFIED %this.metaData().isSignatureVerified()") //high
  )