reuse[AdamsTowel]

Full={class method S (Library that)=
  Trait(that).info().toFullS()
  }
TestOrganizeWrongDollarStays=(
  res=Organize:{A={} $A={} Foo={$A a, class method This ($A a)}}
  Debug(Full(res))
  {}:Test"Public"(actual=Full(res)
    expected=S"""
      |$A={
      |  }
      |A={
      |  }
      |Foo={
      |  #apply(a)[###]class method This #apply($A a)
      |  a()[###]read method $A a()
      |  }
      """)
  )
TestOrganize0=(
  lib={
    Public2={}
    @Public2 A={method B b()}
    B={}
    }
  n1=Trait(lib).info().nested(name='Public2)
  n2=Trait(lib).info().nested(name='A)
  p=Trait({Public2={}}).info().nested(name='Public2)
  pub=Public(public=p)
  {}:Test"eqOk"(n1==n1)
  {}:Test"annotatedAs"(n2.outerDoc().annotatedAs(nested=n1))
  res=pub:Organize:lib
  {}:Test"Public"(actual=Full(res)
  expected=S"""
    |@<private>A={
    |  b()[###method<private>b()
    |  }

    """)
  )
TestOrganize1=(
  res=Public:Organize:{
    @Public A={method B b()}
    B={}
    }
  {}:Test"Public"(actual=Full(res)
  expected=S"""
    |@Public A={
    |  b()[###]method<private>b()
    |  }
    """)
  )  
TestOrganize=(
  res=Organize:{
    A={method Void m1()}
    A$={method Void m2()}
    $={method Void m3()}
    }
  {}:Test"$s"(actual=Full(res)
  expected=S"""
    |m3()[###]method Void m3()
    |A={
    |  m1()[###]method Void m1()
    |  m2()[###]method Void m2()
    |  }
    """)
  res2=Public:Organize:{
    @Public A={method Void m1()=void}
    A$={@Public method Void m2()=void}
    $={method Void m3()=void}
    B={method Void m4()=void}
    @Public A$C={method Void m5()=void}
    }
  {}:Test"Public"(actual=Full(res2)
  expected=S"""
    |@Public A={
    |  m2()[###]@Public method Void m2()=(..)
    |  @Public C={
    |    m5()[###]method Void m5()=(..)
    |    }
  }
    """)
  )  