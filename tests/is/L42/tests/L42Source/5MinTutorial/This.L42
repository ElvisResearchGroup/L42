reuse [L42.is/AdamsTowel]
D1=Decorator.WithArgs:Data:{
  I that
  method Trait (Trait trait)[Message.Guard] = trait
  }
DD1=D1(32I):{class method S hello()=S"hello"}
MainDD1=Debug(DD1.hello())
SSSS=(
  ns=Num.List[1\;2\;3\]
  S s=S"".builder()(for n in ns \add(n))
  //S s2=S"[".builder()((\add(ns.left()) for n in ns.vals(1I) (\add(S", ") \add(n)) \add(S"]")))
  S s2 = (if ns.isEmpty() S"[]" 
    else S"[%ns.left()".builder()(for n in ns.vals(1I) \add(S", %n"))++S"]")
  //S s2=S"[ %(for n in ns \add(n)) ]" //ok, does not work
  Debug(s2)
  )
Box11=Data:{S s,Url url}
A11=(
  Debug(Url"foo")
  Debug(S"foo")
  Debug(Box11(s=S"foo", url=Url"url"))
  )
Fs=Load:{reuse[L42.is/FileSystem]}
//TODO: why FS has an abstract towel annotation?
//TODO: Url prints without the quotes (") ? actual Url /expected S prints the S in quotes and the Url not
//TODO: should add a test for sum {Void foo()}+{[I] I={interface Void foo()[Void] } }->error
Point = Data:{...}
Main00 = (
  Debug(S"Hello world %Point(x=1Num,y=2Num)")
  )
Main10 = (
  mut Fs f = Fs.Real.#$of()
  f.write(on=Url"data.txt",content=S"SomeContent0") //non determistic operation
  S s=f.read(Url"data.txt") //non determistic operation
  //the result depends on the current file content
  f.write(on=Url"data.txt",content=S"SomeContent") //non determistic operation
  //the operation could go in error if there is not enough space to write the content on disk.
  Debug(s)
  )
ReadWrite = {class method
  Void (mut Fs f)[_] = (
    S s=f.read(Url"data.txt")
    f.write(on=Url"data.txt",content=S"SomeContent")
    Debug(s)
    )
  }
Main1 = ReadWrite(f=Fs.Real.#$of())
Mock = Data:{[Fs]
  var S log=S""
  method delete(that) = error X""
  method makeDirs(that) = error X""
  method read(that) = (
    X[actual=that expected=Url"data.txt"]
    this.log(\log++S"read")
    S"oldContent"
    )
  method readBase64(that) = error X""
  method write(on,content) = ( 
    X[actual=on expected=Url"data.txt";
      actual=content  expected=S"SomeContent";]
    this.log(\log++S"write")
    )
  method write(on,contentBase64) = error X""
  }
Test1= (
  m=Mock()
  ReadWrite(f=m)
  {}:Test"ReadWriteOk"(actual=m.log() expected=S"readwrite")
  )

OnlyTxt = Public:{[Fs]
  mut Fs inner
  
  read method Void checkTxt(Url that) = X.Guarded[
    that.toS().endsWith(S".txt")
    ]
  method makeDirs(that) = error X""
  method write(on,contentBase64) = error X""
  method readBase64(that) = error X""
  method delete(that) = (
    this.checkTxt(that)
    this.#inner().delete(that)
    )
  method write(on,content) = ( 
    this.checkTxt(on)
    this.#inner().write(on=on, content=content)
    )
  method read(that) = ( 
    this.checkTxt(that)
    this.#inner().read(that)
    )
  @Public class method mut This #$of() = //example user declared #$ method, that can
    This(inner=Fs.Real.#$of())   //use $# methods inside its body
  @Public class method mut This(mut Fs inner)
  }
SaferMain = (
  fs = OnlyTxt.#$of()
  ReadWrite(f=fs)
  Debug(S"done")
  )

/*A= Load:{...}
Foo=(
  f=MyFilter"""
  | foo.txt R
  | bar.txt RW
  """(FS.#$())
  A(f)
  )
Pos=Data:{ Num inner 
  @Cache.Now class method Void invariant(Num inner) = X[inner>=0Num]
  method Pos + (Pos that)=\(inner=this.inner()+that.inner())
  method Pos - (Pos that, Pos orElse)={
    res=this.inner()-that.inner()
    if res>0N return orElse
    return \(inner=this.inner()-that.inner())
    }
  }*/
/*
Coq/Agda/Lean - provare quello che vuoi e' se compila fuziona
  -serve un PhD +10 anni esperianze per un hello world
  -compunque e' limitato
  -tempi di sviluppo lentissimi
  
Haskell
  -se compila e lo usi bene, gli errori difficili da testare sono risolti
  -serve un PhD,
  -tempi di sviluppo medi/lungi e e' mezzo limitato
  
  
  
L42
  -se compila non fa mai la cosa sbagliata (quasi COQ)
  -sicuro nel senso che non ti installa trojans come sviluppatore
  -usabile quanto Java nuovo
  -veloce quando Java con speranza di miglioramento
  -ogniuno ha il suo stile incompitibile
  -caching meglio di tutti
  -parallelismo safe meglio di tutti
  -customizing standard library
  
Java
 Il ts auita un po
 ci sono tante librerie
 velocita decente e mantiliby curve
 parallelism facile con stream
 List<Person> ps
 ps.parallelStream().map(p->foo(p)).filter(c->c.lenght()>3).toList()

Javasript
  -Se anche lo testi non si sa mai
  -sviluppo breve
  -ogniuno ha il suo stile incompitibile
  -lento da paura
  -funziona in tutti broser, e si 'autoaggiorna'
  -sicuro nel senso che non ti installa trojans



*/
/*
Main={
  pos=Pos(inner=Num"-5")
  
  mut Person bob=
  imm Person alice=
  read Person student=bob //or alice
  }
Point = Data:{...}

Main2=(
  //Cache.#$stopCacheEager()
  p = Point(x=12\,y=42\)
  Debug(S"Hello world again %p")
  p2 = p.with(x=34\)
  Debug(S"p=%p,   p2=%p2  sumP2= %p2.sumXY()")
  )*/
/*  

-show make new file
*/