reuse [AdamTowel]

TraitInterface=Trait:{interface
  S={}
  mut method Void makeDirs(S fileName)
  mut method Void delete(S fileName)
  mut method Void write(S fileName,S content)
  mut method S read(S fileName)
  }
Lib=TraitInterface:{reuse [AdamTowel]
  FileSystem={interface 
    Fail=Message:{[Message.Guard]}
    mut method Void makeDirs(S fileName)
    mut method Void delete(S fileName)
    mut method Void write(S fileName,S content)
    mut method S read(S fileName)
    }
  FileSystem$Real=Organize:{[FileSystem]
    @Public class method mut This #$of()=this.#$of::0()
    class method mut This #$of::0()
    @Public mut method Void makeDirs(S fileName)=(
      _=This.#$mkdirs(fileName=fileName)
      void
      )
    @Public mut method Void delete(S fileName)=(
      _=This.#$delete(fileName=fileName)
      void
      )
    @Public mut method Void write(S fileName,S content)=(
      _=This.#$write(fileName=fileName,content=content)
      catch System.JavaException x error FileSystem.Fail"%x.text()"
      void
      )
    @Public mut method S read(S fileName)=(
      s=This.#$read(fileName=fileName)
      catch System.JavaException x error FileSystem.Fail"%x.text()"
      s
      )
    class method S #$mkdirs(S fileName)=native{
      ioSlave{}{
      new java.io.File(#1).mkdirs();return "";//should we return the bool result?
      }} error void
    class method S #$delete(S fileName)=native{
      ioSlave{}{
      new java.io.File(#1).delete();return "";
      }} error void
    class method S #$write(S fileName,S content)[System.JavaException]=native{
      ioSlave{}{
      try(var p=new java.io.PrintWriter(#1)){p.print(#2);return "";}
      catch(java.io.IOException ioe){throw new Error(ioe.getClass()+ioe.getMessage());}
      }} error void
    class method S #$read(S fileName)[System.JavaException]=native{
      ioSlave{}{
      try{
        var path=new java.io.File(#1).toPath();
        var bytes=java.nio.file.Files.readAllBytes(path);
        return new String(bytes);
        }
      catch(java.nio.file.NoSuchFileException fnf){
        String location="File '"+#1+"' not present in folder '";
        location+=new java.io.File(".").getCanonicalFile();
        location +="'\nexisting files are:   ";
        for (var pathname : new java.io.File(".").list()) {
          location +="'"+pathname+"'   ";
          }
        throw new Error(location);
        }
      }} error void
    }
  }
DeployFileSystem = Deploy.module(
  url='FileSystem
  code=Lib['FileSystem$Real=>'FileSystem.Real].code()
  name='FileSystem
  )
  
FS=Load:{reuse[#$FileSystem]}

Main=(
  f=FS.Real.#$of()
  S s=f.read(fileName=S"ExampleInputFile.txt")
  Debug(S"[[%s]]")
  {}:Test"OnDisk"(actual=s expected=S"This is some text in a file")
  _=f.write(fileName=S"Example1.txt",content=S"SomeContent")
  S s0=f.read(fileName=S"Example1.txt")
  Debug(S"[[%s0]]")
  {}:Test"NovelData"(actual=s0 expected=S"SomeContent")
  _=f.delete(fileName=S"Example1.txt")
  S s1=f.read(fileName=S"Example1.txt")
  catch error FS.Fail pe (
    Debug(S"{{%pe}}")
    {}:Test"NovelDataDeleted"(actual=pe expected=
      S"Message This.FS.Fail([###])[###]'Example1.txt'[###]existing files are:[###]")
    )
  Debug(S"[[%s1]]")
  {}:Test"NovelDataDeletedFail"(Bool.false())
  )
