reuse [AdamsTowel]

Fs = Load:{reuse[L42.is/FileSystem]}
Main = (
  f = Fs.Real.#$of()
  //S s = f.read(Url"file:///C:.. works.. but is not a portable test..L42Source/TestFileSystem/ExampleInputFile.txt")
  S s = f.read(Url"ExampleInputFile.txt")
  Debug(S"[[%s]]")
  {}:Test"OnDisk"(actual=s expected=S"This is some text in a file")
  _ = f.write(on=Url"Example1.txt",content=S"SomeContent")
  S s0 = f.read(Url"Example1.txt")
  Debug(S"[[%s0]]")
  {}:Test"NovelData"(actual=s0 expected=S"SomeContent")
  _ = f.delete(Url"Example1.txt")
  ( f2 = Fs.Real.#$of()
    S s1 = f2.read(Url"Example1.txt")
    catch Fs.Fail pe (
      Debug(S"{{%pe}}")
      {}:Test"NovelDataDeleted"(actual=pe expected=
        S"Message This.Fs.Fail([###])[###]'Example1.txt'[###]existing files are:[###]")
      )
    Debug(S"[[%s1]]")
    {}:Test"NovelDataDeletedFail"(Bool.false())
    )
  )
  
//examples from the guide
Main10 = (
  mut Fs f = Fs.Real.#$of()
  f.write(on=Url"data.txt",content=S"SomeContent0") //non determistic operation
  S s=f.read(Url"data.txt") //non determistic operation
  //the result depends on the current file content
  f.write(on=Url"data.txt",content=S"SomeContent") //non determistic operation
  //the operation could go in error if there is not enough space to write the content on disk.
  //Debug(s)
  {}:Test""(actual=s expected=S"SomeContent0")
  )
ReadWrite = {class method
  Void (mut Fs f)[_] = (
    S s=f.read(Url"data.txt")
    f.write(on=Url"data.txt",content=S"SomeContent")
    Debug(s)
    )
  }
Main1 = ReadWrite(f=Fs.Real.#$of())
Mock = Data:{[Fs]
  var S log=S""
  method delete(that) = error X""
  method makeDirs(that) = error X""
  method read(that) = (
    X[actual=that expected=Url"data.txt"]
    this.log(\log++S"read")
    S"oldContent"
    )
  method readBase64(that) = error X""
  method write(on,content) = ( 
    X[actual=on expected=Url"data.txt";
      actual=content  expected=S"SomeContent";]
    this.log(\log++S"write")
    )
  method write(on,contentBase64) = error X""
  }
Test1= (
  m=Mock()
  ReadWrite(f=m)
  {}:Test"ReadWriteOk"(actual=m.log() expected=S"readwrite")
  )

OnlyTxt = Public:{[Fs]
  mut Fs inner
  
  read method Void checkTxt(Url that) = X.Guarded[
    that.toS().endsWith(S".txt")
    ]
  method makeDirs(that) = error X""
  method write(on,contentBase64) = error X""
  method readBase64(that) = error X""
  method delete(that) = (
    this.checkTxt(that)
    this.#inner().delete(that)
    )
  method write(on,content) = ( 
    this.checkTxt(on)
    this.#inner().write(on=on, content=content)
    )
  method read(that) = ( 
    this.checkTxt(that)
    this.#inner().read(that)
    )
  @Public class method mut This #$of() = //example user declared #$ method, that can
    This(inner=Fs.Real.#$of())   //use $# methods inside its body
  @Public class method mut This(mut Fs inner)
  }
SaferMain = (
  fs = OnlyTxt.#$of()
  ReadWrite(f=fs)
  {}:Test"doneFsGuide"(Bool.true())
  )