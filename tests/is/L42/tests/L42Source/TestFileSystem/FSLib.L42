reuse [AdamsTowel]
FileSystem = {interface 
  Fail=Message:{[Message.Guard]}
  mut method Void makeDirs(Url that)[Fail]
  mut method Void delete(Url that)[Fail]
  mut method Void write(Url on, S content)[Fail]
  mut method Void write(Url on, S contentBase64)[Fail]
  mut method S read(Url that)[Fail]
  mut method S readBase64(Url that)[Fail]
  }
FileSystem$Real = Public:{
  [FileSystem]
  @Public class method mut This #$of() = this.#$of::0()
  class method mut This #$of::0()
  @Public mut method Void makeDirs(Url that)[FileSystem.Fail] = (
    _ = This.#$mkdirs(fileName=that.toS())
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  @Public mut method Void delete(Url that)[FileSystem.Fail] = (
    _ = This.#$delete(fileName=that.toS())
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  @Public mut method Void write(Url on, S content)[FileSystem.Fail] = (
    _ = This.#$write(fileName=on.toS(),content=content)
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  @Public mut method Void write(Url on, S contentBase64)[FileSystem.Fail] = (
    _ = This.#$write(fileName=on.toS(),contentBase64=contentBase64)
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    void
    )
  @Public mut method S read(Url that)[FileSystem.Fail] = (
    s = This.#$read(fileName=that.toS())
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    s
    )
  @Public mut method S readBase64(Url that)[FileSystem.Fail] = (
    s = This.#$readBase64(fileName=that.toS())
    catch System.JavaException x exception FileSystem.Fail"%x.text()"
    s
    )
  class method S #$mkdirs(S fileName)[System.JavaException] = native{
    ioSlave{}{
    var file=#1.startsWith("file://")?
      new java.io.File(new java.net.URI(#1)):new java.io.File(#1);
    file.mkdirs();return "";//should we return the bool result?
    }} error void
  class method S #$delete(S fileName)[System.JavaException] = native{
    ioSlave{}{ 
    var file=#1.startsWith("file://")?
      new java.io.File(new java.net.URI(#1)):new java.io.File(#1);
    file.delete();return "";
    }} error void
  class method S #$write(S fileName,S content)[System.JavaException] = native{
    ioSlave{}{
    try{
      var file=#1.startsWith("file://")?
        new java.io.File(new java.net.URI(#1)):new java.io.File(#1);
      java.nio.file.Files.write(file.toPath(), #2.getBytes());
      return "";
      }
    catch(java.io.IOException ioe){throw new Error(ioe.getClass()+"\n"+ioe.getMessage());}
    }} error void
  class method S #$write(S fileName,S contentBase64)[System.JavaException] = native{
    ioSlave{}{
    byte[] content=java.util.Base64.getMimeDecoder().decode(#2);
    try{
      var file=#1.startsWith("file://")?
        new java.io.File(new java.net.URI(#1)):new java.io.File(#1);
      java.nio.file.Files.write(file.toPath(), content);
      return "";
      }
    catch(java.io.IOException ioe){throw new Error(ioe.getClass()+"\n"+ioe.getMessage());}
    }} error void
  class method S #$read(S fileName)[System.JavaException] = native{
    ioSlave{}{
    try{
      var file=#1.startsWith("file://")?
        new java.io.File(new java.net.URI(#1)):new java.io.File(#1);
      var bytes=java.nio.file.Files.readAllBytes(file.toPath());
      return new String(bytes);
      }
    catch(java.nio.file.NoSuchFileException fnf){
      String location="File '"+#1+"' not present in folder '";
      location+=new java.io.File(".").getCanonicalFile();
      location +="'\nexisting files are:   ";
      for (var pathname : new java.io.File(".").list()) {
        location +="'"+pathname+"'   ";
        }
      throw new Error(location);
      }
    }} error void
  class method S #$readBase64(S fileName)[System.JavaException] = error X"todo"
  }