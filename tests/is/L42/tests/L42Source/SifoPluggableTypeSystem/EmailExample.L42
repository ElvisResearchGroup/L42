MetaData=Data:{
  var I encryptionKey
  var Bool isEncrypted
  var I signKey
  var Bool isSigned
  var Bool isSignatureVerified
  }
AddressBookEntry=Data:{
  S alias
  mut S.List receivers
  mut method Void add(S receiver)=this.#receivers().add(receiver)
  }
AddressBook=Collection.list(AddressBookEntry)
Keyring$={}
Clients$={
  mut method mut This outSelf()=this
  class method mut This self(mut This that)=that
  }
Counter={
  var I emails
  mut Clients$ clients
  mut method mut Counter self()=this
  class method mut This(I emails,mut Clients$ clients)
  mut method mut Client$ client(I id)
  mut method mut Client$ client(S address)
  mut method Void resetClients()
  }
OptClient$={ class method mut This () }
Client$={[HasToS]
  mut method mut This self()=this
  class method mut This self(mut This that)=that
  }
Email={
  I id
  S subject
  imm @Top S body
  var mut Client from
  var S to
  mut @Top MetaData metaData
  class method mut This (I id,S subject,
    @Top S body,mut Client from,S to,mut @Top MetaData metaData)
  class method mut This create(mut Counter counter,S subject,@Top S body,mut Client from,S to)=(
    id = counter.emails()
    counter.emails(\emails+1\)
    capsule @Top MetaData metaData = MetaData(
      encryptionKey=0I
      isEncrypted=Bool.false()
      signKey=0I
      isSigned=Bool.false()
      isSignatureVerified=Bool.true()
      )
    This(id=id,subject=subject,body=body,from=from,to=to,metaData=metaData)
    )
  mut method @Top Bool isReadable() =(
    @Top Bool b=this.#metaData().isEncrypted()
    !b
    )
  mut method Void printMail()=(
    Debug(S"ID:  %this.id()")
    Debug(S"FROM: %this.from()")
    Debug(S"TO: %this.to()")
    Debug(S"SUBJECT: %this.subject()")
    //Debug(S"IS_READABLE %this.isReadable()")//high
    //Debug(S"BODY: %this.body()")//high
    //Debug(S"ENCRYPTED %this.metaData().isEncrypted()")//high
    //Debug(S"SIGNED %this.metaData().isSigned()") //high
    //Debug(S"SIGNATURE %this.metaData().SignKey()")//high
    //Debug(S"SIGNATURE VERIFIED %this.metaData().isSignatureVerified()") //high
    )
  }
OptClient=Collection.optional(Client$)

KeyringEntry=Data:{
 mut Client$ keyOwner
 I publicKey
 }
Keyring=Collection.list(KeyringEntry)
Client={[HasToS]
  I id
  S name
  mut Keyring keyring
  imm @Top I privateKey
  var Bool autoResponse
  mut AddressBook addressBook
  var mut OptClient forwardReceiver
  mut Counter static
  read method S toS()=this.name()//could have more info, but not privateKey
  mut method mut Client$ self()
  class method mut Client self(mut Client$ that)
  class method mut This(I id,S name,mut Keyring keyring,
    @Top I privateKey,Bool autoResponse,mut AddressBook addressBook,
    mut OptClient forwardReceiver,mut Counter static)
  read method Bool ==(read Client that)=this.id()==that.id()

  mut method Void deliver(mut Email msg)=Debug(S"mail delivered%S.nl()")//represents the real sending of the email
  mut method Void incomingWrappeeAutoResponder(mut Email msg)=(
    this.deliver(msg=msg)
    if this.autoResponse() this.autoRespond(msg=msg)
    )
  mut method Void incomingWrappeeForward(mut Email msg)=(
    this.incomingWrappeeAutoResponder(msg=msg)
    receiverOpt = this.#forwardReceiver()
    if receiverOpt (
      msg.to(This.self(receiverOpt.#val()).name())
      this.forward(msg=msg)
      This.self(receiverOpt.#val()).incoming(msg=msg)
      )
    )
  mut method Void incomingWrappeeVerify(mut Email msg)=(
    this.verify(msg=msg)
    this.incomingWrappeeForward(msg=msg)
    )
  mut method Void incoming(mut Email msg)=(
    @Top I privkey = this.privateKey()
    mut @Top MetaData m=msg.#metaData()
    @Top Bool nonZero = privkey != 0I
    if nonZero (
      @Top Bool valid = m.isEncrypted() && This.isKeyPairValid(publicKey=m.encryptionKey(), privateKey=privkey)
      if valid ( //high context, only assignments to high
        m.isEncrypted(Bool.false())
        m.encryptionKey(0I)
        )
      )
    this.incomingWrappeeVerify(msg=msg)
    void
    )
  mut method Void mail(mut Email msg)=Debug(S"mail sent")
  mut method Void outgoingWrappeeBase(mut Email msg)=(
    msg.from(this)
    this.mail(msg=msg)
    )
  mut method Void outgoingWrappeeEncrypt(mut Email msg)=(
    mut Client receiver = This.self(this.#static().client(address=msg.to()))
    I pubkey = this.getKeyringPublicKey(client=receiver)
    if pubkey != 0I ( // low
      msg.#metaData().encryptionKey(pubkey) //pubkey promoted to high
      msg.#metaData().isEncrypted(Bool.true())
      Debug(S"Encrypted Mail %msg.id()")
      )
    this.outgoingWrappeeBase(msg=msg)
    )
  mut method Void outgoingWrappeeAddressbook(mut Email msg)={
    mut S.List aliasReceivers = this.getAddressBookReceivers(alias=msg.to())
    if aliasReceivers.isEmpty() return this.outgoingWrappeeEncrypt(msg=msg)
    for i in Range(aliasReceivers.size()-1I) (
      S receiverAddress = aliasReceivers.val(i+1\)
      msg.to(receiverAddress)
      this.outgoing(msg=msg)
      This.self(this.#static().client(address=receiverAddress)).incoming(msg=msg)
      )
    msg.to(aliasReceivers.val(0\))
    return this.outgoingWrappeeEncrypt(msg=msg)
    }
  mut method Void outgoing(mut Email msg)=(
    this.sign(msg=msg)
    this.outgoingWrappeeAddressbook(msg=msg)
    )
  mut method Void sendEmail(S receiverAddress, S subject, @Top S body)=(//TODO: counter must have the create method
    mut Email email = Email.create(counter=this.#static(), subject=subject, body=body, from=this, to=receiverAddress)
    Debug(S"sending Mail %email.id()")
    this.outgoing(msg=email)
    receiver = this.#static().client(address=email.to())
    This.self(receiver).incoming(msg=email)
    )
  mut method Void addKeyringEntry(mut Client client, I publicKey)=(
   this.#keyring().#add(right=KeyringEntry(keyOwner=client.self(), publicKey=publicKey))
   )
  mut method I getKeyringPublicKey(mut Client client)={
    for mut e in this.#keyring() (
      if This.self(e.#keyOwner())==client return e.publicKey()
      )
    return 0I
    }
  class method Bool isKeyPairValid(I publicKey,I privateKey)={
    //NOTE: this function was going in top*top in top, but is much easier to use low and promote
    //Debug(S"keypair valid %publicKey %privateKey")//correctly fails verification
    isZero = publicKey == 0I || privateKey == 0I
    if isZero return Bool.false()
    return privateKey == publicKey //should be a secure validation. This is just an example.
    }
  mut method Void autoRespond(mut Email msg)=(
    Debug(S"sending autoresponse%S.nl()")
    sender = msg.#from()
    msg.to(sender.name())
    this.outgoing(msg=msg)
    sender.incoming(msg=msg)
    )
  mut method mut S.List getAddressBookReceivers(S alias)={
    for mut e in this.#addressBook() (
      if e.alias()==alias return e.#receivers()
      )
    return S.List()
    }
  mut method Void addAddressbookEntry(S alias, S receiver)={
    for mut e in this.#addressBook() (
      if e.alias()==alias return e.add(receiver=receiver)
      )
    newEntry = AddressBookEntry(alias=alias, receivers=S.List[receiver])
    return this.#addressBook().#add(right=newEntry)
    }
  mut method Void sign(mut Email msg)={
    @Top I privkey = this.privateKey()
    @Top Bool isZero = privkey == 0I
    if isZero return void
    msg.#metaData().isSigned(Bool.true())
    msg.#metaData().signKey(privkey)
    return void
    }
  mut method Void verify(mut Email msg)=( //receiver of message
    mut @Top MetaData metaData=msg.#metaData()
    I pubkey = this.getKeyringPublicKey(client=msg.#from())
    @Top Bool keyValid = pubkey != 0I && This.isKeyPairValid(publicKey=pubkey, privateKey=metaData.signKey())
    if keyValid metaData.isSignatureVerified(Bool.true()) 
    )
  mut method Void forward(mut Email msg)=(
    Debug(S"Forwarding message.%S.nl()")
    msg.printMail()
    this.outgoing(msg=msg)
    )
  }
Clients=Collection.list(Client)
Counter$={
  mut Clients clients
  mut method mut Counter self()
  mut method mut Client client(I id)
    =this.#clients().#val(id)//note: unused also in the original example
  mut method mut Client client(S address)={
    for mut c in this.#clients() ( if c.name()==address return c )
    error X"Receiver %address Unknown"
    }
  mut method Void resetClients()=while !this.#clients().isEmpty() this.#clients().removeRight()
  mut method mut Client create(S name, @Top I privateKey, Bool autoResponse)=(
    size=this.#clients().size()
    client = Client(
      id=size, name=name,keyring=\(), privateKey=privateKey,
      autoResponse=autoResponse,addressBook=\(), forwardReceiver=\(),
      static=this.self())
    this.#clients().#add(right=client)
    client
    )
  class method mut This(I emails,mut Clients clients)
  class method mut This()=This(emails=0\,clients=\())
  mut method Void example()=(
    mut Client client1 = this.create(name=S"Malte", privateKey=5\, autoResponse=Bool.false()) // ok
    mut Client client2 = this.create(name=S"Sebastian", privateKey=7\,autoResponse=Bool.true()) // ok
    mut Client client3 = this.create(name=S"Tim", privateKey=3\, autoResponse=Bool.false()) // ok
    client1.addAddressbookEntry(alias=S"seb",receiver=S"Sebastian") // ok
    client1.addKeyringEntry(client=client2, publicKey=7\)
    client1.addKeyringEntry(client=client3, publicKey=3\)
    client2.addKeyringEntry(client=client1, publicKey=5\)
    client2.addKeyringEntry(client=client3, publicKey=3\)
    client3.addKeyringEntry(client=client2, publicKey=7\)
    sebAlias=client1.getAddressBookReceivers(alias=S"seb")
    Debug(S"Addressbook entry: %sebAlias") // ok
    client2.forwardReceiver(OptClient(client3.self())) //ok
    client1.sendEmail(receiverAddress=S"Sebastian", subject=S"Email1", body=S"Hallo, das ist die erste Mail")  // ok
    Debug(S"Forwarded by client2: %client2.forwardReceiver()") // ok
    Debug(client1.getAddressBookReceivers(alias=S"seb")) // ok
    this.resetClients() // ok
    )}