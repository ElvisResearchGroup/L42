reuse[AdamsTowel]
TestDataDefaults={
  Point=Data:{Num x,Num y}
  Points=Collection.list(Point)
  Poligon=Data:{
    mut Points points=Points()
    }
  Poligon2=Data:{
    var Points points=Points()
    }
  PointSum=Data:{Num x,Num y Num s
    class method Num #default#s(Num x, Num y)=x+y
    }
  Main=(
    pol=Poligon()
    {}:Test"pol size"(pol.points().size()==0I)
    {}:Test"pol toS1"(actual=pol.toS(), expected=S"Poligon(points=[])")
    pol.#points().add(\(x=2\,y=3\))
    {}:Test"pol size"(pol.points().size()==1I)
    {}:Test"pol toS2"(actual=pol.toS(), expected=S"Poligon(points=[(x=2, y=3)])")
    pol2=Poligon2()
    {}:Test"pol2 size"(pol2.points().size()==0I)
    pol2.points(\points.withAlso(right=\(x=2\,y=3\)))
    {}:Test"pol2 size"(pol2.points().size()==1I)
    pSum=PointSum(x=2\,y=40\)
    {}:Test"pSum"(pSum.s()==42Num)
    )
  }
TestDataCacheErrors={
  A={class method S (Library that)=(
    _=Data:that
    Debug(S"passed :(")
    catch Data.Fail f (f.toS())
    S""
    )}
  TestLazy=(
    {}:Test"with par"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Lazy method This2.Num m(This2.Num x)=(..)
      |can not be made cached; it must have zero parameters[###]
      """.trim(),actual=A({
        @Cache.Lazy method Num m(Num x)=1Num
        }))
    {}:Test"with mut receiver"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Lazy mut method This2.Num m()=(..)
      |can not be made cached; the receiver modifier must be imm or class but it is mut[###]
      """.trim(),actual=A({
        @Cache.Lazy mut method Num m()=1Num
        }))
    {}:Test"with mut return"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Lazy method mut This2.S.List m()=(..)
      |can not be made cached; the return type modifier must be imm, class or read; but it is mut[###]
      """.trim(),actual=A({
        @Cache.Lazy method mut S.List m()=S.List[]
        }))
    )
  TestEager=(
    {}:Test"with par"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Eager method This2.Num m(This2.Num x)=(..)
      |can not be made cached; it must have zero parameters[###]
      """.trim(),actual=A({
        @Cache.Eager method Num m(Num x)=1Num
        }))
    {}:Test"with mut receiver"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Eager mut method This2.Num m()=(..)
      |can not be made cached; the receiver modifier must be imm but it is mut[###]
      """.trim(),actual=A({
        @Cache.Eager mut method Num m()=1Num
        }))
    {}:Test"with class receiver"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Eager class method This2.Num m()=(..)
      |can not be made cached; the receiver modifier must be imm but it is class[###]
      """.trim(),actual=A({
        @Cache.Eager class method Num m()=1Num
        }))
    {}:Test"with mut return"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Eager method mut This2.S.List m()=(..)
      |can not be made cached; the return type modifier must be imm, class or read; but it is mut[###]
      """.trim(),actual=A({
        @Cache.Eager method mut S.List m()=S.List[]
        }))
    )
  TestNow=(
    {}:Test"with par"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.Now class method mut This2.S.List m(This2.Num foo)=(..)
      |can not be made cached; the return type modifier must be imm, class or read; but it is mut[###]
      """.trim(),actual=A({Num foo
        @Cache.Now class method mut S.List m(Num foo)=S.List[]
        }))
    {}:Test"with par"(expected=S"""
     |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
     |@This2.Cache.Now method This2.Num m(This2.Num foo)=(..)
     |can not be made into a cached read method; the receiver modifier must be class but it is imm[###]
      """.trim(),actual=A({Num foo
        @Cache.Now method Num m(Num foo)=foo
        }))
    {}:Test"with par"(expected=S"""
     |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
     |@This2.Cache.Now class method This2.Num m(This2.Num bar)=(..)
     |No candidate getter/exposer with name bar and method modifier imm or read[###]
      """.trim(),actual=A({Num foo
        @Cache.Now class method Num m(Num bar)=bar
        }))
    )
  TestLazyRead=(
    {}:Test"with par"(expected=S"""
      |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
      |@This2.Cache.LazyRead class method mut This2.S.List m(This2.Num foo)=(..)
      |can not be made cached; the return type modifier must be imm, class or read; but it is mut[###]
      """.trim(),actual=A({Num foo
        @Cache.LazyRead class method mut S.List m(Num foo)=S.List[]
        }))
    {}:Test"with par"(expected=S"""
     |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
     |@This2.Cache.LazyRead method This2.Num m(This2.Num foo)=(..)
     |can not be made into a cached read method; the receiver modifier must be class but it is imm[###]
      """.trim(),actual=A({Num foo
        @Cache.LazyRead method Num m(Num foo)=foo
        }))
    {}:Test"with par"(expected=S"""
     |Message This1.Data.Close.Fail(This1.HasToS, This1.Message, This1.Message.Guard, This1.Data.Fail):
     |@This2.Cache.LazyRead class method This2.Num m(This2.Num bar)=(..)
     |No candidate getter/exposer with name bar and method modifier imm or read[###]
      """.trim(),actual=A({Num foo
        @Cache.LazyRead class method Num m(Num bar)=bar
        }))
    )
  Trait2Meth = Trait:{
    S a, S b
    @Cache.Now class method S foo(S a)=a
    @Cache.Now class method S foo(S b)=b
    }
  Main2Meth = {}:Test"two methods generated with same name"(expected=S"""
    |Message This1.Data.Close.Fail([###]):
    |@This2.Cache.Now read method This2.S foo()=native{trusted:readNowCache} (..)
    |Close is attempting to create multiple versions of methods [foo()]
    |[###]
    """.trim(),actual=(_=Data:Trait2Meth() catch Message x x error X"oh no! Main2Meth passed"))
  TraitBadLazyOnRead = Trait:{
    mut Num.List that
    @Cache.Lazy read method S meth()=(
      Log"meth".write(S"CalledOn %this.that()")
      this.that().toS()
      )
    }
  MainBadLazyOnRead = {}:Test"lazy read on class with mut fields"(expected=S"""
    |Message This1.Data.Close.Fail([###]):
    |@This2.Cache.Lazy read method This2.S meth()=(..)
    |can not be made cached; the receiver modifier is read but not all fields are imm, capsule or class[###]
    """.trim(),actual=(_=Data:TraitBadLazyOnRead() catch Message x x error X"oh no! MainBadLazyOnRead passed"))
  GoodLazyOnRead=Data:{
    Num.List that
    @Cache.Lazy read method S meth()=(
      Log"meth".write(S"CalledOn %this.that()")
      this.that().toS()
      )
    }
  }
TestDataInterface={
  Shape={interface [HasToS]
    S that
    class method This of(S that)
    }
  Point=Data:{[Shape]
    read method S that()=S"singularity"
    class method Shape of(S that)=This()
    }
  Square=Data:{[Shape]
    S that
    class method Shape of(S that)=This(that)
    }
  MainShape=(
    res=S"""
      |Square("square")
      """.trim()
    {}:Test"square direct"(
      expected=res
      actual=Square.of(S"square"))
    class Shape s=Square
    {}:Test"square by shape"(
      expected=res
      actual=s.of(S"square"))
    class Shape p=Point
    {}:Test"point by shape"(
      expected=S"Point()"
      actual=p.of(S"ignored"))
    )
  }
TestDataSingleton={
  A=Data:{}
  B=Data:{A a}
  Main=(
    {}:Test"singletonOk"(expected=S"B(a=())" actual=B(a=A()))
    )
  }
TestDataRelax=(
  {}:Test"DataNoRelax"((
    _=Data:{method Void foo(S notAField)}
    catch Class.IncoherentClass x (Bool.true())
    Bool.false()
    ))
  {}:Test"DataRelax"((
    _=Data.Relax:{method Void foo(S notAField)}
    catch Class.IncoherentClass x (Bool.false())
    Bool.true()
    ))
  )
TestDataFwd={
  A=Data:{mut B b,var S name}
  B=Data:{mut A a,var S name}
  Task1=(
    mut A a=A(b=b,name=S"myA")
    mut B b=B(a=a,name=S"myB")
    {}:Test"name"(expected=S"myB",actual=a.b().name())
    {}:Test"toS"(expected=S"""
      |a0 = A(b=b1, name="myA")
      |  where:
      |    b1 = B(a=a0, name="myB")
      """.trim(),actual=a)
    )
  }
TestDAG={
  A=Data:{I that}
  B=Data:{A foo,A bar}
  Task1=(
    A a12=A(12I)
    A a42=A(42I)
    B b=B(foo=a12,bar=a42)
    B bDag=B(foo=a12,bar=a12)
    {}:Test"b"(expected=
      S"B(foo=(12), bar=(42))",
      actual=b)
    {}:Test"bDag"(expected=S"""
      |B(foo=a1, bar=a1)
      |  where:
      |    a1 = A(12)
      """.trim(),
      actual=bDag)
    )
  }

TestDataBase={
  Point=Data:{I x, I y}
  TestPoint=(
    p1=Point(x=8\, y=42\)
    p2=Point(x=8\, y=42\)
    p3=Point(x=0\, y=0\)
    {}:Test"pointEq1"(p1==p2)
    {}:Test"pointEq2"(p1!=p3)
    {}:Test"pointEqWithy"(p1!=p2.with(y=0\))
    {}:Test"pointEqWithxy"(p1==p3.with(y=p1.y()).with(x=p1.x()))
    {}:Test"pointToS"(expected=p1, actual=p1)
    {}:Test"pointToS"(expected=S"Point(x=8, y=42)", actual=p1)
    )
  Person=Data:{S.List names}
  Box=Data:{Any f1,Any f2}
  Anys=Class:Collection.list(Any)
  TestPerson=(
    p1=Person(names=\['Bob;'Alice;'Charles])
    {}:Test"personToS"(expected=S"""
      |Person(names=["Bob"; "Alice"; "Charles"])
      """, actual=p1.toS()++S.nl())
    b1=Box(f1=p1,f2=Box(f1=S"hi",f2=S.List()))
    {}:Test"personToS"(expected=S"""
      |Box(f1=Person(names=["Bob"; "Alice"; "Charles"]), f2=Box(f1=S"hi", f2=S.List[]))
      """, actual=b1.toS()++S.nl())
    Anys bs=Anys[3I]
    HasToS interf=bs
    HasToS interfS=S"hi"
    HasToS interfP=Point(x=1\,y=2\)
    {}:Test"anys1"(expected=S"""
      |[3]
      """, actual=bs.toS()++S.nl())
    {}:Test"anys2"(expected=S"""
      |[3]
      """, actual=interf.toS()++S.nl())
    {}:Test"anys3"(expected=S"""
      |hi
      """, actual=interfS.toS()++S.nl())
    {}:Test"anys4"(expected=S"""
      |Point(x=1, y=2)
      """, actual=interfP.toS()++S.nl())    
    )}
Fibo = {
  //0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
  ComputeFibo=Data:{
    Num that
    @Cache.Lazy method Num ()={
      n=this.that()
      if n==0Num ||n==1Num (return n)
      return This(n-1Num)<:This()+This(n-2Num)()
      }
    class method Num slowFibo(Num n)={
      if n==0Num ||n==1Num (return n)
      return This.slowFibo(n=n-1\)+This.slowFibo(n=n-2\)
      }
    }
  Task=(
    {}:Test""(actual=ComputeFibo(5\)()
      expected=5Num)
    {}:Test""(actual=ComputeFibo(50\)()
      expected=12586269025Num)
    )
  }
TestDataFactoryAlreadyPresent={
  A0=Data:{ S foo, S bar }
  A1=Data:{ S foo, S bar 
    class method This (S foo, S bar)
    class method This #immK(fwd imm S foo,fwd imm S bar) 
    }
  A2=Data:{ S foo, S bar 
    class method This (fwd imm S foo, S bar)
    class method This #immK(S foo,S bar) 
    }
  Start={class method S (HasToS that)=that.toS().subString(0I to=\indexOf(S.nl()))}
  Repr={
    class method S mutK(class Any that)=Start(Info(that).meth(name='(foo,bar)))
    class method S immK(class Any that)=Start(Info(that).meth(name='#immK(foo,bar)))
    }
  MainA012=(
    {}:Test"A0 imm"(actual=Repr.immK(A0), expected=
      S"class method This #immK(This2.S foo, This2.S bar)=(..)")
    {}:Test"A0 mut"(actual=Repr.mutK(A0), expected=
      S"class method This #apply(fwd imm This2.S foo, fwd imm This2.S bar)=(..)")
    Debug(Repr.mutK(A0))
    Debug(Repr.immK(A0))
    {}:Test"A1 imm"(actual=Repr.immK(A1), expected=
      S"class method This #immK(fwd imm This2.S foo, fwd imm This2.S bar)=(..)")
    {}:Test"A1 mut"(actual=Repr.mutK(A1), expected=
      S"class method This #apply(This2.S foo, This2.S bar)=(..)")
    Debug(Repr.mutK(A1))
    Debug(Repr.immK(A1))
    {}:Test"A2 imm"(actual=Repr.immK(A2), expected=
      S"class method This #immK(This2.S foo, This2.S bar)=(..)")
    {}:Test"A2 mut"(actual=Repr.mutK(A2), expected=
      S"class method This #apply(fwd imm This2.S foo, This2.S bar)=(..)")
    Debug(Repr.mutK(A2))
    Debug(Repr.immK(A2))
    )
  AA=Data:{ S foo, S bar class method This (S bar,S foo) }
  Inverted=(
    {}:Test"Inverted1"(actual=AA(bar=S"bar",foo=S"foo")
      expected=S"""
        |AA(bar="bar", foo="foo")
        """.trim())
    {}:Test"Inverted1"(actual=AA.#immK(bar=S"bar",foo=S"foo")
      expected=S"""
        |AA(bar="bar", foo="foo")
        """.trim())
    Debug(AA(bar=S"bar",foo=S"foo"))
    Debug(AA.#immK(bar=S"bar",foo=S"foo"))
    )
  }
  
TestCapsuleMutClashOnField={
  A=(
    err=(
      _d=Data:{
        capsule S.List ss
        @Cache.Clear class method Void ss(mut S.List ss) = void
        }
      catch Data.Close.Fail x x 
      error X""
      )
    {}:Test"errClash"(actual=err.toS() expected=S"""
      |[###]read method read This2.S.List ss()=(..)[###]
      """)
    )
  }