class method Library (mut Source source)[MetaFail]={
  source.queryTables()
  i=source.findColumn(label=S"TABLE_NAME")
  var res=Trait()
  while source.next() (res+=this.makeTable(source=source,name=source.val(i).val()))
  return Class:res
  catch Message.Guard g exception MetaFail"".with(cause=g)
  }
ColTrait=Trait:{T={} method T f()}
InnerList=Trait({This$={} List=Collection.list(This$)})['This$=>'This]
class method Trait makeTable(mut Source source,S name)[_]=(
  source.queryColums(tableName=name)
  n=source.findColumn(label=S"COLUMN_NAME")
  t=source.findColumn(label=S"TYPE_NAME")
  var res=Trait()
  while source.next() (
    res+=this.col(name=source.val(n).val(), type=source.val(t).val())
    )
  (InnerList:Data:res)['This=>Name"%name.toCamelUp()"]
  )
class method class Any type(S that)[MetaFail]={
  if that==S"INTEGER" || that==S"INT" return Num
  if that==S"VARCHAR" || that==S"CHAR" return S
  if that==S"BOOLEAN" || that==S"BOOL" return Bool
  if that==S"DECIMAL" || that==S"DEC" || that==S"NUMERIC" return Num
  if that==S"DOUBLE" return Double  
  exception MetaFail"unsupported table type %that"
  }
class method Trait col(S name,S type)[_]=(
  t=this.type(type)
  n=Name"%(name.toCamelLow())()"
  ColTrait['T=>t;ignoreSelfRename='f()=>n]
  )