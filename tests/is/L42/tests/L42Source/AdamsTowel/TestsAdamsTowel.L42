reuse[#$AdamsTowel]
TestNum=(
  {}:Test"zero"(0Num+0Num==0Num)
  {}:Test"one+"(1Num+1Num==2Num)
  {}:Test"one*"(1Num*1Num==1Num)
  {}:Test"two+"(2Num+2Num==4Num)
  {}:Test"two*"(2Num*2Num==4Num)
  {}:Test"numOp1"(Num"25/30"+Num"11/60"==Num"61/60")
  {}:Test"numOp2"(Num"25/30"+Num"-11/60"==Num"39/60")
  {}:Test"numOp3"(Num"25/30"*Num"11/10"==Num"275/300")
  {}:Test"numOp4"(Num"25/30"*Num"-11/10"==Num"-275/300")
  {}:Test"numConversion1"((12I).toNum(denominator=3I)==4Num)
  {}:Test"numConversion2"((12Math.Long).toNum(denominator=3Math.Long)==4Num)
  {}:Test"numConversion2"((12Double).toNum()==12Num)
  )
TestQuote=(
  ss=S.List['hi()]
  {}:Test"quote"(S"hi()"==ss.left())
  )
TestS_IsEmpty=(
  {}:Test""(S"".isEmpty())
  )
OptS=Collection.optional(S)
OptSize=Collection.optional(I)
TestOptS=(
  OptS o1=OptS()
  OptS o2=OptS(S"hi")
  {}:Test"opt"(o2.val()==S"hi")
  {}:Test"optNope"(S"Optional value is empty"==(
    error o1.val() catch error Collection.NoElementInOpt e e.text()
    ))
  )
TestOptSize=(
  OptSize o1=OptSize()
  OptSize o2=OptSize(8I)
  {}:Test"opt"(o2.val()==8I)
  {}:Test"optNope"(S"Optional value is empty"==(
    error o1.val() catch error Collection.NoElementInOpt e e.text()
    ))
  )
TestRange=((
  var sAcc=S""
  for i in Range(21I) (sAcc++=S"a")
  {}:Test"range 21"(sAcc.size()==21I)
  )(
  Range.Indexes r=Range(5I).reverse()
  {}:Test""(actual=S"".builder()(for i in r \add(i))
    expected=S"43210")
  )(
  Range.Indexes r=Range(3I to=7I).reverse()
  {}:Test""(actual=S"".builder()(for i in r \add(i))
    expected=S"6543")
  )(
  Range.Indexes r=Range(I"-3" to=7I).reverse()
  {}:Test""(actual=S"".builder()(for i in r \add(i))
    expected=S"6543210-1-2-3")
  )(
  Range.Indexes r=Range(I"-10" to=I"-3").reverse()
  {}:Test""(actual=S"".builder()(for i in r \add(i))
    expected=S"-4-5-6-7-8-9-10")
  )(
  v=void//to force parsing it as a block
  {}:Test""(actual=S"".builder()(
    for u in Range.unbounded(5I),i in Range(15I to=24I) (
      \add(u) \add(i)
      ))
    expected=S"5156167178189191020112112221323")
  )(
  r1=Range(0I to=10I)
  r2=Range(0I to=5I)
  {}:Test""(actual=S"".builder()(
    for c in r1.andThen(r2) \add(c))
    expected=S"012345678901234")
  ))
TestMatchSome=(
  ss=S.List[S"a";S"b";S"c"]
  (    
    res=Match.Some()(for s in ss \add(s==S"c"))
    {}:Test"MatchSome"(res)
    ),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(
    var sAcc=S""
    res=Match.Some()(for s in ss (sAcc++=S"#" \add(s==S"b")))
    {}:Test"MatchSomeShortCircut"(sAcc.size()==2I)
    )
  )
TestSizeInString=(
  half=21I
  answer=half+half
  {}:Test"Sum"(answer==42I)"Computed answer is %answer.toS()"
  //{}:Test"Failing test"(answer==8I)"Computed answer is %answer.toS()"
  {}:Test"StringConcat"(S"Hello World "++answer.toS()++S"!" == S"Hello World 42!")
  {}:Test"StringSpliceConcat"(S"Hello World %answer!" == S"Hello World 42!")
  )
TestSizeParsing=(
  err=I"oh NO!"//throws error
  {}:Test"InvalidParseInt"( Bool.false() )"Errors not thrown"
  catch error S.ParseError x 
    {}:Test"InvalidParseIntError"(
      actual=x.text()
      expected=S"The string %S.dq()oh NO!%S.dq() is not a valid int32 number"
      )
  )
NotCoh={This field, class method This ()}
TestMakeNotCohList=Class.Relax:Collection.listTrait()['Elem=>NotCoh<:class Any]
TestSList=(
  s=S.List()
  s.add(\"hi")
  {}:Test"singleVal"(expected=S"hi", actual=s.val(0I))
  {}:Test"size1"(s.size()==1I)
  err1=(_=S.List[].val(1I) catch error Message e (e.toS()) S"")
  err2=(_=S.List[S""].val(1I) catch error Message e (e.toS()) S"")
  err3=(_=S.List[].val(0I) catch error Message e (e.toS()) S"")
  err4=(_=S.List[S""].val(I"-5") catch error Message e (e.toS()) S"")
  err5=(_=S.List[S"";S""].val(I"6") catch error Message e (e.toS()) S"")
  err6=(_=S.List[S""].val(I"6") catch error Message e (e.toS()) S"")
  {}:Test"err1"(actual=err1 expected=S"""
    |Message This.Collection.OutOfBounds([###]):
    |Attempting to access an element from an empty list
    """.trim())
  {}:Test"err2"(actual=err2 expected=S"""
    |Message This.Collection.OutOfBounds([###]):
    |For a list of size 1 the provided index: 1 is not in the acceptable range 0..0
    """.trim())
  {}:Test"err3"(actual=err3 expected=S"""
    |Message This.Collection.OutOfBounds([###]):
    |Attempting to access an element from an empty list
    """.trim())
  {}:Test"err4"(actual=err4 expected=S"""
    |Message This.Collection.OutOfBounds([###]):
    |For a list of size 1 the provided index: -5 is not in the acceptable range 0..0
    """.trim())
  {}:Test"err5"(actual=err5 expected=S"""
    |Message This.Collection.OutOfBounds([###]):
    |For a list of size 2 the provided index: 6 is not in the acceptable range 0..1
    """.trim())
  {}:Test"err6"(actual=err6 expected=S"""
    |Message This.Collection.OutOfBounds([###]):
    |For a list of size 1 the provided index: 6 is not in the acceptable range 0..0
    """.trim())
  )
TestMap=(
  imm s=S.List[S"a";S"b";S"c"]
  res=S.List()(for e in s \add(S"Q"++e))
  {}:Test"mapped"(res.val(1\)==S"Qb")
  )

TestWhile=(
  while Bool.true() (
    {}:Test"while runs"(Bool.true())
    exception void  
    )
  )
TestBoolRelOps=(
  {}:Test"Less then"(!(3I<3I))
  {}:Test"Less then and false"(!(3I<3I && Bool.false()))
  )
TestListOps=(
  ss1=S.List[S"a";S"b";S"c"]
  ss2=S.List[S"1";S"2";S"3"]
  (
    var sAcc=S""
    for imm si in ss1 (sAcc++=si)
    {}:Test"Simple for"(sAcc==S"abc")
    ),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(
    var sAcc=S""
    for s1 in ss1, imm s2 in ss2 (sAcc++=s1++s2)
    {}:Test"Simple for"(sAcc==S"a1b2c3")
    ),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(
    ss3=S.List()(\add(S"hi"))
    {}:Test"justSlash"(ss3.size()==1I)
    ),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(
    ss4=S.List()(for s1 in ss1, imm s2 in ss2 \add(s1++s2))
    for var imm si in ss4 (si:=S"pe"++si)
    for var si in ss4 (si:=S"No"++si)
    var sAcc=S""
    for imm si in ss4 (sAcc++=si)
    {}:Test"Simple for"(sAcc==S"Nopea1Nopeb2Nopec3")
    )
  )
TestLog=(
  Log iLog=Log(S"Foo")
  mut Log mLog=iLog.#$reader()
  iLog.write(S"Hello")
  iLog.write(S" ")
  iLog.write(S"World")
  {}:Test"logTest"(expected=S"Hello World", actual=mLog.read())
  iLog.clear()
  )

Person={
  var S name
  var I age
  class method mut This(S name,I age)
  read method capsule This clone()=This(name=this.name(),age=this.age())
  }
Couple={
  var Person p1
  var Person p2
  class method mut This(Person p1, Person p2)
  read method capsule This clone()=This(p1=this.p1(),p2=this.p2())
  imm method Void normMe()=native{trusted:lazyCache} (void)
  }
A={ class method mut This() }
TestEqualities=(
  Person immPerson = (
    mut Person p1=Person(name=S"bob",age=23I)
    mut Person p2=Person(name=S"bob",age=23I)
    {}:Test"RefEq1"(!System.mutReferenceEquality(p1 and=p2))
    {}:Test"RefEq2"(System.mutReferenceEquality(p1 and=p1))
    {}:Test"RefEq3"(System.mutReferenceEquality(p2 and=p2))
    {}:Test"StructEq1"(System.mutStructuralEquality(p1 and=p2))
    p1.age(24I)
    {}:Test"StructEq2"(!System.mutStructuralEquality(p1 and=p2))
    mut Person p3 = p1.clone()
    {}:Test"StructEq3"(System.mutStructuralEquality(p1 and=p3))
    p1
    )
  Couple immCouple = (
    mut Couple c1 = Couple(p1=immPerson, p2=immPerson)
    mut Couple c2 = Couple(p1=immPerson, p2=immPerson.clone())
    {}:Test"StructEq4"(!System.mutStructuralEquality(c1 and=c2))
    c2
    )
  Couple immCouple2 = Couple(p1=immPerson, p2=immPerson)
  Couple immCouple3 = Couple(p1=immPerson.clone(), p2=immPerson.clone())
  Couple immCouple4 = Couple(p1=immPerson, p2=Person(name=S"Claire",age=20I))
  {}:Test"ImmEq1"(System.immEquality(immCouple and=immCouple2))
  {}:Test"ImmEq2"(System.immEquality(immCouple2 and=immCouple3))
  {}:Test"ImmEq3"(!System.immEquality(immCouple3 and=immCouple4))
  A i1 = A()
  A i2 = A()
  {}:Test"ImmEq4"(System.immEquality(i1 and=i2))
  
  mut Couple mutCouple = Couple(p1=immPerson, p2=immPerson)
  {}:Test"CapsuleClone1"(!System.mutReferenceEquality(mutCouple and=System.capsuleClone(mutCouple)))
  {}:Test"CapsuleClone2"(System.mutStructuralEquality(mutCouple and=System.capsuleClone(mutCouple)))
  {}:Test"ImmClone1"(System.immEquality(System.immClone(mutCouple) and=System.immClone(mutCouple)))
  void
  )

TestNestedTraits={
  Trait2=Trait:{method Void foo()=void}
  A=Trait2:{
    class method Bool k()=Bool.true()
    B=Trait:{
      class method class This1 m()=This1
      }
    }
  AA=A.code()
  BB=AA.B.code()
  TestBB={}:Test"bb"(BB.m().k())
  }
TestArithError=((
  S res=(_=2I/0I catch error Math.ArithmeticError e (e.toS()) S"")
  {}:Test"2/0I"(actual=res, expected=S"""
    |Message This.Math.ArithmeticError([###]):
    |Division by zero
    """.trim())
  )(
  S res=(_=2Math.Long/0Math.Long catch error Math.ArithmeticError e (e.toS()) S"")
  {}:Test"2/0Long"(actual=res, expected=S"""
    |Message This.Math.ArithmeticError([###]):
    |Division by zero
    """.trim())
  )(
  S res=(_=0I/0I catch error Math.ArithmeticError e (e.toS()) S"")
  {}:Test"0/0I"(actual=res, expected=S"""
    |Message This.Math.ArithmeticError([###]):
    |Division by zero
    """.trim())
  )(
  S res=(_=0Math.Long/0Math.Long catch error Math.ArithmeticError e (e.toS()) S"")
  {}:Test"0/0Long"(actual=res, expected=S"""
    |Message This.Math.ArithmeticError([###]):
    |Division by zero
    """.trim())
  ))
  
TestArithErrorStr=((
  S res=(_=Num"2/0" catch error S.ParseError e (e.toS()) S"")
  {}:Test"2/0 string"(actual=res, expected=S"""
    |Message This.S.ParseError([###]):
    |The string "2/0" is not a valid number
    """.trim())
  )(
  S res=(_=Math.Long"2/0" catch error S.ParseError e (e.toS()) S"")
  {}:Test"2/0 string"(actual=res, expected=S"""
    |Message This.S.ParseError([###]):
    |The string "2/0" is not a valid int64 number
    """.trim())
  )(
  S res=(_=Num"2." catch error S.ParseError e (e.toS()) S"")
  {}:Test"2. string"(actual=res, expected=S"""
    |Message This.S.ParseError([###]):
    |The string "2." is not a valid number
    """.trim())
  )(
  S res=(_=Math.Long"2/3" catch error S.ParseError e (e.toS()) S"")
  {}:Test"2/3 string"(actual=res, expected=S"""
    |Message This.S.ParseError([###]):
    |The string "2/3" is not a valid int64 number
    """.trim())
  ))
TestArithErrorNum=((
  S res=(_=2Num/0Num catch error Math.ArithmeticError e (e.toS()) S"")
  {}:Test"zero"(actual=res, expected=S"""
    |Message This.Math.ArithmeticError([###]):
    |Zero denomitator not allowed for a number
    """.trim())
  ))
  TestMathConstants = (
  d=4Double
  {}:Test""(actual=Math.nan() expected=S"NaN")
  {}:Test""(actual=Math.minusZero() expected=S"-0.0")
  {}:Test""(actual=Math.minusInfinty() expected=S"-Infinity")
  {}:Test""(actual=Math.plusInfinty() expected=S"Infinity")
  {}:Test""(actual=Math.maxI() expected=S"2147483647")
  {}:Test""(actual=Math.minI() expected=S"-2147483648")
  {}:Test""(actual=Math.maxLong() expected=S"9223372036854775807")
  {}:Test""(actual=Math.minLong() expected=S"-9223372036854775808")
  
  {}:Test""(expected=Math.nan() actual=Math.nan()*d)
  {}:Test""(expected=d actual=Math.minusZero()+d)
  {}:Test""(expected=d actual=Math.minusZero()+d)
  {}:Test""(Math.minusZero().toS()!=(0Double).toS())
  {}:Test""(Math.minusInfinty()!=Math.plusInfinty())
  {}:Test""(expected=Math.minusInfinty() actual=Math.minusInfinty()+d)
  {}:Test""(expected=Math.plusInfinty() actual=Math.plusInfinty()+d)
  )
TestLastIndexOf =(
  s=S"aabbcc_aabbcc_aabbcc"
  i1=s.lastIndexOf(S"aa",from=\size-1I)
  i2=s.lastIndexOf(S"aa",from=11I)
  {}:Test""(actual=i1 expected=14I)
  {}:Test""(actual=i2 expected=7I)
  )
TestSpliterator =(
  multiS = S"""
    |aa
    |bb
    |cc
    """
  s1 = S.List()(for s in multiS.split(S.nl()) \add(s))
  {}:Test"1"(actual=s1 expected=S.List[S"aa";S"bb";S"cc"])

  s2 = S.List()(for s in S"mah".split(S"NOTFOUND") \add(s))
  {}:Test"2"(actual=s2 expected=S.List[S"mah"])
  
  s3 = S.List()(for s in S"".split(S"NOTFOUND") \add(s))
  {}:Test"3"(actual=s3 expected=S.List[])
  
  s4 = S.List()(for s in S"mah".split(S"") \add(s))
  {}:Test"4"(actual=s4 expected=S.List[S"mah"])
  
  s5 = S.List()(for s in S"".split(S"") \add(s))
  {}:Test"5"(actual=s5 expected=S.List[])
  
  ( 
  s6 = S.List()(for s in S"aaaWWbbb".split(S"W") \add(s))
  {}:Test"6"(actual=s6 expected=S.List[S"aaa";S"";S"bbb"])
  
  s7 = S.List()(for s in S"aaaWbbb".split(S"W") \add(s))
  {}:Test"7"(actual=s7 expected=S.List[S"aaa";S"bbb"])
  
  s8 = S.List()(for s in S"WaaaWbbb".split(S"W") \add(s))
  {}:Test"8"(actual=s8 expected=S.List[S"aaa";S"bbb"])
  
  s9 = S.List()(for s in S"WWaaaWbbb".split(S"W") \add(s))
  {}:Test"9"(actual=s9 expected=S.List[S"";S"aaa";S"bbb"])
  
  s10 = S.List()(for s in S"WWWaaaWbbb".split(S"W") \add(s))
  {}:Test"10"(actual=s10 expected=S.List[S"";S"";S"aaa";S"bbb"])
  )(  
  s6 = S.List()(for s in S"aaaW-WW-Wbbb".split(S"W-W") \add(s))
  {}:Test"6"(actual=s6 expected=S.List[S"aaa";S"";S"bbb"])
  
  s7 = S.List()(for s in S"aaaW-Wbbb".split(S"W-W") \add(s))
  {}:Test"7"(actual=s7 expected=S.List[S"aaa";S"bbb"])
  
  s8 = S.List()(for s in S"W-WaaaW-Wbbb".split(S"W-W") \add(s))
  {}:Test"8"(actual=s8 expected=S.List[S"aaa";S"bbb"])
  
  s9 = S.List()(for s in S"W-WW-WaaaW-Wbbb".split(S"W-W") \add(s))
  {}:Test"9"(actual=s9 expected=S.List[S"";S"aaa";S"bbb"])

  s10 = S.List()(for s in S"W-WW-WW-WaaaW-Wbbb".split(S"W-W") \add(s))
  {}:Test"10"(actual=s10 expected=S.List[S"";S"";S"aaa";S"bbb"])
  ))
  
TestPlusEq = ((
  var I i=2I
  i+=3I
  {}:Test""(actual=i expected=5I)
  )(
  mut I.List is=I.List[2I]
  for var ii in is ( ii:=ii+3I)
  {}:Test""(actual=is expected=I.List[5I])
  )(
  mut I.List is=I.List[2I]
  for var ii in is (ii+=3I)
  {}:Test""(actual=is expected=I.List[5I])
  ))