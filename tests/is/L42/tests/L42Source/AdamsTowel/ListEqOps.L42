Elem={}
class method Bool equals(read Elem a,read Elem b)

class method mut This (mut This squareBuilder)
class method mut This #squareBuilder()
class method Bool #shortCircutSquare()
mut method Void #squareAdd(Elem that)
mut method Void #squareAdd(mut Elem mutVal)
read method read This vals()
mut method mut This #vals()

read method read This #iterator()
mut method mut This #varIterator()
read method I #startIndex()
read method IteratorCompose #hasElem(I that)
read method Elem #elem#imm(I that)
mut method mut Elem #elem#mut(I that)
read method Elem #elem#default(I that)
read method read Elem #elem#read(I that)
mut method mut Elem #update#mut(I that, mut Elem val)
mut method Elem #update#imm(I that, Elem val)
mut method Elem #update#default(I that, Elem val)
class method mut This ()
class method mut This (I capacity)
mut  method mut This (Void that)
read method Bool isEmpty()
read method I size()
read method read Elem readVal(I that)
read method imm  Elem val(I that)
mut method mut Elem #val(I that)
mut method Void set(I that,Elem val)
mut method Void #set(I that,mut Elem val)
mut method Void remove(I that)
mut method Void add(I that, Elem val)
mut method Void #add(I that, mut Elem val)
read method Elem left()
read method Elem right()
mut method mut Elem #left()
mut method mut Elem #right()
read method read Elem readLeft()
read method read Elem readRight()
mut method  Void left(Elem that)
mut method  Void right(Elem that)
mut method  Void #left(mut Elem that)
mut method  Void #right(mut Elem that)
mut method Void add(Elem left)
mut method Void add(Elem right)
mut method Void add(Elem that)
mut method Void #add(mut Elem left)
mut method Void #add(mut Elem right)
mut method  Void removeLeft()
mut method  Void removeRight()
method This +(Elem right)
method This ++(This right)
method This with(I that, Elem val)
method This withLeft(Elem that)
method This withRight(Elem that)
method This withAlso(I that, Elem val)
method This withAlsoLeft(Elem that)
method This withAlsoRight(Elem that)
method This without(I that)
method This withoutLeft()
method This withoutRight()
//----------------------------
@{Wither
  Returns the receiver but without all the elements equal to 'val'
  }
method This withoutAll(read Elem val)=
  This()(for e in this (if !This.equals(a=e,b=val) \add(e)))

@{Wither
  Returns the receiver but without the leftmost element equal to 'val'
  }
method This without(read Elem left) = (
  pos=this.indexOf(left=left)
  if pos<0I  this 
  else this.without(pos)
  )
@{Wither
  Returns the receiver but without the rightmost element equal to 'val'
  }
method This without(read Elem right) = (
  pos=this.indexOf(right=right)
  if pos<0I  this 
  else this.without(pos)
  )
  
@{Predicate
  True if the element is contained in the List.
  }
read method Bool contains(read Elem that)={
  for read e in this (
    if This.equals(a=e,b=that) return Bool.true()
    )
  return Bool.false()
  }
//################# operators
@{Predicate
  True if the element is contained in the List.
  }
read method Bool #in1(read Elem that)=this.contains(that)

@{Wither
  Returns the receiver but without all the elements equal to 'right'
  }
method This -(Elem right)=this.withoutAll(val=right)

@{Wither
  Returns the receiver but without all the elements contained in the list 'right'
  }
method This --(This right) = (
  size = this.size()
  res = This(capacity=size)
  var i=0I
  while i<size (
    Elem ei = this.readVal(i)
    if !(ei in right) ( res.add(ei) )
    i := i.#succ()
    )
  res
  )

//We choose not to have a.containsAll(b) since we can just write
//Match.All()(for bi in b \add(a.contains(bi))
//We choose not to have a.intersect(b) or a.union(b) since we can just write
//List()(for ai in a if ai in b \add(ai)) //intersection
//a++(b--a)//union

@{Predicate
  returns true if all the elements in 'this' are individually 
  This.equals(a,b) to the corresponding element in 'that'.
  This can be different from '==' or 'readEquality': they just use system equality.
  If the elements have a 'readEquality' method, that is used
  On default This.equals(a,b) will use an available equality predicate visible on the element; 
  prioritizing in the following order:
  'allEq', 'readEquality' and '=='.
  If none is present, 'System.immEquality' is used instead.
  }
read method Bool allEq(read This that)=
  this.size()==that.size() &&
  Match.All()(for read e1 in this, read e2 in that 
    \add(This.equals(a=e1,b=e2)))

@{Predicate
  Delegates to 'System.immEquality'.
  Look at 'allEq' for more flexible equivalence checks.
  }
method Bool ==(This that)=System.immEquality(this and=that)
@{Predicate
  Delegates to 'System.immEquality'.
  Look at 'allEq' for more flexible equivalence checks.
  }
method Bool !=(This that)= !(this==that)
@{Predicate
  Delegates to 'System.immEquality'.
  Look at 'allEq' for more flexible equivalence checks.
  }
read method Bool readEquality(read This that)=System.immEquality(System.immClone(this) and=System.immClone(that))

@{Old fashion indexOf returning 0..size-1 or -1 to indicate absence. 
  The result is the index of the leftmost occurrence
  of 'left' in the list according to 'This.equals(a,b)'
  }
read method I indexOf(read Elem left)={
  //for pos in Range(this.size()) (//No, range is defined later so it can not be used here
  var pos=0I
  end=this.size()-1I
  loop (
    if This.equals(a=this.val(pos) b=left) return pos
    if pos==end return I"-1"
    pos+=1I
    )
  }
  
@{Old fashion indexOf returning 0..size-1 or -1 to indicate absence. 
  The result is the index of the rightmost occurrence
  of 'right' in the list according to 'This.equals(a,b)'
  }
read method I indexOf(read Elem right)={
  var I pos=this.size()-1I
  loop (
    if This.equals(a=this.val(pos) b=right) return pos
    if pos<=0I return I"-1"
    pos-=1I
    )
  }
  
@{Mutator 
  Removes from the list the leftmost element equal to 'left'.
  It relies on 'This.equals(a,b)' through 'this.indexOf(left)'  
  }
mut method Void remove(read Elem left)=(
  i=this.indexOf(left=left)
  if i!=I"-1" (this.remove(i))
  )

@{Mutator 
  Removes from the list the rightmost element equal to 'right'.
  It relies on 'This.equals(a,b)' through 'this.indexOf(right)'  
  }
mut method Void remove(read Elem right)=(
  i=this.indexOf(right=right)
  if i!=I"-1" (this.remove(i))
  )
@{Mutator 
  Removes from the list all the elements equal to 'val'.
  It relies on 'This.equals(a,b)'  
  }
mut method Void removeAll(read Elem val)={
  var I pos=0I
  loop (
    if This.equals(a=this.val(pos),b=val) ( this.remove(pos) )
    else ( pos+=1I )
    if pos==this.size() ( return void )
    )
  }