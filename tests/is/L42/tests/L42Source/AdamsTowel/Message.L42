interface [HasToS]
@Public var S text
@Public class method mut This (S that) 
@Public class method This #from(S$StringBuilder stringLiteral)
@Public method This #whoopsed(Library atPos)
@Public ClassOperators={
  class method class ClassOperators ()=This
  class method Trait :(Trait trait)[Trait$ClassClash,Trait$MethodClash]=MessageTrait()<:Trait:trait
  class method Library :(Library that)[Trait$ClassClash,Trait$MethodClash]=(MessageTrait()<:Trait:that).code()
  }
@Public Native={
  class method Trait()=NativeMessageTrait.Lazy()
  ClassOperators={class method Trait()=This1()}
  }
@Public OptMessage={
  class method mut This #apply()
  class method mut This #apply(fwd mut This2.Message that)=native{trusted:optK} error void
  read method read This1 val()=native{trusted:get}error void
  mut method mut This1 #val()=native{trusted:#get}error void
  read method This2.Bool #if()=native{trusted:isPresent}error void
  //OLD watched=This2.Bool,This1,This2.S$ParseError
  #norm{nativeKind=Opt nativePar=This1,This2.S$ParseError
    typeDep=This2.Bool,This1,This,This2.S$ParseError
    coherentDep=This2.Bool,This1,This,This2.S$ParseError 
    }
  }
@AbstractTowel{message}