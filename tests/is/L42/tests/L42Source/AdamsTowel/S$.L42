class method S (This string)
@This1.Public method This subString(I that,I to) = (
  res = this._subString(that to=to)
  catch error Message m ( 
    error Collection$OutOfBounds(m.text())
    ) 
  res
  )
method This _subString(I that,I to)
method Bool startsWith(This that)
method I indexOf(This that, I from)
read method I size()

@Public Map=Collection$.map(key=S,val=S)
@Public Set=Collection$.set(S)
@Public @Cache.Lazy class method S$List allUpLow()=S$List[
  'Aa;'Bb;'Cc;'Dd;'Ee;'Ff;'Gg;'Hh;'Ii;'Jj;'Kk;'Ll;'Mm;
  'Nn;'Oo;'Pp;'Qq;'Rr;'Ss;'Tt;'Uu;'Vv;'Ww;'Xx;'Yy;'Zz;
  ]
class method S underscores(S that)=(
  var rest=that
  var res=S""
  while rest.startsWith(S"_") (
    rest:=rest._subString(1\ to=\size)
    res++=S"_"
    )
  res
  )
@Public @Cache.Lazy class method Map lowToUp()=(
  map=Map[]
  for lu in this.allUpLow() (map.put(
    key=lu._subString(1\ to=2\)
    val=lu._subString(0\ to=1\)
    ))
  map
  )
@Public @Cache.Lazy class method Map upToLow()=(
  map=Map[]
  for lu in this.allUpLow() (map.put(
    key=lu._subString(0\ to=1\)
    val=lu._subString(1\ to=2\)
    ))
  map
  )
method S$List identifierParts()={
  tot=This(string=this)
  us=This.underscores(tot)
  usSize=us.size()
  if tot.size()==usSize return S$List[us;S"";S""]<:S$List
  s1=tot._subString(usSize to=usSize+1\)
  tail=tot._subString(usSize+1\ to=\size)
  return S$List[us;s1;tail]<:S$List
  } 
@Public method S toStartLow()=(
  id=this.identifierParts()
  id.val(0\)++This.low1(char=id.val(1\))++id.val(2\)
  )
@Public method S toStartUp()=(
  id=this.identifierParts()
  id.val(0\)++This.up1(char=id.val(1\))++id.val(2\)
  )
@Public method S toCamelUp()=(
  id=this.identifierParts()
  id.val(0\)++This.up1(char=id.val(1\))++This.toCamelLow(id.val(2\))
  )
@Public method S toCamelLow()=(
  id=this.identifierParts()
  id.val(0\)++This.low1(char=id.val(1\))++This.toCamelLow(id.val(2\))
  )
class method S toCamelLow(S that)={
  if that==S"" return that
  s1=that._subString(0\ to=1\)
  res=that._subString(1\ to=\size)
  if res==S"" return this.low1(char=s1)
  if s1==S"_" (
    s2=res._subString(0\ to=1\)
    res2=res._subString(1\ to=\size)
    return S"_"++s2++this.toCamelLow(res2)
    )
  return this.low1(char=s1)++this.toCamelLow(res)
  }
class method S low1(S that)={
  if that==S"" return that
  s1=that._subString(0\ to=1\)
  res=that._subString(1\ to=\size)
  return this.low1(char=s1)++res
  }
class method S low1(S char)={
  r=this.upToLow().val(key=char)
  if r return r.val()<:S
  return char
  }
class method S up1(S char)={
  r=this.lowToUp().val(key=char)
  if r return r.val()<:S
  return char
  }
  
@{Splits on the separator 'that'.
  Corner cases are handled by the following rules, that applies in order:
    - if the string is empty this is the empty iterator.
    - if the separator is empty, this iterator contains the whole string as a single element
    - if the separator is not contained in the string, this iterator contains the whole string as a single element
    - if the string ends and/or starts by the separator, it is splitted exactly as a string with those
      starting/ending separators removed.
    - if the string contains multiple occourrences of the separator without 
      any other character in the middle, the iterator will step on an empty string while crossing them.
  }
@Public method mut Spliterator split(S$ that) = \(this,sep=that)  
@Public Spliterator = Data:{
  S$ that
  var I from
  var I to
  S$ sep
  class method mut This(S$ that, S$ sep) = \(
    that
    from=0I
    to=(if that.startsWith(sep) sep.size() else 0I) - sep.size()
    sep=sep
    )
  @Public read method Bool #if() = (
    (from,to,sep) = this
    (size) = \that
    newFrom = to+sep.size()
    newTo = \that.indexOf(sep from=newFrom)
    to+sep.size()<size    
    )
  @Public mut method S$ () = (
    _=this.#hasElem(0I)
    this.#elem#default(0I)
    )
  @Public read method S$ #elem#imm(I that) = this.#elem#default(that)
  @Public read method S$ #elem#default(I that) = \that.subString(this.from() to=this.to())
  @Public mut method Collection.IteratorCompose #hasElem(I that) = (
    (from,to,sep) = this
    (size) = \that
    newFrom = to+sep.size()
    newTo = \that.indexOf(sep from=newFrom)
    \from(newFrom)
    if newTo>0I ( \to(newTo) ) 
    else ( \to(size) )
    \(to+sep.size()<size)
    )
  @Public mut method mut This #iterator() = this
  @Public read method I #startIndex()=0I
  }
@Public method mut Chariterator split() = 
  \(this, from=0I,to=this.size())
@Public method mut Chariterator split(I that, I to) = (
  if that<0I || that>to || to<=this.size() (
    error X"Invalid split range from %that to %to; string size is %this.size()"
    )
  \(this, from=that,to=to)
  )
  
@Public Chariterator = Data:{
  S$ that
  var I from
  var I to
  @Public read method Bool #if() = \from<\to
  @Public mut method S$ () = (
    \from(\from+1I)
    this.#elem#default(0I)
    )
  @Public read method S$ #elem#imm(I that) = this.#elem#default(that)
  @Public read method S$ #elem#default(I that) = \that.subString(this.from()-1I to=this.from())
  @Public mut method Collection.IteratorCompose #hasElem(I that) = (
    (from,to) = this
    \from(from+1I)
    \(from<to)
    )
  @Public mut method mut This #iterator() = this
  @Public read method I #startIndex()=0I
  }