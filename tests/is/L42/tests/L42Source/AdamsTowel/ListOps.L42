[HasToS]
Elem={}
class method mut This (mut This squareBuilder)=squareBuilder
class method mut This #squareBuilder()=This()
class method Bool #shortCircutSquare()=Bool.true()
mut method Void #squareAdd(Elem that)=this.add(right=that)
mut method Void #squareAdd(mut Elem mutVal)=this.#add(right=mutVal)
read method read This vals()=this
mut method mut This #vals()=this
read method read This #iterator()=this
mut method mut This #varIterator()=this
read method I #startIndex()=0I
read method IteratorCompose #hasElem(I that)=\(that<this.size())
read method Elem #elem#imm(I that)=this.val(that)
mut method mut Elem #elem#mut(I that)=this.#val(that)
read method Elem #elem#default(I that)=this.#elem#imm(that)
read method read Elem #elem#read(I that)=this.readVal(that)
mut method mut Elem #update#mut(I that, mut Elem val)=(this.#set(that,val=val) val)
mut method Elem #update#imm(I that, Elem val)=(this.set(that,val=val) val)
mut method Elem #update#default(I that, Elem val)=this.#update#imm(that,val=val)

mut method Void add(Elem that)=this.add(right=that)
mut method mut This (Void that)=this

class method mut This ()
class method mut This (I capacity)
read method Bool isEmpty()
read method I size()
read method read Elem readVal(I that)
read method imm  Elem val(I that)
mut method mut Elem #val(I that)
mut method Void set(I that,Elem val)
mut method Void #set(I that,mut Elem val)
mut method  Void remove(I that)
mut method Void add(I that, Elem val)
mut method Void #add(I that, mut Elem val)

read method capsule This clone()=(
  size = this.size()
  res = This(capacity=size)
  var i=0I
  while i<size (
    if Elem ei = System.immClone(this.readVal(i)) (
      res.add(ei) //always matches
      )
    i := i.succ()
    )
  res
  )
method This immNorm() = (
  size = this.size()
  var This r=(
    res = This(capacity=size)
    var i=0I
    while i<size (
      Elem ei = this.readVal(i)
      res.add(ei)
      i := i.succ()
      )
    res
    )
  if This x = System.immNorm(r) ( r:=x )
  r
  )

method toS()=(
  var i=0I
  var res=S"["
  while i<this.size() (
    res++= AnyToS(this.readVal(i))
    i:=i.succ()
    if i!=this.size() (res++=S"; ") 
    )
  res++S"]"
  )
read method Elem left()=this.val(0\)
read method Elem right()=this.val(\size.pred())
mut method mut Elem #left()=this.#val(0\)
mut method mut Elem #right()=this.#val(\size.pred())
read method read Elem readLeft()=this.readVal(0\)
read method read Elem readRight()=this.readVal(\size.pred())


mut method  Void left(Elem that)=this.set(0\ val=that)
mut method  Void right(Elem that)=this.set(\size.pred() val=that)
mut method  Void #left(mut Elem that)=this.#set(0\ val=that)
mut method  Void #right(mut Elem that)=this.#set(\size.pred() val=that)

mut method Void add(Elem left)=this.add(0\, val=left)
mut method Void add(Elem right)=this.add(\size, val=right)
mut method Void #add(mut Elem left)=this.#add(0\, val=left)
mut method Void #add(mut Elem right)=this.#add(\size, val=right)

mut method  Void removeLeft()=this.remove(0\)
mut method  Void removeRight()=this.remove(\size.pred())

mut method Void clear() =
  while !this.isEmpty() this.removeRight()
  
//#################OPERATORS
method This +(Elem right)=this.withAlso(\size,val=right)
method This +1(Elem left)=this.withAlso(0\,val=left)

method This ++(This right)=This()((
    for e in this ( \add(e) )
    for e in right ( \add(e) )
    ))

//#################Withs
method This with(I that, Elem val)=(
  size=this.size()
  res=This(capacity=this.size())
  var i=0I
  while i<that (res.add(this.readVal(i)) i:=i.succ())
  res.add(val) i:=i.succ()
  while i<size (res.add(this.readVal(i)) i:=i.succ())
  res
  )
method This with(Elem left)=this.with(0\, val=left)
method This with(Elem right)=this.with(\size.pred(), val=right)

method This withAlso(I that, Elem val)=(
  size=this.size()
  res=This(capacity=this.size())
  var i=0I
  while i<that (res.add(this.readVal(i)) i:=i.succ())
  res.add(val)
  while i<size (res.add(this.readVal(i)) i:=i.succ())
  res
  )

method This withAlso(Elem left)=this.withAlso(0\, val=left)
method This withAlso(Elem right)=this.withAlso(\size, val=right)

//skipping/filtering
method This without(I that)=(
  size=this.size()
  res=This(capacity=this.size())
  var i=0I
  while i<that (res.add(this.readVal(i)) i:=i.succ())
  i:=i.succ()
  while i<size (res.add(this.readVal(i)) i:=i.succ())
  res
  )

method This withoutLeft()=this.without(0\)

method This withoutRight()=this.without(\size.pred())

read method read Iterator vals(I that,I to)=Iterator(start=that,end=to,list=this)
mut method mut Iterator #vals(I that,I to)=Iterator(start=that,end=to,list=this)
read method read Iterator vals(I to)=this.vals(that=0I, to=to)
mut method mut Iterator #vals(I to)=this.#vals(that=0I, to=to)
read method read Iterator vals(I that)=this.vals(that=that, to=\size)
mut method mut Iterator #vals(I that)=this.#vals(that=that, to=\size)

Iterator={
  I start
  I end
  mut This1 list
  class method mut This(I start,I end,fwd mut This1 list)
  read method read This #iterator()=this
  mut method mut This #varIterator()=this
  read method I #startIndex()=this.start()
  read method IteratorCompose #hasElem(I that)=\(that<this.end())
  read method Elem #elem#imm(I that)=this.list().val(that)
  mut method mut Elem #elem#mut(I that)=this.#list().#val(that)
  read method Elem #elem#default(I that)=this.list().#elem#imm(that)
  read method read Elem #elem#read(I that)=this.list().readVal(that)
  mut method mut Elem #update#mut(I that, mut Elem val)=(this.#list().#set(that,val=val) val)
  mut method Elem #update#imm(I that, Elem val)=(this.#list().set(that,val=val) val)
  mut method Elem #update#default(I that, Elem val)=this.#list().#update#imm(that,val=val)
  }