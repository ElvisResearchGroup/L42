DeployMeta={
  class method This of()
  class method This #apply()
  method Void #$deployLibrary(This2.S that,This2.S fauxName,Library lib)=
    native{trusted:#$deployLibrary} error void
  method This2.S deployLibraryToBase64(This2.S fauxName,Library lib)=
    native{trusted:deployLibraryToBase64} error void
  method This2.S deployJarToBase64(This2.S fauxName,Library lib)=
    native{trusted:deployJarToBase64} error void
  #norm{nativeKind=Meta,
    typeDep=This This2.Deploy$LibraryNotSelfContained,This2.S
    watched=This2.Deploy$LibraryNotSelfContained,This2.S
    coherentDep=This2.Deploy$LibraryNotSelfContained,This2.S
    nativePar=This2.Deploy$LibraryNotSelfContained This2.Deploy$LibraryNotSelfContained This2.Deploy$LibraryNotSelfContained This2.Deploy$LibraryNotSelfContained This2.Deploy$LibraryNotSelfContained
    }}
@Public class method S towelToS(Library that,S fauxName)=
  DeployMeta.of()<:imm DeployMeta.deployLibraryToBase64(fauxName=fauxName,lib=that)
@Public class method S jarToS(Library that,S fauxName)=
  DeployMeta.of()<:imm DeployMeta.deployJarToBase64(fauxName=fauxName,lib=that)