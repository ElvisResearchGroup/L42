[Range$Indexes]
I start
I end
@{Factory method
  A range from zero (included) up to 'that' (excluded).
  }
@Public class method This(I that)=This(that=0\,to=that)

@{Factory method
  A range from 'that' (included) up to 'to' (excluded).
  }
@Public class method This(I that I to)=(
  if that>to error X"Invalid Range: start=%that end=%to"
  This.of(start=that,end=to)
  )    

class method This of(I start I end)

@Public method This #iterator()=this

@Public method I #elem#default(I that)=that

@Public method Collection.IteratorCompose #hasElem(I that)=\(that<this.end())

@Public method I #startIndex()=this.start()

@Public method I steps()=\end-\start
@Public method I #endIndex()=\end

@{Factory method
  Creates a reverse range; a range exploring the sequence in the reverse order.
  }
@Public method Reverse reverse()=\(this)

@Public Reverse={[Range$Indexes]
  This1 that //start, end
  class method This(This1 that)
  @Public method This #iterator()=this
  @Public method I #elem#default(I that) = 
    ((\that.end()-1I) + \that.start()) - that
  @Public method Collection.IteratorCompose #hasElem(I that) =
    \that.#hasElem(that)
  @Public method I #startIndex() = \that.#startIndex()
  @Public method I #endIndex() = \that.end()
  @Public method andThen(that) = AndThen(left=this,right=that)
  }

@{Factory method
  behaves like 'unbounded(0I)'
  }
@Public class method Unbounded unbounded() = \(0I)

@{Factory method
  Creates an endless range starting from 'that'
  Since it is iterating on indexes, it is eventually going to overflow
  and keep going over negative indexes.
  If iterated together with other collections, it will behave like a
  'cut-view' thus allowing for an early termination   
  }
@Public class method Unbounded unbounded(I that)=\(that)

@Public Unbounded={[Range$Indexes]
  I that
  class method This(I that)
  @Public method This #iterator()=this
  @Public method I #elem#default(I that)=that
  @Public method Collection.IteratorCompose #hasElem(I that)=
    \.canContinue()
  @Public method I #startIndex()=this.that()
  @Public method I #endIndex()=I"-1"
  @Public method andThen(that) = this
  }

@Public method andThen(that) = AndThen(left=this,right=that)
  
@Public AndThen={[Range$Indexes]
  Range$Indexes left
  Range$Indexes right
  class method This(Range$Indexes left, Range$Indexes right)
  @Public method This #iterator()=this
  @Public method I #elem#default(I that) = (
    ls = \left.#endIndex()
    if ls>that \left.#elem#default(that)
    else \right.#elem#default((that-ls)+this.right().#startIndex())
    )
  @Public method Collection.IteratorCompose #hasElem(I that) = (
    ls = \left.#endIndex()
    if ls>that \.canContinue()
    else \right.#hasElem((that-ls)+this.right().#startIndex())
    )
  @Public method I #startIndex() = \left.#startIndex()
  @Public method I #endIndex() = (
    rs = \right.#endIndex()
    if rs==I"-1" rs
    else ( \left.#endIndex() + \right.#endIndex() ) - \right.#startIndex()
    )
  @Public method andThen(that) = 
    if \#endIndex()==I"-1" this
    else AndThen(left=this,right=that)
  }

@This1.AbstractTowel{range}