IteratorComposeAux={class method IteratorCompose itAddAux(IteratorCompose a, IteratorCompose b)=(
  IteratorCompose z=IteratorCompose.zero()
  IteratorCompose a2=a.#times0(a)
  IteratorCompose b2=b.#times0(b)
  Bool err0=a.#bangequal0(b)
  Bool err1=a2.#equalequal0(b2)
  if err0.and(err1) error Collection$IterationIncomplete"""
    |While iterating on multiple collections, iteration terminated abruptly.
    |The size of the collections may have not been the same.
    """
  if a2.#gt0(b2)<:Bool a else b
  )}
@Public IteratorCompose = {
  class method This zero()
  class method This mustContinue()=(
    This zero=This<:class This.zero()
    This one = zero.#succ()
    one.#succ()
    )
  class method This mustStop()=(
    This zero=This<:class This.zero()
    This mone = zero.#pred()
    mone.#pred()
    )
  class method This canContinue()=(
    This zero=This<:class This.zero()
    zero.#succ()
    )
  class method This canStop()=This<:class This.zero()
  
  class method This #apply(This2.Bool that)=(
    Void u = that.#checkTrue()
    catch exception Void v ( This<:class This.mustStop() )
    This<:class This.mustContinue()
    )
  class method This cut(This2.Bool that)=(
    Void u = that.#checkTrue()
    catch exception Void v ( This<:class This.mustStop() )
    This<:class This.canContinue()
    )
  class method This cutDefault(This2.Bool that)=(
    Void u = that.#checkTrue()
    catch exception Void v ( This<:class This.canStop() )
    This<:class This.canContinue()
    )
  class method This default(This2.Bool that)=(
    Void u = that.#checkTrue()
    catch exception Void v ( This<:class This.canStop() )
    This<:class This.mustContinue()
    )
  method This signum()=native{trusted:signum} error void
  method This #times0(This that)=native{trusted:OP*} error void
  method This #minus0(This that)=native{trusted:OP-} error void
  method This2.Bool #lt0(This that)=native{trusted:OP<} error void
  method This2.Bool #gt0(This that)=that.#lt0(that=this)
  read method This2.Bool readEquality(read This that)=native{trusted:OP==} error void
  method This2.Bool #equalequal0(This that)=this.readEquality(that=that)
  method This2.Bool #bangequal0(This that)=(This2.Bool tmp=this.#equalequal0(that=that) tmp.not())
  method This #succ()=native{trusted:succ} error void
  method This #pred()=native{trusted:pred} error void
  method This2.Bool isZero()=(
    This zero = This<:class This.zero()
    this.readEquality(that=zero)
    )
  method This2.Bool #if()=(
    This zero = This<:class This.zero()
    this.#gt0(that=zero)
    )
  method This #itAdd(This that)=
    This1.IteratorComposeAux<:class This1.IteratorComposeAux.itAddAux(a=this,b=that)
  #norm{nativeKind=Int, nativePar=This2.Math$ArithmeticError
    typeDep=This,This2.Bool,This1.IteratorComposeAux, This2.Math$ArithmeticError
    coherentDep=This,This2.Bool,This1.IteratorComposeAux, This2.Math$ArithmeticError
    usedMethods=This2.Bool.not(),This2.Bool.#checkTrue(),This1.IteratorComposeAux.itAddAux(a,b)
    }
  }  
@Public AnyToS={class method S (read Any that)={
  if read HasToS.Raw s=that return this.escape(s.toS())  
  if read HasToS s=that return s.toS()
  return System.immToString(System.immClone(that)) 
  }
  class method S escape(S that)=(
    var res=that
    res:=res.replace(S.nl() with=S"\n")
    res:=res.replace(S.dq() with=S"\%S.dq()")
    res:=res.replace(S"\" with=S"\\")
    S.dq()++res++S.dq()
    )
  }
TraitEq1=Trait:{
  Elem={read method Bool readEquality(read This that)}
  class method Bool equals(read Elem a,read Elem b)=a.readEquality(b)
  }
TraitEq2=Trait:{
  Elem={read method Bool ==(read This that)}
  class method Bool equals(read Elem a,read Elem b)= a==b
  }
TraitEq3=Trait:{
  Elem={}
  class method Bool equals(read Elem a,read Elem b)
    =System.immEquality(System.immClone(a) and=System.immClone(b))
  }
class method Trait selectEq(class Any that)={
  return TraitEq1['Elem=>that]
  catch Any e1 (
    return TraitEq2['Elem=>that]
    catch Any e2 (
      return TraitEq3['Elem=>that]
      catch Any e3 error e3
      )
    )
  } 
//####Opts
OptNative=Trait:{...}
OptOps=OptNative+{...}
OptEqOps=OptOps+{...}
OptFromSOps=Trait:{...}
@Public class method Trait optionalTrait()=OptEqOps()
@Public class method Library optional(class Any that)={
  var res=this.optionalTrait()['Elem=>that]+This.selectEq(that)
  (res:=res+OptFromSOps['Elem=>that] catch Any e void void)
  return Class$Relax:res
  catch Any e error e
  }
//####Lists
ListNative=Trait:{...}
ListOps=ListNative + {...}
ListEqOps=ListOps+{...}
@Public class method Trait listTrait()=ListEqOps()
@Public class method Library list(class Any that)={
  res=this.listTrait()['Elem=>that]+This.selectEq(that)
  return Class$Relax:res
  catch Any e error e
  }
@AbstractTowel{collection}