Check = Data:{ Bool res, S msg }
Checks = Class:Trait(Collection.list(Check))[hide='#squareAdd(that)]:{
  mut method Void add(Check that)
  read method I size()
  mut method Void #squareAdd(Bool that) = this.#squareAdd(that,msg=S"Assertion %this.size() failed")
  mut method Void #squareAdd(Bool that, S msg) = this.add(Check(res=that,msg=msg))
  mut method Void #squareAdd(Any actual, Any expected) = this.#squareAdd(expected=expected, actual=actual)
  mut method Void #squareAdd(Any expected, Any actual) = {
    eq = System.immEquality(expected,and=actual)
    if eq return this.#squareAdd(eq)
    return this.#squareAdd(eq msg=S"""%
      | Assertion %this.size() failed:
      | expected = %Collection.AnyToS(expected)
      | actual = %Collection.AnyToS(actual)
      """)
    }
  }
  
EnableAssertions={class method Bool ()=\.true()}

Condition = Decorator.$:{
  TraitXAssertList = Trait:{
    class method S introMsg()
    class method Void (mut Checks squareBuilder) = {
      if Match.All()(for ci in squareBuilder \add(ci.res())) return void
      var S msg=this.introMsg()
      for ci in squareBuilder (
        if !ci.res() msg++=S.nl()++ci.msg()
        )
      error this.raiseError(msg=msg)
      }
    class method mut Checks #squareBuilder() = Checks()
    class method Bool #shortCircutSquare()
    class method Void raiseError(S msg)
    }
    
  @Public method Trait trait() = TraitXAssertList()
  
  @Public method Trait(Trait trait)[Message$Guard] = ( 
    res = Message:this.trait():trait
    catch Message$Guard g exception g //all exceptions are added Guard as supertype later on
    catch Any x error x//thus this does not have any real effect, but makes the TS happy
    res 
    )
  }
  
XX=Class:Condition.TraitXAssertList:{
  class method S introMsg() = S"Some failed (post)conditions:"
  class method Bool #shortCircutSquare() = EnableAssertions()
  class method Void raiseError(S msg) = error X"%msg"
  }
Guarded = Condition:{[Message$Guard] //an always active kind of X
  class method S introMsg() = S"Some failed guards:"
  class method Bool #shortCircutSquare() = \.false()
  class method Void raiseError(S msg) = error Guarded"%msg"
  }
Pre = Condition:{[Message$Assertion]
  class method S introMsg() = S"Some failed preconditions:"
  class method Bool #shortCircutSquare() = EnableAssertions()
  class method Void raiseError(S msg) = error Pre"%msg"
  }