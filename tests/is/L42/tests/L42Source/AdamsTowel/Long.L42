[This1.HasToS]
@{Meta-programming friendly method.
The constant zero.}
class method This zero()

@{Conversion method.
Parse the string and produce the corresponding number.
throws error @This1.S$ParseError if the string is not a valid int64.}
class method This #apply(This1.S string)=string.toLong()

@{Conversion method.
Rounds the parameter (floor) to the nearest int64.}
class method This #apply(This1.Num num)=native{trusted:fromNum} error void

@{Conversion method.
Result = receiver/denominator.}
method This1.Num toNum(This denominator)=This1.S<:class This1.S.longToNum(that=this,denominator=denominator)

@{Optimized Signed Modular Arithmetic Operation.
Signed int64 addition, beware of overflows/underflows.}
method This #plus0(This that)=native{trusted:OP+} error void

@{Optimized Signed Modular Arithmetic Operation.
Signed int64 multiplication, beware of overflows/underflows.}
method This #times0(This that)=native{trusted:OP*} error void

@{Optimized Signed Modular Arithmetic Operation.
Signed int64 integer division, beware of lost precision because of reminders.}
method This #divide0(This that)=native{trusted:OP/} error void

@{Optimized Signed Modular Arithmetic Operation.
Signed int64 subtraction, beware of overflows/underflows.}
method This #minus0(This that)=native{trusted:OP-} error void

@{Optimized Signed Modular Arithmetic Operation.
Signed int64 integer reminder. a - ((a/b)*b) = a.mod(b)}
method This mod(This that)=native{trusted:mod} error void

@{Optimized Signed Modular Arithmetic Operation.
This operation returns -1, 0 or 1 if the receiver is negative, zero or positive, respectively.}
method This1.I signum()=native{trusted:signum} error void

@{Optimized Signed Modular Arithmetic Relation.
This operation returns true iff this < that, in the common mathematical interpretation.}
method This1.Bool #lt0(This that)=native{trusted:OP<} error void

@{Optimized Signed Modular Arithmetic Relation.
This operation returns true iff this > that, in the common mathematical interpretation.}
method This1.Bool #gt0(This that)=that.#lt0(that=this)

@{Optimized Signed Modular Arithmetic Relation.
This operation returns true iff this <= that, in the common mathematical interpretation.}
method This1.Bool #ltequal0(This that)=native{trusted:OP<=} error void

@{Optimized Signed Modular Arithmetic Relation.
This operation returns true iff this >= that, in the common mathematical interpretation.}
method This1.Bool #gtequal0(This that)=that.#ltequal0(that=this)

@{Optimized Signed Modular Arithmetic Relation.
This operation returns true iff this = that, in the common mathematical interpretation.}
read method This1.Bool readEquality(read This that)=native{trusted:OP==} error void

@{Optimized Signed Modular Arithmetic Relation.
This operation returns true iff this = that, in the common mathematical interpretation.}
method This1.Bool #equalequal0(This that)=this.readEquality(that=that)

@{Optimized Signed Modular Arithmetic Relation.
This operation returns false iff this = that, in the common mathematical interpretation.}
method This1.Bool #bangequal0(This that)=(This1.Bool tmp=this.#equalequal0(that=that) tmp.not())

read method This1.S toS()=native{trusted:toS} error void

@This1.Cache.Call class method This0 #from(This1.S$StringBuilder stringLiteral)=(
  This1.S s=stringLiteral.toS()
  s.toLong()
  )
  
@{Meta-programming friendly method.
The successor operation.}
method This succ()=native{trusted:succ} error void

@{Meta-programming friendly method.
The predecessor operation.}
method This pred()=native{trusted:pred} error void

method This randomNextSeed()=native{trusted:randomNextSeed} error void
method This randomNextLong()=native{trusted:randomNextLong} error void
method This1.Double randomNextDouble()=native{trusted:randomNextDouble} error void
method This1.I randomNextSize(This1.I bound)=native{trusted:randomNextSize} error void
class method This #$randomSeed()=native{trusted:#$randomSeed} error void

@{Meta-programming friendly method.
Returns the nearest int32 greater than the parameter
}
method This1.I ceil()=native{trusted:longToInt} error void

@{Meta-programming friendly method.
Returns the nearest int32 less than the parameter
}
method This1.I floor()=native{trusted:longToInt} error void

@{Meta-programming friendly method.
Returns the nearest int32
}
method This1.I round()=native{trusted:longToInt} error void

@{Conversion method.
Turns the receiver into its int32 representation.}
method This1.I toI()=native{trusted:longToInt} error void

@{Conversion method.
Turns the receiver into its arbitrary precision rational representation.}
method This1.Num toNum()=(
  This zero = This<:class This.zero()
  This one = zero.succ()
  This1.S<:class This1.S.longToNum(that=this,denominator=one)
  )
  
@{Meta-programming friendly method.
For this class it just returns the receiver.}
method This toLong() = this

@{Conversion method.
Turns the receiver into its nearest double representation.}
method This1.Double toDouble()=native{trusted:longToDouble} error void

#norm{nativeKind=Long, nativePar=This1.Math$ArithmeticError
  typeDep=This,This1.Num,This1.S,This1.I,This1.Double,This1.Bool,This1.S$StringBuilder,This1.S$ParseError,This1.HasToS,This1.AbstractTowel,This1.Cache.Call, This1.Math$ArithmeticError
  coherentDep=This,This1.Num,This1.Bool,This1.S,This1.I,This1.Double, This1.Math$ArithmeticError
  usedMethods=This1.S.toLong(),This1.S.longToNum(that,denominator), This1.Bool.not(), This1.S$StringBuilder.toS()
  refined=toS()
  }
@This1.AbstractTowel{long}