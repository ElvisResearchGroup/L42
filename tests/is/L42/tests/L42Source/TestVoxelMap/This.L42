reuse [AdamsTowel]

Module = Trait : {reuse [AdamsTowel]
  VoxelMap =Organize : Trait({...})['$.Margin=>'This]
  }
  
//THIS FILE IS NOT COMMITTED. You have to fill it with you git access token, as in
//class method S #$of()=S"ghp_..."
Secret = Trait({...}):{class method S name()='VoxelMap}
Web = Class:Secret:Load:{reuse [L42.is/WebIntegrated42Lib]}
TaskDeployJavaServer = Web.#$of().deployModule(Module(), nestedName='VoxelMap)
  
VMT = Load : {reuse [#$L42.is/VoxelMapTrait] }
VM = Class: VMT : {
  class method I maxX()=50I
  class method I maxY()=100I
  class method I maxZ()=200I
  }
Map = Class : Data : VM.map2D(S.List) : {
  class method Void base(I x, I y, mut S.List cells) = cells.add(S"")
  class method S toS(I x, I y, read S val) = val.toS()
  }
  
Terra = Class : VM.Physics : {
  Map = {
    read method Bool isFull(VM.Cell3D cell) = Bool.false()
    read method Bool isWater(VM.Cell3D cell) = Bool.false()
    read method Bool isAir(VM.Cell3D cell) = Bool.true()
    read method Double gravity()=0.1\
    read method I maxRadius()= 1I
    }
  CellsMap = {
    Box ={
      mut method Void ping()=void 
      }
    }
  }

TaskDeployJavaServerDocs = ~Web.#$of()
   .deployDocs(\"Doc.c")
   .overview(VMT key=S"OVERVIEW_HERE1")
   .overview(VM key=S"OVERVIEW_HERE2")
   .overview(Map key=S"OVERVIEW_HERE3")
   .overview(Terra key=S"OVERVIEW_HERE4")

Try = (
  capsule Terra.Entity.Cells cs=Terra.Entity.Cells()
  mut Terra.Entity.Cells.Box csBox = cs.#box()
  Debug(csBox.readVal(x=0I, y=0I))
  void
  )  
Main=(
  p1 = VM.Point3D(x=1\, y=2\, z=3\)
  {}:Test"pOk"(actual=p1.toS(), expected=S"""
    |VM.Point3D(x="1.0", y="2.0", z="3.0")
    """.trim())
  {}:Test"pKo"((
    _ = VM.Point3D(x=500\, y=2\, z=3\)
    catch error Message.Assert a ( Bool.true() )
    Bool.false()
    ))
  Debug(S"Hello world %p1")
  )
