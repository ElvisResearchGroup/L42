reuse [AdamTowel]
J0=Load:{reuse[JavaServer]}
J=J0(slaveName=S"mySlave{}")
Model=Data:J.Handler:{
  var I count, mut J j
  @J.Handler mut method Void fromJavaToL42(S msg)=(
    this.count(\count+1\)
    Debug(S"pong received %msg with count=%this.count()")
    if this.count()<40I (
      this.#j().submitEvent(key=S"BarIn", id=S"ping", msg=S"the message %this.count()")
      whoops J.Fail
      )
    else this.#j().kill()
    )
  }
MainPingPong=(
  j=J.#$of()
  j.loadCode(fullName=S"foo.Bar2",code=S"""
    |package foo;
    |import is.L42.platformSpecific.javaEvents.Event;
    |public record Bar2(Event event){
    | public Bar2{
    |    event.registerEvent("BarIn","ping",(k,id,msg)->{
    |      System.out.println("Ping Event received "+id+" "+msg);
    |      event.submitEvent("BarOut","fromJavaToL42","pong");
    |      });
    |    event.registerEvent("Kill",(k,id,msg)->{
    |      System.out.println("Doing cleanup before slave JVM is killed");
    |      System.exit(0);
    |      });
    |    }
    |  }
    """)
  model=Model(count=0\, j=j)
  model.fromJavaToL42(msg=S"Initial message")
  keys=S.List[S"BarOut"]//mut: model can update it and add/remove keys to fetch
  models=J.Handler.Map[key=S"BarOut" mutVal=model]//mut: models can update it and (un)register models
  for e in j(keys) ( e>>models )
  {}:Test"completedOk"(Bool.true())
  )
MainAsk=(
  j=J.#$of()
  j.loadCode(fullName=S"foo.Bar1",code=S"""
  |package foo;
  |import is.L42.platformSpecific.javaEvents.Event;
  |public record Bar1(Event event){//class Bar1 will be instanstiated
  |  public Bar1{ //by 42 and Event parameter is passed
  |    event.registerAskEvent("BarAsk",(k,id,msg)->
  |      "any string computed in Java using "+id+" and "+msg);
  |    }
  |  }
  """)
  S.Opt text=j.askEvent(key=S"BarAsk", id=S"anId",msg=S"aMsg")
  {}:Test"OptOk"(actual=text, expected=S"""
    |["any string computed in Java using anId and aMsg"]
    """.trim())
  Debug(text)
  )