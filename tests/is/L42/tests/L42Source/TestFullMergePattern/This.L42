reuse [AdamsTowel]

UseExtnededMultiMethodTyping={
  B=Data:{var S name}
  A={class method fwd mut B (fwd mut B that)=that }
  MMain=(
    var B b1=B(name=S"Bob1")
    var mut B b2=B(name=S"Bob2")
    b1:=A(b1)
    b2:=A(b2)
    {}:Test"method promotion works on fwd mut->imm"(Bool.true())
    )
  }
BugNativFwd={//we should test also with fwd+subtyping, also when fwd+subtyping do real fwd action
  A={class method fwd mut S.List (fwd mut S.List that)=that }
  MMain=(
    var S.List l1=S.List[S"hi"]
    var mut S.List l2=S.List[S"hi"]
    l1:=A(l1)
    l2:=A(l2)
    {}:Test"execution works when native types are used"(Bool.true())
    )
  }

Entry=Data:{I key, S elem}
MapIS=Class:Trait({
  A=Collection.list(Entry)
  B={
    read method S get(I that)={
      read A map=This.toMap(this)
      for e in map (if e.key()==that return e.elem())
      error X"not there"
      }
    mut method Void insert(Entry that)=(
      mut A map=This.toMap(this)
      for e in map (if e.key()==that.key() error X"already there")
      map.add(that)
      )
    class method fwd mut A toMap(fwd mut This that)
    }
  class method fwd mut This toMap(fwd mut This that)=that
  })['A=>'This]['B=>'This]
  
Main=(
  {}:Test"metaprogramming correctly composes the componentes"(Bool.true())
  mut MapIS m=MapIS[\(key=3\, elem=S"hi");\(key=4\, elem=S"hi")]
  Debug(m)
  m.insert(\(key=3\, elem=S"hi22"))
  {}:Test"exception is thrown"(Bool.false())//correctly not executed
  catch error X e {}:Test"exception is thrown"(Bool.true())
  )