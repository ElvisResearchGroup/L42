interface
@Public mut method Void >>1(Event event)
@Public Fail=Message:{[Message.Guard]}
BaseTrait=Trait:{[Handler$] method >>1(event)=void}
InductiveTrait=Trait:{[Handler$] 
  method >>1(event)=(
    if event.id() == This() (this.current(msg=event.msg()))
    this.super(event=event)
    )
  class method S ()
  mut method Void current(S msg)
  mut method Void super(Event event)
  }
@Public ClassOperators={
  class method class This #apply()=This
  class method Library #colon0(Library that)[Fail]
    =Class.Relax:this:Trait(that)
  class method Trait #colon0(class Trait.Lifted lifted)[Fail]=this:lifted()
  class method Trait #colon0(Trait trait)[Fail]={
    var Trait res=BaseTrait()
    for m in trait.info().methods() (
      if m.doc().annotatedAs(Handler$) (
        var sel=m.selector()
        index=sel.indexOf(S"(")
        sel:=sel.subString(0\ to=index)
        s0=Trait.LiftS(sel)
        s1=InductiveTrait['current(msg)=>\"%m.selector()"]
        s2=s0+s1+res['#gtgt1(event)->'super(event)]
        res:=s2[hide='#apply();hide='super(event)]
        )
      )
    return res+trait
    catch Message.Guard g exception Fail"".with(cause=g)
    }
  }