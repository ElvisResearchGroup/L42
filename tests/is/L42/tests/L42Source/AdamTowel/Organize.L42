@Public ClassOperators={class method This1()=This1()}
@Public class method This ()
class method I maxLev(Introspection.Nested that)=(
  var res=0I
  for ni in that.nesteds() (
    tmp=this.maxLev(ni)
    if res<tmp res:=tmp
    )
  res+1I
  )
@Public method Library :(Library that)[_]=
  (this:Trait(that)).code()

@Public method Trait :(class Trait.Lifted lifted)[_]=
  this:lifted()
  
@Public method Trait :(Trait trait)[_]=(
  max=This.maxLev(Introspection.Nested.from(library=trait.code()))
  var res=trait
  (var lev=0I while lev<max (//range will come later
    lev+=1I
    i=Introspection.Nested.from(library=res.code())//trait.introspection() will come later
    res:=res(squareBuilder=this.mapRename$(Trait.Acc(Name$Mapping()),n=i,level=max-lev))
    ))
  res
  )
EmptyOnThis={class method S (S that)=if that==S"This" S"" else that}

method mut Trait.Acc mapRename$(mut Trait.Acc that, Introspection.Nested n, I level)={
  ncs=n.nesteds()
  if level!=0I (
    for ni in ncs (_=this.mapRename$(that,n=ni,level=level-1\) void)
    return that
    )
  outName=EmptyOnThis(n.nameFromRoot().toS())
  outSize=outName.size()
  for ni in ncs {
    inName=ni.nameFromRoot().toS() //A.B$C$   A.$
    var inC=if outSize==0I inName 
      else inName.subString(outSize+1\ to=\size) //"B$C$"   "$"
    if inC.contains(\"$$") return void
    if !inC.contains(\"$") return void
    if inC.endsWith(\"$") (inC:=inC.subString(0\ to=\size-1\)) //"B$C"    ""
    if inC.startsWith(\"$") return void
    inC:=inC.replace(\"$" with=\".") //"B.C"    ""
    if inC.size()==0I return that.#squareAdd(\"%inName"=>n.nameFromRoot())
    return that.#squareAdd(\"%inName"=>\"%(n.nameFromRoot()).%inC")  //A.B$C$ =>A.B.C
    }
  return that
  }
@AbstractTowel{organize}