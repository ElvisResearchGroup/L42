[This1.HasToS,This1.HasToS.Raw]
class method This empty()
@This1.Public class method This from(This string)=string
@This1.Public method This0 #plusplus0(This0 that)=native{trusted:OP+} error void
/*refined*/ read method This0 toS()=native{trusted:toS} error void
@This1.Public read method This1.I size()=native{trusted:size} error void
method This1.I toI()=native{trusted:toInt} error void
method This1.Long toLong()=native{trusted:toLong} error void
method This1.Double toDouble()=native{trusted:toDouble} error void
method This1.Num toNum()=native{trusted:toNum} error void
method This1.NativeName toName()=native{trusted:toName} error void
class method This1.Num doubleToNum(This1.Double that)=native{trusted:doubleToNum} error void
class method This1.Num longToNum(This1.Long that,This1.Long denominator)=native{trusted:longToNum} error void
class method This1.Num sizeToNum(This1.I that,This1.I denominator)=native{trusted:intToNum} error void
method This sum(This0 that)=native{trusted:OP+} error void
@This1.Public @This1.Cache.Call class method This0 #from(This1.S$StringBuilder stringLiteral)=stringLiteral.toS()

@This1.Public read method This1.Bool readEquality(read This that)=native{trusted:OP==} error void
@This1.Public method This1.Bool #equalequal0(This that)=this.readEquality(that=that)
@This1.Public method This1.Bool #bangequal0(This that)=(This1.Bool tmp=this.#equalequal0(that=that) tmp.not())

@This1.Public method This1.Bool contains(This that)=native{trusted:contains}error void
@This1.Public method This replace(This that,This with)=native{trusted:replace}error void
@This1.Public method This1.I indexOf(This that,This1.I from)=native{trusted:indexOf}error void
@This1.Public method This subString(This1.I that,This1.I to)=native{trusted:subString}error void
@This1.Public method This1.Bool startsWith(This that)=native{trusted:startsWith}error void
@This1.Public method This1.Bool endsWith(This that)=native{trusted:endsWith}error void
@This1.Public method This trim()=native{trusted:trim}error void
@This1.Public class method This dq()=This<:class This.#from(stringLiteral=(
  mut This1.S$StringBuilder b=This1.S$StringBuilder<:class This1.S$StringBuilder.#stringLiteralBuilder()
  Void v=b.#sdQuote()
  b
  ))
@This1.Public class method This nl()=This<:class This.#from(stringLiteral=(
  mut This1.S$StringBuilder b=This1.S$StringBuilder<:class This1.S$StringBuilder.#stringLiteralBuilder()
  Void v=b.#snewLine()
  b
  ))
@This1.Public class method This tab()=This<:class This.#from(stringLiteral=(
  mut This1.S$StringBuilder b=This1.S$StringBuilder<:class This1.S$StringBuilder.#stringLiteralBuilder()
  Void v=b.#stab()
  b
  ))
@This1.Public class method This percent()=This<:class This.#from(stringLiteral=(
  mut This1.S$StringBuilder b=This1.S$StringBuilder<:class This1.S$StringBuilder.#stringLiteralBuilder()
  Void v=b.#spercent()
  b
  ))  
@This1.Public method This1.I indexOf(This that)=this.indexOf(that=that,from=This1.I<:class This1.I.zero())

@This1.Public Opt={
  read method This2.Bool isPresent()
  read method read This1 val()
  #norm{ typeDep=This1, This2.Bool }
  }

#norm{nativeKind=String, nativePar=This1.S$ParseError
  typeDep=This, This1.I,This1.Long,This1.Double,This1.Num, This1.S$StringBuilder,This1.HasToS,This1.HasToS.Raw,This1.Bool,This1.S$ParseError,This1.NativeName,This1.Public,This1.AbstractTowel,This1.Cache.Call
  coherentDep=This,This1.S$StringBuilder,This1.S$ParseError,This1.I,This1.Long,This1.Double,This1.Num,This1.Bool,This1.NativeName
  usedMethods=This1.S$StringBuilder.toS(), This1.Bool.not(), This1.S$StringBuilder.#stringLiteralBuilder(), This1.S$StringBuilder.#sdQuote(), This1.S$StringBuilder.#snewLine(), This1.S$StringBuilder.#stab(), This1.S$StringBuilder.#spercent(), This1.I.zero()
  refined=toS()
  }
@This1.AbstractTowel{s}