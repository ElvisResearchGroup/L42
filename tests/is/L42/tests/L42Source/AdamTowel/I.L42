[This1.HasToS]
class method This zero()
class method This from(This1.S string)=string.toI()
class method This from(This1.Num num)=native{trusted:fromNum} error void
method This1.Num toNum(This denominator)=This1.S<:class This1.S.sizeToNum(that=this,denominator=denominator)
method This #plus0(This that)=native{trusted:OP+} error void
method This #times0(This that)=native{trusted:OP*} error void
method This #divide0(This that)=native{trusted:OP/} error void
method This #minus0(This that)=native{trusted:OP-} error void
method This mod(This that)=native{trusted:mod} error void

method This1.Bool #lt0(This that)=native{trusted:OP<} error void
method This1.Bool #gt0(This that)=that.#lt0(that=this)
method This1.Bool #ltequal0(This that)=native{trusted:OP<=} error void
method This1.Bool #gtequal0(This that)=that.#ltequal0(that=this)

read method This1.Bool readEquality(read This that)=native{trusted:OP==} error void
method This1.Bool #equalequal0(This that)=this.readEquality(that=that)
method This1.Bool #bangequal0(This that)=(This1.Bool tmp=this.#equalequal0(that=that) tmp.not())

read method This1.S toS()=native{trusted:toS} error void
@This1.Cache.Call class method This0 #from(This1.S$StringBuilder stringLiteral)=(
  This1.S s=stringLiteral.toS()
  s.toI()
  )
method This #succ()=native{trusted:succ} error void
method This #pred()=native{trusted:pred} error void

method This ceil()=this
method This floor()=this
method This round()=this
method This toI()=this
method This1.Double toDouble()=native{trusted:intToDouble} error void
method This1.Long toLong()=native{trusted:intToLong} error void
method This1.Num toNum()=(
  This zero = This<:class This.zero()
  This one = zero.#succ()
  This1.S<:class This1.S.sizeToNum(that=this,denominator=one)
  )


#norm{nativeKind=Int
  typeDep=This,This1.Num,This1.S,This1.Bool,This1.S$StringBuilder,This1.HasToS,This1.AbstractTowel,This1.Cache.Call,This1.Double,This1.Long
  coherentDep=This,This1.Num,This1.Bool,This1.S,This1.Double,This1.Long
  usedMethods=This1.S.toI(),This1.S.sizeToNum(that,denominator), This1.Bool.not(), This1.S$StringBuilder.toS()
  refined=toS()
  }
@This1.AbstractTowel{size}