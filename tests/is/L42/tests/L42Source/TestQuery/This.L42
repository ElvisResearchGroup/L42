reuse [AdamsTowel]

QueryLib=Trait:{reuse [AdamsTowel]
  Top={
    RawQuery=Load:{reuse [L42.is/RawQuery]}
    Source=RawQuery.trait():{...}
    class method Trait trait()=Source()
    DBJavaCode={...}
    IQLJavaCode={...}
    class method Library (S packageName,S className,S code,class Any javaServer)[Trait.InvalidMap]
    class method Trait hide(Library that)[_] = Trait(that)
      ['Query.SquareBuilder=>'QuerySquare][
      hide='queryColums(tableName);
      hide='queryTables();
      hide='code();
      hide='codeName();
      hide='codePackageName();
      hide='execute(query);
      hide='executeQuery(query);
      hide='findColumn(label);
      hide='next();
      hide='val(label);
      hide='val(that);
      hide='Query;
      hide='Tables;
      hide='QueryBox.CloseQ;
      hide='QueryBox.OneQ;
      hide='QuerySquare.#apply(that);
      hide='QuerySquare.#that();
      hide='QuerySquare.that();
      ]
    class method Library sql(S connectionString, class Any javaServer)[_] = (
      code = DBJavaCode(url=connectionString)
      res = This(packageName=S"db",className=S"DB",code=code,javaServer=javaServer)
      This.hide(res).code()
      )
    class method Library iql(class Any javaServer)[_] = (
      res=This(packageName=S"iql42",className=S"IQL42",code=IQLJavaCode(),javaServer=javaServer)
      This.hide(res)[hide='tables()].code()
      )
    }
  }

Secret = {...}//THIS FILE IS NOT COMMITTED. You have to fill it with you git access token, as in
//class method S #$of()=S"ghp_..."

GW = Load:{reuse[L42.is/GitWriter]}
LoadDeploy = Load:{reuse[L42.is/Deploy]}
DeployGit = LoadDeploy.with(writer=GW)
TaskDeployQuery = DeployGit.module(
  QueryLib
    [clear='Top.RawQuery.trait();hide='Top.Source]
    ['Top.RawQuery=>'Top]
  name='Top //TODO: it would work if we renamed Top in This?
  on=Url"github.com/%Secret.repo()/%Secret.version()/Query.L42",
  writer=GW.#$of(
    token=Secret.#$of(),
    message=S"Query automatic release 42V "++Secret.version()
  )) 
//-------------
LoadJ=Load:{reuse[L42.is/JavaServer]}
J=LoadJ(slaveName=S"dbServer{}")

LoadQuery=Load:{reuse[#$L42.is/Query]}
DB=LoadQuery.sql(connectionString=S"jdbc:derby:Test1;create=true",javaServer=J)

ONum=Collection.optional(Num)
Point=Data:{Num x, Num y}
Points=Collection.list(Point)
OPoint=Data:{ONum x, ONum y}
OPoints=Collection.list(OPoint)
MyQ=DB.query[OPoints;S;]"SELECT * FROM Foo WHERE z!=@name"
DBAPI=DB.QueryBox:{
  @Public A=DB.query[Points;S;]"SELECT * FROM Foo WHERE z!=@name"
  @Public B=DB.query[Points;Num;]"SELECT * FROM Foo WHERE x!=@num and x!=@num"
  //the above is testing that two identically named @s are the same
  }
Create=DB.query[Void]"CREATE TABLE Foo (x int,y int, z varchar(255))"
Insert=DB.query[Void]"INSERT INTO Foo (x,y,z) Values (1,2,'A3'),(4,5,'B6'),(7,8,'C9')"
Drop=DB.query[Void]"DROP TABLE Foo"
PreMain=(//Delete if is there, to make a clean start
  Drop(DB.#$of())()
  catch Message _ void
  void
  )
Main=(
  db=DB.#$of()
  Create(db)()
  Insert(db)()
  q=MyQ(db)
  OPoints ps=q(name=S"Bob")
  Debug(ps)
  {}:Test""(actual=ps
    expected=S"[OPoint(x=1, y=2); OPoint(x=4, y=5); OPoint(x=7, y=8)]")
  Debug(q(name=S"A3"))
  {}:Test""(actual=q(name=S"A3")
    expected=S"[OPoint(x=4, y=5); OPoint(x=7, y=8)]")
  Debug(DBAPI(db).a()(name=S"Bob"))
  {}:Test""(actual=DBAPI(db).a()(name=S"Bob")
    expected=S"[Point(x=1, y=2); Point(x=4, y=5); Point(x=7, y=8)]")
  )
Table=DB.#$of().tables()
AfterMain=(
  s=Info(Table.Foo).toFullS()
  Debug(s)
  {}:Test""(expected=S"""
    |{[This2.HasToS]
    |[###]method This2.Num x()=(..)
    |[###]method This2.Num y()=(..)
    |[###]method This2.S z()=(..)
    |[###]
    """, actual=s)
  db=DB.#$of()
  Drop(db)()
  db.kill()
  )
TestIQL = {
  IQL=LoadQuery.iql(javaServer=J)
  MyQ=IQL.query[Points;S]"""
    | @msg
    |      Pages('please provide some points')
    |x 'x coordinate =' Integer{}
    |y 'y coordinate =' Integer{}
    """
  MainL=(
    iql=IQL.#$of()
    //ps=MyQ(iql)(msg=S"Provide some points")
    //Debug(ps)
    void//commented otherwise the test would require user input
    )
  }