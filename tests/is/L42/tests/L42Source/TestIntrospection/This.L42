reuse[AdamsTowel]

TestLate={
  class method Library (Library that)=(
    i=Trait(that).info()
    that:Test"a"(expected=S"imm This" actual=i.meth(name='a()).returnType())
    that:Test"s"(expected=S"imm This1.S" actual=i.meth(name='s()).returnType())
    that:Test"b"({
      _=i.meth(name='b()).returnType()
      catch error Collection.NoElementInOpt _ return Bool.true()
      return Bool.false()
      })
    that:Test"athat"(expected=S"[mut This; imm This]" actual=i.meth(name='a(that)).parameters())
    that:Test"sthat"(expected=S"[mut This; imm This1.S]" actual=i.meth(name='s(that)).parameters())
    that:Test"bthat"({
      _=i.meth(name='b(that)).parameters()
      catch error Collection.NoElementInOpt _ return Bool.true()
      return Bool.false()
      })
    that
    )
  }
A=TestLate({var A a, var S s, var B b,})
B={A a}

Full={class method S (Trait that)=
  that.info().toFullS()
  }
TestFullS=(
  {}:Test"fullS"(actual=Full(Trait:{ method Void foo(S that)=void  method B bar() B={}})
  expected=S"""
    |bar()[###]method B bar()
    |foo(that)[###]method Void foo(S that)=(..)
    |B={[###]}
    """.trim())
  {}:Test"sum"(actual=Full(
    Trait:{ method Void foo(S that)=void  method B bar() B={}}
    +{B={method Void beer()}}
    )
  expected=S"""
    |bar()[###]method B bar()
    |foo(that)[###]method Void foo(S that)=(..)
    |B={[###]beer()[###]method Void beer()[###]}
    """.trim())
  {}:Test"renameDeep"(actual=Full(
    Trait({ B={method Any b() C={method Any c()}}})['B=>'A.C])
  expected=S"""
    |A={
    |  C={
    |    b()[###]method Any b()
    |    C={
    |      c()[###]method Any c()
    |      }
    |    }
    |  }[###]
    """.trim())

  )

ExampleAnn={@{exampleAnn}}

TestMeth=(
  lib={ method Void foo(S that)=void  method B bar() B={}}
  n=Trait(lib).info()
  b=n.nesteds().val(0I)
  foo=n.methods().val(0\)
  bar=n.methods().val(1\)
  b2=bar.returnType().info()
  {}:Test"self1String"(expected=b actual=b2)
  //{}:Test"self1"(b.nameFromRoot()==b2.nameFromRoot())
  {}:Test"self1"(b==b2)
  {}:Test"self2"(n!=b2)
  )
TestAnn=(
  lib={ @ExampleAnn B={method Void foo(S that)=void}}
  n=Trait(lib).info().nesteds().val(0I)
  clazz=n.outerDoc().docs().left().info()
  s=clazz.innerDoc().docs().left().texts().left()
  {}:Test"0"(expected=S"exampleAnn", actual=s)
  )
TestFromLib=(
  lib={method Void foo(S that)=void @{hi} B={method Void foo(S that)=void}}
  {}:Test"1"(
    actual=Trait(lib).info()
    expected=S"""
      |{ foo(that)=(..) B={..} }
      |
      |File name:[###]/TestIntrospection/This.L42
      |Line:[###]
      |Column:[###]
      """.trim())
  n=Trait(lib).info().nesteds().val(0I)      
  {}:Test"2"(actual=n
    expected=S"""
      |{ foo(that)=(..) }
      |
      |File name:[###]/TestIntrospection/This.L42
      |Line:[###]
      |Column:[###]
      """.trim())
  {}:Test"3"(actual=Trait(lib).info().nesteds(),
    expected=S"""
      |[{ foo(that)=(..) }
      |
      |File name:[###]]
      """.trim())
  {}:Test"4"(actual=n.outerName(), expected=S"B")
  {}:Test"5"(actual=n.outerDoc(), expected=S"@{hi}")
  )