reuse[AdamsTowel]

TestToS={
  A = Data:{ S.Set empty=\() }
  A2 = Data:{ S.Set empty=\[S"A";S"B"] }
  B = Data:{ S.List empty=\() }
  B2 = Data:{ S.List empty=\[S"A";S"B"] }
  C = Data:{S.Map empty=\()}
  C2 = Data:{S.Map empty=\[key=S"A" val=S"B"; key=S"C" val=S"D"]}
  Map = Collection.map(key=S val=S.List)
  C3 = Data:{Map empty=\[key=S"A" val=\[S"B"]; key=S"C" mutVal=\[S"D"]]}
  D = Data:{ S.Opt empty=\() }
  E = Data:{ Name empty='Foo }
  F = Data:{ Any empty=Name"Foo" }
  O = Collection.optional(A)
  OName = Collection.optional(Name)
  OBox = Data:{O o}
  ONameBox = Data:{OName o}
  Main=(
    {}:Test""(actual=A().toS() expected=S"""
      |A(empty=(set={}))
      """.trim())
    {}:Test""(actual=A2().toS() expected=S"""
      |A2(empty=(set={"A"; "B"}))
      """.trim())
    {}:Test""(actual=A2().empty().toS() expected=S"""
      |{"A"; "B"}
      """.trim())
    {}:Test""(actual=B().toS() expected=S"""
      |B(empty=[])
      """.trim())
    {}:Test""(actual=B2().toS() expected=S"""
      |B2(empty=["A"; "B"])
      """.trim())
    {}:Test""(actual=C().toS() expected=S"""
      |C(empty=(hi={}, hm={}))
      """.trim())
    {}:Test""(actual=C2().toS() expected=S"""
      |C2(empty=(hi={"A"->"B"; "C"->"D"}, hm={}))
      """.trim())
    {}:Test""(actual=C3().toS() expected=S"""
      |C3(empty=(hi={"A"->["B"]}, hm={"C"->["D"]}))
      """.trim())
    {}:Test""(actual=E().toS() expected=S"""
      |E(empty=("Foo"))
      """.trim())
    {}:Test""(actual=F().toS() expected=S"""
      |F(empty=Name("Foo"))
      """.trim())
    {}:Test""(actual=D(empty=\(S"hello")).toS() expected=S"""
      |D(empty="hello")
      """.trim())
    {}:Test""(actual=D().toS() expected=S"""
      |D(empty=<>)
      """.trim())
    {}:Test""(actual=F(empty=S.Opt(S"Hi!")) expected=S"""
      |F(empty=S.Opt<"Hi!">)
      """.trim())
    {}:Test""(actual=F(empty=S.Opt()) expected=S"""
      |F(empty=S.Opt<>)
      """.trim())
    {}:Test""(actual=F(empty=O(A())) expected=S"""
      |F(empty=O<empty=(set={})>)
      """.trim())
    {}:Test""(actual=F(empty=O()) expected=S"""
      |F(empty=O<>)
      """.trim())
    {}:Test""(actual=OBox(o=O(A())) expected=S"""
      |OBox(o=(empty=(set={})))
      """.trim())
    {}:Test""(actual=OBox(o=O()) expected=S"""
      |OBox(o=<>)
      """.trim())
    {}:Test""(actual=F(empty=OName(Name"Hi")) expected=S"""
      |F(empty=OName<"Hi">)
      """.trim())
    {}:Test""(actual=F(empty=OName()) expected=S"""
      |F(empty=OName<>)
      """.trim())
    {}:Test""(actual=ONameBox(o=OName(Name"Hi")) expected=S"""
      |ONameBox(o=("Hi"))
      """.trim())
    {}:Test""(actual=ONameBox(o=OName()) expected=S"""
      |ONameBox(o=<>)
      """.trim())
    {}:Test""(actual=Name"A" expected=S"""
      |A
      """.trim())
    {}:Test""(actual=OName(Name"A") expected=S"""
      |<A>
      """.trim())
    {}:Test""(actual=OName(Name"a(x).x") expected=S"""
      |<This.a(x).x>
      """.trim())
    {}:Test""(actual=OName() expected=S"""
      |<>
      """.trim())
    )
  }
TestOptOK={
  A=Data:{S name}
  Opt1S=Collection.optional(S)
  Opt1A=Collection.optional(A)
  Opt2S=Collection.optional(Opt1S)
  Opt2A=Collection.optional(Opt1A)
  Opt3S=Collection.optional(Opt2S)
  Opt3A=Collection.optional(Opt2A)
  Main1=(
    s=S"hi"
    a=A(name=s)
    imm opt1S=Opt1S(s)
    imm opt1A=Opt1A(a)
    imm opt2S=Opt2S(opt1S)
    imm opt2A=Opt2A(opt1A)
    imm opt3S=Opt3S(opt2S)
    imm opt3A=Opt3A(opt2A)
    {}:Test"6 true"(opt1S.isPresent())
    {}:Test"6 true"(opt2S.isPresent())
    {}:Test"6 true"(opt3S.isPresent())
    {}:Test"6 true"(opt1A.isPresent())
    {}:Test"6 true"(opt2A.isPresent())
    {}:Test"6 true"(opt3A.isPresent())
    {}:Test"6 get"(actual=opt1S.val() expected=S"hi")
    {}:Test"6 get"(actual=opt2S.val().val() expected=S"hi")
    {}:Test"6 get"(actual=opt3S.val().val().val() expected=S"hi")
    {}:Test"6 get"(actual=opt1A.val() expected=S"A(name[###])")
    {}:Test"6 get"(actual=opt2A.val().val() expected=S"A(name[###])")
    {}:Test"6 get"(actual=opt3A.val().val().val() expected=S"A(name[###])")
    )
  TestEqToS=(
    s=S"hi"
    a=A(name=s)
    imm opt1S=Opt1S(s)
    imm opt1A=Opt1A(a)
    imm opt2S=Opt2S(opt1S)
    imm opt2A=Opt2A(opt1A)
    imm opt3S=Opt3S(opt2S)
    imm opt3A=Opt3A(opt2A)
    Debug(opt1S)
    {}:Test"toS"(actual=opt1S
      expected=S"""
        |<"hi">
        """.trim())
    Debug(opt1A)
    {}:Test"toS"(actual=opt1A
      expected=S"""
        |<A(name="hi")>
        """.trim())
    Debug(opt2S)
    {}:Test"toS"(actual=opt2S
      expected=S"""
        |<<"hi">>
        """.trim())
    Debug(opt2A)
    {}:Test"toS"(actual=opt2A
      expected=S"""
        |<<A(name="hi")>>
        """.trim())
    Debug(opt3S)
    {}:Test"toS"(actual=opt3S
      expected=S"""
        |<<<"hi">>>
        """.trim())
    Debug(opt3A)
    {}:Test"toS"(actual=opt3A
      expected=S"""
        |<<<A(name="hi")>>>
        """.trim())
    Debug(opt2A==opt3A.val())
    Debug(Opt2A()<:Opt2A!=opt3A.val())
    {}:Test"eq"(opt2A==opt3A.val())
    {}:Test"neq"(Opt2A()<:Opt2A!=opt3A.val())
    )
  }
TestDifferentEqs={
  A={ 
    class method This ()
    read method Bool ==(read This that)=(
      Log"Opt".write(S"A-eq")
      Bool.true()
      )
    }
  B={
    class method This ()
    read method Bool readEquality(read This that)=(
      Log"Opt".write(S"B-eq")
      Bool.true()
      )
    }
  C={class method This ()}
  OptA=Collection.optional(A)
  OptB=Collection.optional(B)
  OptC=Collection.optional(C)
  Main=(
    Log"Opt".clear()
    imm oa=OptA(A())
    _=oa.allEq(oa)
    _=OptB(B())<:OptB.allEq(OptB(B()))
    _=OptC(C())<:OptC.allEq(OptC(C()))
    Debug(S"logged:")
    Debug(Log"Opt".#$reader().read())
    {}:Test"eqLogging"(actual=Log"Opt".#$reader().read()
      expected=S"A-eqB-eq"
      )
    )
  }