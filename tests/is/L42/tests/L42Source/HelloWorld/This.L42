reuse [AdamsTowel]
Foo={
  class method Num foo(Bool bla) = (
    Num res = (
      Void unused= (
        if bla return 1Num 
        return 2Num
        )
      catch return Num x x
      )
    res
    )
  }
    

Direction = Collection.Enum:{interface
  method This opposite()
  North = {[This1] class method This() method This1 opposite()=South() }
  East = {[This1] class method This() method This1 opposite()=West() }
  South = {[This1] class method This() method This1 opposite()=North() }
  West = {[This1] class method This() method This1 opposite()=East() }
  }
Direction2 = Collection.Enum:{
  method This opposite()
  North2 = {method This1 opposite()=South() }
  East = {method This1 opposite()=West() }
  South = {method This1 opposite()=North2() }
  West = {method This1 opposite()=East() }
  }
Late2 = {}

AAA = {
  
  Point = Data:{I x, I y}
Game = Organize:{
  NPC$ = {}
  Map$ = Collection.map(key=Point, val=NPC$)
  NPC = Data:{
    var Point location
    var I lifePoints
    var mut This target
    mut method Void step(mut Map$ map) = void
    }
  Map = {
    mut method Void add(mut NPC that) = this.#put(key=that.location(), val=that)
    mut method Void remove(mut NPC that) = this.remove(key=that.location())
    mut method Void move(mut NPC that,Point to) = (
      this.remove(that)
      that.location(to)
      this.add(that)
      )
    mut method mut NPC get(Point that) =
      (this<:mut @Break{after @Game} Map$).#val(key=that).#val()
      //any path with a suggestive name would do instead of @Break
mut method Void stepAll() =
      for (mut val) in this<:mut Map$
        (val<:mut NPC).step(map=this)
    }
  }
  
  }
MainDir2=(
  Debug(Direction2.Vals())
  )

Main=(
  x=42I
  //Debug(S"eeHello world %(x//t)")
  Debug(S"eeHello world %(x/*t*/)")
//  Debug(S"""%
//    | foo = %(S"hi")
//    | bar = %[(buz = 2I*x
//    |         buz)]
//    | amazing = %(/*(*/S"""%%
//    |    | hello %%x %x)!!
//    |  """)
//    |eeHello world %(x//t
//    |) ff
//    """)
  )
EnumDec = {

TraitEnumBase = Trait:{
  List = {class method mut This()}
  Vals = { class method List next() = List() }
  }
TraitEnumStep = Trait:{interface
  class method Void sealed()
  read method Bool readEquality(read This that)
  method Bool ==(This that)
  method Bool !=(This that)
  E = {[This1,HasToS]
    class method This of::0()
    class method This() = {
      if This self = System.immNorm(this.of::0()) ( return self )
      error X"unreachable"
      }
    class method Void sealed() = void
    method readEquality(that) = 
      System.immEquality(System.immClone(this) and=System.immClone(that))
    method ==(that) = this.readEquality(that)
    method !=(that) = !this.readEquality(that)
    method toS() = Info(This).outerName().toS()
    }
  List = { method This withAlsoRight(This1 that) }
  Vals = {
    class method List prev()
    class method List next() = this.prev().withAlsoRight(E())
    }
  }
TraitCacheVals = Organize:Trait:{
  $ = {interface[HasToS],    read method Bool readEquality(read This that) }
  List = Collection.list($)
  Map = Collection.map(key=S val=$)
  Vals = Data.Relax:{
    class method List next()
    @Cache.Lazy class method List () = this.next()
    @Cache.Lazy class method Map map() = \()( for e in this() \put(key=e.toS() val=e) )
    class method $ (S that) = {
      return this.map().val(key=that).val()
      catch error Any _ error S.ParseError(S"""
        |Invalid enumeration name: %(that).
        |Valid enumeration names are %this()
        """)
      }
    }
  }
Enum = Decorator:{
  method Trait(Trait trait)[Message.Guard] = (
    var res = TraitEnumBase()
    for (nameFromRoot) in trait.info().nesteds() (
      step = TraitEnumStep['E=>nameFromRoot]
      base = res['Vals.next()=>'Vals.prev()]
      res := (step+base)[hide='Vals.prev()]
      )
    res := (res+TraitCacheVals)[hide='Vals.next()]
    (res+trait)[hide='sealed()]
    )
  }
Directions=Enum:{Left={},Top={},Right={}}
  }

Value = Decorator:Data:{
  I x=0I
  method Trait(Trait trait)[Message.Guard]
    = Data('This,autoNorm=Bool.true()):trait
  }
DataNoWither = Decorator:Data:{
  Name that=Name"This"
  Bool autoNorm=Bool.false()
  Bool relax=Bool.false()

  method Trait(Trait trait)[Message.Guard] = (
    name=this.that()
    autoNorm=this.autoNorm()
    data = Data(name,autoNorm=autoNorm)
    var Trait acc=trait
    acc:=data.optionallyApply(Data.addHasToS(), acc=acc)
    acc:=data.optionallyApply(Data.addEqOp(), acc=acc)
    acc:=data.optionallyApply(Data.addReadEqOp(), acc=acc)
    acc:=data.optionallyApply(Data.addNEqOp(), acc=acc)
    acc:=data.optionallyApply(Data.addCapsuleClone(), acc=acc)
    acc:=data.optionallyApply(Data.addImmClone(), acc=acc)
    acc:=data.optionallyApply(Data.addImmNorm(), acc=acc)  
    acc:=Data.AddConstructors(name,noFwd=autoNorm):acc
    //acc:=Data.Wither(name):acc//for example, we can just skip this line
    acc:=Data.Defaults(name):acc
    acc:=Data.Close(name,autoNorm=autoNorm):acc
    if !this.relax() (Data.checkCoherent(acc.code()))
    acc
    )
  }
Alphanumeric = Decorator:{
  AlphanumericTrait = Trait:{[HasToS]
    S that
    method toS()=this.that()
    @Cache.Call class method This #from(S.StringBuilder stringLiteral) = 
      this(string=stringLiteral.toS())
    class method This (S string)
    }
  method Trait(Trait trait)[Message.Guard] = 
    Data('This,autoNorm=Bool.true()):AlphanumericTrait():trait
  }
Buzz = Value:{S ohNo}
/*LateExample = {
  Point = Data:{I x, I y}
  Game = Organize:{
    NPC$ = {}
    Map = Collection.map(key=Point, val=NPC$)
    NPC = Data:{
      var Point location
      var I lifePoints
      var mut This target
      mut method Void step(mut Map$ map) = void
      }
    Map$ = {
      mut method Void stepAll() = for (mut val) in this<:mut @Late Map
        (val<:mut NPC).step(map=this)
      mut method Void add(mut NPC that) = this.#put(key=that.location(), val=that)
      mut method Void remove(mut NPC that) = this.remove(key=that.location())
      mut method Void move(mut NPC that,Point to) = (
        this.remove(that)
        that.location(to)
        this.add(that)
        )
      mut method mut NPC get(Point that) = this<:mut Map.#val(key=that).#val()
      }
    }
  Late = {}
  }*/

A = Organize:{
  Foo={ }
  Foo$={
    method Foo self()=this
    @Late
    }
  }
Late = {}

MyProgram = Public(private=\(X)):{
  Person = Data:{
    @Public var S name
    var I age
    @Public class method mut This (S name, I age)//S age
    @Public mut method Void birthDay() = this.age(\age+1I)
    }
  Car = Data:{
    capsule Person driver //try also with mut
    @X @Cache.Now class method Void drivingAge(read Person driver) =
      X[driver.age()>=18I]
    }
  }
AA=(
  lib={
    Foo={}
    @Foo method Void bar()=void
    method Void beer()=void
    }
  foo1=Info(library=lib).nested(name='Foo)
  doc=Info(library=lib).meth(selector='bar()).doc()
  Debug(doc.annotatedAs(nested=foo1))
  foo2=doc.docs().left().info()
  Debug(foo1)
  Debug(foo2)
  Debug(foo1==foo2)
  Public(public=Info(library=lib).nested(name='Foo)):lib
  )
//      Public(private=Info(X))
Point = Public(private=Info(X)):Data:{Num x, Num y
  //@Public method Num xx()=this.x()
  @X method This with(Num x)
  //@X method This self()=this
  }
/*difficoult mini example:
Person with friends
if none of my friends, or friends friends have my hobby, add me as my friend
Java 15:
record Person(String hobby, List<Person>friends){
  void addSelf(){
    var sameHobby1=friends.stream().anyMatch(f->f.hobby().equals(hobby));
    if(sameHobby1){return;}
    for(var fi:friends){
      var sameHobby2=fi.friends().stream().anyMatch(f->f.hobby().equals(hobby));
      if(sameHobby2){return;}
      }
    friends.add(this);
    }
  }
*/
Person = Class:Trait({
  mut method mut This self()=this
  Person = Data.AddList:Data:{List={}, S hobby, mut List friends}
  Person$ = {
    mut method mut Person self()
    mut method Void addSelf() = {
      (self)=this
      sameHobby1=Match.Some()(for mut f in self.#friends() \add(f.hobby()==self.hobby()))
      if sameHobby1 (return void)
      for mut fi in self.#friends() (
        sameHobby2=Match.Some()(for mut f in fi.#friends() \add(f.hobby()==self.hobby()))
        if sameHobby2 (return void)
        )
      return self.#friends().#add(right=self)
      }
    }
  })['Person$=>'Person]['Person=>'This][hide='self()]
Main2 = (
  bob=Person(hobby=S"rage", friends=\())
  Debug(bob)
  bob.addSelf()
  Debug(bob)
  )
