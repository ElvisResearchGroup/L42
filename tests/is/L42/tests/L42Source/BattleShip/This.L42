reuse [AdamsTowel]
Left = {}
Right = {}
Signer = Public:{...}
NumSigner = Signer(Num)
TestSigner = (
  a=NumSigner.#$of(id=S"a")
  b=NumSigner.#$of(id=S"b")
  NumSigner.Signed sa=a(label=S"myA",data=15Num)
  NumSigner.Signed sb=b(label=S"myB",data=150Num)
  Debug(sa.data())
  Debug(a.mine(sa))
  Debug(sb.data())
  )

Answer = Collection.Enum:{
  method S repr()
  Miss={method S repr()=S"*"}
  Hit={method S repr()=S"+"}
  SinkCarrier={method S repr()=S"c"}
  SinkBattleship={method S repr()=S"b"}
  SinkSubmarine={method S repr()=S"s"}
  SinkDestroyer={method S repr()=S"d"}
  SinkPatrolboat={method S repr()=S"p"}
  }
  
Ship = Collection.Enum:{ 
  method I size()
  method Answer answer()
  Carrier={method I size()=5I  method Answer answer()=Answer.SinkCarrier()}
  Battleship={method I size()=4I  method Answer answer()=Answer.SinkBattleship()}
  Submarine={method I size()=3I  method Answer answer()=Answer.SinkSubmarine()}
  Destroyer={method I size()=3I  method Answer answer()=Answer.SinkDestroyer()}
  Patrolboat={method I size()=2I method Answer answer()=Answer.SinkPatrolboat()}
  None={method I size()=0I  method Answer answer()=Answer.Miss()}
  }
Ships = Class:Trait(Collection.matrix(Ship.List,row=10I,col=10I))[clear='elemToS(row,col,val)]:{
  class method mut This()=\(Ship.List()(for i in Range(100I) \add(Ship.None())))
  class method S elemToS(I row, I col, read Ship val) = 
    if val.immClone()==Ship.None() S" "
    else val.immClone().answer().repr()
  }
Shots = Class:Trait(Collection.matrix(S.List,row=10I,col=10I))[clear='elemToS(row,col,val)]:{
  class method mut This()=\(S.List()(for i in Range(100I) \add(S"")))
  class method S elemToS(I row, I col, read S val) = if val.toS()==S"" S" " else val.toS()
  }

FireResult = Data:{Ships.Coord coord, Shots shots, Answer answer}
ResultSigner = Signer(FireResult)
Main = {...}

//LoadJ=Load:{reuse[L42.is/JavaServer]}
//JServer=LoadJ(slaveName=S"javaServer{}")
//LoadGui=Load:{reuse[L42.is/GuiBuilder]}
//Gui=LoadGui(javaServer=JServer)

//Board={...}
//EnvModel=Data:JServer.Handler:{...}
//JavaCode={...}
//Main={...}

/*

We can hava a variant where both players ships are on the same board
this will be a grid of Cell
Cell:{@Left Bool left, @Right Bool right}
so that if you have Left permisssions you can read the left field
we can have an implicit invariant that not left and right
*/