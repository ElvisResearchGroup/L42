Coords = Collection.list(Ships.Coord)
Board = Data:{[HasToS]
  Ships ships
  @Cache.Now class method Void invariant(Ships ships) = (
    totShips=17I//5I+4I+3I+3I+2I
    countNone=Match.Count()(for s in ships \add(s==Ship.None()))
    X[countNone+totShips==100I]
    for s in Ship.Vals() (if s!=Ship.None() (
      imm coords=Coords()(for si in ships, c in ships.coords(), if si==s \add(c))
      imm rows=I.List()(for (row) in coords \add(row))
      imm cols=I.List()(for (col) in coords \add(col))
      X[coords.size()==s.size()]
      X[This.allEq(rows) || This.allEq(cols)]
      X[This.allContact(rows) || This.allContact(cols)]
      ))
    )
  class method Bool allEq(I.List that) = Match.All()(
    for e in that \add(e==that.left())
    )
  class method Bool allContact(I.List that) = Match.All()((
    var min=that.left()
    for e in that ( min:=min.min(e) )
    for i in Range(min to=min+that.size()) \add(i in that)
    ))
  method FireResult fire(Ships.Coord coord, Shots shots) = \(
    coord = coord,
    shots = shots,
    answer = this.fireAnswer(coord=coord,shots=shots)
    )
  method Answer fireAnswer(Ships.Coord coord, Shots shots) = {
    ship = this.ships().val(coord)
    if ship==Ship.None() return Answer.Miss()
    hits = Match.Count()(
      for s in this.ships().asList(), h in shots.asList() \add(s==ship && h!=S"")
      )
    if hits+1I!=ship.size() return Answer.Hit()
    return ship.answer()
    }
  method toS()=this.ships().toS()
  }
PlayerTrait = Trait:{...}
RandomFireTrait = Trait:{...}

Player1 = Sifo:{}
Player2 = Sifo:{}
Top=Sifo:{[Player1,Player2]}

Example1=Sifo(Top):{
  A={
    imm @Player1 S foo
    S bar
    class method This (@Player1 S foo, S bar)
    class method This of(@Player1 S foo, S bar)=This(foo=foo,bar=bar)
    }
  }

DeclassifyP1 = {
  class method mut This #$of()
  mut method ResultSigner.Signed (@Player1 ResultSigner.Signed that) = that
  }
DeclassifyP2 = {
  class method mut This #$of()
  mut method ResultSigner.Signed (@Player2 ResultSigner.Signed that) = that
  }
SifoBattleShipAIAI = Sifo(Top):{
  Players=Class:Trait({
    AIPlayer1 = Class.Relax:Data.Relax:PlayerTrait['SelfL=>Player1;'OtherL=>Player2]:RandomFireTrait
    AIPlayer2 = Class.Relax:Data.Relax:PlayerTrait['SelfL=>Player2;'OtherL=>Player1]:RandomFireTrait
    })[
      'AIPlayer1.OtherPlayer=>'AIPlayer2;
      'AIPlayer2.OtherPlayer=>'AIPlayer1;
      'AIPlayer1.Declassify=>DeclassifyP1;
      'AIPlayer2.Declassify=>DeclassifyP2;
      ]
  ExampleGame = {...}
  }
ExampleGame = SifoBattleShipAIAI.ExampleGame.#$of()

GUIFireTrait = Trait:{...}
SifoBattleShipGUIAI = Sifo(Top):{
  Players=Class:Trait({
    GUIPlayer1 = Class.Relax:Data.Relax:PlayerTrait['SelfL=>Player1;'OtherL=>Player2]:JServer.Handler:GUIFireTrait
    AIPlayer2 = Class.Relax:Data.Relax:PlayerTrait['SelfL=>Player2;'OtherL=>Player1]:RandomFireTrait
    })[
      'GUIPlayer1.OtherPlayer=>'AIPlayer2;
      'AIPlayer2.OtherPlayer=>'GUIPlayer1;
      'GUIPlayer1.Declassify=>DeclassifyP1;
      'AIPlayer2.Declassify=>DeclassifyP2;
      ]
  ExampleGUIGame = {...}
  }
  
//ExampleGUIGame = SifoBattleShipGUIAI.ExampleGUIGame.#$of()

TestCompletes = {}:Test"Battleship completes"(Bool.true())