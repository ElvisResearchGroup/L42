Coords = Collection.list(Ships.Coord)
Board = Data:{[HasToS]
  Ships ships
  @Cache.Now class method Void invariant(Ships ships)=(
  totShips=17I//5I+4I+3I+3I+2I
  countNone=Match.Count()(for s in ships \add(s==Ship.None()))
  X[countNone+totShips==100I]
  for s in Ship.Vals() (if s!=Ship.None() (
    coords=Coords()(for si in ships, c in ships.coords(), if si==s \add(c))
    X[coords.size()==s.size()]
    //TODO: check the coords touch each other
    ))
  )
  method FireResult fire(Ships.Coord coord, Shots shots) = FireResult(
    coord = coord,
    shots = shots,
    answer = this.fireAnswer(coord=coord,shots=shots)
    )
  method Answer fireAnswer(Ships.Coord coord, Shots shots) = {
    ship = this.ships().val(coord)
    if ship==Ship.None() return Answer.Miss()
    hits = Match.Count()(
      for s in this.ships().asList(), h in shots.asList() \add(s==ship && h!=S"")
      )
    if hits+1I!=ship.size() return Answer.Hit()
    return ship.answer()
    }
  method toS()=this.ships().toS()
  }
PlayerTrait = Trait:{...}
RandomFireTrait = Trait:{...}

//Board={...}
//EnvModel=Data:JServer.Handler:{...}
//JavaCode={...}

Player1 = Sifo:{}
Player2 = Sifo:{}
Top=Sifo:{[Player1,Player2]}
DeclassifyP1 = {
  class method mut This #$of()
  mut method ResultSigner.Signed (@Player1 ResultSigner.Signed that) = that
  }
DeclassifyP2 = {
  class method mut This #$of()
  mut method ResultSigner.Signed (@Player2 ResultSigner.Signed that) = that
  }
SifoBattleShip = Sifo(Top):{
  Players=Class:Trait({
    AIPlayer1 = Class.Relax:Data.Relax:PlayerTrait['SelfL=>Player1;'OtherL=>Player2]:RandomFireTrait
    AIPlayer2 = Class.Relax:Data.Relax:PlayerTrait['SelfL=>Player2;'OtherL=>Player1]:RandomFireTrait
    })[
      'AIPlayer1.OtherPlayer=>'AIPlayer2;
      'AIPlayer2.OtherPlayer=>'AIPlayer1;
      'AIPlayer1.Declassify=>DeclassifyP1;
      'AIPlayer2.Declassify=>DeclassifyP2;
      ]
  ExampleGame = {...}
  //example GUI here?
  }
ExampleGame = SifoBattleShip.ExampleGame.#$of()
//run GUI here?