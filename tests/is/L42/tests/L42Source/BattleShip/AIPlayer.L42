[Player]
Board board
mut Math.Random rand
mut ResultSigner signer
var Shots myShots = Shots()
var Shots otherShots = Shots()
method of(board,rand,signer) = This(board=board,rand=rand,signer=signer)
class method Board allShips(mut Math.Random rand) = \(ships=(
  ships = Ships()
  this.fill(Ship.Carrier(),ships=ships,rand=rand)
  this.fill(Ship.Battleship(),ships=ships,rand=rand)
  this.fill(Ship.Submarine(),ships=ships,rand=rand)
  this.fill(Ship.Destroyer(),ships=ships,rand=rand)
  this.fill(Ship.Patrolboat(),ships=ships,rand=rand)
  ships
  ))
    
class method Void fill(Ship that,mut Ships ships,lent Math.Random rand) =
  while !this.fill1(that,ships=ships,rand=rand) (void)
    
class method Bool fill1(Ship that,mut Ships ships,lent Math.Random rand) = {
  row = rand.nextInRange(0I to=10I)
  col = rand.nextInRange(0I to=10I)
  vertical = rand.nextInRange(0I to=2I)==0I
  for delta in Range(0I to=that.size()) (
    rowi = (if vertical row+delta else row)
    coli = (if vertical col else col+delta)
    if rowi>=10I || coli>=10I return Bool.false()
    if ships.val(row=rowi,col=coli)!=Ship.None() return Bool.false()
    )
  for delta in Range(0I to=that.size()) (
    rowi = (if vertical row+delta else row)
    coli = (if vertical col else col+delta)
    ships.set(row=rowi,col=coli,val=that)
    )
  return Bool.true()
  }
mut method Ships.Coord fire() = {
  loop (
    row = this.#rand().nextInRange(0I to=10I)
    col = this.#rand().nextInRange(0I to=10I)
    free = this.myShots().val(row=row,col=col)==S""
    if free return \(row=row,col=col)
    )
  }
mut method ResultSigner.Signed declassify(ResultSigner.Signed that) = (
  (shots,coord,answer) = that.data()
  X[shots==this.otherShots()]
  this.otherShots(shots.with(row=coord.row(),col=coord.col(),val=answer.repr()))
  that
  )
  //TODO: must check correct parameters
  //also check it is called only once for round
mut method Void round(mut Player other) = (
  coord = this.fire()
  //TODO: @Left? generic @Self, @Other? //TODO: self complete does not work for 'this.' (or parameters)
  FireResult res = this.board().fire(coord=coord,shots=this.myShots())
  ResultSigner.Signed signed = this.#signer()(label=coord.toS(),data=res)
  ResultSigner.Signed freeSigned=other.declassify(signed)
  X[this.signer().mine(freeSigned,label=coord.toS())]
  r=freeSigned.data().answer().repr()
  this.myShots(\myShots.with(row=coord.row(),col=coord.col(),val=r))
  )