@Public Fail=Message:{[Message.Guard]}
J={
  Fail={[HasToS]}
  class method mut This #$of()
  mut method Void loadCode(S fullName, S code)[Fail]
  mut method S.Opt askEvent(S key, S id, S msg)[Fail]
  }
mut J j
class method mut This(mut J j)
@Public class method S codePackageName()
@Public class method S codeName()
@Public class method S code()
@Public class method mut This #$of()[Fail]
  =This(J.#$of())
@Public class method mut This (mut J that)[Fail]=(
  that.loadCode(fullName=This.codePackageName()++S"."++This.codeName(),code=This.code())
  catch J.Fail x exception Fail"%x" // in this case it is better then using .with(cause=x)?
  This(j=that)
  )
@Public mut method Void execute(S query)[Fail]=(
  _=this.#j().askEvent(key=This.codeName(), id='execute(query),msg=query)
  catch J.Fail x exception Fail"%x"
  void)
@Public mut method Void executeQuery(S query)[Fail]=(
  _=this.#j().askEvent(key=This.codeName(), id='executeQuery(query),msg=query)
  catch J.Fail x exception Fail"%x"
  void
  )
@Public mut method Bool next()[Fail]=(
  res=this.#j().askEvent(key=This.codeName(), id='next(),msg=S"")
  catch J.Fail x exception Fail"%x"
  res==S.Opt(S"true")<:S.Opt
  )
@Public mut method S.Opt val(S label)[Fail]={
  return this.#j().askEvent(key=This.codeName(), id='val(label),msg=label)
  catch J.Fail x exception Fail"%x"
  }
@Public mut method I findColumn(S label)[Fail]={
  index=this.#j().askEvent(key=This.codeName(), id='findColumn(label),msg=label)
  return I.from(string=index.val())
  catch J.Fail x exception Fail"%x"
  }
@Public mut method S.Opt val(I that)[Fail]={
  return this.#j().askEvent(key=This.codeName(), id='val(that),msg=that.toS())
  catch J.Fail x exception Fail"%x"
  }
@Public mut method Void queryTables()[Fail]=(
  _=this.#j().askEvent(key=This.codeName(), id='queryTables(),msg=S"")
  catch J.Fail x exception Fail"%x"
  void)
@Public mut method Void queryColums(S tableName)[Fail]=(
  _=this.#j().askEvent(key=This.codeName(), id='queryColumns(tableName),msg=tableName)
  catch J.Fail x exception Fail"%x"
  void)
@Public mut method Void kill()=(
  _=this.#j().askEvent(key=This.codeName(), id='kill(),msg=S"")
  catch J.Fail _ (void)
  error X"unreachable")