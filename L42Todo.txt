-CACHING: there is a bug when sometime a .unwrap field is null, causing an assert error. It is about re running after errors.
 -IDE: clear cache should stop the loading of the old cache and set up run?
 //TODO: now somehow the Info is always declassed to "norm" :-(
    
    -add callSiteCache?
    -add lazyReadCache?
    -add multi args cache for imm/class?

-L42 optimization: if an e is just the Full.L emptyLibrary, I can avoid a lot of fromming of CTzs.... it can speed up a lot whith tests using{}: as tag!

-Close: the java file call Close.java seams to be the starting point to do more caching
-file 7 is quite misterius... what is it? solve the TODOs when parallelizing?
  //TODO: how Opt work on int/float/String?


-circular toString in TestData?
-toLibrary in Data? is similar to the toString...

4)  TODO: Now we could get a Javac error if we use for example
    L42£LazyMsg  vs £cDeployAAA£n0£_£cMessage£n1     to refine woopsed.
    We need to change method subtype in the interface check so that a native type can not refine an interface :-(
    Only way?

3)
-capturing stack overflow?
nativeKind=NonDeterministicError
if a catch capture a NDE, then the method need to be bridge or #$
     
2)-TODO: classes with nativeKind: constructor have no args and return mut/imm//TODO

    
 
------------------
Should I do Alphanumeric?
//   );}@Test public void t1(){top(//TODO: fix, so that also a class expression can be a top level toLibrary?
//   top("{A={class method Library #toLibrary()={#norm{}}} B=(class A a=A<:class A a)}","{A={#typed{}}B={#typed{}}#norm{}}")


//NO?:
Should organize check that $ renamed stuff is renamed onto an existing target?
otherwise Organize:{Foo={}   Fooo$={}} works with no reported errors
But.... Foo$Bar is ok if Foo exists and Bar does not...
