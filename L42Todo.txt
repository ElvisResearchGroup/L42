//tasked: js file for ide personalization modularized away

On linux I'm getting testRawQuery/testQuery
needs $LiftS, but not on win??
Main=[L42.is/RawQuery][AdamsTowel/Trait][AdamsTowel/Trait$LiftS]
Main=[L42.is/JavaServer][AdamsTowel/Math/Random][AdamsTowel/Math$Random]/GuiBuilder

Was there ever a WConversion macro? is google conversions working yet?

The type of supportFile in Web is very weird
mut method mut This supportFile(Url localName, S destination)
also the parameter names are not standard (on)
Also.. should we allow the 'content' instead of the localName too?
overall, can we remove supportFile and replace with a more modularly usable abstraction?

Unused security should be an error but it is not now
in security error when we return the list of required permissions, remove duplicates
right now Security urls are pretty liberal. Should they not contain the '?' sign?

Bug:nameSecret("L42Source/TestRawQuery"), is satisfied by
Main=[L42.is/RawQuery],//[AdamsTowel/Trait],[AdamsTowel/Trait$LiftS]
//but the error mentioned also trait and LiftS ??
In the same way, why it is sufficient to make
TaskDeployGuiBuilder=[Secret]
//main Main is not allowed to call an #$ method on code coming from [L42.is/RawQuery.L42/Trait, L42.is/RawQuery.L42/QueryEngine, AdamsTowel/Trait.L42, AdamsTowel/Trait$LiftS.L42]. Allowed sources are [L42.is/JavaServer]
however we need both in TaskDeploySifoLib=[L42.is/GitWriter][Secret]

main MainR is not allowed to call an #$ method on code coming from 
[L42.is/AdamsTowel.L42/Math$Random]. Allowed sources are []
[L42.is/AdamsTowel/Math.Random]. Allowed sources are []
[L42.is/AdamsTowel/Math.Random]
//We need during deployment to go from [L42.is/AdamsTowel.L42/Math$Random] to [L42.is/AdamsTowel/Math.Random] 


Right now Resources keeps in memory all the out/err/tests ever happened.
Those fields of Resources should be removed and the callbacks should be used instead during tests.
 
Replace all #succ/#pred with succ/pred also in the guide

test that == on set and map does not just use structural equality, since order is relevant in 42 sets....

Data should not generate certain methods for immutable classes:
immClone()                         read method This immClone()=(..)
readEquality(that)                 read method Bool readEquality(read This that)=(..)
capsuleClone()                     mut method capsule This capsuleClone()=(..)

complete documentation of JavaServer
include the interface for Event, to be included while compiling a
jar and then the .class will be removed before putting into 42 project

-big: refactor adam towel?
  -equals ->representative
  -map->single native instead of two
  -System.immNorm fixes all rog list/maps
  -HasTos/Collection.HasRepr : 
    if both hasRepr System.eq on .repr(),
    if neither, System.eq, if some, eq is false.
    But.. how often to compute the repr for contains? 
  
-make a trusted native op to read the command line options
--either add a bunch of data stuff to collections or slim data
as in Insert = Class:(Trait:Collection.map(key=S val=S)):Data.addImmClone()

-X[test, msg=S"..."] would comput the S and the string interpolations even if the test pass, can we twist the sugar to avoid that
With the simple desugaring this could work: 
  X[test || X".."]
  X[\(actual, expected) || X".."] //mutate the builder to remember actual/expected

typo in keyword: close -> closed or sealed and Data.Close Data.Seal

guide, check typos from 7+
guide 6: table spacing

In Unit, we generate _FromLeft, do we want to keep it public? with the underscore??
In Unit, can we now remove N()? or make it private?
Since Unit is so big, can we have some way to not have the SITrait if it is not needed?
test if it is making a measurable time difference just to 'have' units.

in a few more places with Base64 we may use the more efficient "".replaceAll("\\n|\\r","");


-can we make cache (and hints?) checkpoint every main compilation-run step?
-can we customize max/min memory on the ide+spawned processes?


-docs of string, nat, bool and collection

I'm considering a Dispatch[res=S; 'fail=>Fail; 'fail2=>Fail2] decorator, to wrap return types and exceptions together, like
res=if .. SDispatch(S"..") else SDispatch(fail=Fail"..")
res.val() ( or res.#val() ?) will return the string or raise the exception.
This is needed for capsule mutators throwing exceptions

Fix FS library:
  I'm following WHATWG URL Standard? to check?
  The other option would be to check if it starts with a valid portable fileName (prevent <, >,:,,",/,\,|,?,* and the convention on portable filenames) and divides by "/" in other valid portable filenames

-- Main1=Debug(S"Hello1") Main2=Debug(S"Hello2"), why if I run again and change only hello1 I get a printout also for hello2? hello1 should have produced the same exact result

multi line escape syntax is now confusing.
  A better one would be """n where n is the number of % to mean 'escape' and the default is 1


(file 4toHalf line 106) Full->Half->Core
-for {return } without a second pair of Ds' after the Ks,
can we just make it without the nested block, simply adding the catchReturn at the end of the Ks
- Should shortcircut square have a shortut desugar for e[]
- How often desugar generates "(void)" or similar? (e) instead of void or e


- remove unused code in load (what did I ment here?)
- load must throw error if the map can not be completed(what did I ment here?)
-the l42 project need to encapsulate all used libraries under private class loaders?
 --otherwise, users of the slaves will need to know about those!

-Rename SQL tests and add some explicit iql tests.. how?
-should typeDep and coherentDep always contains explicitly the roots of the unique names one?
    now it is inconsistent. Also, what about depending from This0?
-db: null can also be input to the query
-for pluggable type systems and field docs: it is very sad that
 @Foo T bar put the annotation on the field but imm @Foo bar puts it on the type
-Bug: if you have a sum that sums wrong types for a field, we get a cache assertion fail.
  for example sum A a and $A a
-Bug -add constructor and possibly others remove docs form args of overridden abstract methods
-DB: test it on a gui, improve error messages, support more parameters
-Bug Optional toString in internal toString: it just prints the inside;  what happens if null? 
-we could avoid a ton of problems if we used the class object instead of null for opts!! But... how to handle Opt String and Opt Integer??? 
-Cache.Lazy: it seams to be fine when applied on class methods of natives.
  -test this corner case more; -do we get a good error if we try Cache.Lazy on an imm method of a native?
-BIG: Find a pattern to enable any native to be mapped on any type; consider loading a library on a towel where S is not native
-CACHING: there is a bug when sometime a .unwrap field is null, causing an assert error. It is about re running after errors.
-IDE crash: paste on IDE. close IDE, open IDE, copy on IDE. System now unresponsive!
-IDE: cut paste on win do not survive the IDE being closed
-IDE: clear cache should stop the loading of the old cache and set up run?
-IDE: somehow disable insertion of random '}'
-bug initVisitor 149 TODO: the above test is dangerous, it may encounter ... or reuse, and then we do not know if it is in the domain (good AssertionError)
-L42 optimization: if an e is just the Full.L emptyLibrary, I can avoid a lot of fromming of CTzs.... it can speed up a lot whith tests using{}: as tag!
-L42 cache optimization: new NormResult<T>(circle); and the "commander" pattern can be made faster
 //TODO: now somehow the Info is always declassed to "norm" :-(    
-can we simplify or remove class NormResult?
-Cache.Now optimization: we could search for a normalized version of the object just created,
 and in case it exists we can use the cached results on the normalized one. 
-Cache: use String .intern()?
  -what about Integer? what about big rational? what about arrays //now all ValueCache stuff is not flyweithed 
  -should wrap all the returns with normalization, so that we only return normalized numbers?
  Overall, what if the normalization cache use a (normalized) string instead of the key datastructure?
-test cache in case the cached method do some exceptions/errors
-collections methods are quite irregular, for example add() is shortcut for add(right), but #add() does not exists to be a shortcut for #add(right)
-add and test System.restartThreads() //or better name
-Consider removing 'pos' from Info toS, since pos is very big, than toFullS() is shorted then toS()
-circular toString in TestData?
-toLibrary in Data? is similar to the toString... now we have ListS+from(string), should we have from(ListAnys fields)? 
-new CachedRes for imm only on norms (now are allocated all of the time) (search new CachedRes)
-BootStrapping: consider moving some operations inside of it
------------------
-write in some guides: A=B:{..} does not typecheck .. but typechecks all its nested classes if dependencies are sorted
//To test, NativeNames: there is now a set of forbidden words, this may not be exactly identical to what identifiers can have.
//Should hava an automatic test that works, and may be we should be sure that a method parameter can not be called "reuse" if it is directly wrote in the program.
//Could be done, but is not now: redirect:
You may redirect a native** on another native** if the native pars are
  idenatically transferred in redirect
//TODO: we really need to decide if == and co take a read or an imm
//for now Data make it take an imm
//Num, Size,Unit and String take a read. Is it ok to have different ways?
Should I do Alphanumeric?
//   );}@Test public void t1(){top(//TODO: fix, so that also a class expression can be a top level toLibrary?
//   top("{A={class method Library #toLibrary()={#norm{}}} B=(class A a=A<:class A a)}","{A={#typed{}}B={#typed{}}#norm{}}")
Data.Value:
  Value just annotate as @Cache.Now the first method, that must be class void.
  then the method argument become imm fields and the result is dataed
  MCall=Data.Value:{[Expr] class method Void
    (Expr receiver, Name name, Expr.List args)
    =Data.Ensure[name.args().size()==args.size()]
    }

Make a more complete AddDocs?  myDoc.addTo({},name=...) currently only string docs are supported

 -add multi args cache for imm/class?
   They can be done by close or even by user defined decorators?
   
//NO?:
Should organize check that $ renamed stuff is renamed onto an existing target?
otherwise Organize:{Foo={}   Fooo$={}} works with no reported errors
But.... Foo$Bar is ok if Foo exists and Bar does not...

More tests?
I verified, but not added a test, the following:
-correctly not coherent if mut This or fields exists. 
 It seams like all the restrictions of nativeKinds are implemented
LM={
  class method This of::0()
  #norm{
    nativeKind=LazyMessage
    typeDep=This close}
  }
-data properly have fwd for the fields not used in invariants
-data works just fine on 0 fields objects.
-parse error can be whoopsed
Throw={class method Void (S.ParseError that)[S.ParseError]=exception that}
Main=(
  S.ParseError ee=(_=Size"nope" catch error S.ParseError pe pe error X"")
  Debug(ee)
  Debug(S"More text")
  (Throw(ee)
  whoops S.ParseError
  void))

  
  ---Documentation for Cache?
Cache.Lazy class () //trivial
Cache.Lazy imm () //trivial
Cache.Now class (..) ->read
Cache.ReadLazy class (..) ->read//not working now
//NO Cache.Now imm ()??? 
//NO Cache.Now class ()??? 
//NO Cache.Lazy imm(..)??? no dots +imm
//NO Cache.Now imm(..)???

//option 1: just use the pattern by hand:
@Cache.Lazy method A methName(B b,C c)=e //do not write
MethName=Data:{A that,B b,C c  @Cache.Lazy method A()=e}//instead write

//option 2:
@Cache.Lazy method A methName(B b,C c)=e//close take this code
method A _methName(B b,C c)=e//and generate those 3 lines, then set _methName and MethName private
MethName=Data:{A that,B b,C c  @Cache.Lazy method A()=that._methName(b=b,c=c)}
@Cache.Lazy  method A methName(B b,C c)=MethName(_this=this,b=b,c=c)()

@Cache.Lazy class method A a(B b,C c)=e
class method A a(B b,C c)=BC(b=b,c=c)()
BC=Data:{B b,C c  @Cache.Lazy method A()=e}
