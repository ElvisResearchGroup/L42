// Generated by delombok at Sun Jun 13 15:12:41 NZST 2021
package is.L42.flyweight;

import java.io.ObjectStreamException;
import java.util.Map;

import com.google.common.cache.CacheBuilder;

import is.L42.common.Constants;
import is.L42.generated.LDom;
import is.L42.perftests.PerfCounters;
import is.L42.visitors.CloneVisitor;
import is.L42.visitors.CollectorVisitor;
import is.L42.visitors.Visitable;

public final class C implements LDom, Visitable<C> {
  private static final long serialVersionUID = 1477016806296313145L;
  @Override public C accept(CloneVisitor cv) { return cv.visitC(this); }
  @Override public void accept(CollectorVisitor cv) { cv.visitC(this); }
  @Override public String toString() { return Constants.toS.apply(this); }
  @Override public boolean wf() { return Constants.wf.test(this); }
  private final String inner;
  private final int uniqueNum;
  private static record CI(String inner, int uniqueNum) {}
  private static final Map<CI, C> created = CacheBuilder.newBuilder().weakValues().<CI, C>build().asMap();
  private static void perfCountCOf(CI ci) {
    PerfCounters.inc("invoke.C.init.total");
    if(!created.containsKey(ci)) {
      PerfCounters.inc("invoke.C.init.total.unique");
      }
    }
  public static C of(final String inner, final int uniqueNum) {
    CI ci = new CI(inner, uniqueNum);
    if(PerfCounters.isEnabled()) { perfCountCOf(ci); }
    return created.computeIfAbsent(ci, ci2->new C(ci2.inner, ci2.uniqueNum));
    }
  Object readResolve() throws ObjectStreamException {
    return of(this.inner, this.uniqueNum);
    }
  private C(String inner, int uniqueNum) {
    this.inner = inner;
    this.uniqueNum = uniqueNum;
    }
  public String inner() { return this.inner; }
  public int uniqueNum() { return this.uniqueNum; }
  public C withInner(final String inner) {
    return this.inner == inner ? this : of(inner, this.uniqueNum);
    }
  public C withUniqueNum(final int uniqueNum) {
    return this.uniqueNum == uniqueNum ? this : of(this.inner, uniqueNum);
  	}
}
