// Generated by delombok at Wed Sep 25 22:13:26 PETT 2019
package is.L42.generated;

import java.util.List;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.stream.Collectors;
import is.L42.visitors.CloneVisitor;
import is.L42.visitors.CollectorVisitor;
import is.L42.visitors.Visitable;
import is.L42.visitors.InjectionToCore;
import is.L42.common.Constants;
import is.L42.common.Parse;
import static is.L42.tools.General.*;
import lombok.NonNull;

public class Core {

  public static interface E extends HasPos, HasWf, HasVisitable {
    Visitable<? extends E> visitable();

    static E parse(String s) {
      var r = Parse.e("-dummy-", s);
      assert !r.hasErr() : r;
      assert r.res.wf();
      var errors = new StringBuilder();
      E res = new InjectionToCore(errors, new Core.EVoid(new Pos("--temp--", 0, 0)))._inject(r.res);
      assert errors.length() == 0 : errors;
      assert res != null;
      return res;
    }
  }


  public static interface Leaf extends E {
  }


  public static interface Wrapper extends E {
    E e();
  }


  public static interface XP extends E {
    Visitable<? extends XP> visitable();
  }


  public static final class EX implements Leaf, Full.E, Full.Leaf, XP, Half.XP, Visitable<EX> {
    @Override
    public Visitable<EX> visitable() {
      return this;
    }

    @Override
    public EX accept(CloneVisitor cv) {
      return cv.visitEX(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitEX(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;
    @NonNull
    private final X x;

    @java.lang.SuppressWarnings("all")
    public EX(@NonNull final Pos pos, @NonNull final X x) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      this.pos = pos;
      this.x = x;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public X x() {
      return this.x;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.EX)) return false;
      final Core.EX other = (Core.EX) o;
      final java.lang.Object this$x = this.x();
      final java.lang.Object other$x = other.x();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $x = this.x();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public EX withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new EX(pos, this.x);
    }

    @java.lang.SuppressWarnings("all")
    public EX withX(@NonNull final X x) {
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      return this.x == x ? this : new EX(this.pos, x);
    }
  }


  public static final class PCastT implements Leaf, XP, Half.XP, Visitable<PCastT> {
    @Override
    public Visitable<PCastT> visitable() {
      return this;
    }

    @Override
    public PCastT accept(CloneVisitor cv) {
      return cv.visitPCastT(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitPCastT(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;
    @NonNull
    private final P p;
    @NonNull
    private final T t;

    @java.lang.SuppressWarnings("all")
    public PCastT(@NonNull final Pos pos, @NonNull final P p, @NonNull final T t) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      if (p == null) {
        throw new java.lang.NullPointerException("p is marked non-null but is null");
      }
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      this.pos = pos;
      this.p = p;
      this.t = t;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public P p() {
      return this.p;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public T t() {
      return this.t;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.PCastT)) return false;
      final Core.PCastT other = (Core.PCastT) o;
      final java.lang.Object this$p = this.p();
      final java.lang.Object other$p = other.p();
      if (this$p == null ? other$p != null : !this$p.equals(other$p)) return false;
      final java.lang.Object this$t = this.t();
      final java.lang.Object other$t = other.t();
      if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $p = this.p();
      result = result * PRIME + ($p == null ? 43 : $p.hashCode());
      final java.lang.Object $t = this.t();
      result = result * PRIME + ($t == null ? 43 : $t.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public PCastT withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new PCastT(pos, this.p, this.t);
    }

    @java.lang.SuppressWarnings("all")
    public PCastT withP(@NonNull final P p) {
      if (p == null) {
        throw new java.lang.NullPointerException("p is marked non-null but is null");
      }
      return this.p == p ? this : new PCastT(this.pos, p, this.t);
    }

    @java.lang.SuppressWarnings("all")
    public PCastT withT(@NonNull final T t) {
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      return this.t == t ? this : new PCastT(this.pos, this.p, t);
    }
  }


  public static final class EVoid implements Leaf, Full.Leaf, Half.Leaf, Visitable<EVoid> {
    @Override
    public Visitable<EVoid> visitable() {
      return this;
    }

    @Override
    public EVoid accept(CloneVisitor cv) {
      return cv.visitEVoid(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitEVoid(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;

    @java.lang.SuppressWarnings("all")
    public EVoid(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      this.pos = pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.EVoid)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int result = 1;
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public EVoid withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new EVoid(pos);
    }
  }


  public static final class L implements LL, Leaf, Half.Leaf, Visitable<L> {
    @Override
    public Visitable<L> visitable() {
      return this;
    }

    @Override
    public L accept(CloneVisitor cv) {
      return cv.visitL(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitL(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final List<Pos> poss;

    public Pos pos() {
      return poss.get(0);
    }

    private final boolean isInterface;
    @NonNull
    private final List<T> ts;
    @NonNull
    private final List<MWT> mwts;
    @NonNull
    private final List<NC> ncs;
    @NonNull
    private final Info info;
    @NonNull
    private final List<Doc> docs;

    @Override
    public L withCs(List<C> cs, Function<Full.L.NC, Full.L.NC> fullF, Function<Core.L.NC, Core.L.NC> coreF) {
      assert !cs.isEmpty();
      assert domNC().contains(cs.get(0));
      return this.withNcs(L(ncs, nc -> {
        if (!nc.key().equals(cs.get(0))) {
          return nc;
        }
        if (cs.size() == 1) {
          return coreF.apply(nc);
        }
        return nc.withL(nc.l.withCs(popL(cs), fullF, coreF));
      }));
    }

    @Override
    public List<C> domNC() {
      return L(ncs.stream().map(m -> m.key()));
    }

    @Override
    public L c(C c) {
      var res = LDom._elem(ncs, c);
      if (res == null) {
        throw new LL.NotInDom(this, c);
      }
      return res.l();
    }

    @Override
    public L cs(List<C> cs) {
      if (cs.isEmpty()) {
        return this;
      }
      if (cs.size() == 1) {
        return this.c(cs.get(0));
      }
      return this.c(cs.get(0)).cs(popL(cs));
    }

    public static L parse(String s) {
      var r = is.L42.common.Parse.e("--dummy--", s);
      assert !r.hasErr() : r;
      assert r.res != null;
      return (L) r.res;
    }


    public static final class MWT implements LDom.HasKey, Visitable<MWT> {
      @Override
      public MWT accept(CloneVisitor cv) {
        return cv.visitMWT(this);
      }

      @Override
      public void accept(CollectorVisitor cv) {
        cv.visitMWT(this);
      }

      @Override
      public String toString() {
        return Constants.toS.apply(this);
      }

      @Override
      public boolean wf() {
        return Constants.wf.test(this);
      }

      @NonNull
      private final List<Pos> poss;
      @NonNull
      private final List<Doc> docs;
      @NonNull
      private final MH mh;
      @NonNull
      private final String nativeUrl;
      private final E _e;

      @Override
      public S key() {
        return mh.s();
      }

      @java.lang.SuppressWarnings("all")
      public MWT(@NonNull final List<Pos> poss, @NonNull final List<Doc> docs, @NonNull final MH mh, @NonNull final String nativeUrl, final E _e) {
        if (poss == null) {
          throw new java.lang.NullPointerException("poss is marked non-null but is null");
        }
        if (docs == null) {
          throw new java.lang.NullPointerException("docs is marked non-null but is null");
        }
        if (mh == null) {
          throw new java.lang.NullPointerException("mh is marked non-null but is null");
        }
        if (nativeUrl == null) {
          throw new java.lang.NullPointerException("nativeUrl is marked non-null but is null");
        }
        this.poss = poss;
        this.docs = docs;
        this.mh = mh;
        this.nativeUrl = nativeUrl;
        this._e = _e;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<Pos> poss() {
        return this.poss;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<Doc> docs() {
        return this.docs;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public MH mh() {
        return this.mh;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public String nativeUrl() {
        return this.nativeUrl;
      }

      @java.lang.SuppressWarnings("all")
      public E _e() {
        return this._e;
      }

      @java.lang.Override
      @java.lang.SuppressWarnings("all")
      public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Core.L.MWT)) return false;
        final Core.L.MWT other = (Core.L.MWT) o;
        final java.lang.Object this$docs = this.docs();
        final java.lang.Object other$docs = other.docs();
        if (this$docs == null ? other$docs != null : !this$docs.equals(other$docs)) return false;
        final java.lang.Object this$mh = this.mh();
        final java.lang.Object other$mh = other.mh();
        if (this$mh == null ? other$mh != null : !this$mh.equals(other$mh)) return false;
        final java.lang.Object this$nativeUrl = this.nativeUrl();
        final java.lang.Object other$nativeUrl = other.nativeUrl();
        if (this$nativeUrl == null ? other$nativeUrl != null : !this$nativeUrl.equals(other$nativeUrl)) return false;
        final java.lang.Object this$_e = this._e();
        final java.lang.Object other$_e = other._e();
        if (this$_e == null ? other$_e != null : !this$_e.equals(other$_e)) return false;
        return true;
      }

      @java.lang.Override
      @java.lang.SuppressWarnings("all")
      public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $docs = this.docs();
        result = result * PRIME + ($docs == null ? 43 : $docs.hashCode());
        final java.lang.Object $mh = this.mh();
        result = result * PRIME + ($mh == null ? 43 : $mh.hashCode());
        final java.lang.Object $nativeUrl = this.nativeUrl();
        result = result * PRIME + ($nativeUrl == null ? 43 : $nativeUrl.hashCode());
        final java.lang.Object $_e = this._e();
        result = result * PRIME + ($_e == null ? 43 : $_e.hashCode());
        return result;
      }

      @java.lang.SuppressWarnings("all")
      public MWT withPoss(@NonNull final List<Pos> poss) {
        if (poss == null) {
          throw new java.lang.NullPointerException("poss is marked non-null but is null");
        }
        return this.poss == poss ? this : new MWT(poss, this.docs, this.mh, this.nativeUrl, this._e);
      }

      @java.lang.SuppressWarnings("all")
      public MWT withDocs(@NonNull final List<Doc> docs) {
        if (docs == null) {
          throw new java.lang.NullPointerException("docs is marked non-null but is null");
        }
        return this.docs == docs ? this : new MWT(this.poss, docs, this.mh, this.nativeUrl, this._e);
      }

      @java.lang.SuppressWarnings("all")
      public MWT withMh(@NonNull final MH mh) {
        if (mh == null) {
          throw new java.lang.NullPointerException("mh is marked non-null but is null");
        }
        return this.mh == mh ? this : new MWT(this.poss, this.docs, mh, this.nativeUrl, this._e);
      }

      @java.lang.SuppressWarnings("all")
      public MWT withNativeUrl(@NonNull final String nativeUrl) {
        if (nativeUrl == null) {
          throw new java.lang.NullPointerException("nativeUrl is marked non-null but is null");
        }
        return this.nativeUrl == nativeUrl ? this : new MWT(this.poss, this.docs, this.mh, nativeUrl, this._e);
      }

      @java.lang.SuppressWarnings("all")
      public MWT with_e(final E _e) {
        return this._e == _e ? this : new MWT(this.poss, this.docs, this.mh, this.nativeUrl, _e);
      }
    }


    public static final class NC implements LDom.HasKey, Visitable<NC> {
      @Override
      public NC accept(CloneVisitor cv) {
        return cv.visitNC(this);
      }

      @Override
      public void accept(CollectorVisitor cv) {
        cv.visitNC(this);
      }

      @Override
      public String toString() {
        return Constants.toS.apply(this);
      }

      @Override
      public boolean wf() {
        return Constants.wf.test(this);
      }

      @NonNull
      private final List<Pos> poss;
      @NonNull
      private final List<Doc> docs;
      @NonNull
      private final C key;
      @NonNull
      private final L l;

      @java.lang.SuppressWarnings("all")
      public NC(@NonNull final List<Pos> poss, @NonNull final List<Doc> docs, @NonNull final C key, @NonNull final L l) {
        if (poss == null) {
          throw new java.lang.NullPointerException("poss is marked non-null but is null");
        }
        if (docs == null) {
          throw new java.lang.NullPointerException("docs is marked non-null but is null");
        }
        if (key == null) {
          throw new java.lang.NullPointerException("key is marked non-null but is null");
        }
        if (l == null) {
          throw new java.lang.NullPointerException("l is marked non-null but is null");
        }
        this.poss = poss;
        this.docs = docs;
        this.key = key;
        this.l = l;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<Pos> poss() {
        return this.poss;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<Doc> docs() {
        return this.docs;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public C key() {
        return this.key;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public L l() {
        return this.l;
      }

      @java.lang.Override
      @java.lang.SuppressWarnings("all")
      public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Core.L.NC)) return false;
        final Core.L.NC other = (Core.L.NC) o;
        final java.lang.Object this$docs = this.docs();
        final java.lang.Object other$docs = other.docs();
        if (this$docs == null ? other$docs != null : !this$docs.equals(other$docs)) return false;
        final java.lang.Object this$key = this.key();
        final java.lang.Object other$key = other.key();
        if (this$key == null ? other$key != null : !this$key.equals(other$key)) return false;
        final java.lang.Object this$l = this.l();
        final java.lang.Object other$l = other.l();
        if (this$l == null ? other$l != null : !this$l.equals(other$l)) return false;
        return true;
      }

      @java.lang.Override
      @java.lang.SuppressWarnings("all")
      public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $docs = this.docs();
        result = result * PRIME + ($docs == null ? 43 : $docs.hashCode());
        final java.lang.Object $key = this.key();
        result = result * PRIME + ($key == null ? 43 : $key.hashCode());
        final java.lang.Object $l = this.l();
        result = result * PRIME + ($l == null ? 43 : $l.hashCode());
        return result;
      }

      @java.lang.SuppressWarnings("all")
      public NC withPoss(@NonNull final List<Pos> poss) {
        if (poss == null) {
          throw new java.lang.NullPointerException("poss is marked non-null but is null");
        }
        return this.poss == poss ? this : new NC(poss, this.docs, this.key, this.l);
      }

      @java.lang.SuppressWarnings("all")
      public NC withDocs(@NonNull final List<Doc> docs) {
        if (docs == null) {
          throw new java.lang.NullPointerException("docs is marked non-null but is null");
        }
        return this.docs == docs ? this : new NC(this.poss, docs, this.key, this.l);
      }

      @java.lang.SuppressWarnings("all")
      public NC withKey(@NonNull final C key) {
        if (key == null) {
          throw new java.lang.NullPointerException("key is marked non-null but is null");
        }
        return this.key == key ? this : new NC(this.poss, this.docs, key, this.l);
      }

      @java.lang.SuppressWarnings("all")
      public NC withL(@NonNull final L l) {
        if (l == null) {
          throw new java.lang.NullPointerException("l is marked non-null but is null");
        }
        return this.l == l ? this : new NC(this.poss, this.docs, this.key, l);
      }
    }


    public static final class Info implements Visitable<Info> {
      @Override
      public Info accept(CloneVisitor cv) {
        return cv.visitInfo(this);
      }

      @Override
      public void accept(CollectorVisitor cv) {
        cv.visitInfo(this);
      }

      @Override
      public String toString() {
        return Constants.toS.apply(this);
      }

      @Override
      public boolean wf() {
        return Constants.wf.test(this);
      }

      private final boolean isTyped;
      @NonNull
      private final List<P.NCs> typeDep;
      @NonNull
      private final List<P.NCs> coherentDep;
      @NonNull
      private final List<P.NCs> friends;
      @NonNull
      private final List<PathSel> usedMethods;
      @NonNull
      private final List<P.NCs> privateSupertypes;
      @NonNull
      private final List<S> refined;
      private final boolean declaresClassMethods;
      @NonNull
      private final String nativeKind;
      @NonNull
      private final List<P> nativePar;
      private final int _uniqueId;
      public static final Info empty = new Core.L.Info(false, L(), L(), L(), L(), L(), L(), false, "", L(), -1);

      @java.lang.SuppressWarnings("all")
      public Info(final boolean isTyped, @NonNull final List<P.NCs> typeDep, @NonNull final List<P.NCs> coherentDep, @NonNull final List<P.NCs> friends, @NonNull final List<PathSel> usedMethods, @NonNull final List<P.NCs> privateSupertypes, @NonNull final List<S> refined, final boolean declaresClassMethods, @NonNull final String nativeKind, @NonNull final List<P> nativePar, final int _uniqueId) {
        assert nativePar.isEmpty();
        if (typeDep == null) {
          throw new java.lang.NullPointerException("typeDep is marked non-null but is null");
        }
        if (coherentDep == null) {
          throw new java.lang.NullPointerException("coherentDep is marked non-null but is null");
        }
        if (friends == null) {
          throw new java.lang.NullPointerException("friends is marked non-null but is null");
        }
        if (usedMethods == null) {
          throw new java.lang.NullPointerException("usedMethods is marked non-null but is null");
        }
        if (privateSupertypes == null) {
          throw new java.lang.NullPointerException("privateSupertypes is marked non-null but is null");
        }
        if (refined == null) {
          throw new java.lang.NullPointerException("refined is marked non-null but is null");
        }
        if (nativeKind == null) {
          throw new java.lang.NullPointerException("nativeKind is marked non-null but is null");
        }
        if (nativePar == null) {
          throw new java.lang.NullPointerException("nativePar is marked non-null but is null");
        }
        this.isTyped = isTyped;
        this.typeDep = typeDep;
        this.coherentDep = coherentDep;
        this.friends = friends;
        this.usedMethods = usedMethods;
        this.privateSupertypes = privateSupertypes;
        this.refined = refined;
        this.declaresClassMethods = declaresClassMethods;
        this.nativeKind = nativeKind;
        this.nativePar = nativePar;
        this._uniqueId = _uniqueId;
      }

      @java.lang.SuppressWarnings("all")
      public boolean isTyped() {
        return this.isTyped;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<P.NCs> typeDep() {
        return this.typeDep;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<P.NCs> coherentDep() {
        return this.coherentDep;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<P.NCs> friends() {
        return this.friends;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<PathSel> usedMethods() {
        return this.usedMethods;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<P.NCs> privateSupertypes() {
        return this.privateSupertypes;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<S> refined() {
        return this.refined;
      }

      @java.lang.SuppressWarnings("all")
      public boolean declaresClassMethods() {
        return this.declaresClassMethods;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public String nativeKind() {
        return this.nativeKind;
      }

      @NonNull
      @java.lang.SuppressWarnings("all")
      public List<P> nativePar() {
        return this.nativePar;
      }

      @java.lang.SuppressWarnings("all")
      public int _uniqueId() {
        return this._uniqueId;
      }

      @java.lang.Override
      @java.lang.SuppressWarnings("all")
      public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Core.L.Info)) return false;
        final Core.L.Info other = (Core.L.Info) o;
        if (this.isTyped() != other.isTyped()) return false;
        final java.lang.Object this$typeDep = this.typeDep();
        final java.lang.Object other$typeDep = other.typeDep();
        if (this$typeDep == null ? other$typeDep != null : !this$typeDep.equals(other$typeDep)) return false;
        final java.lang.Object this$coherentDep = this.coherentDep();
        final java.lang.Object other$coherentDep = other.coherentDep();
        if (this$coherentDep == null ? other$coherentDep != null : !this$coherentDep.equals(other$coherentDep)) return false;
        final java.lang.Object this$friends = this.friends();
        final java.lang.Object other$friends = other.friends();
        if (this$friends == null ? other$friends != null : !this$friends.equals(other$friends)) return false;
        final java.lang.Object this$usedMethods = this.usedMethods();
        final java.lang.Object other$usedMethods = other.usedMethods();
        if (this$usedMethods == null ? other$usedMethods != null : !this$usedMethods.equals(other$usedMethods)) return false;
        final java.lang.Object this$privateSupertypes = this.privateSupertypes();
        final java.lang.Object other$privateSupertypes = other.privateSupertypes();
        if (this$privateSupertypes == null ? other$privateSupertypes != null : !this$privateSupertypes.equals(other$privateSupertypes)) return false;
        final java.lang.Object this$refined = this.refined();
        final java.lang.Object other$refined = other.refined();
        if (this$refined == null ? other$refined != null : !this$refined.equals(other$refined)) return false;
        if (this.declaresClassMethods() != other.declaresClassMethods()) return false;
        final java.lang.Object this$nativeKind = this.nativeKind();
        final java.lang.Object other$nativeKind = other.nativeKind();
        if (this$nativeKind == null ? other$nativeKind != null : !this$nativeKind.equals(other$nativeKind)) return false;
        final java.lang.Object this$nativePar = this.nativePar();
        final java.lang.Object other$nativePar = other.nativePar();
        if (this$nativePar == null ? other$nativePar != null : !this$nativePar.equals(other$nativePar)) return false;
        if (this._uniqueId() != other._uniqueId()) return false;
        return true;
      }

      @java.lang.Override
      @java.lang.SuppressWarnings("all")
      public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isTyped() ? 79 : 97);
        final java.lang.Object $typeDep = this.typeDep();
        result = result * PRIME + ($typeDep == null ? 43 : $typeDep.hashCode());
        final java.lang.Object $coherentDep = this.coherentDep();
        result = result * PRIME + ($coherentDep == null ? 43 : $coherentDep.hashCode());
        final java.lang.Object $friends = this.friends();
        result = result * PRIME + ($friends == null ? 43 : $friends.hashCode());
        final java.lang.Object $usedMethods = this.usedMethods();
        result = result * PRIME + ($usedMethods == null ? 43 : $usedMethods.hashCode());
        final java.lang.Object $privateSupertypes = this.privateSupertypes();
        result = result * PRIME + ($privateSupertypes == null ? 43 : $privateSupertypes.hashCode());
        final java.lang.Object $refined = this.refined();
        result = result * PRIME + ($refined == null ? 43 : $refined.hashCode());
        result = result * PRIME + (this.declaresClassMethods() ? 79 : 97);
        final java.lang.Object $nativeKind = this.nativeKind();
        result = result * PRIME + ($nativeKind == null ? 43 : $nativeKind.hashCode());
        final java.lang.Object $nativePar = this.nativePar();
        result = result * PRIME + ($nativePar == null ? 43 : $nativePar.hashCode());
        result = result * PRIME + this._uniqueId();
        return result;
      }

      @java.lang.SuppressWarnings("all")
      public Info withTyped(final boolean isTyped) {
        return this.isTyped == isTyped ? this : new Info(isTyped, this.typeDep, this.coherentDep, this.friends, this.usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withTypeDep(@NonNull final List<P.NCs> typeDep) {
        if (typeDep == null) {
          throw new java.lang.NullPointerException("typeDep is marked non-null but is null");
        }
        return this.typeDep == typeDep ? this : new Info(this.isTyped, typeDep, this.coherentDep, this.friends, this.usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withCoherentDep(@NonNull final List<P.NCs> coherentDep) {
        if (coherentDep == null) {
          throw new java.lang.NullPointerException("coherentDep is marked non-null but is null");
        }
        return this.coherentDep == coherentDep ? this : new Info(this.isTyped, this.typeDep, coherentDep, this.friends, this.usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withFriends(@NonNull final List<P.NCs> friends) {
        if (friends == null) {
          throw new java.lang.NullPointerException("friends is marked non-null but is null");
        }
        return this.friends == friends ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, friends, this.usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withUsedMethods(@NonNull final List<PathSel> usedMethods) {
        if (usedMethods == null) {
          throw new java.lang.NullPointerException("usedMethods is marked non-null but is null");
        }
        return this.usedMethods == usedMethods ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, this.friends, usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withPrivateSupertypes(@NonNull final List<P.NCs> privateSupertypes) {
        if (privateSupertypes == null) {
          throw new java.lang.NullPointerException("privateSupertypes is marked non-null but is null");
        }
        return this.privateSupertypes == privateSupertypes ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, this.friends, this.usedMethods, privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withRefined(@NonNull final List<S> refined) {
        if (refined == null) {
          throw new java.lang.NullPointerException("refined is marked non-null but is null");
        }
        return this.refined == refined ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, this.friends, this.usedMethods, this.privateSupertypes, refined, this.declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withDeclaresClassMethods(final boolean declaresClassMethods) {
        return this.declaresClassMethods == declaresClassMethods ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, this.friends, this.usedMethods, this.privateSupertypes, this.refined, declaresClassMethods, this.nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withNativeKind(@NonNull final String nativeKind) {
        if (nativeKind == null) {
          throw new java.lang.NullPointerException("nativeKind is marked non-null but is null");
        }
        return this.nativeKind == nativeKind ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, this.friends, this.usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, nativeKind, this.nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info withNativePar(@NonNull final List<P> nativePar) {
        if (nativePar == null) {
          throw new java.lang.NullPointerException("nativePar is marked non-null but is null");
        }
        return this.nativePar == nativePar ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, this.friends, this.usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, nativePar, this._uniqueId);
      }

      @java.lang.SuppressWarnings("all")
      public Info with_uniqueId(final int _uniqueId) {
        return this._uniqueId == _uniqueId ? this : new Info(this.isTyped, this.typeDep, this.coherentDep, this.friends, this.usedMethods, this.privateSupertypes, this.refined, this.declaresClassMethods, this.nativeKind, this.nativePar, _uniqueId);
      }
    }

    @java.lang.SuppressWarnings("all")
    public L(@NonNull final List<Pos> poss, final boolean isInterface, @NonNull final List<T> ts, @NonNull final List<MWT> mwts, @NonNull final List<NC> ncs, @NonNull final Info info, @NonNull final List<Doc> docs) {
      if (poss == null) {
        throw new java.lang.NullPointerException("poss is marked non-null but is null");
      }
      if (ts == null) {
        throw new java.lang.NullPointerException("ts is marked non-null but is null");
      }
      if (mwts == null) {
        throw new java.lang.NullPointerException("mwts is marked non-null but is null");
      }
      if (ncs == null) {
        throw new java.lang.NullPointerException("ncs is marked non-null but is null");
      }
      if (info == null) {
        throw new java.lang.NullPointerException("info is marked non-null but is null");
      }
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      this.poss = poss;
      this.isInterface = isInterface;
      this.ts = ts;
      this.mwts = mwts;
      this.ncs = ncs;
      this.info = info;
      this.docs = docs;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<Pos> poss() {
      return this.poss;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isInterface() {
      return this.isInterface;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<T> ts() {
      return this.ts;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<MWT> mwts() {
      return this.mwts;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<NC> ncs() {
      return this.ncs;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Info info() {
      return this.info;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<Doc> docs() {
      return this.docs;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.L)) return false;
      final Core.L other = (Core.L) o;
      if (this.isInterface() != other.isInterface()) return false;
      final java.lang.Object this$ts = this.ts();
      final java.lang.Object other$ts = other.ts();
      if (this$ts == null ? other$ts != null : !this$ts.equals(other$ts)) return false;
      final java.lang.Object this$mwts = this.mwts();
      final java.lang.Object other$mwts = other.mwts();
      if (this$mwts == null ? other$mwts != null : !this$mwts.equals(other$mwts)) return false;
      final java.lang.Object this$ncs = this.ncs();
      final java.lang.Object other$ncs = other.ncs();
      if (this$ncs == null ? other$ncs != null : !this$ncs.equals(other$ncs)) return false;
      final java.lang.Object this$info = this.info();
      final java.lang.Object other$info = other.info();
      if (this$info == null ? other$info != null : !this$info.equals(other$info)) return false;
      final java.lang.Object this$docs = this.docs();
      final java.lang.Object other$docs = other.docs();
      if (this$docs == null ? other$docs != null : !this$docs.equals(other$docs)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = result * PRIME + (this.isInterface() ? 79 : 97);
      final java.lang.Object $ts = this.ts();
      result = result * PRIME + ($ts == null ? 43 : $ts.hashCode());
      final java.lang.Object $mwts = this.mwts();
      result = result * PRIME + ($mwts == null ? 43 : $mwts.hashCode());
      final java.lang.Object $ncs = this.ncs();
      result = result * PRIME + ($ncs == null ? 43 : $ncs.hashCode());
      final java.lang.Object $info = this.info();
      result = result * PRIME + ($info == null ? 43 : $info.hashCode());
      final java.lang.Object $docs = this.docs();
      result = result * PRIME + ($docs == null ? 43 : $docs.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public L withPoss(@NonNull final List<Pos> poss) {
      if (poss == null) {
        throw new java.lang.NullPointerException("poss is marked non-null but is null");
      }
      return this.poss == poss ? this : new L(poss, this.isInterface, this.ts, this.mwts, this.ncs, this.info, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public L withInterface(final boolean isInterface) {
      return this.isInterface == isInterface ? this : new L(this.poss, isInterface, this.ts, this.mwts, this.ncs, this.info, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public L withTs(@NonNull final List<T> ts) {
      if (ts == null) {
        throw new java.lang.NullPointerException("ts is marked non-null but is null");
      }
      return this.ts == ts ? this : new L(this.poss, this.isInterface, ts, this.mwts, this.ncs, this.info, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public L withMwts(@NonNull final List<MWT> mwts) {
      if (mwts == null) {
        throw new java.lang.NullPointerException("mwts is marked non-null but is null");
      }
      return this.mwts == mwts ? this : new L(this.poss, this.isInterface, this.ts, mwts, this.ncs, this.info, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public L withNcs(@NonNull final List<NC> ncs) {
      if (ncs == null) {
        throw new java.lang.NullPointerException("ncs is marked non-null but is null");
      }
      return this.ncs == ncs ? this : new L(this.poss, this.isInterface, this.ts, this.mwts, ncs, this.info, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public L withInfo(@NonNull final Info info) {
      if (info == null) {
        throw new java.lang.NullPointerException("info is marked non-null but is null");
      }
      return this.info == info ? this : new L(this.poss, this.isInterface, this.ts, this.mwts, this.ncs, info, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public L withDocs(@NonNull final List<Doc> docs) {
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      return this.docs == docs ? this : new L(this.poss, this.isInterface, this.ts, this.mwts, this.ncs, this.info, docs);
    }
  }


  public static final class MCall implements E, Visitable<MCall> {
    @Override
    public Visitable<MCall> visitable() {
      return this;
    }

    @Override
    public MCall accept(CloneVisitor cv) {
      return cv.visitMCall(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitMCall(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;
    @NonNull
    private final XP xP;
    @NonNull
    private final S s;
    @NonNull
    private final List<E> es;

    @java.lang.SuppressWarnings("all")
    public MCall(@NonNull final Pos pos, @NonNull final XP xP, @NonNull final S s, @NonNull final List<E> es) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      if (xP == null) {
        throw new java.lang.NullPointerException("xP is marked non-null but is null");
      }
      if (s == null) {
        throw new java.lang.NullPointerException("s is marked non-null but is null");
      }
      if (es == null) {
        throw new java.lang.NullPointerException("es is marked non-null but is null");
      }
      this.pos = pos;
      this.xP = xP;
      this.s = s;
      this.es = es;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public XP xP() {
      return this.xP;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public S s() {
      return this.s;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<E> es() {
      return this.es;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.MCall)) return false;
      final Core.MCall other = (Core.MCall) o;
      final java.lang.Object this$xP = this.xP();
      final java.lang.Object other$xP = other.xP();
      if (this$xP == null ? other$xP != null : !this$xP.equals(other$xP)) return false;
      final java.lang.Object this$s = this.s();
      final java.lang.Object other$s = other.s();
      if (this$s == null ? other$s != null : !this$s.equals(other$s)) return false;
      final java.lang.Object this$es = this.es();
      final java.lang.Object other$es = other.es();
      if (this$es == null ? other$es != null : !this$es.equals(other$es)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $xP = this.xP();
      result = result * PRIME + ($xP == null ? 43 : $xP.hashCode());
      final java.lang.Object $s = this.s();
      result = result * PRIME + ($s == null ? 43 : $s.hashCode());
      final java.lang.Object $es = this.es();
      result = result * PRIME + ($es == null ? 43 : $es.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public MCall withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new MCall(pos, this.xP, this.s, this.es);
    }

    @java.lang.SuppressWarnings("all")
    public MCall withXP(@NonNull final XP xP) {
      if (xP == null) {
        throw new java.lang.NullPointerException("xP is marked non-null but is null");
      }
      return this.xP == xP ? this : new MCall(this.pos, xP, this.s, this.es);
    }

    @java.lang.SuppressWarnings("all")
    public MCall withS(@NonNull final S s) {
      if (s == null) {
        throw new java.lang.NullPointerException("s is marked non-null but is null");
      }
      return this.s == s ? this : new MCall(this.pos, this.xP, s, this.es);
    }

    @java.lang.SuppressWarnings("all")
    public MCall withEs(@NonNull final List<E> es) {
      if (es == null) {
        throw new java.lang.NullPointerException("es is marked non-null but is null");
      }
      return this.es == es ? this : new MCall(this.pos, this.xP, this.s, es);
    }
  }


  public static final class Block implements E, Visitable<Block> {
    @Override
    public Visitable<Block> visitable() {
      return this;
    }

    @Override
    public Block accept(CloneVisitor cv) {
      return cv.visitBlock(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitBlock(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;
    @NonNull
    private final List<D> ds;
    @NonNull
    private final List<K> ks;
    @NonNull
    private final E e;

    @java.lang.SuppressWarnings("all")
    public Block(@NonNull final Pos pos, @NonNull final List<D> ds, @NonNull final List<K> ks, @NonNull final E e) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      if (ds == null) {
        throw new java.lang.NullPointerException("ds is marked non-null but is null");
      }
      if (ks == null) {
        throw new java.lang.NullPointerException("ks is marked non-null but is null");
      }
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      this.pos = pos;
      this.ds = ds;
      this.ks = ks;
      this.e = e;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<D> ds() {
      return this.ds;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<K> ks() {
      return this.ks;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public E e() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.Block)) return false;
      final Core.Block other = (Core.Block) o;
      final java.lang.Object this$ds = this.ds();
      final java.lang.Object other$ds = other.ds();
      if (this$ds == null ? other$ds != null : !this$ds.equals(other$ds)) return false;
      final java.lang.Object this$ks = this.ks();
      final java.lang.Object other$ks = other.ks();
      if (this$ks == null ? other$ks != null : !this$ks.equals(other$ks)) return false;
      final java.lang.Object this$e = this.e();
      final java.lang.Object other$e = other.e();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $ds = this.ds();
      result = result * PRIME + ($ds == null ? 43 : $ds.hashCode());
      final java.lang.Object $ks = this.ks();
      result = result * PRIME + ($ks == null ? 43 : $ks.hashCode());
      final java.lang.Object $e = this.e();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public Block withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new Block(pos, this.ds, this.ks, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public Block withDs(@NonNull final List<D> ds) {
      if (ds == null) {
        throw new java.lang.NullPointerException("ds is marked non-null but is null");
      }
      return this.ds == ds ? this : new Block(this.pos, ds, this.ks, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public Block withKs(@NonNull final List<K> ks) {
      if (ks == null) {
        throw new java.lang.NullPointerException("ks is marked non-null but is null");
      }
      return this.ks == ks ? this : new Block(this.pos, this.ds, ks, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public Block withE(@NonNull final E e) {
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      return this.e == e ? this : new Block(this.pos, this.ds, this.ks, e);
    }
  }


  public static final class Loop implements Wrapper, Visitable<Loop> {
    @Override
    public Visitable<Loop> visitable() {
      return this;
    }

    @Override
    public Loop accept(CloneVisitor cv) {
      return cv.visitLoop(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitLoop(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;
    @NonNull
    private final E e;

    @java.lang.SuppressWarnings("all")
    public Loop(@NonNull final Pos pos, @NonNull final E e) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      this.pos = pos;
      this.e = e;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public E e() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.Loop)) return false;
      final Core.Loop other = (Core.Loop) o;
      final java.lang.Object this$e = this.e();
      final java.lang.Object other$e = other.e();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $e = this.e();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public Loop withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new Loop(pos, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public Loop withE(@NonNull final E e) {
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      return this.e == e ? this : new Loop(this.pos, e);
    }
  }


  public static final class Throw implements Wrapper, Visitable<Throw> {
    @Override
    public Visitable<Throw> visitable() {
      return this;
    }

    @Override
    public Throw accept(CloneVisitor cv) {
      return cv.visitThrow(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitThrow(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;
    @NonNull
    private final ThrowKind thr;
    @NonNull
    private final E e;

    @java.lang.SuppressWarnings("all")
    public Throw(@NonNull final Pos pos, @NonNull final ThrowKind thr, @NonNull final E e) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      if (thr == null) {
        throw new java.lang.NullPointerException("thr is marked non-null but is null");
      }
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      this.pos = pos;
      this.thr = thr;
      this.e = e;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public ThrowKind thr() {
      return this.thr;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public E e() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.Throw)) return false;
      final Core.Throw other = (Core.Throw) o;
      final java.lang.Object this$thr = this.thr();
      final java.lang.Object other$thr = other.thr();
      if (this$thr == null ? other$thr != null : !this$thr.equals(other$thr)) return false;
      final java.lang.Object this$e = this.e();
      final java.lang.Object other$e = other.e();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $thr = this.thr();
      result = result * PRIME + ($thr == null ? 43 : $thr.hashCode());
      final java.lang.Object $e = this.e();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public Throw withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new Throw(pos, this.thr, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public Throw withThr(@NonNull final ThrowKind thr) {
      if (thr == null) {
        throw new java.lang.NullPointerException("thr is marked non-null but is null");
      }
      return this.thr == thr ? this : new Throw(this.pos, thr, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public Throw withE(@NonNull final E e) {
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      return this.e == e ? this : new Throw(this.pos, this.thr, e);
    }
  }


  public static final class OpUpdate implements Wrapper, Visitable<OpUpdate> {
    @Override
    public Visitable<OpUpdate> visitable() {
      return this;
    }

    @Override
    public OpUpdate accept(CloneVisitor cv) {
      return cv.visitOpUpdate(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitOpUpdate(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Pos pos;
    @NonNull
    private final X x;
    @NonNull
    private final E e;

    @java.lang.SuppressWarnings("all")
    public OpUpdate(@NonNull final Pos pos, @NonNull final X x, @NonNull final E e) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      this.pos = pos;
      this.x = x;
      this.e = e;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Pos pos() {
      return this.pos;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public X x() {
      return this.x;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public E e() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.OpUpdate)) return false;
      final Core.OpUpdate other = (Core.OpUpdate) o;
      final java.lang.Object this$x = this.x();
      final java.lang.Object other$x = other.x();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      final java.lang.Object this$e = this.e();
      final java.lang.Object other$e = other.e();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $x = this.x();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      final java.lang.Object $e = this.e();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public OpUpdate withPos(@NonNull final Pos pos) {
      if (pos == null) {
        throw new java.lang.NullPointerException("pos is marked non-null but is null");
      }
      return this.pos == pos ? this : new OpUpdate(pos, this.x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public OpUpdate withX(@NonNull final X x) {
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      return this.x == x ? this : new OpUpdate(this.pos, x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public OpUpdate withE(@NonNull final E e) {
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      return this.e == e ? this : new OpUpdate(this.pos, this.x, e);
    }
  }

  //---
  public static final class D implements Visitable<D> {
    @Override
    public D accept(CloneVisitor cv) {
      return cv.visitD(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitD(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    private final boolean isVar;
    @NonNull
    private final T t;
    @NonNull
    private final X x;
    @NonNull
    private final E e;

    @java.lang.SuppressWarnings("all")
    public D(final boolean isVar, @NonNull final T t, @NonNull final X x, @NonNull final E e) {
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      this.isVar = isVar;
      this.t = t;
      this.x = x;
      this.e = e;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isVar() {
      return this.isVar;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public T t() {
      return this.t;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public X x() {
      return this.x;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public E e() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.D)) return false;
      final Core.D other = (Core.D) o;
      if (this.isVar() != other.isVar()) return false;
      final java.lang.Object this$t = this.t();
      final java.lang.Object other$t = other.t();
      if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
      final java.lang.Object this$x = this.x();
      final java.lang.Object other$x = other.x();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      final java.lang.Object this$e = this.e();
      final java.lang.Object other$e = other.e();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = result * PRIME + (this.isVar() ? 79 : 97);
      final java.lang.Object $t = this.t();
      result = result * PRIME + ($t == null ? 43 : $t.hashCode());
      final java.lang.Object $x = this.x();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      final java.lang.Object $e = this.e();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public D withVar(final boolean isVar) {
      return this.isVar == isVar ? this : new D(isVar, this.t, this.x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public D withT(@NonNull final T t) {
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      return this.t == t ? this : new D(this.isVar, t, this.x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public D withX(@NonNull final X x) {
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      return this.x == x ? this : new D(this.isVar, this.t, x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public D withE(@NonNull final E e) {
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      return this.e == e ? this : new D(this.isVar, this.t, this.x, e);
    }
  }


  public static final class K implements Visitable<K> {
    @Override
    public K accept(CloneVisitor cv) {
      return cv.visitK(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitK(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final ThrowKind thr;
    @NonNull
    private final T t;
    @NonNull
    private final X x;
    @NonNull
    private final E e;

    @java.lang.SuppressWarnings("all")
    public K(@NonNull final ThrowKind thr, @NonNull final T t, @NonNull final X x, @NonNull final E e) {
      if (thr == null) {
        throw new java.lang.NullPointerException("thr is marked non-null but is null");
      }
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      this.thr = thr;
      this.t = t;
      this.x = x;
      this.e = e;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public ThrowKind thr() {
      return this.thr;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public T t() {
      return this.t;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public X x() {
      return this.x;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public E e() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.K)) return false;
      final Core.K other = (Core.K) o;
      final java.lang.Object this$thr = this.thr();
      final java.lang.Object other$thr = other.thr();
      if (this$thr == null ? other$thr != null : !this$thr.equals(other$thr)) return false;
      final java.lang.Object this$t = this.t();
      final java.lang.Object other$t = other.t();
      if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
      final java.lang.Object this$x = this.x();
      final java.lang.Object other$x = other.x();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      final java.lang.Object this$e = this.e();
      final java.lang.Object other$e = other.e();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $thr = this.thr();
      result = result * PRIME + ($thr == null ? 43 : $thr.hashCode());
      final java.lang.Object $t = this.t();
      result = result * PRIME + ($t == null ? 43 : $t.hashCode());
      final java.lang.Object $x = this.x();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      final java.lang.Object $e = this.e();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public K withThr(@NonNull final ThrowKind thr) {
      if (thr == null) {
        throw new java.lang.NullPointerException("thr is marked non-null but is null");
      }
      return this.thr == thr ? this : new K(thr, this.t, this.x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public K withT(@NonNull final T t) {
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      return this.t == t ? this : new K(this.thr, t, this.x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public K withX(@NonNull final X x) {
      if (x == null) {
        throw new java.lang.NullPointerException("x is marked non-null but is null");
      }
      return this.x == x ? this : new K(this.thr, this.t, x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public K withE(@NonNull final E e) {
      if (e == null) {
        throw new java.lang.NullPointerException("e is marked non-null but is null");
      }
      return this.e == e ? this : new K(this.thr, this.t, this.x, e);
    }
  }


  public static final class T implements ST, Visitable<T> {
    @Override
    public Visitable<T> visitable() {
      return this;
    }

    @Override
    public T accept(CloneVisitor cv) {
      return cv.visitT(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitT(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Mdf mdf;
    @NonNull
    private final List<Doc> docs;
    @NonNull
    private final P p;

    @java.lang.SuppressWarnings("all")
    public T(@NonNull final Mdf mdf, @NonNull final List<Doc> docs, @NonNull final P p) {
      if (mdf == null) {
        throw new java.lang.NullPointerException("mdf is marked non-null but is null");
      }
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      if (p == null) {
        throw new java.lang.NullPointerException("p is marked non-null but is null");
      }
      this.mdf = mdf;
      this.docs = docs;
      this.p = p;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Mdf mdf() {
      return this.mdf;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<Doc> docs() {
      return this.docs;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public P p() {
      return this.p;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.T)) return false;
      final Core.T other = (Core.T) o;
      final java.lang.Object this$mdf = this.mdf();
      final java.lang.Object other$mdf = other.mdf();
      if (this$mdf == null ? other$mdf != null : !this$mdf.equals(other$mdf)) return false;
      final java.lang.Object this$docs = this.docs();
      final java.lang.Object other$docs = other.docs();
      if (this$docs == null ? other$docs != null : !this$docs.equals(other$docs)) return false;
      final java.lang.Object this$p = this.p();
      final java.lang.Object other$p = other.p();
      if (this$p == null ? other$p != null : !this$p.equals(other$p)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $mdf = this.mdf();
      result = result * PRIME + ($mdf == null ? 43 : $mdf.hashCode());
      final java.lang.Object $docs = this.docs();
      result = result * PRIME + ($docs == null ? 43 : $docs.hashCode());
      final java.lang.Object $p = this.p();
      result = result * PRIME + ($p == null ? 43 : $p.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public T withMdf(@NonNull final Mdf mdf) {
      if (mdf == null) {
        throw new java.lang.NullPointerException("mdf is marked non-null but is null");
      }
      return this.mdf == mdf ? this : new T(mdf, this.docs, this.p);
    }

    @java.lang.SuppressWarnings("all")
    public T withDocs(@NonNull final List<Doc> docs) {
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      return this.docs == docs ? this : new T(this.mdf, docs, this.p);
    }

    @java.lang.SuppressWarnings("all")
    public T withP(@NonNull final P p) {
      if (p == null) {
        throw new java.lang.NullPointerException("p is marked non-null but is null");
      }
      return this.p == p ? this : new T(this.mdf, this.docs, p);
    }
  }


  public static final class Doc implements Visitable<Doc> {
    @Override
    public Doc accept(CloneVisitor cv) {
      return cv.visitDoc(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitDoc(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    private final PathSel _pathSel;
    @NonNull
    private final List<String> texts;
    @NonNull
    private final List<Doc> docs;

    @java.lang.SuppressWarnings("all")
    public Doc(final PathSel _pathSel, @NonNull final List<String> texts, @NonNull final List<Doc> docs) {
      if (texts == null) {
        throw new java.lang.NullPointerException("texts is marked non-null but is null");
      }
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      this._pathSel = _pathSel;
      this.texts = texts;
      this.docs = docs;
    }

    @java.lang.SuppressWarnings("all")
    public PathSel _pathSel() {
      return this._pathSel;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<String> texts() {
      return this.texts;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<Doc> docs() {
      return this.docs;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.Doc)) return false;
      final Core.Doc other = (Core.Doc) o;
      final java.lang.Object this$_pathSel = this._pathSel();
      final java.lang.Object other$_pathSel = other._pathSel();
      if (this$_pathSel == null ? other$_pathSel != null : !this$_pathSel.equals(other$_pathSel)) return false;
      final java.lang.Object this$texts = this.texts();
      final java.lang.Object other$texts = other.texts();
      if (this$texts == null ? other$texts != null : !this$texts.equals(other$texts)) return false;
      final java.lang.Object this$docs = this.docs();
      final java.lang.Object other$docs = other.docs();
      if (this$docs == null ? other$docs != null : !this$docs.equals(other$docs)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $_pathSel = this._pathSel();
      result = result * PRIME + ($_pathSel == null ? 43 : $_pathSel.hashCode());
      final java.lang.Object $texts = this.texts();
      result = result * PRIME + ($texts == null ? 43 : $texts.hashCode());
      final java.lang.Object $docs = this.docs();
      result = result * PRIME + ($docs == null ? 43 : $docs.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public Doc with_pathSel(final PathSel _pathSel) {
      return this._pathSel == _pathSel ? this : new Doc(_pathSel, this.texts, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public Doc withTexts(@NonNull final List<String> texts) {
      if (texts == null) {
        throw new java.lang.NullPointerException("texts is marked non-null but is null");
      }
      return this.texts == texts ? this : new Doc(this._pathSel, texts, this.docs);
    }

    @java.lang.SuppressWarnings("all")
    public Doc withDocs(@NonNull final List<Doc> docs) {
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      return this.docs == docs ? this : new Doc(this._pathSel, this.texts, docs);
    }
  }


  public static final class PathSel implements Visitable<PathSel> {
    @Override
    public PathSel accept(CloneVisitor cv) {
      return cv.visitPathSel(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitPathSel(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final P p;
    private final S _s;
    private final X _x;

    @java.lang.SuppressWarnings("all")
    public PathSel(@NonNull final P p, final S _s, final X _x) {
      if (p == null) {
        throw new java.lang.NullPointerException("p is marked non-null but is null");
      }
      this.p = p;
      this._s = _s;
      this._x = _x;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public P p() {
      return this.p;
    }

    @java.lang.SuppressWarnings("all")
    public S _s() {
      return this._s;
    }

    @java.lang.SuppressWarnings("all")
    public X _x() {
      return this._x;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.PathSel)) return false;
      final Core.PathSel other = (Core.PathSel) o;
      final java.lang.Object this$p = this.p();
      final java.lang.Object other$p = other.p();
      if (this$p == null ? other$p != null : !this$p.equals(other$p)) return false;
      final java.lang.Object this$_s = this._s();
      final java.lang.Object other$_s = other._s();
      if (this$_s == null ? other$_s != null : !this$_s.equals(other$_s)) return false;
      final java.lang.Object this$_x = this._x();
      final java.lang.Object other$_x = other._x();
      if (this$_x == null ? other$_x != null : !this$_x.equals(other$_x)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $p = this.p();
      result = result * PRIME + ($p == null ? 43 : $p.hashCode());
      final java.lang.Object $_s = this._s();
      result = result * PRIME + ($_s == null ? 43 : $_s.hashCode());
      final java.lang.Object $_x = this._x();
      result = result * PRIME + ($_x == null ? 43 : $_x.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public PathSel withP(@NonNull final P p) {
      if (p == null) {
        throw new java.lang.NullPointerException("p is marked non-null but is null");
      }
      return this.p == p ? this : new PathSel(p, this._s, this._x);
    }

    @java.lang.SuppressWarnings("all")
    public PathSel with_s(final S _s) {
      return this._s == _s ? this : new PathSel(this.p, _s, this._x);
    }

    @java.lang.SuppressWarnings("all")
    public PathSel with_x(final X _x) {
      return this._x == _x ? this : new PathSel(this.p, this._s, _x);
    }
  }


  public static final class MH implements LDom.HasKey, Visitable<MH> {
    @Override
    public MH accept(CloneVisitor cv) {
      return cv.visitMH(this);
    }

    @Override
    public void accept(CollectorVisitor cv) {
      cv.visitMH(this);
    }

    @Override
    public String toString() {
      return Constants.toS.apply(this);
    }

    @Override
    public boolean wf() {
      return Constants.wf.test(this);
    }

    @NonNull
    private final Mdf mdf;
    @NonNull
    private final List<Doc> docs;
    @NonNull
    private final T t;
    @NonNull
    private final S s;
    @NonNull
    private final List<T> pars;
    @NonNull
    private final List<T> exceptions;

    @Override
    public S key() {
      return s;
    }

    public List<T> parsWithThis() {
      return pushL(P.coreThis0.withMdf(mdf), pars);
    }

    @java.lang.SuppressWarnings("all")
    public MH(@NonNull final Mdf mdf, @NonNull final List<Doc> docs, @NonNull final T t, @NonNull final S s, @NonNull final List<T> pars, @NonNull final List<T> exceptions) {
      if (mdf == null) {
        throw new java.lang.NullPointerException("mdf is marked non-null but is null");
      }
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      if (s == null) {
        throw new java.lang.NullPointerException("s is marked non-null but is null");
      }
      if (pars == null) {
        throw new java.lang.NullPointerException("pars is marked non-null but is null");
      }
      if (exceptions == null) {
        throw new java.lang.NullPointerException("exceptions is marked non-null but is null");
      }
      this.mdf = mdf;
      this.docs = docs;
      this.t = t;
      this.s = s;
      this.pars = pars;
      this.exceptions = exceptions;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Mdf mdf() {
      return this.mdf;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<Doc> docs() {
      return this.docs;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public T t() {
      return this.t;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public S s() {
      return this.s;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<T> pars() {
      return this.pars;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public List<T> exceptions() {
      return this.exceptions;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof Core.MH)) return false;
      final Core.MH other = (Core.MH) o;
      final java.lang.Object this$mdf = this.mdf();
      final java.lang.Object other$mdf = other.mdf();
      if (this$mdf == null ? other$mdf != null : !this$mdf.equals(other$mdf)) return false;
      final java.lang.Object this$docs = this.docs();
      final java.lang.Object other$docs = other.docs();
      if (this$docs == null ? other$docs != null : !this$docs.equals(other$docs)) return false;
      final java.lang.Object this$t = this.t();
      final java.lang.Object other$t = other.t();
      if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
      final java.lang.Object this$s = this.s();
      final java.lang.Object other$s = other.s();
      if (this$s == null ? other$s != null : !this$s.equals(other$s)) return false;
      final java.lang.Object this$pars = this.pars();
      final java.lang.Object other$pars = other.pars();
      if (this$pars == null ? other$pars != null : !this$pars.equals(other$pars)) return false;
      final java.lang.Object this$exceptions = this.exceptions();
      final java.lang.Object other$exceptions = other.exceptions();
      if (this$exceptions == null ? other$exceptions != null : !this$exceptions.equals(other$exceptions)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $mdf = this.mdf();
      result = result * PRIME + ($mdf == null ? 43 : $mdf.hashCode());
      final java.lang.Object $docs = this.docs();
      result = result * PRIME + ($docs == null ? 43 : $docs.hashCode());
      final java.lang.Object $t = this.t();
      result = result * PRIME + ($t == null ? 43 : $t.hashCode());
      final java.lang.Object $s = this.s();
      result = result * PRIME + ($s == null ? 43 : $s.hashCode());
      final java.lang.Object $pars = this.pars();
      result = result * PRIME + ($pars == null ? 43 : $pars.hashCode());
      final java.lang.Object $exceptions = this.exceptions();
      result = result * PRIME + ($exceptions == null ? 43 : $exceptions.hashCode());
      return result;
    }

    @java.lang.SuppressWarnings("all")
    public MH withMdf(@NonNull final Mdf mdf) {
      if (mdf == null) {
        throw new java.lang.NullPointerException("mdf is marked non-null but is null");
      }
      return this.mdf == mdf ? this : new MH(mdf, this.docs, this.t, this.s, this.pars, this.exceptions);
    }

    @java.lang.SuppressWarnings("all")
    public MH withDocs(@NonNull final List<Doc> docs) {
      if (docs == null) {
        throw new java.lang.NullPointerException("docs is marked non-null but is null");
      }
      return this.docs == docs ? this : new MH(this.mdf, docs, this.t, this.s, this.pars, this.exceptions);
    }

    @java.lang.SuppressWarnings("all")
    public MH withT(@NonNull final T t) {
      if (t == null) {
        throw new java.lang.NullPointerException("t is marked non-null but is null");
      }
      return this.t == t ? this : new MH(this.mdf, this.docs, t, this.s, this.pars, this.exceptions);
    }

    @java.lang.SuppressWarnings("all")
    public MH withS(@NonNull final S s) {
      if (s == null) {
        throw new java.lang.NullPointerException("s is marked non-null but is null");
      }
      return this.s == s ? this : new MH(this.mdf, this.docs, this.t, s, this.pars, this.exceptions);
    }

    @java.lang.SuppressWarnings("all")
    public MH withPars(@NonNull final List<T> pars) {
      if (pars == null) {
        throw new java.lang.NullPointerException("pars is marked non-null but is null");
      }
      return this.pars == pars ? this : new MH(this.mdf, this.docs, this.t, this.s, pars, this.exceptions);
    }

    @java.lang.SuppressWarnings("all")
    public MH withExceptions(@NonNull final List<T> exceptions) {
      if (exceptions == null) {
        throw new java.lang.NullPointerException("exceptions is marked non-null but is null");
      }
      return this.exceptions == exceptions ? this : new MH(this.mdf, this.docs, this.t, this.s, this.pars, exceptions);
    }
  }
}
