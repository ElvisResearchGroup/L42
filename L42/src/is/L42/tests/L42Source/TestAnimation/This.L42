reuse [AdamTowel]
Module=Trait:{reuse [AdamTowel]
  Top={
    GuiBuilder=Trait:Data:{...}
    class method Library (class Any javaServer)[_]=GuiBuilder['J=>javaServer].code()
    }
  }
DeployUnit=Deploy.module(
  url='GuiBuilder
  code=Module.code()
  name='Top
  )
//-------------
LoadJ=Load:{reuse[JavaServer]}
GuiJ=LoadJ(slaveName=S"miniGuiSlave{}")
LoadGui=Load:{reuse[#$GuiBuilder]}
Gui=LoadGui(javaServer=GuiJ)

Google=Data:{
  var I posX
  var I posY
  var I dirX
  var I dirY
  mut method Void ping()=(
    this.posX(\posX+\dirX)
    this.posY(\posY+\dirY)
    )
  read method S paint()=(
    var g=S"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png"
    S"%this.posX();%this.posY();15;0;%g"
    )
  }
Amazon=Data:{
  var I posX
  var I posY
  var I reached
  read method S paint()=(
    a=S"https://i.pinimg.com/originals/18/e1/80/18e180218bdac1685b79197c9023259b.png"
    x=S"https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Red_x.svg/1200px-Red_x.svg.png"
    i=(if this.reached()==0I a else x)
    S"%this.posX();%this.posY();25;0;%i"
    )
  class method mut This(I x,I y)=This(posX=x,posY=y,reached=0I)
  }
Amazons=Collection.list(Amazon)
Model=Data:GuiJ.Handler:{...}
Main=(
  j=GuiJ.#$of()
  r=Math.Random.#$random()
  xr=r.nextInRange(120\ to=600\)
  yr=r.nextInRange(120\ to=600\)
  model=Model(j=j,as=\[
    mutVal=\(x=34\,y=170\);
    mutVal=\(x=140\,y=230\);
    mutVal=\(x=xr,y=yr);
    ])
  gui=Gui(j=j,package=S"miniGui",name='Example,x=800\,y=600\,ping=30\)
  b1=gui.button(id=S"reset",msg='Pressed,text=S"PressMe")
  gui"""%
    |%b1
    |JLabel label2=new JLabel("west");
    |PaintEntities e=new PaintEntities(){
    |  public void submit(String n,String e,boolean r){
    |    super.submit(n,e,r);
    |    this.setFocusable(true);
    |    this.requestFocusInWindow();
    |    }};
    |JPanel p=new JPanel();
    |{
    |  e.addKeyListener(new BindKeys(event,"Example","pressed","released","typed"));
    |  //event.submitEvent("Example","First","Here");
    |  event.registerEvent("Example.RefreshEntities",(k,id,msg)->
    |    e.submit(id,msg,true));
    |  add(p);
    |  addEast(p,reset);
    |  addCenter(p,e);
    |  addWest(p,label2);
    |  }
    """
  (posX1,posY1)=model.g()
  for e in j(\['Example]), x in Range(100I) (e>>model)
  (posX2,posY2)=model.g()
  Debug(S" %posX1 %posX2, %posY1 %posY2")
  {}:Test"100 steps x"(posX1+100I==posX2)
  {}:Test"100 steps y"(posY1+100I==posY2)
  )