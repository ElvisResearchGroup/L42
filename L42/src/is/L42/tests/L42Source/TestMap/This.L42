reuse [AdamTowel]
Base={
  Map=Collection.map(key=S, val=Num)
  Main=(
    mut Map m=Map[key=\"a", val=5\; key=\"b",val=7\]
    Debug(m)
    {}:Test"m1"(actual=m
      expected=S"""
        |{"a"->5; "b"->7}
        """.trim())
    )
  Person=Data:{var S name}
  Ps=Collection.map(key=S, val=Person)
  PList=Collection.list(Person)
  MainPs=(
    mut m1=Ps[key='Bob, val=\(name='Bob); key='Alice,val=\(name='Alice)]
    mut m2=Ps[key='Charly, mutVal=\(name='Charly); key='Hugo,mutVal=\(name='Hugo)]
    mut list=PList[mutVal=\(name='Charly);mutVal=\(name='Hugo)]
    S err1=(_=m1.val(3Size) catch error Collection.ElementNotImm oob (oob.toS()) error X"")
    S err2=(_=m2.val(Size"-2") catch error Collection.OutOfBounds oob (oob.toS()) error X"")
    Debug(err1)
    Debug(err2)
    {}:Test"oob1"(actual=err1, expected=S"""
       |[###]Index 3 outside of the imm range 0--2
       """.trim())
    {}:Test"oob2"(actual=err2, expected=S"""
       |[###]Index -2 out of bounds for length 0
       """.trim())
   //Note: error messages will report the lenght of the imms, not the whole
    for (key1,val1) in m1, mut pi in list (
      Debug(pi)
      )
    for (key1,val1) in m1, mut e in m2 (
      e.#val().name(\name++val1.name())
      )
    for (key1,val1) in m1, mut (key2,mut val2) in m2 (
      val2.name(\name++val1.name())
      )
    for (key3,val1) in m1, (key2,mut val2) in m2 (
      val2.name(\name++val1.name())
      )
    Debug(m1)
    {}:Test"m1"(actual=m1
      expected=S"""
        |{"Bob"->Person(name="Bob"); "Alice"->Person(name="Alice")}
        """.trim())
    Debug(m2)
      {}:Test"m1"(actual=m2
      expected=S"""
        |{"Charly"->Person(name="CharlyBobBobBob"); "Hugo"->Person(name="HugoAliceAliceAlice")}
        """.trim())
    )
  }
MapWithOpts={
  SO=Collection.optional(S)
  Map=Collection.map(key=Num,val=SO)
  Main=(
    map=Map[key=1\ val=\(\"hi");key=2\ val=\(\"world");]
    Debug(map)
    {}:Test"optMap1"(expected=S"""
      |{1->["hi"]; 2->["world"]}
      """.trim(),actual=map)
    map.put(key=2\,val=\())
    Debug(map)
    {}:Test"optMap2"(expected=S"""
      |{1->["hi"]; 2->[]}
      """.trim(),actual=map)
    )
  }
MapWithOptsKeys={
  SO=Collection.optional(S)
  Map=Collection.map(key=SO,val=S)
  Main=(
    map=Map[key=\() val=\"hi";key=\(\"one") val=\"world";]
    Debug(map)
    {}:Test"optMap1"(expected=S"""
      |{[]->"hi"; ["one"]->"world"}
      """.trim(),actual=map)
    map.put(key=\(),val=\"bar")
    Debug(map)
    {}:Test"optMap2"(expected=S"""
      |{[]->"bar"; ["one"]->"world"}
      """.trim(),actual=map)
    )
  }
  
SetTest1={
  Set=Collection.set(S)
  Main=(
    set=Set[S"Hello";S" ";S"world"]
    Debug(set)
    {}:Test"set1"(expected=S"""
      |{"Hello"; " "; "world"}
      """.trim(),actual=set)
    set.add(S"!!")
    Debug(set)
    {}:Test"optMap2"(expected=S"""
      |{"Hello"; " "; "world"; "!!"}
      """.trim(),actual=set)
    )
  }