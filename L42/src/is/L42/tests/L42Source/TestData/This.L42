reuse[AdamTowel]
TestDataRelax=(
  {}:Test"DataNoRelax"((
    _=Data:{method Void foo(S notAField)}
    catch Class.IncoherentClass x (Bool.true())
    Bool.false()
    ))
  {}:Test"DataRelax"((
    _=Data.Relax:{method Void foo(S notAField)}
    catch Class.IncoherentClass x (Bool.false())
    Bool.true()
    ))

  )
TestDataFwd={
  A=Data:{mut B b,var S name}
  B=Data:{mut A a,var S name}
  Task1=(
    mut A a=A(b=b,name=S"myA")
    mut B b=B(a=a,name=S"myB")
    {}:Test"name"(expected=S"myB",actual=a.b().name())
    /*{}:Test"toS"(expected=S"""
      |b1=B(a=a1, name="myB")
      |a1=A(b=b1, name="myA")
      |a1
      """.trim(),actual=a)*/
    )
  }
TestDataBase={
  Point=Data:{Size x, Size y}
  TestPoint=(
    p1=Point(x=8\, y=42\)
    p2=Point(x=8\, y=42\)
    p3=Point(x=0\, y=0\)
    {}:Test"pointEq1"(p1==p2)
    {}:Test"pointEq2"(p1!=p3)
    {}:Test"pointEqWithy"(p1!=p2.with(y=0\))
    {}:Test"pointEqWithxy"(p1==p3.with(y=p1.y()).with(x=p1.x()))
    {}:Test"pointToS"(expected=p1, actual=p1)
    {}:Test"pointToS"(expected=S"Point(x=8, y=42)", actual=p1)
    )
  Person=Data:{S.List names}
  Box=Data:{Any f1,Any f2}
  Anys=Class:Collection.listTrait()['Elem=>Any]
  TestPerson=(
    p1=Person(names=\['Bob;'Alice;'Charles])
    {}:Test"personToS"(expected=S"""
      |Person(names=["Bob"; "Alice"; "Charles"])
      """, actual=p1.toS()++S.nl())
    b1=Box(f1=p1,f2=Box(f1=S"hi",f2=S.List()))
    {}:Test"personToS"(expected=S"""
      |Box(f1=Person(names=["Bob"; "Alice"; "Charles"]), f2=Box(f1=S"hi", f2=S.List[]))
      """, actual=b1.toS()++S.nl())
    Anys bs=Anys[3Size]
    HasToS interf=bs
    HasToS interfS=S"hi"
    HasToS interfP=Point(x=1\,y=2\)
    {}:Test"anys1"(expected=S"""
      |Anys[3Size]
      """, actual=bs.toS()++S.nl())
    {}:Test"anys2"(expected=S"""
      |Anys[3Size]
      """, actual=interf.toS()++S.nl())
    {}:Test"anys3"(expected=S"""
      |hi
      """, actual=interfS.toS()++S.nl())
    {}:Test"anys4"(expected=S"""
      |Point(x=1, y=2)
      """, actual=interfP.toS()++S.nl())    
    )}