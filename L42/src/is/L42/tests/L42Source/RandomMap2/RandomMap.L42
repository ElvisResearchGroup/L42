mut Math.Random r
Size waterLevel
Size rockLevel
Size mountainLevel
mut SizeMap map = SizeMap()
mut BoolMap grassMap = BoolMap()
mut BoolMap treesMap = BoolMap()
mut BoolMap rocksMap = BoolMap()

read method S msg()=(
  g=S"Ground;"
  w=S"Water;"
  gr=S"Grass;"
  r=S"Rock;"
  tree=S"TreeTrunk;TreeTrunk;TreeTop;"
  var res=S.StringBuilder()
  for ci in this.map() (
    h = this.map()(ci)
    isRock = this.rocksMap()(ci)
    isGrass = this.grassMap()(ci)
    rockH = if isRock h else ( (h-6Size).max(0\) )
    groundH = if isRock 0Size else (
      if isGrass ( h.min(5\) ) else ( h.min(6\) ) )
    for z in Range(rockH) (res.append(r))
    for z in Range(groundH) (res.append(g))
    if isGrass (res.append(gr))
    if this.treesMap()(ci) (res.append(tree))
    /*river = this.map().riverMap()(ci)
    if river > 0Size for z in Range(river) (res.append(w))
    wl = (this.waterLevel() - h) - river
    if wl > 0Size for z in Range(wl) (res.append(w))*/
    res.append(S.nl())
    )
  res.toS()
  )
  
mut method Void heightMap() = (
  h=HeightExpansion(r=this.#r(), cells=this.#map() maxSeeds=\"-1")
  h.initTops(this.mountainLevel())
  h.addMontains(this.mountainLevel())
  //h.addShores()
  //h.montainsErosion(rounds=1\)
  //h.makeRivers(waterLevel=map.waterLevel())

  )

//TODO: recover heightMap content (seeds for height and rocks is -1)
/*
mut method Void makeGrass()=this.makeBools(this.#grassMap(), maxSeeds=V.layerSide()/4Size)
mut method Void makeTrees()=this.makeBools(this.#treesMap(), maxSeeds=V.layerSide()/7Size)
mut method Void makeBools(mut BoolMap that, Size maxSeeds)=(
  m = this.map()
  c = BoolExpansion(that, maxSeeds=maxSeeds)
  for i in Range(50\) (
    c.addSeed(\.random(this.#r()), val=\.true())
    )
  for i in Range(50\) (c.grow(percent=20\))
  for ci in m (
    if m(ci) < this.waterLevel() + 3Size ( c(ci, val=\.false()) )
    if m(ci) > this.rockLevel() ( c(ci, val=\.false()) )
    if m.riverMap()(ci) > 0Size ( c(ci, val=\.false()) )
    )
  )
mut method Void addShores()=(
  c = BoolExpansion(that, maxSeeds=\"-1")
  for x in Range(V.maxX()) (
    c.addSeed(x=x,y=0\,val=\.true())
    c.addSeed(x=x,y=V.maxY()-1\,val=\.true())
    )
  for y in Range(V.maxY()) (
    c.addSeed(x=0\,y=y,val=\.true())
    c.addSeed(x=V.maxX()-1\,y=y,val=\.true())
    )
  for x in Range(V.maxX()/3\) (
    for y in Range(V.maxY()/3\) (
      c.addSeed(\(x=x, y=y) val=\.true())
      )
    )
  seeds=c.seeds().size()
  for attempts in Range(150\) (
      if c.seeds().size()>=seeds*3Size Break()
      c.grow(percent=10\)
      )
  for ci in this.map() (
    if c(ci) this.#map()(ci val=0\)
    )
  )

mut method Void montainsErosion(Size rounds) =
  for r in Range(rounds)
    this.montainsErosionRound()
  
mut method Void montainsErosionRound() = (
  m=this.#map()
  ShuffleSize.shuffle(m.#order(),r=this.#r())
  for ci in m {
    if ci.isBorder() return void
    hi=m(ci)
    for j in m.#order() (
      cij=ci+Delta2D.adjacent8().val(j)
      hij=m(cij)
      if h0 > h1 + 6Size m(x=x, y=y, val=h0 - 4Size)
      )
    }
  )

mut method Void markRocks()=(
  s=this.side()-1Size
  m=this.map()
  r=this.#rocksMap()
  o=this.map().order()
  for x in Range(1\ to=s) (
    for y in Range(1\ to=s) {
      h=m(x=x,y=y)
      if h>=this.rockLevel() ( return r(x=x,y=y,val=\.true()) )
      var min=this.maxZ()
      for (x1,y1) in o ( min:=min.min(m(x=x+x1,y=y+y1)) )
      return if min<h-6Size (
        r(x=x,y=y, val=\.true())
        this.#grassMap()(x=x,y=y, val=\.false())
        this.#treesMap()(x=x,y=y, val=\.false())
        )
      }
    )
  )
*/