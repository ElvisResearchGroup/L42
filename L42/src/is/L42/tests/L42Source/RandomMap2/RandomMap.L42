mut Math.Random r
Size waterLevel
Size rockLevel
Size mountainLevel
mut SizeMap map = SizeMap()
mut BoolMap grassMap = BoolMap()
mut BoolMap treesMap = BoolMap()
mut BoolMap rocksMap = BoolMap()
mut SizeMap riverMap = SizeMap()

read method S msg()=(
  g=S"Ground;"
  w=S"Water;"
  gr=S"Grass;"
  r=S"Rock;"
  tree=S"TreeTrunk;TreeTrunk;TreeTop;"
  var res=S.StringBuilder()
  for ci in this.map() (
    h = this.map()(ci)
    isRock = this.rocksMap()(ci)
    isGrass = this.grassMap()(ci)
    rockH = if isRock h else ( (h-6Size).max(0\) )
    groundH = if isRock 0Size else (
      if isGrass ( h.min(5\) ) else ( h.min(6\) ) )
    for z in Range(rockH) (res.append(r))
    for z in Range(groundH) (res.append(g))
    if isGrass (res.append(gr))
    if this.treesMap()(ci) (res.append(tree))
    river = this.riverMap()(ci)
    if river > 0Size for z in Range(river) (res.append(w))
    wl = (this.waterLevel() - h) - river
    if wl > 0Size for z in Range(wl) (res.append(w))
    res.append(S.nl())
    )
  res.toS()
  )
  
mut method Void heightMap() = (
  h=HeightExpansion(r=this.#r(), cells=this.#map() maxSeeds=\"-1",riverMap=this.#riverMap())
  h.initTops(this.mountainLevel())
  h.addMontains(this.mountainLevel())
  h.addShores()
  h.montainsErosion()
  h.makeRivers(waterLevel=this.waterLevel())

  )
mut method Void makeGrass()=this.makeBools(this.#grassMap(), maxSeeds=V.layerSize()/4Size)
mut method Void makeTrees()=this.makeBools(this.#treesMap(), maxSeeds=V.layerSize()/7Size)
mut method Void makeBools(mut BoolMap that, Size maxSeeds)=(
  m = this.map()
  c = BoolExpansion(r=this.#r(),cells=that, maxSeeds=maxSeeds)
  for i in Range(50\) (
    c.addSeed(\.random(r=this.#r()), val=\.true())
    )
  for i in Range(50\) (c.grow(percent=20\))
  for ci in m (
    if m(ci) < this.waterLevel() + 3Size ( that(ci, val=\.false()) )
    if m(ci) > this.rockLevel() ( that(ci, val=\.false()) )
    if this.riverMap()(ci) > 0Size ( that(ci, val=\.false()) )
    )
  )

mut method Void markRocks()=(
  m=this.map()
  r=this.#rocksMap()
  for ci in m {
    if ci.isBorder() return void
    h=m(ci)
    if h>=this.rockLevel() ( return r(ci, val=\.true()) )
    var min=V.maxZ()
    for d in V.Delta2D.adjacent8() ( min:=min.min(m(ci+d)) )
    return if min < h-6Size (
      r(ci, val=\.true())
      this.#grassMap()(ci, val=\.false())
      this.#treesMap()(ci, val=\.false())
      )
    }
  )
mut method Void noUnderZero()=(
  map = this.#map()
  rMap = this.#riverMap()
  for ci in map (
    if map(ci) < 0Size (
      reduced=(rMap(ci)+map(ci)).max(0\)
      rMap(ci, val=reduced)
      map(ci, val=0\)
      )
    )
  )