mut IMap cells
mut Math.Random r
mut V.Cell3D.List mountainTops = V.Cell3D.List()
mut IMap riverMap
mut V.Cell2D.List seeds
mut method Void grow(I percent)
mut method Void addSeed(V.Cell2D that, I val)

read method I combine(V.Cell2D that, I seed) = {
  read IMap cs=this.cells()
  I oldCell = cs(that)
  if oldCell==0I return seed   //unsetted is set
  if oldCell+1\==seed return seed //contaged
  if oldCell+6\ <seed return (oldCell+seed)/2I //pulled up if it is so far below
  return 0I //do nothing
  }
mut method I rand(I that, I to)=
  this.#r().nextInRange(start=that,end=to)

mut method Void initTops(I that) = (
  lowX = V.maxX()/6I
  lowY = V.maxY()/6I
  midX = V.maxX()/2I
  midY = V.maxY()/2I
  highX = 5I*(V.maxX()/6I)
  highY = 5I*(V.maxY()/6I)
  midZ = (V.maxZ()*2I)/3I
  lowZ = midZ/2I
  p1x=this.rand(lowX to=midX)
  p1y=this.rand(lowY to=midY)
  p2x=this.rand(midX to=highX)
  p2y=this.rand(midY to=highY)
  this.#mountainTops().add(\(x=p1x, y=p1y, z=this.rand(midZ to=that)))
  for w in Range(1\ to=6\) (
    x = ((p1x*w)+(p2x*(6I-w)))/6I
    y = ((p1y*w)+(p2y*(6I-w)))/6I
    this.#mountainTops().add(\(x=x, y=y, z=this.rand(midZ to=that)))
    )
  for w in Range(0\ to=6\) (//6 extra random lower tops
    x = this.rand(lowX to=highX)
    y = this.rand(lowY to=highY) 
    z = this.rand(lowZ to=midZ)
    this.#mountainTops().add(\(x=x, y=y, z=z))
    )
  )

mut method Void addMontains(I that) = (
  m = this.#cells()
  var lastSize=V.layerSize()
  for h in Range(1\ to=that) (
    this.#seeds().clear()
    for p in this.mountainTops() ( if p.z()>=h this.addSeed(p.to2D() val=h) )
    Debug(S"-- start growing for h=%h; seeds size=%this.seeds().size()")
    for attempts in Range(150\) (
      if this.seeds().size()>=(lastSize*9I)/10I Break()
      this.grow(percent=30\)
      )
    lastSize:=this.seeds().size()
    )
  )
  
mut method Void addShores() = (
  c = BoolExpansion(r=this.#r(), cells=BoolMap(), maxSeeds=\"-1")
  for x in Range(V.maxX()) (
    c.addSeed(\(x=x, y=0\), val=\.true())
    c.addSeed(\(x=x, y=V.maxY()-1\), val=\.true())
    c.addSeed(\(x=x, y=1\), val=\.true())
    c.addSeed(\(x=x, y=V.maxY()-2\), val=\.true())
    )
  for y in Range(V.maxY()) (
    c.addSeed(\(x=0\, y=y), val=\.true())
    c.addSeed(\(x=V.maxX()-1\, y=y), val=\.true())
    c.addSeed(\(x=1\, y=y), val=\.true())
    c.addSeed(\(x=V.maxX()-2\, y=y), val=\.true())
    )
  start=(V.maxX()*this.rand(5I to=25I)) / 30I
  for x in Range(start to=V.maxX()) (
    for y in Range(V.maxY()/3\) (
      c.addSeed(\(x=x, y=y) val=\.true())
      )
    )
  max = V.layerSize() / 2I
  for attempts in Range(150\) (
      if c.seeds().size() >= max Break()
      c.grow(percent=10\)
      )
  map = this.#cells()
  for ci in map (
    if c.cells()(ci) (
      v=(map(ci) - 8I).clamp(0\ to=50\)
      map(ci val=v)
      )
    )
  )
  
mut method Void montainsErosion() = (
  map=this.#cells()
  for ci in map (
    if !ci.isBorder() (
      hi = map(ci)
      var hMin = V.maxZ()
      var hMax = 0I
      for d in V.Delta2D.adjacent8() (
        hMin:=hMin.min(map(ci+d))
        hMax:=hMax.max(map(ci+d))
        )
      if hi > hMin + 4I  || hi < hMax - 4I (
        newH=(hi + hi + hMin + hMax) / 4I
        map(ci, val=newH)
        )
      )
    )
  )

mut method Void makeRivers(I waterLevel)=(
  this.runWater(p=this.mountainTops().val(2\).to2D())
  this.runWater(p=this.mountainTops().val(3\).to2D())
  map = this.#cells()
  rMap = this.#riverMap()
  for ci in map {
    if ci.isBorder() return void
    if rMap(ci) > 0I return void
    h=map(ci)
    if h <= waterLevel return void
    var max=I"-1"//for all non water points
    for d in V.Delta2D.adjacent8() (//for all surrunding spots, find the max with water
      r = rMap(ci+d)
      candidate = map(ci+d)+r
      if r > 0I ( max := candidate.max(max) )
      )
    if max==I"-1" return void
    if h <= max  map(ci, val=max)
    else map(ci, val=(h + max) / 2I)
    return void
    }
  )
  
mut method Void add(mut V.Cell2D.List river,V.Cell2D p)=(
  this.#riverMap()(p, val=1\)
  this.#cells()(p,val=this.cells()(p)-1\)
  river.add(p)
  )
  
mut method mut V.Cell2D.List runWaterDown(V.Cell2D start)={
  var p=start
  river=V.Cell2D.List()
  map = this.cells()
  rMap = this.riverMap()
  loop (
    this.add(river=river,p=p)
    var min = V.maxZ()
    pOld=p
    for d in V.Delta2D.adjacent4() (
      pi = pOld+d
      candidate = map(pi)
      ok = rMap(pi) == 0I && candidate<min //what happens if we remove the riverMap check?
      if ok ( min:=candidate, p:=pi )
      )///crucially, min can be higher than the former this(p)
    if min == V.maxZ() || map(p) <= 0I (
      this.add(river=river,p=p)
      return river
      )
    )
  }
mut method Void runWater(V.Cell2D p)=(
  x=this.rand(p.x()-2\,to=p.x()+2\)
  y=this.rand(p.y()-2\,to=p.y()+2\)
  river=this.runWaterDown(start=\(x=x,y=y))
  if river.size() >= 2I this.adjust(river=river)
  )
mut method Void riversGoDown(read V.Cell2D.List river)=(
  map = this.#cells()
  var last = map(river.left())
  for p in river (
    current = map(p)
    if current>last map(p val=last)
    else last := current
    )
  )
mut method Void adjust(read V.Cell2D.List river)=(
  map = this.#cells()
  rMap = this.#riverMap()
  this.riversGoDown(river=river)
  endH = map(river.val(\size()-2\))+1I//the earth + 1 water
  preLastH = rMap(river.right()).max(endH)
  rMap(river.right() val=preLastH)
  map(river.right() val=0\)
  var lastH = map(river.right())
  for i in Range(river.size()-2\).reverse() (
    pi = river.val(i)
    var currentH = map(pi)
    riverH = rMap(pi)
    if lastH > currentH (
      rMap(pi val=(riverH+lastH)-currentH)
      currentH := (riverH+lastH)-1I
      )
    delta = (currentH-(lastH+1I))
    if delta > 0I (//should make more water on waterfalls
      rMap(pi val=rMap(pi)+delta)
      map(pi val=map(pi)-delta)
      )
    lastH := currentH
    )
  )