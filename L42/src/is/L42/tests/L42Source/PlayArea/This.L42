reuse [AdamTowel]
MaxOfList = {//static method pattern
  UndefinedOnEmpty = Message:{[Message.Guard]}
  //Max is undefined on empty lists.
  //Since there was no mention of preconditions, we should explicitly handle all the error cases as Guards
  class method
  Num (Num.List that) = {
    if that.isEmpty() ( error UndefinedOnEmpty"Max is undefined on empty lists" )
    //now that we know we can proceed: 
    var Num maxCandidate= that.left()
    //there is no such thing like a minimum Num, we need to select one element from the list.
    for n in that (
      //we could write 'that.withoutLeft()' to avoid checking on the first again
      if maxCandidate<n (maxCandidate:= n)
      //update the variable to keep track of the max so far.
      )
    return maxCandidate
    }
  }
MaxOfList2 = {
  class method
  Num (Num.List that) =
    that.reduce()(
      for e in \vals() (
        if \acc < e \add(e) 
        )
      )
  }

Main = (
  Debug(MaxOfList(\[10\;20\;30\;3\]))
  Debug(MaxOfList(\[10\]))
  Debug(MaxOfList(\[]))
  Debug(MaxOfList2(\[10\;20\;30\;3\]))
  Debug(MaxOfList2(\[10\]))
  Debug(MaxOfList2(\[]))
  //Debug(MapText(keys=S.List[S"a";S"b";S"c"] vals=S.List[S"z";S"y";S"z"]))
  )
/*Point = Data:{var Num x, var Num y}
OPoint = Collection.optional(Point)
Map1 = Collection.map(key=Point,val=Point)
Set1 = Collection.set(Point)
Main01=(
  imm p00=Point(x=0\ y=0\)
  mut p01=Point(x=0\ y=1\)
  map = Map1[key=p00,val=p00]
  Debug(map.readVal(key=p00))
  var imm p00Box = OPoint(p00)
  var mut p01Box = OPoint(p01)
  X[
    p00 in p00Box;
    p00Box.val()==p00;
    p01Box.val().readEquality(p01);
    ]
  if p00Box ( Debug(S"printing %p00Box") )//printing [Point(x=0, y=0)]
  p01Box.#val().x(50\)
  Debug(S"printing %p01")//printing Point(x=50, y=1)
  p00Box:= OPoint()
  p01Box:= OPoint()
  if !p00Box ( Debug(S"printing %p00Box") )//printing []
    X[
    !(p00 in p00Box);
    !p00Box.isPresent();
    ]
  //mut Point p00=Point(x=0\ y=0\)
  Debug(S"p00 =%p00 y=%p00.y()")
  //p00.y(200\)
  Debug(S"p00 =%p00 y=%p00.y()")
  )
*/