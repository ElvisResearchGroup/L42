reuse [AdamTowel]
Main=(
  ns=Num.List()( for i in (10Size).range() \add(Num.from(string=i.toS())))
  //for e1 in l1., e2 in 10Size.range() (ff)
  //ns=Num.List()(Size.range())
  Debug(ns)
  )
//B={#norm{nativeKind=baalean}}
/*A={
  class method This #apply()
  method This a(This that)=native{trusted:OlkjkljP} that
  #norm{nativeKind=Int typeDep=This, coherentDep=This}}
//code reuse
H=Trait:{  class method S hello()=S"Hello"  }
W=Trait:{  class method S world()=S"World"  }
HW=Trait:{
  class method S hello()
  class method S world()
  class method S helloWorld()=this.hello()++S" "++this.world()
  }
Result=Class:HW:W:H
Main1=(
  Debug(S"-Main1"++Result.helloWorld())
  )
Result2=Class:(HW:W:H)['helloWorld()=>'hi();
  hide='hello();  hide='world()
  ]
Main2=(
  Debug(S"-Main2"++Result2.hi())
  )
//safety

Person=Data:{S name, var Num age
  mut method Void birthDay()=this.age(this.age()+1Num)
  @Cache.Now class method Void ok(S name, Num age)=(
    Debug(S"checking if %name is ok")
    if name==S"" (error X"invalid name")
    if age<0Num (error X"invalid age")
    )
  }
Main3=(
  bob=Person(name=S"Bob", age=23Num)
  Debug(bob)
  bob.birthDay()
  Debug(bob)
  )*/