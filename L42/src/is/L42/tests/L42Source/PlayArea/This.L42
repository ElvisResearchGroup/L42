reuse [AdamTowel]
Tire = Data:{var Num pressure}
Wheel = Data:{var mut Tire tire}
Seat = Data:{var S description}
Chain = Data:{ var Num damage 
  mut method Void onWheel(lent Wheel that) = (
    lent Tire t=that.#tire()
    t.pressure(\pressure-1\)
    this.damage(\damage+1\)
    )
  }
Bike = Data:{
  var capsule Wheel front
  var capsule Wheel back
  lent method lent Wheel #back()
  var capsule Seat seat
  var capsule Chain chain
  lent method lent Chain #chain()
  mut method Void chainOnWheel() = 
    this.#chain().onWheel(this.#back())
  }
Main00=(
  b=Bike(
    front=\(tire=\(pressure=1\))
    back=\(tire=\(pressure=2\))
    seat=\(description='Okj)
    chain=\(damage=3\)
    )
  Debug(b.front())
  )
Point = Data:{ Double x, Double y
  method Double distance(Point that) = 3Double
  }

Points = Collection.list(Point)

Animal = Data:{
  var Point location
  capsule Points path

  mut method
  Void move() = (
    this.location(\path.left())
    this.removeLeftPath()
    )

  mut method
  Void trim() = 
    this.removeFarthest(location=\location, distance=3Double)

  @Cache.Clear class method
  Void removeLeftPath(mut Points path) =
    path.removeLeft()
  
  @Cache.Clear class method
  Void removeFarthest(mut Points path, Point location, Double distance) = (
    var maxD=distance
    var maxI=I"-1"
    for p in path, i in Range(path.size()) (
      currentD = location.distance(p)
      if currentD>maxD (
        maxI:=i
        maxD:=currentD
        )
      )
    if maxI!=I"-1" path.remove(maxI)
    )

  @Cache.Now class method
  Void invariant(read Points path, Point location) = 
    if path.contains(location) error X"..."
  }
  
Main = (
  Debug(S"Hi")
  a=Animal(
    location=\(x=1\,y=2\)
    path=\[\(x=2\,y=3\);\(x=3\,y=4\)]
    )
  a.trim()
  Debug(a)
  )
