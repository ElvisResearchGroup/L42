reuse [AdamTowel]
Unit={...}
TraitSI=Trait:{
  Support=Class:Unit.TraitAbstractSupport
  //the seven basic units
  M=Unit(Support)//meters
  Kg=Unit(Support)//kilograms
  S=Unit(Support)//seconds
  A=Unit(Support)//ampers
  K=Unit(Support)//kelvins
  Mol=Unit(Support)//moles
  Cd=Unit(Support)//candels
  
  Velocity=M/S<:class Any
  M2=M*M<:class Any
  M$=Class:M2.OrganizeOnRight():Trait:Velocity.OrganizeOnRight()
  //this works, with Trait in the center. Is this ugly? why so?
  //it seams to give an assertion error to debug tomorrow.
  //I may want to offer Class$Libs, and
  //Class.fromLibs[], Trait.fromLibs[]
  //The version 'fromTraits' is dumb since we can use +
  Acceleration=Velocity/S<:class Any
  Velocity$=Acceleration.OrganizeOnRight()
  
  M3=M2*M<:class Any
  M2$=M3.OrganizeOnRight()

  Hz=S.Inverse()  //hertz, 1/S
  S$=Hz.OrganizeOnUnit()
  
  N=Kg*Acceleration<:class Any
  Density=Kg/M3<:class Any
  Kg$=Class:N.OrganizeOnRight():Trait:Density.OrganizeOnRight()

  Pa=N/M2<:class Any
  J=N*M<:class Any
  N$=Class:Pa.OrganizeOnRight():Trait:J.OrganizeOnRight()
  
  W=J/S<:class Any
  C=S*A<:class Any
  V=W/A<:class Any
  F=C/V<:class Any
  Ohm=V/A<:class Any
  Siemens=Ohm.Inverse()
  Wb=V*S<:class Any
  T=Wb/M2<:class Any
  H=Wb/A<:class Any
  Bq=S.Inverse()
  Gy=J/Kg<:class Any
  Sv=J/Kg<:class Any
  Kat=Mol/S<:class Any
  }
SI=Class:TraitSI['Support=>Num]
Main=(
  Debug(S"Hello world")
  m=SI.M"12.45"
  v=SI.Velocity"88"
  Debug(m)
  Debug(v)
  )
