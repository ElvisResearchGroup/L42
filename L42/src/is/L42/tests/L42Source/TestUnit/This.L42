reuse [AdamTowel]

Base=Trait:{reuse [AdamTowel]
  Unit={...}
  TraitSI=Trait:{
    Support=Class:Unit.TraitAbstractSupport
    //the seven basic units
    M=Unit(Support)//meters
    Kg=Unit(Support)//kilograms
    S=Unit(Support)//seconds
    A=Unit(Support)//ampers
    K=Unit(Support)//kelvins
    Mol=Unit(Support)//moles
    Cd=Unit(Support)//candels

    Velocity=M.Per(S)
    M2=M.Times(M)
    M$=Class:M2.FromLeft:Velocity.FromLeft
    
    Acceleration=Velocity.Per(S)
    Velocity$=Class:Acceleration.FromLeft

    M3=M2.Times(M)
    M2$=Class:M3.FromLeft

    Hz=S.Inverse()  //hertz, 1/S
    C=S.Times(A)
    Bq=S.Inverse()//use Bq(1Support per=mySeconds) to build
    S$=Class:Hz.FromUnit:C.FromLeft
    
    N=Kg.Times(Acceleration)
    Density=Kg.Per(M3)
    Kg$=Class:N.FromLeft:Density.FromLeft

    Pa=N.Per(M2)
    J=N.Times(M)
    N$=Class:Pa.FromLeft:J.FromLeft
  
    W=J.Per(S)
    Gy=J.Per(Kg)
    Sv=J.Per(Kg)//use Sv(myJ per=myKg) to build
    J$=Class:W.FromLeft:Gy.FromLeft
    
    V=W.Per(A)
    W$=Class:V.FromLeft
    
    F=C.Per(V)
    C$=Class:F.FromLeft
    
    Ohm=V.Times(A)
    Wb=V.Times(S)
    V$=Class:Ohm.FromLeft:Wb.FromLeft
    
    Siemens=Ohm.Inverse()
    
    T=Wb.Per(M2)
    H=Wb.Per(A)
    Wb$=T.FromRight:H.FromLeft
        
    Kat=Mol.Per(S)
    Mol$=Class:Kat.FromLeft
    }
  }
  
DeployUnit=Deploy.module(
  url='Unit
  code=Base['TraitSI=>'Unit.TraitSI].code()
  name='Unit
  )
  
UnitLib=(
  l=Load:{reuse[#$Unit]}
  Debug(S"foo")
  l)

SI=Class:UnitLib.TraitSI['Support=>Num]

Main=(
  Debug(S"Hello world")
  m=SI.M"12.45"
  v=SI.Velocity"88"
  Debug(m)
  Debug(v)
  )
