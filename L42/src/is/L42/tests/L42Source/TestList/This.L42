reuse[AdamTowel]
TestNoData={
  Point={Size x Size y  class method This(Size x Size y)
    read method Bool ==(read Point that)=
      this.x()==that.x() && this.y()==that.y()
    }
  PointEquality=Trait:{class method Bool equals(read Point a,read Point b)=a==b}
  Points=Class:Collection.listEqTrait()['Elem=>Point]:PointEquality

  Test1=(
    points=Points[\(x=3\ y=5\)]
    {}:Test"basicPoints=="(points==points)
 
    ss=S.List[S"hello";S" ";S"world"]
    {}:Test"basic0: showcasing == test style"(
      S"hello world"
      ==
      ss.reduce()(for e in \vals \res<=\acc++e)
      )
    pp=Points[\(x=3\ y=5\);\(x=1\ y=0\);\(x=0\ y=7\)]
    {}:Test"points reduce"(
      Point(x=1\ y=0\)
      ==
      pp.reduce()(for e in \vals if e.x()>0Size \res<=e)
      )
  
    {}:Test"basic:reduce from empty string"(
      expected=S"-hello world" 
      actual=ss.reduce(S"-")(for e in \vals \res<=\acc++e)
      )
    {}:Test"basic: reduce from left value"(
      expected=S"hello world" 
      actual=ss.reduce()(for e in \vals \res<=\acc++e)
      )
    )
  }
TestWithData={
  Point=Data:{Num x, Num y}
  Points=Collection.list(Point)
  Test1=(
    {}:Test"a"(Point(x=3\,y=5\)==Point(x=3\,y=5\))
    )
  }