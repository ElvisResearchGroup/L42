reuse[AdamTowel]

/*This test need to use the organizer decorator, in turn requiring full path rename.
Scope1 ={
  A = {
    mut Bs bs class method This(mut Bs bs)
    imm method Size ok()=native{trusted:readEagerCache} 3Size
    }
  B = {mut A a class method This(mut A a)}
  Bs = Class:ListT(B)
  LateCacheLoadingTask=(
    imm A ia=(
      mut Bs bs=Bs()
      mut A a=A(Bs)
      bs.add(a)
      )
    _=ia.ok()
    void
    )
  }
  */
Foo={
  read method Size inner::0()
  class method This of::0(Size inner)
  class method This of(Size inner)=this.of::0(inner=inner)
  imm method Size times2()=
    native{trusted:lazyCache} (
      Log"Foo".write(S"2")//Discuss: how this scale when closed subexpressions can be cached?
      this.inner::0()*2Size
      )
  read method Size times3Eager()=
    native{trusted:readEagerCache} (
      Log"Foo".write(S"3")
      this.inner::0()*3Size
      )
  }
TestCache=(
  Log"Foo".clear()
  Foo foo=Foo.of(inner=5Size)
//  {}:Test"pass"(Bool.true())
  {}:Test"cacheResult"(expected=10Size, actual=foo.times2())
  {}:Test"cacheResultAgain"(expected=10Size, actual=foo.times2())
  {}:Test"cacheResultEager"(expected=15Size, actual=foo.times3Eager())
  {}:Test"cacheResultEagerAgain"(expected=15Size, actual=foo.times3Eager())
  {}:Test"cacheAvoidRepeating"(expected=S"32",actual=Log"Foo".#$reader().read())
  )

A={
  Strings that
  class method This (Strings that)
  imm method S firstE()=
    native{trusted:lazyCache} (
      Log"Foo".write(S"firstEcalled")
      this.that().val(0\)
      )
  }
TestACache=(
  Log"Foo".clear()
  A a=A(Strings[S"Hello";S"Hi"])
  A b=A(Strings[S"Hello";S"Hi"])
  {}:Test"cacheAResult"(expected=S"Hello", actual=a.firstE())
  {}:Test"cacheAResultAgain"(expected=S"Hello", actual=a.firstE())
  {}:Test"cacheAvoidRepeating"(expected=S"firstEcalled",actual=Log"Foo".#$reader().read())
  {}:Test"cacheAResult"(expected=S"Hello", actual=b.firstE())
  {}:Test"cacheAResultAgain"(expected=S"Hello", actual=b.firstE())
  {}:Test"cacheAvoidRepeating"(expected=S"firstEcalled",actual=Log"Foo".#$reader().read())
  A c=A(Strings[S"Hello";S"Hi"])
  {}:Test"cacheAResult"(expected=S"Hello", actual=c.firstE())
  {}:Test"cacheAResultAgain"(expected=S"Hello", actual=c.firstE())
  {}:Test"cacheAvoidRepeating"(expected=S"firstEcalled",actual=Log"Foo".#$reader().read())
  A d=A(Strings[S"Hello";S"Hi";S"donut"])
  {}:Test"cacheDResult"(expected=S"Hello", actual=d.firstE())
  {}:Test"cacheDResultAgain"(expected=S"Hello", actual=d.firstE())
  {}:Test"cacheEnsureRepeatOnce"(expected=S"firstEcalledfirstEcalled",actual=Log"Foo".#$reader().read())
  )
  
 HasToSs = Class:ListT(HasToS)
 
 B={
  HasToSs that
  class method This (HasToSs that)
  imm method S firstE()=
    native{trusted:lazyCache} (
      Log"Foo".write(S"firstEcalled2")
      this.that().val(0\).toS()
      )
  }
  
BBox={
  B that
  class method This innerCon(B that)
  class method This (HasToSs that)=This.innerCon(B(that))
  imm method S firstE()=
    native{trusted:lazyCache} (
      this.that().firstE()
      )
  
}
  
TestBCache=(
  Log"Foo".clear()
  B b = B(HasToSs[S"Hello";S"Goodbye"])
  B b2 = B(HasToSs[S"Hello";S"Goodbye"])
  {}:Test"cacheBResult"(expected=S"Hello", actual=b.firstE())
  {}:Test"cacheBResultAgain"(expected=S"Hello", actual=b.firstE())
  {}:Test"cacheBvoidRepeating"(expected=S"firstEcalled2",actual=Log"Foo".#$reader().read())
  {}:Test"cacheBResult"(expected=S"Hello", actual=b2.firstE())
  {}:Test"cacheBResultAgain"(expected=S"Hello", actual=b2.firstE())
  {}:Test"cacheBvoidRepeating"(expected=S"firstEcalled2",actual=Log"Foo".#$reader().read())
  BBox b3 = BBox(HasToSs[S"Hello";S"Goodbye"])
  {}:Test"cacheBResult"(expected=S"Hello", actual=b3.firstE())
  {}:Test"cacheBResultAgain"(expected=S"Hello", actual=b3.firstE())
  {}:Test"cacheBvoidRepeating"(expected=S"firstEcalled2",actual=Log"Foo".#$reader().read())
  void
  )
  
AnyList = Class:ListT(Any)
VoidList = Class:ListT(Void)
LibList = Class:ListT(Library)

C={
  Strings that
  AnyList myList
  class method This (Strings that, AnyList myList)
  imm method S firstE()=
    native{trusted:lazyCache} (
      Log"Foo".write(S"firstEcalled3")
      this.that().val(0\)
      )
  }
  
MyTrait=Trait:{imm method Void foo()=void}
  
TestAnyVoidLibrary=(
  Log"Foo".clear()
  C c = C(that=Strings[S"Hello";S"Hi"], 
          myList=AnyList[MyTrait.code();void;S"bar"])
  C c2 = C(that=Strings[S"Hello";S"Hi"], 
          myList=AnyList[MyTrait.code();void;S"bar"])
  {}:Test"cacheCResult"(expected=S"Hello", actual=c.firstE())
  {}:Test"cacheCResultAgain"(expected=S"Hello", actual=c.firstE())
  {}:Test"cacheCvoidRepeating"(expected=S"firstEcalled3",actual=Log"Foo".#$reader().read())
  {}:Test"cacheCResult"(expected=S"Hello", actual=c2.firstE())
  {}:Test"cacheCResultAgain"(expected=S"Hello", actual=c2.firstE())
  {}:Test"cacheCvoidRepeating"(expected=S"firstEcalled3",actual=Log"Foo".#$reader().read())
  void
)

ClassBox={
  class Any myClass
  class method This(class Any myClass)
  imm method Void printOut()=
    native{trusted:lazyCache} (
      Log"Foo".write(S"ClassBoxPrint")
      void
      )
}

TestClassBox=(
  Log"Foo".clear()
  ClassBox b1 = ClassBox(myClass=S)
  ClassBox b2 = ClassBox(myClass=S)
  ClassBox b3 = ClassBox(myClass=HasToS)
  ClassBox b4 = ClassBox(myClass=HasToS)
  ClassBox b5 = ClassBox(myClass=Void)
  ClassBox b6 = ClassBox(myClass=Void)
  ClassBox b7 = ClassBox(myClass=Any)
  ClassBox b8 = ClassBox(myClass=Any)
  ClassBox b9 = ClassBox(myClass=Library)
  ClassBox b10 = ClassBox(myClass=Library)
  b1.printOut()
  b2.printOut()
  {}:Test"ClassBox_works_the_same"(expected=S"ClassBoxPrint", actual=Log"Foo".#$reader().read())
  b3.printOut()
  b4.printOut()
  {}:Test"ClassBox_works_the_same"(expected=S"ClassBoxPrintClassBoxPrint", actual=Log"Foo".#$reader().read())
  b5.printOut()
  b6.printOut()
  {}:Test"ClassBox_works_the_same"(expected=S"ClassBoxPrintClassBoxPrintClassBoxPrint", actual=Log"Foo".#$reader().read())
  b7.printOut()
  b8.printOut()
  {}:Test"ClassBox_works_the_same"(expected=S"ClassBoxPrintClassBoxPrintClassBoxPrintClassBoxPrint", actual=Log"Foo".#$reader().read())
  b9.printOut()
  b10.printOut()
  {}:Test"ClassBox_works_the_same"(expected=S"ClassBoxPrintClassBoxPrintClassBoxPrintClassBoxPrintClassBoxPrint", actual=Log"Foo".#$reader().read())
  void
)

/*
D={
  Strings that
  Any myAny
  class method This (Strings that,fwd imm Any myAny)
  imm method S firstE()=
    native{trusted:lazyCache} (
      Log"Foo".write(S"ACT.")
      this.that().val(0\)
      )
  }
TestCircular=(
  Log"Foo".clear()
  D d1 = D(Strings[S"Hello"],myAny=d2)
  D d2 = D(Strings[S"Goodbye"],myAny=d1)  
  {}:Test"cacheCResult"(expected=S"Hello", actual=d1.firstE())
  {}:Test"cacheCResultAgain"(expected=S"Hello", actual=d1.firstE())
  {}:Test"cacheCvoidRepeating"(expected=S"ACT.",actual=Log"Foo".#$reader().read())
  {}:Test"cacheCResult"(expected=S"Hello", actual=d2.firstE())
  {}:Test"cacheCResultAgain"(expected=S"Hello", actual=d2.firstE())
  {}:Test"cacheCvoidRepeating"(expected=S"ACT.",actual=Log"Foo".#$reader().read())
  )
*/

TestClassCache={
  A={
    class method Size const()=native{trusted:lazyCache} (
      Log"Foo".write(S"ACT.")
      42Size
      )
    }
  Task=(
    Log"Foo".clear()
    {}:Test"res1"(expected=42Size, actual=A.const())
    {}:Test"res2"(expected=42Size, actual=A.const())
    {}:Test"cacheRepeating"(expected=S"ACT.",actual=Log"Foo".#$reader().read())
    )
  }
TestReadCache={
  A={
    read method Size that::0()
    mut method Void that::0(Size that)
    mut method Void update(Size that)=this.that::0(that)
    class method mut A of::0(Size that)
    class method mut A(Size that)=this.of::0(that)
    read method Size m()=native{trusted:readEagerCache} (
      Log"Foo".write(S"ACT.")
      this.that::0()
      )
    }
  Task1=(
    Log"Foo".clear()
    mut A a=A(42\)
    {}:Test"res1"(expected=42Size, actual=a.m())
    {}:Test"res2"(expected=42Size, actual=a.m())
    {}:Test"cacheRepeating"(expected=S"ACT.",actual=Log"Foo".#$reader().read())
    //more, with update
    a.update(0\)
    {}:Test"res3"(expected=0Size, actual=a.m())
    )
  B={
    read method read Strings that::0()
    mut method mut Strings #that::0()
    class method mut This of::0(capsule Strings that)
    mut method Void addOne()=this.#that::0().add(S"hi")
    read method Size m()=native{trusted:readEagerCache} (
      Log"Foo".write(S"ACT.")
      this.that::0().size()
      )
    }
  Task2=(
    Log"Foo".clear()
    mut B a=B.of::0(Strings[\"hello"])
    {}:Test"res1"(expected=1Size, actual=a.m())
    {}:Test"res2"(expected=1Size, actual=a.m())
    {}:Test"cacheRepeating"(expected=S"ACT.",actual=Log"Foo".#$reader().read())
    //more, with update
    a.addOne()
    {}:Test"cacheRepeating"(expected=S"ACT.ACT.",actual=Log"Foo".#$reader().read())
    {}:Test"res3"(expected=2Size, actual=a.m())
    )
  Person=Class:Cache.Close:{
    S name
    capsule Strings allergies
    class method mut This(S name, capsule Strings allergies)
    @Cache.Lazy method S description()=(
      Log"Foo".write(S"description()")
      S"Person[%this.name();%this.allergies().size()]"
      )
    @Cache.Clear class method Void add(mut Strings allergies,S allergy)=(
      Log"Foo".write(S"add()")  
      allergies.add(allergy)
      )
    @Cache.Now class method Void ok(S name,read Strings allergies)=(
      Log"Foo".write(S"ok()")
      if name==S"" || allergies.size()>200Size error X"InvalidPerson"
      )
    @Cache.Now class method S title(S name)=(
       Log"Foo".write(S"title()")
       S"Dr. %name of 42"
       )
    }
  Task3=(
    Log"Foo".clear()
    imm Person i=(
      mut Person a=Person(name=S"bob",allergies=Strings[S"dust"])
      {}:Test"cacheRepeating"(expected=S"ok()title()",actual=Log"Foo".#$reader().read())
      {}:Test"readProperty1"(expected=S"Dr. bob of 42", actual=a.title())
      {}:Test"cacheRepeating"(expected=S"ok()title()",actual=Log"Foo".#$reader().read())
      //more, with update
      a.add(allergy=S"pollen")
      {}:Test"cacheRepeating"(expected=S"ok()title()add()ok()title()",actual=Log"Foo".#$reader().read())
      {}:Test"readProperty2"(expected=S"Dr. bob of 42", actual=a.title())
      {}:Test"cacheRepeating"(expected=S"ok()title()add()ok()title()",actual=Log"Foo".#$reader().read())
      a
      )
      {}:Test"immCache1"(expected=S"Person[bob;2]", actual=i.description())
      {}:Test"cacheRepeating"(expected=S"ok()title()add()ok()title()description()",actual=Log"Foo".#$reader().read())
      {}:Test"immCache2"(expected=S"Person[bob;2]", actual=i.description())
      {}:Test"cacheRepeating"(expected=S"ok()title()add()ok()title()description()",actual=Log"Foo".#$reader().read())
    )
    //@Class.Cache read method S currentDescription()=
    //  S"Person[%this.name();%this.allergies().size()]"
    //or... Cache.Transient ?    
  }
  NestedClose=Class:Cache.Close('A.B):{
  A={
    B={
      class method This()
      @Cache.Lazy method S foo()=(Log"Foo".write('Foo) S"Hi")
      }
    }
  }
NestedCloseTest=(
  Log"Foo".clear()
  b=NestedClose.A.B()
  {}:Test"NestedClose1"(expected=S"Hi" actual=b.foo())
  {}:Test"NestedClose2"(expected=S"Hi" actual=b.foo())
  {}:Test"NestedCloseLog"(expected=S"Foo" actual=Log"Foo".#$reader().read())
  )
  