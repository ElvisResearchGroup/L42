reuse [AdamTowel]
Main=(
  Debug(S"Hello world")
  )
Test1={
  Foo={
    read method Size inner::0()
    class method This of::0(Size inner)
    class method This of(Size inner)=(
      This r=this.of::0(inner=inner)
      _=System.immNorm(r)//start the eagers
      r
      )
    method Size times2()=
    native{trusted:eagerCache} (
      Log"Foo".write(S"[")
      for i in (5000Size).range() (Debug(S"in2"))
      Log"Foo".write(S"]")
      this.inner::0()*2Size
      )
    method Size times3()=
    native{trusted:eagerCache} (
      for i in (500Size).range() (Debug(S"in3"))
      Log"Foo".write(S"{")
      Log"Foo".write(S"}")
      this.inner::0()*3Size
      )
    }
  TestCache=(
    Log"Foo".clear()
    Foo foo=Foo.of(inner=5Size)
    {}:Test"cacheResult2"(expected=10Size, actual=foo.times2())
    {}:Test"cacheResult2Again"(expected=10Size, actual=foo.times2())
    {}:Test"cacheResult3"(expected=15Size, actual=foo.times3())
    {}:Test"cacheResult3Again"(expected=15Size, actual=foo.times3())
    Debug(Log"Foo".#$reader().read())
    {}:Test"cacheAvoidRepeating"(expected=S"[{}]",actual=Log"Foo".#$reader().read())
    )
  }
  
Test2={
  Point=Data:{Num x,Num y
    @Cache.Eager method Num xy()=(
      Log"Point".write(S"1234567890")
      this.x()+this.y()
      )
    //@Cache.Now class method Num now(Num x,Num y)=this.x()+this.y()
    }
  Main=(
    Log"Point".clear()
    p=Point(x=3\,y=5\)
    for i in (500Size).range() (Log"Point".write(S"@"))
    S res=Log"Point".#$reader().read()
    Debug(res)
    Debug(res.size())
    {}:Test"WithData"(res.size()==510Size)
    )
  }