class method Void main()=
  Debug(DeclassifyS(this.err(S"hello Sifo")))
  
class method @Left S err(@Left S that)=that

Row=Class:Trait(Collection.map(key=S, val=S))[clear='OVal]['OVal=>S.Opt]:{
  read method S.Opt getEntry(S key)=this.immVal(key=key)
  mut method Void setEntry(S key, S value)=this.put(key=key,val=value)
  }
Rows=Collection.list(Row)

Database=Data:{
  var S name
  mut Rows rows
  mut method mut Row addRow()=(
    row=Row()
    this.#rows().#add(right=row)
    row
    )
  mut method Void removeRow(Size index)=this.#rows().remove(index)
  mut method Void setEntry(Size that, S key, S value)=(
    if that < 0Size error X"invalid row number %that"
    while that >= this.rows().size() (_=this.addRow() void)
    this.#rows().#val(that).setEntry(key=key, value=value)
    )
  read method S.Opt getEntry(Size that, S key)={
    if that < 0Size error X"invalid row number %that"
    if that >= this.rows().size() return S.Opt()<:imm S.Opt
    return this.rows().val(that).getEntry(key=key)
    }
  method S.List getAllEntries(S key)=S.List()(
    for i in this.rows().size().range() (
      nextValue = this.rows().val(i).getEntry(key=key)
      if nextValue \add(nextValue.val())
      )
    )
  }

Gui=Data:{
  //mut @Left Database dbLeft
  //mut @Right Database dbRight
  read method read @Left Database dbLeft()
  read method read @Right Database dbRight()
  mut method mut @Left Database #dbLeft()
  mut method mut @Right Database #dbRight()
  class method mut This ()=(
    dbl=Database(name=S"left",rows=Rows())
    dbr=Database(name=S"right",rows=Rows())
    This(dbLeft=dbl, dbRight=dbr)
    )
//  class method mut This ()=This(//this would be the same
//    dbLeft=\(name=S"left",rows=\())
//    dbRight=\(name=S"right",rows=\())
//    )
  }
class method Void testDb()=(
  mut Gui gui = Gui()
  mut @Right Database dbR=gui.#dbRight()
  mut @Left Database dbL=gui.#dbLeft()
  p=S"person"
  hans=S"hans"
  zero=0Size
  dbL.setEntry(zero,key=p,value=hans)
  dbR.setEntry(0Size,key=S"person",value=S"peter")
  @Left S name = dbL.getEntry(0Size,key=S"person").val()
  //gui.dbRight().setEntry(1Size,key=S"person",value=name)//Should fail SIFO
  Debug(S"")
  S dName=DeclassifyS(name)
  Debug(S"")
  Debug(S"")
  dbR.setEntry(1Size,key=S"person",value=dName)//thus we have to declassify
  dbL.setEntry(1Size,key=S"person",value=name)
  Debug(S"")//Debug(DeclassifyS(name))
  )