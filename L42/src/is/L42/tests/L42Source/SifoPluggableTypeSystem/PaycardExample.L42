LogRecord={
  var Size balance
  var Bool empty
    
  class method mut This(Size balance, Bool empty)
  class method mut This () = This(
    balance = Size"-1",
    empty = Bool.true()
    )
   
  mut method Void setRecord(Size balance)={
    if balance < 0Size return void
    this.empty(Bool.false())
    return this.balance(balance)
    }
  }
LogRecords=Collection.list(LogRecord)
LogFile={
  var Size currentRecord
  mut LogRecords logRecords
  class method mut This(Size currentRecord,mut LogRecords logRecords)
  class method mut This ()=This(
    currentRecord=0Size,
    logRecords=LogRecords()
    )
  mut method Void addRecord(Size balance)=(
    this.currentRecord(this.currentRecord() + 1Size)
    mut LogRecord newRecord = LogRecord()
    newRecord.setRecord(balance=balance)
    this.#logRecords().#add(right=newRecord)
    )
  mut method mut LogRecord getMaximumRecord()=(
    var mut LogRecord max = this.#logRecords().#val(0Size)
    var Size i = 1Size
    while i < this.logRecords().size() (
      mut LogRecord lr = this.#logRecords().#val(i)
      if lr.balance() > max.balance() ( max := lr )
      i += 1Size
      )
    max
    )
  }
PayCard={
  State=Data:{
    Size limit
    var Size unsuccessfulOperations
    var Size balance
    mut LogFile log
    }
  Size id
  mut @Top State state
  class method mut This(Size id,mut @Top State state)
  class method mut This(Size id,@Top Size limit)=This(
    id = id,
    state=\(
      limit = limit,
      unsuccessfulOperations = 0Size,
      balance = 0Size,
      log = LogFile()
      )
    )
  class method mut PayCard createJuniorCard()=(
    This(id=0Size,limit=100Size)
    )
  mut method @Top Bool charge(Size amount)=
    This.charge(state=this.#state(),amount=amount)
  class method Bool charge(mut State state,Size amount)={
    if amount <= 0Size return Bool.false()
    if state.balance()+amount >= state.limit() return Bool.false()
    state.balance(state.balance()+amount)
    return Bool.true()
    }
  mut method Void chargeAndRecord(Size amount)=
    This.chargeAndRecord(state=this.#state(),amount=amount)
  class method Void chargeAndRecord(mut State state,Size amount)=(
    logFile = state.#log()
    if This.charge(state=state,amount=amount) logFile.addRecord(balance=state.balance())
    )
  read method @Top Bool isValid()=This.isValid(state=this.state())
  class method Bool isValid(read State state)=
    state.unsuccessfulOperations()<=3Size
/*  read method @Top Bool isValid()=(//or, without auxiliary method
    read @Top State state=this.state()
    state.unsuccessfulOperations()<=3Size
    )*/
  read method @Top S infoCardMsg()=This.infoCardMsg(state=this.state())
  class method S infoCardMsg(read State state)=
    S"Current debt on card is %state.balance()"
  }
Main={class method Void()=(
  mut PayCard j=PayCard.createJuniorCard()
  _=j.charge(amount=20\)
  _=j.chargeAndRecord(amount=10\)
  Debug(j.infoCardMsg())
  )}