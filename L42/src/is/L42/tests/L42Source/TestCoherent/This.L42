reuse [AdamTowel]

Usable1=Trait:{}
Usable2=Trait:{class method Void ()=Debug(S"hi")}
UnUsable1=Trait:{
  class method This ()
  class method Void foo::0()=Debug(S"hi")
  }
UnUsable2=Trait:{ S f1
  class method This (S f1)
  class method Void foo::0()=Debug(S"hi")
  }
C1=Class:Usable1
C2=Class:Usable2

UnUsableNested = Trait : {
  I foo
  class method This (I foo)
  A = {
    I foo
    class method This (I foo)
    method I ffoo()
    }
  }


Main=(
  {}:Test""(expected=S"""
    |Message This.Class.IncoherentClass([###]):
    |[###]
    |The class is not coherent. It has private state but also abstract methods:[#apply()][###]
    """.trim()
    actual=(_=Class:UnUsable1 catch Message x (x.toS()) error X"unus1"))
  {}:Test""(expected=S"""
    |Message This.Class.IncoherentClass([###]):
    |[###]
    |The class is not coherent. It has private state but also abstract methods:[f1(), #apply(f1)][###]
    """.trim()
    actual=(_=Class:UnUsable2 catch Message x (x.toS()) error X"unus2"))

  {}:Test""(expected=S"""
    |Message This.Class.IncoherentClass([###]):
    |[###]
    |The class is not coherent. ????It has private state but also abstract methods:[f1(), #apply(f1)][###]
    """.trim()
    actual=(_=Class:UnUsableNested catch Message x (x.toS()) error X"unusNested"))
  )

