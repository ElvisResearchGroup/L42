reuse [AdamTowel]

J0=Load:{reuse[JavaServer]}
J=J0(slaveName=S"dbServer{}")

DBLib=Load:{reuse [RawDB]}
DB=Class:Trait(DBLib(javaServer=J)):{...}
Point=Data:{Num x, Num y}
Points=Collection.list(Point)
/*MyQ=Class:DB.Query(
  types=Introspection.Nested.List[
    Introspection.Nested.from(classAny=Points);
    Introspection.Nested.from(classAny=S);
    ]
  sql=S"SELECT * FROM Foo WHERE z!=@name"
  )()
*/
MyQ=DB.query[Points;S;]"SELECT * FROM Foo WHERE z!=@name"
DBAPI=Organize:Data:{
  @Public A=DB.query[Points;S;]"SELECT * FROM Foo WHERE z!=@name"
  @Public B=DB.query[Points;Num;]"SELECT * FROM Foo WHERE x!=@num"
  mut DB db
  @Public class method mut This(mut DB that)=This(db=that)
  @Public mut method mut A a()=A(this.#db())
  @Public mut method mut B b()=B(this.#db())
  }
Main=(
  Debug(S"Hello world1")
  db=DB.#$of(connection=S"jdbc:derby:Test1;create=true")
  Debug(S"Hello world2")
  db.execute(sql=S"CREATE TABLE Foo (x int,y int, z varchar(255))")
  db.execute(sql=S"INSERT INTO Foo (x,y,z) Values (1,2,'A3'),(4,5,'B6'),(7,8,'C9')")
  q=MyQ(db)
  Points ps=q(name=S"Bob")
  Debug(ps)
  Debug(q(name=S"A3"))
  Debug(q(name=S"A3"))
  Debug(DBAPI(db).a()(name=S"Bob"))
  db.execute(sql=S"DROP TABLE Foo")
  )