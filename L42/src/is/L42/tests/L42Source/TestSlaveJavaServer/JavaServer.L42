@Public Fail=Message:{[Message.Guard]}
@Public Event=Data:{S key,S id,S msg
  method This self()=this
  }
@Public EventIterator={...}
Handler$={interface mut method Void >>1(Event event)}
@Public Handler={...}
@Public Handler$Map=Collection.map(key=S val=Handler)
Event$={
  method Event self()
  method Void >>(mut Handler$Map map)=(
    optH=map.#val(key=this.self().key())
    if optH (this.self()>>optH.#get())
    )
  }
@Public mut method mut EventIterator (mut S.List that)
  =EventIterator(this,streams=that)
@Public class method mut This #$of()=this.#$of::0()
class method mut This #$of::0()

@Public mut method Void loadCode(S fullName,S code)[Fail]=(
  S res=This.#$loadCode(fullName=fullName,code=code)
  catch System.JavaException x (exception Fail"%x.text()")
  if res!=S"" (error Fail"%res")
  )
class method S #$loadCode(S fullName,S code)[System.JavaException]=native{
  serverSlave{}{
  return is.L42.platformSpecific.javaEvents.LoadJavaCode.loadJavaCode(#1,#2);
  }} error void

@Public mut method S nextEvent(S keys)[Fail]={
  return This.#$nextEvent(keys=keys)
  catch System.JavaException x exception Fail"%x.text()"
  }
class method S #$nextEvent(S keys)[System.JavaException]=native{
  serverSlave{}{
  return is.L42.platformSpecific.javaEvents.Event.nextEvent(#1);
  }} error void

@Public mut method Void submitEvent(S key, S id, S msg)[Fail]=(
  _=This.#$submitEvent(key=key,id=id,msg=msg)
  catch System.JavaException x exception Fail"%x.text()"
  void
  )
class method S #$submitEvent(S key,S id,S msg)[System.JavaException]=native{
  serverSlave{}{
  is.L42.platformSpecific.javaEvents.Event.submitEvent(#1,#2,#3);
  return "";}} error void

@Public mut method S askEvent(S key, S id, S msg)[Fail]={
  return This.#$askEvent(key=key,id=id,msg=msg)
  catch System.JavaException x exception Fail"%x.text()"
  }
class method S #$askEvent(S key,S id,S msg)[System.JavaException]=native{
  serverSlave{}{
  try{return is.L42.platformSpecific.javaEvents.Event.askEvent(#1,#2,#3).join();}
  catch(java.util.concurrent.CompletionException ce){
    Throwable t=ce.getCause();
    if(t==null){throw ce;}
    if(t instanceof RuntimeException){throw (RuntimeException)t;}
    if(t instanceof Error){throw (Error)t;}
    throw ce;
    }
  }} error void