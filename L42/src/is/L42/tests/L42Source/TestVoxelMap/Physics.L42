TopBox = {mut method mut This self()=this}
Map = {
  read method Bool isFull($.Cell3D cell)
  read method Bool isWater($.Cell3D cell)
  read method Bool isAir($.Cell3D cell)
  read method Double gravity()
  read method I maxRadius() //may be like 1 or 2 
  //TODO: invariants to check for map radius and gravity positive?
  }
Entity = {interface [HasToS]
  var Cilinder geometry
  var $.Vector3D velocity
  var $.Vector3D acceleration
  $.Vector3D pulse
  Bool floatAir
  Bool floatWater
  Bool solid
  mut method Void ping(mut TopBox that)
  //no, it is a trait...
  }
Entity$List = Collection.list(Entity)
Entity$ListList = Collection.list(Entity$List)
Entity$Cells = Class : Data : 
  Map2DTrait['L=>Entity$ListList;'E=>Entity$List] : {
  Box = {}
  class method Void base(I x, I y, mut Entity$ListList cells) =
    cells.#add(right=Entity$List())
  class method S toS(I x, I y, read Entity$List val) =
    val.size().toS()
  capsule method mut Box #box()
  }

Entity$CollisionFail = Message : {[Message.Guard]}
Entity$LList = Collection.linkedList(Entity)
Entity$LLLList = Collection.linkedList(Entity$LList)

Entity$CellsMap = Data : {...}