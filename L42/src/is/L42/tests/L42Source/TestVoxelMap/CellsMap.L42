class method mut This (capsule Map map) = (
  capsule cells = Entity$Cells()
  capsule box = Box(inner=cells.#box(), es=\(), map=map)
  This(box=box)
  )
Box = {
  class method mut This (
    mut Entity$Cells.Box inner
    mut Entity$List es
    mut Map map)
  mut Entity$Cells.Box inner
  mut Entity$List es
  mut Map map
  mut method mut TopBox self()
  mut method Void ping()
  read method Void noOverlappingMap(read Entity e) = (
    (x1,y1,z1) = e.geometry().box().lowCorner()
    (x2,y2,z2) = e.geometry().box().highCorner()
    for x in Range(x1 to=x2) 
      for y in Range(y1 to=y2) 
        for z in Range(z1 to=z2) 
          this.noOverlapMap(e, cell=\(x=x, y=y,z=z))
    )
  read method read Entity$LList okOverlapping(read Entity e) = (
    hits = this.overlapping(e=e)
    var solidCount=0I
    for ei in hits ( if ei.solid() solidCount+=1I )
    if e.solid() && solidCount==0I error X"Solid object does not impact with itself"
    if e.solid() && solidCount!=1I (
      var msg=S""
      for ei in hits if ei.solid() (msg++=S"%ei; ")
      error Entity$CollisionFail"""
        |Impact between entity %e and other entities : [%msg]
        """
      )
    hits
    )
  
  read method read Entity$LList overlapping(read Entity e) = (
    var read Entity$LList res = Entity$LList.Empty()
    for p in e.geometry().box().expand(this.map().maxRadius()).vals2D() (
      for read ei in this.inner()(p) (
        res++=this.overlapping(e with=ei)
        )
      )
    res
    )
  read method Bool checkNoOverlap(mut Entity e) = {
    hits = this.overlapping(e=e)
    for ei in hits ( if ei.solid() return Bool.false() )
    for p in e.geometry().box().vals3D() (
      if !this.map().isFull(cell=p) return Bool.false()
      )
    return Bool.true()
    }
  read method Void noOverlapMap(read Entity that,$.Cell3D cell) = (
    if this.map().isFull(cell=cell) error Entity$CollisionFail"""
      | Impact between entity %that and full part of the map in position %cell
      """
    )
  read method read Entity$LList overlapping(read Entity that, read Entity with) =
    if !that.geometry().impact(cilinder=with.geometry()) Entity$LList.Empty()
    else Entity$LList.Empty().push(with)

  mut method Void remove(mut Entity e) = {
    p = e.geometry().bottomCenter()
    l = this.#inner().#val(p.to2D().toCell())
    for mut e0 in l (
      eq = System.mutReferenceEquality(e and=e0)
      if eq return void
      )
    error X"unreachable"
    }
  mut method Void add(mut Entity e) = (
    p = e.geometry().bottomCenter()
    l = this.#inner().#val(p.to2D().toCell())
    l.#add(right=e)
    )
  mut method Void move(mut Entity e) = (
    this.remove(e=e)
    e.acceleration(\acceleration+\pulse)
    e.velocity(\velocity+\acceleration)
    var oldG = e.geometry()
    var newG = oldG.with(bottomCenter=\bottomCenter+e.velocity())
    e.geometry(newG)
    for r in Range(3I) (
      if this.checkNoOverlap(e=e) ( Break() )
      if r == 2I ( Break(e.geometry(oldG)) )
      (x1,y1,z1) = oldG.bottomCenter()
      (x2,y2,z2) = newG.bottomCenter()
      newG:=oldG.with(bottomCenter=\(
        x=(x1+x2)/2Double
        y=(y1+y2)/2Double
        z=(z1+z2)/2Double
        ))
     e.geometry(newG)
     )
   this.moveGravity(e=e)
   this.add(e=e)
   )
  mut method Void moveGravity(mut Entity e) = (
    g = this.map().gravity()
    oldG = e.geometry()
    oldP = e.geometry().bottomCenter()
    newP = oldP.with(z=(\z-g).max(0\))
    var newG = oldG.with(bottomCenter=\bottomCenter+e.velocity())
    e.geometry(newG)
    if this.checkNoOverlap(e=e) (
      e.velocity(\velocity.with(z=\z-g))
      )
    else ( e.geometry(oldG) )
    )
  }
  
capsule Box box

@Cache.Clear class method Void ping(mut Box box) = (
  box.ping()
  for mut e in box.#es() e.ping(box.self())
  )
  
@Cache.Clear class method Void move(mut Box box) =
  for mut e in box.#es() box.move(e=e)

@Cache.Now class method Void elemsOk(read Box box) =
  Entity$Cells.invariant(box=box.inner())
  
@Cache.Now class method read Entity$LLLList noOverlap(read Box box) = (
  var read res = Entity$LLLList.Empty()
  for i in Range(box.es().size()).reverse() (
    e = box.es().val(i)
    res:=res.push(box.okOverlapping(e=e))
    box.noOverlappingMap(e=e)
    //TODO: more checks: 
    //all entities in es are on the map and vice versa //HOW???
    //all entites are in a point that corresponds to their position
    )
  res
  )