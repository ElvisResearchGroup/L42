Margin = {
  class method Size maxX()
  class method Size maxY()
  class method Size maxZ()
  }
Coords = {
  class method Size(Size x,Size y) =  (x * Margin.maxY()) + y
  class method Size x(Size that)=that/Margin.maxY()
  class method Size y(Size that)=that.mod(Margin.maxY()) 
  }
InRangeTrait = Trait : {...}
InRangeCell = Class : InRangeTrait['U=>Size] : {
  class method Bool inRange(Size that, Size to) = that.isInRange(0\ to=to)

  class method Size bound(Size that, Size to) = that.inRange(0\ to=to)
  }
InRangeDouble = Class : InRangeTrait['U=>Double] : {
  class method Bool inRange(Double that, Size to) = (
    m = to.toDouble() + 0.4999Double
    that >= Double"-0.4999" && that <= to.toDouble()
    )
  class method Double bound(Double that, Size to) = {
    if that < Double"-0.4999" return Double"-0.4999"
    m = to.toDouble() + 0.4999Double
    if that > m return m
    return that 
    }
  }

//--------------
Cell2D = Data : {...}
Cell2D$List = Collection.list(Cell2D)
Cell2D$Opt = Collection.optional(Cell2D)
Cell2D$ = {...}
    
Point2D = Data : {
  @Public Double x
  @Public Double y
  @Public class method This (Double x, Double y) = 
    This.of(x=InRangeDouble.bound(x=x), y=InRangeDouble.bound(y=y))
  class method This of(Double x, Double y)
  }
Point2D$List = Collection.list(Point2D)
Point2D$Opt = Collection.optional(Point2D)

Delta2D = Data : {
  Size x, Size y
  method Cell2D +1 (Cell2D cell) = this + cell
  method Cell2D + (Cell2D cell) = \(x=this.x()+cell.x(), y=this.y()+cell.y())
  method This + (This that) = \(x=this.x()+that.x(), y=this.y()+that.y())
  }
    
Vector2D = Data : {...}
Vector2D$List = Collection.list(Vector2D)
Vector2D$Opt = Collection.optional(Vector2D)


//--------------------
TraitE = Trait : { [HasToS]
  class method This base()
  read method Bool == (read This that)
  read method Bool != (read This that) 
  }

Map2DTrait = Trait : {...}
class method Library map2D(class Any that,Name base)[_] = 
  Class : Map2DTrait
    ['E.base()=>base.with(path='E)]
    ['L=>that;'E=>that*'val(that)]