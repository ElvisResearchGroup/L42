reuse [AdamTowel]
Queries={...}

Lib=Trait:{reuse [AdamTowel]
  DB=Trait:{...}
  Top={
    class method Trait dbTrait()=DB()
    class method Library(S that, class Any javaServer)[Trait.InvalidMap]={
      t=Trait.LiftS(that)['#apply()=>'connection()]
      return Class:Organize:this.dbTrait()['J=>javaServer]:t
      catch Trait.InvalidMap im exception im
      whoops Message.Guard
      }
    }
  }
DeployRawDB = Deploy.module(
  url='RawDB
  code=Lib.code()
  name='Top
  )

J0=Load:{reuse[JavaServer]}
J=J0(slaveName=S"dbServer{}")
DBLib=Load:{reuse [#$RawDB]}
DB=DBLib(S"jdbc:derby:Test1;create=true",javaServer=J)

Main2=(
  outs=S.List()
  db=DB.#$of()
  (db.execute(sql=Queries.drop())
  catch DB.Fail f (Debug(f)) void)
  db.execute(sql=Queries.createT())
  db.execute(sql=Queries.insert())
  db.executeQuery(sql=Queries.select())
  while db.next() (
    id=db.val(label=S"id")
    name=db.val(label=S"name")
    age=db.val(label=S"age")
    Debug(S"%id %name %age")
    outs.add(right=S"%id %name %age")
    )
  db.execute(sql=Queries.insert2())
  db.executeQuery(sql=Queries.select())
  while db.next() (
    id=db.val(label=S"id")
    name=db.val(label=S"name")
    age= db.val(label=S"age")
    Debug(S"%id %name %age")
    outs.add(right=S"%id %name %age")
    )
  {}:Test"fromDB1"(expected=S"1 Bob 25"  actual=outs.val(0\))
  {}:Test"fromDB2"(expected=S"1 Bob 25"  actual=outs.val(1\))
  {}:Test"fromDB3"(expected=S"2 Alice 27"  actual=outs.val(2\))
  {}:Test"fromDB4"(outs.size()==3Size)
  tables=S.List()
  db.queryTables()
  while db.next() (
    name=db.val(label=S"TABLE_NAME")
    tables.add(right=name)
    )
  Debug(tables)
  {}:Test"fromDB5"(expected=S"[PERSON]"  actual=tables)
  cols=S.List()
  db.queryColums(tableName=tables.left())
  cName=db.findColumn(label=S"COLUMN_NAME")
  cType=db.findColumn(label=S"TYPE_NAME")
  while db.next() (
    name=db.val(cName)
    type=db.val(cType)
    cols.add(right=S"%name %type")
    )
  Debug(cols)
  {}:Test"fromDB6"(expected=S"[ID INTEGER; NAME VARCHAR; AGE INTEGER]"  actual=cols)
  db.execute(sql=Queries.drop())
  db.kill()
  void
  )