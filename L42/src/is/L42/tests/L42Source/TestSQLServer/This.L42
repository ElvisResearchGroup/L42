reuse [AdamTowel]
J0=Load:{reuse[#$JavaServer]}
J=J0(slaveName=S"dbServer{}")
JavaCode={...}
Queries={...}
DB=Organize:Data:{
  Fail=Message:{[Message.Guard]}
  mut J j
  @Public class method mut DB #$of(S connection)[Fail]=(
    j=J.#$of()
    j.loadCode(fullName=S"db.DB",code=JavaCode(url=connection))
    catch J.Fail x exception Fail"%x" // better then using .with(cause=x)?
    DB(j=j)
    )
  @Public mut method Void execute(S sql)[Fail]=(
    _=this.#j().askEvent(key='DB, id='execute(sql),msg=sql)
    catch J.Fail x exception Fail"%x"
    void)
  @Public mut method Void executeQuery(S sql)[Fail]=(
    _=this.#j().askEvent(key='DB, id='executeQuery(sql),msg=sql)
    catch J.Fail x exception Fail"%x"
    void)
  @Public mut method Bool next()[Fail]=(
    res=this.#j().askEvent(key='DB, id='next(),msg=S"")
    catch J.Fail x exception Fail"%x"
    res==S"true")
  @Public mut method S get(S label)[Fail]={
    return this.#j().askEvent(key='DB, id='get(label),msg=label)
    catch J.Fail x exception Fail"%x"
    }
  @Public mut method Void kill()=(
    _=this.#j().askEvent(key='DB, id='kill(),msg=S"")
    catch J.Fail _ (void)
    error X"unreachable")
  }
Main2=(
  db=DB.#$of(connection=S"jdbc:derby:Test1;create=true")
  db.execute(sql=Queries.drop())
  db.execute(sql=Queries.createT())
  db.execute(sql=Queries.insert())
  db.executeQuery(sql=Queries.select())
  while db.next() (
    id=db.get(label=S"id")
    name=db.get(label=S"name")
    age=db.get(label=S"age")
    Debug(S"%id %name %age")
    )
  db.execute(sql=Queries.insert2())
  db.executeQuery(sql=Queries.select())
  while db.next() (
    id=db.get(label=S"id")
    name=db.get(label=S"name")
    age= db.get(label=S"age")
    Debug(S"%id %name %age")
    )
  db.kill()
  void
  )
Main=(
  Debug(S"Start1")
  j=J.#$of()
  j.loadCode(fullName=S"db.DB",code=JavaCode(url=S"jdbc:derby:Test1;create=true"))
  Debug(S"Start2")
  //_=j.nextEvent(keys='DB)//wait for the first event timeout
  _=j.askEvent(key='DB, id='execute(sql),msg=Queries.drop())
  _=j.askEvent(key='DB, id='execute(sql),msg=Queries.createT())
  _=j.askEvent(key='DB, id='execute(sql),msg=Queries.insert())
  _=j.askEvent(key='DB, id='executeQuery(sql),msg=Queries.select())
  while(Bool.true()) (
    res=j.askEvent(key='DB, id='next(),msg=S"")
    if res!=S"true" Break()
    id=j.askEvent(key='DB, id='get(label),msg=S"id")
    name= j.askEvent(key='DB, id='get(label),msg=S"name")
    age= j.askEvent(key='DB, id='get(label),msg=S"age")
    Debug(S"%id %name %age")
    )
  _=j.askEvent(key='DB, id='execute(sql),msg=Queries.insert2())
  _=j.askEvent(key='DB, id='executeQuery(sql),msg=Queries.select())
  while(Bool.true()) (
    res=j.askEvent(key='DB, id='next(),msg=S"")
    if res!=S"true" Break()
    id=j.askEvent(key='DB, id='get(label),msg=S"id")
    name= j.askEvent(key='DB, id='get(label),msg=S"name")
    age= j.askEvent(key='DB, id='get(label),msg=S"age")
    Debug(S"%id %name %age")
    )
  _=j.askEvent(key='DB, id='kill(),msg=S"")
  void
  )
