reuse [AdamTowel]
Queries={...}

Lib=Trait:{reuse [AdamTowel]
  DB=Trait:{...}
  Top={
    class method Library(class Any javaServer)[Trait.InvalidMap]={
      return Class:Organize:DB['J=>javaServer]
      catch Trait.InvalidMap im exception im
      whoops Message.Guard
      }
    }
  }
DeployRawDB = Deploy.module(
  url='RawDB
  code=Lib.code()
  name='Top
  )

J0=Load:{reuse[JavaServer]}
J=J0(slaveName=S"dbServer{}")
DBLib=Load:{reuse [#$RawDB]}
DB=DBLib(javaServer=J)

Main2=(
  outs=S.List()
  db=DB.#$of(connection=S"jdbc:derby:Test1;create=true")
  (db.execute(sql=Queries.drop())
  catch DB.Fail f (Debug(f)) void)
  db.execute(sql=Queries.createT())
  db.execute(sql=Queries.insert())
  db.executeQuery(sql=Queries.select())
  while db.next() (
    id=db.get(label=S"id")
    name=db.get(label=S"name")
    age=db.get(label=S"age")
    Debug(S"%id %name %age")
    outs.add(right=S"%id %name %age")
    )
  db.execute(sql=Queries.insert2())
  db.executeQuery(sql=Queries.select())
  while db.next() (
    id=db.get(label=S"id")
    name=db.get(label=S"name")
    age= db.get(label=S"age")
    Debug(S"%id %name %age")
    outs.add(right=S"%id %name %age")
    )
  db.execute(sql=Queries.drop())
  db.kill()  
  {}:Test"fromDB1"(expected=S"1 Bob 25"  actual=outs.val(0\))
  {}:Test"fromDB2"(expected=S"1 Bob 25"  actual=outs.val(1\))
  {}:Test"fromDB3"(expected=S"2 Alice 27"  actual=outs.val(2\))
  {}:Test"fromDB4"(outs.size()==3Size)
  void
  )