OptNative=Trait:{...}
OptOps=OptNative+{...}
@Public class method Trait optionalTrait()=OptOps()    
@Public class method Library optional(class Any that)={
  return Class$Relax:this.optionalTrait()['Elem=>that]
  catch Trait$InvalidName e error e
  catch Trait$InvalidMap e error e
  catch Trait$ClassClash e error e
  catch Trait$MethodClash e error e
  }

ListNative=Trait:{...}
ListOps=ListNative + {...}
@Public class method Trait listTrait()=ListOps()
ListEqOps=Trait:{...}
@Public class method Trait listEqTrait()={
  return this.listTrait()+ListEqOps
  catch Trait$ClassClash e error e
  catch Trait$MethodClash e error e
  }
EqBase=Trait:{
  Elem={read method Bool readEquality(read This that)}
  class method Bool equals(read Elem a,read Elem b)=a.readEquality(b)
  }
@Public class method Library list(class Any that)[Trait$InvalidMap]={
  return Class$Relax:(this.listEqTrait()+EqBase)['Elem=>that]
  catch Trait$InvalidName e error e
  catch Trait$ClassClash e error e
  catch Trait$MethodClash e error e
  }
@AbstractTowel{collection}