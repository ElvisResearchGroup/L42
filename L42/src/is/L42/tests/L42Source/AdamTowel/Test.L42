class method WithName #from(StringBuilder stringLiteral)=
  WithName(name=stringLiteral.toS())
WithName={
  S name
  class method This(S name)
  method Condition(Bool that)=Condition(name=this.name(),cond=that,message=S"")
  }
Condition={
  S name
  Bool cond
  S message
  class method This(S name,Bool cond,S message)
  method This #from(StringBuilder stringLiteral)=
    This(name=this.name(),cond=this.cond(),message=this.message()++stringLiteral.toS())
  method Void :1(Library pos)=Debug.of()<:Debug.testCondition(pos=pos,name=this.name(),cond=this.cond(),message=this.message())
  }
/*
{}:Test"Tom is bigger then Tim"( tom.height()>tim.height() )"oh No!"
{}:Test"Genoa and Wellington are livable"( Cityes.livable() 
  expectedIn=\[\"...Genoa...Wellington...";\"...Wellington...Genoa..."])
Testing should support Bool, 2 Strings and 2 Any, doing structural equivalence on the 2 Anys
expected/expectedIn for strings, not sure if it good to have expectedEqIn for Anys..
may be expectedIn is just overkill
my be have a contains for the strings?
*/