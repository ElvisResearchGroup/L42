[This1.HasToS]
method This0 #plusplus0(This0 that)=native{trusted:OP+} error void
read method This0 toS()=native{trusted:toS} error void
read method This1.Size size()=native{trusted:size} error void
read method This1.Size toInt()=native{trusted:toInt} error void
read method This1.Num toNum()=native{trusted:toNum} error void
method This0 sum(This0 that)=native{trusted:OP+} error void
class method This0 #from(This1.StringBuilder stringLiteral)=stringLiteral.toS()

read method This1.Bool #equalequal0(read This that)=native{trusted:OP==} error void
read method This1.Bool #bangequal0(read This that)=(This1.Bool tmp=this.#equalequal0(that=that) tmp.not())

method This subString(This1.Size start,This1.Size end)=native{trusted:subString}error void
method This1.Bool startsWith(This that)=native{trusted:startsWith}error void
method This1.Bool endsWith(This that)=native{trusted:endsWith}error void
method This trim()=native{trusted:trim}error void
class method This dq()=This<:class This.#from(stringLiteral=(
  mut This1.StringBuilder b=This1.StringBuilder<:class This1.StringBuilder.#stringLiteralBuilder()
  Void v=b.#sdQuote()
  b
  ))
class method This nl()=This<:class This.#from(stringLiteral=(
  mut This1.StringBuilder b=This1.StringBuilder<:class This1.StringBuilder.#stringLiteralBuilder()
  Void v=b.#snewLine()
  b
  ))

#norm{nativeKind=String,nativePar=This1.ParseError
  typeDep=This0, This1.Size,This1.Num, This1.StringBuilder,This1.HasToS,This1.Bool,This1.ParseError 
  coherentDep=This,This1.StringBuilder,This1.ParseError
  refined=toS()
  }
