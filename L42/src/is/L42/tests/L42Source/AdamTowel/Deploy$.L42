class method Void module(Url url,Library code,Name name)
  [Trait$InvalidName,Trait$InvalidMap,Trait$MethodClash,Trait$ClassClash]
  =Deploy.towel(url=url,code=this.module(code,n=name).code())
class method Trait module(Library that,Name n)
  [Trait$InvalidName,Trait$InvalidMap,Trait$MethodClash,Trait$ClassClash]
  =(
  Debug(S"deploy module start %n")
  at=Name"AbstractTowel"
  //l=removeUnusedCode(l,that)
  top=Introspection.Nested.from(library=that)
  i=top.nested(name=at)
  acc=Trait.Acc(Name$Mapping())
  for nc in top.nesteds() {
    name=nc.nameFromRoot()
    if name==n || name==at return void
    annotated=nc.innerDoc().annotation(nested=i)
    if annotated return acc.#squareAdd(deep=name=>at.toS()++name)
    return acc.#squareAdd(hide=name)
    }
  Trait(that)(squareBuilder=acc)[deepClear=at;deep=n=>'This]
  )