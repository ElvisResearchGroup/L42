//Step 1: the minimal infrastructure to deploy a towel
S={#norm{nativeKind=String, nativePar=This1.ParseErr
  typeDep=This1.ParseErr,coherentDep=This1.ParseErr,
  }}
ParseErr={#norm{nativeKind=LazyMessage}}
Debug={
  class method This of()
  method Void deployLibrary(This1.S that,Library lib)=
    native{trusted:deployLibrary} error void
    #norm{typeDep=This, This1.S, nativeKind=TrustedIO}        
  }
StringBuilder={
  class method mut This of()
  mut method Void _a()=
    native{trusted:'a'} error void
  read method This1.S toS()=
    native{trusted:toS} error void
    #norm{typeDep=This0, This1.S, nativeKind=StringBuilder}
  }
//Step 2: barely usable Strings, booleans and Size
DeployAAA=(
  mut StringBuilder sb=StringBuilder.of()
  sb._a() sb._a() sb._a()
  lib={//now, deploying aaa: Strings, booleans and Size
    HasToS={interface read method S toS()}
    //HasEquals={ }//NOPE: == hava a base. A trait can add to a class extends any, and to an interface (as a new base) and to the ones implementing the base.
    //List can take a class method Boolean equals(Elem e1,Elem e2)
    Break={class method Void ()[Void]=exception void}
    Bool={...}
    Size={...}
    S={...}
    ParseError={
      class method This #apply()
      class method mut This #apply(This1.S that)=native{trusted:lazyMessageK} error void
      read method This1.S text()=native{trusted:get}error void
      mut method Void text(This1.S that)=native{trusted:setMsg}error void
      #norm{typeDep=This,This1.S, coherentDep=This nativeKind=LazyMessage}
      }
    Url={...}
    Debug={...}
    StringBuilder={...}
    Test={...}
    Log={...}
    Meta={...}
    Name={...}
    Trait={...}
    Class={...}
    Deploy={...}
    Message={...}
    Guard={interface [Message]}
    Assertion={interface[Message]}
    PrivateOps={...}
    X=Class:Message:{...}
    
    IterationIncomplete=Class:Message:{[Guard]}
    NoElementInOpt=Class:(Message.NativeTrait()+{[Guard]})
    OutOfBounds=Class:(Message.NativeTrait()+{[Guard]})
    ElementNotImm=Class:(Message.NativeTrait()+{[Guard]})
    ElementNotMut=Class:(Message.NativeTrait()+{[Guard]})
    
    Opt={...}
    ListT={
      ListNative=Trait:{...}
      ListOps=Trait:{...}
      ListEqOps=Trait:{...}
      class method Trait(class Any that)=(ListOps+ListNative)['Elem>that]
      class method Trait(class Any withEq)=(ListOps+ListNative+ListEqOps)['Elem>withEq]
      }
    Strings=Class:(ListT(withEq=S)+{
      class method Bool equals(read S a,read S b)=a==b})

    Cache={...}
    Data={...}
    }
  Debug.of().deployLibrary(sb.toS(),lib=lib)
  )
//Deploy step2:
DeployAdamTowel={reuse[#$aaa]
  AddOns=Deploy.towel(url='AdamTowel,
    code=Class:(Trait:{...}+{reuse[#$aaa]})
    ) 
  }
//Testing step2:
TestsAdamTowel={...}