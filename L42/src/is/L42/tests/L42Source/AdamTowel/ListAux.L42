//list.reduce(0\)(for e in \vals \res<=\acc+e)
//list.reduce()(for e in \vals \res<=\acc+e)
//list.matchAny()(for e in list \res<=e.foo())
//Strings(for e in list \res<=e.bar())
//Strings[S"e1";S"e2";S"e3";]
//also, we can implement range in List, and just keep it abstract until we fix Size
MatchTrait=Trait:{
  var Bool pass
  read This1 vals
  class method lent This(Bool pass,read This1 vals)
  lent method Bool (Void that)=this.pass()
  lent method lent This res()=this
  }
read method Bool matchAny()=MatchAny(pass=Bool.false(),vals=this)
MatchAny=Class:(MatchTrait+{lent method Void <=(Bool b)[Void]=if b (this.pass(b) Break())})
read method Bool matchAny()=MatchAll(pass=Bool.true(),vals=this)
MatchAny=Class:(MatchTrait+{lent method Void <=(Bool b)[Void]=if !b (this.pass(b) Break())})
read method Bool matchNone()=MatchNone(pass=Bool.true(),vals=this)
MatchAny=Class:(MatchTrait+{lent method Void <=(Bool b)[Void]=if b (this.pass(!b) Break())})


read method read Iterator cut()=Iterator(start=0\,end=this.size(),cut=\.true(),list=this)
mut method mut Iterator #cut()=Iterator(start=0\,end=this.size(),cut=\.true(),list=this)

read method read Iterator vals(Size start)=Iterator(start=start,end=this.size(),cut=\.false(),list=this)
mut method mut Iterator #vals(Size start)=Iterator(start=start,end=this.size(),cut=\.false(),list=this)
read method read Iterator cutVals(Size start)=Iterator(start=start,end=this.size(),cut=\.true(),list=this)
mut method mut Iterator #cutVals(Size start)=Iterator(start=start,end=this.size(),cut=\.true(),list=this)

read method read Iterator vals(Size end)=Iterator(start=\0,end=end,cut=\.false(),list=this)
mut method mut Iterator #vals(Size end)=Iterator(start=\0,end=end,cut=\.false(),list=this)
read method read Iterator cutVals(Size end)=Iterator(start=\0,end=end,cut=\.true(),list=this)
mut method mut Iterator #cutVals(Size end)=Iterator(start=\0,end=end,cut=\.true(),list=this)

read method read Iterator vals(Size start,Size end)=Iterator(start=start,end=end,cut=\.false(),list=this)
mut method mut Iterator #vals(Size start,Size end)=Iterator(start=start,end=end,cut=\.false(),list=this)
read method read Iterator cutVals(Size start,Size end)=Iterator(start=start,end=end,cut=\.true(),list=this)
mut method mut Iterator #cutVals(Size start,Size end)=Iterator(start=start,end=end,cut=\.true(),list=this)

Iterator={
  Size start
  Size end
  Bool cut
  mut This1 list
  class method read This(Size start,Size end,Bool cut,fwd mut This1 list)
  read method read This #iterator()=this
  mut method mut This #varIterator()=this
  read method Size #startIndex()=0Size
  read method Bool #hasElem(Size that)=that<this.end()
  read method Bool #incomplete(Size that)=that!=this.end()
  read method Elem #elem#imm(Size that)=this.list().val(that)
  mut method mut Elem #elem#mut(Size that)=this.#list().#val(that)
  read method Elem #elem#default(Size that)=this.list().#elem#imm(that)
  read method read Elem #elem#read(Size that)=this.list().readVal(that)
  mut method mut Elem #update#mut(Size that, mut Elem val)=(this.#list().#set(that,val=val) val)
  mut method Elem #update#imm(Size that, Elem val)=(this.#list().set(that,val=val) val)
  mut method Elem #update#default(Size that, Elem val)=this.#list().#update#imm(that,val=val)
  read method Void #close(Size that)=
    if this.#incomplete(that) error S"multi for skipped some elements"
  }
