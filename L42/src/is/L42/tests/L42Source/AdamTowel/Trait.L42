Lifted={interface
  class method Library code()
  class method Trait +(Library lib)
  class method Trait +1(Library lib)
  }
ClassOperators={class method Trait()=Trait(code={#norm{}})}
Library code
class method This(Library code)
class method This(Library that)=This(code=that)
method This :(Library lib)=This(code=Meta().simpleSum(a=this.code(),b=lib))
method This :(class Lifted lifted)=This(code=Meta().simpleSum(a=this.code(),b=lifted.code()))
method This :(This trait)=This(code=Meta().simpleSum(a=this.code(),b=trait.code()))
method This +(Library lib)=This(code=Meta().simpleSum(a=this.code(),b=lib))
method This +1(Library lib)=This(code=Meta().simpleSum(a=lib,b=this.code()))
method This +(class Lifted lifted)=This(code=Meta().simpleSum(a=this.code(),b=lifted.code()))
method This +1(class Lifted lifted)=This(code=Meta().simpleSum(a=lifted.code(),b=this.code()))
method This +(This trait)=This(code=Meta().simpleSum(a=this.code(),b=trait.code()))

Acc={
  var Meta that
  class method mut This(Meta that)
  class method mut Acc ##apply#squareBuilder()=Acc(Meta())
  class method Bool #shortCircutSquare()=Bool.true()
  mut method Void #squareAdd(Meta that)=this.that(\that.mergeMap(that)) 
  }
method This (mut Acc squareBuilder)=
  This(code=squareBuilder.that().applyMap(this.code()))


method Library #toLibrary()=
  Meta().simpleSum(a=Meta().resource(this.code()),b=ToLibrary())

ToLibrary=Meta().resource({[Lifted]
  class method Library ()
  method code()=This()
  method +(lib)=Trait(code=Meta().simpleSum(a=this.code(),b=lib))
  method +1(lib)=Trait(code=Meta().simpleSum(a=lib,b=this.code()))
  class method Trait (mut Acc squareBuilder)=
    Trait(code=squareBuilder.that().applyMap(this.code()))
  ClassOperators={class method Trait()=Trait(code=This1.code())}
  })