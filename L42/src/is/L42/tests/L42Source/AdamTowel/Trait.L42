@Public Lifted={interface
  class method Trait()
  class method Library code()
  class method Trait +(Library lib)[Trait$ClassClash,Trait$MethodClash]
  class method Trait +1(Library lib)[Trait$ClassClash,Trait$MethodClash]
  class method Introspection$Nested nested()
  }
@Public ClassOperators={class method Trait()=Trait({#norm{}})}
@Public Library code
class method This(Library code)
@Public class method This(Library that)=This(code=that)

class method This sum::0(Library a,Library b)[Trait$ClassClash,Trait$MethodClash]={
  return This(Name$Mapping().simpleSum(a=a,b=b))
  catch error Trait$ClassClash e exception e
  catch error Trait$MethodClash e exception e
  } 
@Public method This +(Library lib)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=this.code(),b=lib)
@Public method This +1(Library lib)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=lib,b=this.code())
@Public method This +(class Lifted lifted)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=this.code(),b=lifted.code())
@Public method This +1(class Lifted lifted)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=lifted.code(),b=this.code())
@Public method This +(This trait)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=this.code(),b=trait.code())
@Public method This :(Library lib)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=this.code(),b=lib)
@Public method This :(class Lifted lifted)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=this.code(),b=lifted.code())
@Public method This :(This trait)[Trait$ClassClash,Trait$MethodClash]=This.sum::0(a=this.code(),b=trait.code())
@Public method Introspection$Nested nested()=Introspection$Nested.from(library=this.code())

@Public Acc={
  var Name$Mapping that
  class method mut This(Name$Mapping that)
  class method mut This (mut This squareBuilder)=squareBuilder
  class method mut This ##apply#squareBuilder()=Acc(Name$Mapping())
  class method Bool #shortCircutSquare()=Bool.true()
  mut method Void #squareAdd(Name$Mapping that)=this.that(\that.mergeMap(that))
  mut method Void #squareAdd(Name clear)=this.#squareAdd(clear->Name"")
  mut method Void #squareAdd(Name deepClear)=this.#squareAdd(deep=deepClear->Name"")
  mut method Void #squareAdd(Name$Mapping deep)=this.that(\that.mergeMap(deep=deep))
  mut method Void #squareAdd(Name hide)=this.#squareAdd(deep=hide=>Name"")
  }
@Public method This (read Acc squareBuilder)[Trait$InvalidName,Trait$InvalidMap,Trait$ClassClash,Trait$MethodClash]=This({
  return squareBuilder.that().applyMap(this.code())
  catch error Trait$InvalidName e exception e
  catch error Trait$InvalidMap e exception e
  catch error Trait$ClassClash e exception e
  catch error Trait$MethodClash e exception e
  })

@Public method Library #toLibrary()=
  Name$Mapping().simpleSum(a=Name$Mapping().resource(this.code(),name=Name"code()".that()),b=ToLibrary.of())

//The code must have 'class method Library code()'
@Public class method Library delayedCode(Library that)[Trait$ClassClash,Trait$MethodClash]=
  (Trait(that)+ToLibrary.of()).code()

ToLibrary=Name$Mapping().resource({[Lifted]
  method ()=Trait(this.code())
  method +(lib)=ClassOperators()+lib
  method +1(lib)=lib+ClassOperators()
  class method Trait (mut Acc squareBuilder)[Trait$InvalidName,Trait$InvalidMap,Trait$ClassClash,Trait$MethodClash]=
    ClassOperators()(squareBuilder=squareBuilder)
  ClassOperators={class method Trait()=This1()}
  method nested()=ClassOperators().nested()
  },name=Name"of()".that())
@AbstractTowel{trait}