Elem={}
class method mut This (mut This squareBuilder)=squareBuilder
class method mut This ##apply#squareBuilder()=This.empty()
class method Bool #shortCircutSquare()=Bool.true()
mut method Void #add(Elem that)=this.add(immVal=that)
mut method Void #add(mut Elem mutVal)=this.add(mutVal=mutVal)
mut method Void #yield(Void that)=void
mut method mut This list()=this
read method read This #iterator()=this
mut method mut This #varIterator()=this
read method Size #startIndex()=0Size
read method Bool #hasElem(Size that)=that<this.size()
read method Bool #incomplete(Size that)=that!=this.size()
read method Elem #elem#imm(Size that)=this.val(that)
mut method mut Elem #elem#mut(Size that)=this.#val(that)
read method Elem #elem#default(Size that)=this.#elem#imm(that)
mut method mut Elem #update#mut(Size that, mut Elem val)=(this(that,mutVal=val) val)
mut method Elem #update#imm(Size that, Elem val)=(this(that,immVal=val) val)
mut method Elem #update#default(Size that, Elem val)=this.#update#imm(that,val=val)
read method Void #close(Size that)=
  if this.#incomplete(that) error S"multi for skipped some elements"
mut method Void add(Elem that)=this.add(immVal=that)

class method mut This empty()
read method Bool isEmpty()
read method Size size()
read method read Elem readVal(Size that)
read method imm  Elem val(Size that)
mut method mut Elem #val(Size that)
mut method Void #apply(Size that,Elem immVal)
mut method Void #apply(Size that,mut Elem mutVal)
mut method Void add(Elem immVal)
mut method Void add(mut Elem mutVal)

OptElem=Class:Opt(Elem)
ElemBox={
  read This1 list
  var OptElem elem
  class method lent This(read This1 list,OptElem elem)
  lent method Void #add(Elem that)=this.elem(OptElem(that))
  //mut method Void #add(mut Elem mutVal)=this.add(mutVal=mutVal)
  read method Elem (Void that)=this.acc()
  read method Elem acc()=this.elem().get()
  lent method lent This res()=this
  lent method Void <=(Elem that)=this.elem(OptElem(that))
  //may still add left/right, withoutLeft/witoutRight to delegate on list ones
  }
//myList.reduce[\left;for e in \withoutLeft \reduce(\acc+e)]
//myList.reduce(\left)(for e in \withoutLeft \res<=\acc+e)
read method lent ElemBox reduce()=ElemBox(list=this,elem=OptElem())
read method lent ElemBox reduce(Elem that)
  =ElemBox(
   list=this,
   elem=
   OptElem(that)
   )