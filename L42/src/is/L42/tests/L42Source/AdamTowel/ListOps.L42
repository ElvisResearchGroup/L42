Elem={}
class method mut This (mut This squareBuilder)=squareBuilder
class method mut This ##apply#squareBuilder()=This()
class method Bool #shortCircutSquare()=Bool.true()
mut method Void #squareAdd(Elem that)=this.add(right=that)
mut method Void #squareAdd(mut Elem mutVal)=this.#add(right=mutVal)
mut method Void #yield(Void that)=void
read method read This vals()=this
mut method mut This #vals()=this
read method read This #iterator()=this
mut method mut This #varIterator()=this
read method Size #startIndex()=0Size
read method Bool #hasElem(Size that)=that<this.size()
read method Bool #incomplete(Size that)=that!=this.size()
read method Elem #elem#imm(Size that)=this.val(that)
mut method mut Elem #elem#mut(Size that)=this.#val(that)
read method Elem #elem#default(Size that)=this.#elem#imm(that)
read method read Elem #elem#read(Size that)=this.readVal(that)
mut method mut Elem #update#mut(Size that, mut Elem val)=(this.#set(that,val=val) val)
mut method Elem #update#imm(Size that, Elem val)=(this.set(that,val=val) val)
mut method Elem #update#default(Size that, Elem val)=this.#update#imm(that,val=val)
read method Void #close(Size that)=
  if this.#incomplete(that) error S"multi for skipped some elements"

mut method Void add(Elem that)=this.add(right=that)
mut  method mut This (Void that)=this

class method mut This ()
class method mut This (Size capacity)
read method Bool isEmpty()
read method Size size()
read method read Elem readVal(Size that)
read method imm  Elem val(Size that)
mut method mut Elem #val(Size that)
mut method Void set(Size that,Elem val)
mut method Void #set(Size that,mut Elem val)
mut method  Void remove(Size that)
mut method Void add(Size that, Elem val)
mut method Void #add(Size that, mut Elem val)

read method Elem left()=this.val(0\)
read method Elem right()=this.val(\size.#pred())
mut method mut Elem #left()=this.#val(0\)
mut method mut Elem #right()=this.#val(\size.#pred())
read method read Elem readLeft()=this.readVal(0\)
read method read Elem readRight()=this.readVal(\size.#pred())


mut method  Void left(Elem that)=this.set(0\ val=that)
mut method  Void right(Elem that)=this.set(\size.#pred() val=that)
mut method  Void #left(mut Elem that)=this.#set(0\ val=that)
mut method  Void #right(mut Elem that)=this.#set(\size.#pred() val=that)

mut method Void add(Elem left)=this.add(0\, val=left)
mut method Void add(Elem right)=this.add(\size, val=right)
mut method Void #add(mut Elem left)=this.#add(0\, val=left)
mut method Void #add(mut Elem right)=this.#add(\size, val=right)

mut method  Void removeLeft()=this.remove(0\)
mut method  Void removeRight()=this.remove(\size.#pred())
mut method mut SlashRes res()=SlashRes(this)
SlashRes=Class:(Trait({
  class method mut This #apply()
  class method mut This #apply(fwd mut This1 that)=native{trusted:optK} error void
  read method read This1 get()=native{trusted:get}error void
  mut method mut This1 #get()=native{trusted:#get}error void
  Elem={#norm{}}
  #norm{typeDep=This1,This,This3.NoElementInOpt nativeKind=Opt nativePar=This1,This3.NoElementInOpt}
  })+{
  mut method Void <=(Elem e)=this.#get()<:mut This1.add(e)
  })
//#################OPERATORS
method This +(Elem right)=this.withAlso(\size,val=right)

method This ++(This right)=This[
    for e in this \res<=e;
    for e in right \res<=e;
    ]
//TODO: can not parse \#vals, also it suld be \res<=e, but... 
//if res is the lib, then we can not make <= as comparing list for subsetEq
//if is Box, then ok with Opt<K> native?

//#################Withs
method This with(Size that, Elem val)=(
  size=this.size()
  res=This(capacity=this.size())
  var i=0Size
  while i<that (res.add(this.val(i)) i:=i.#succ())
  res.add(val) i:=i.#succ()
  while i<size (res.add(this.val(i)) i:=i.#succ())
  res
  )
method This withLeft(Elem that)=this.with(0\, val=that)
method This withRight(Elem that)=this.with(\size.#pred(), val=that)

method This withAlso(Size that, Elem val)=(
  size=this.size()
  res=This(capacity=this.size())
  var i=0Size
  while i<that (res.add(this.val(i)) i:=i.#succ())
  res.add(val)
  while i<size (res.add(this.val(i)) i:=i.#succ())
  res
  )

method This withAlsoLeft(Elem that)=this.withAlso(0\, val=that)
method This withAlsoRight(Elem that)=this.withAlso(\size.#pred(), val=that)

//skipping/filtering
method This without(Size index)=(
  size=this.size()
  res=This(capacity=this.size())
  var i=0Size
  while i<index (res.add(this.val(i)) i:=i.#succ())
  i:=i.#succ()
  while i<size (res.add(this.val(i)) i:=i.#succ())
  res
  )

method This withoutLeft()=this.without(index=0\)

method This withoutRight()=this.without(index=\size.#pred())

ElemBox={
  read Iterator vals
  var Elem elem
  class method lent This(read Iterator vals,Elem elem)
  lent method Void #add(Elem that)=this.elem(that)
  //mut method Void #add(mut Elem mutVal)=this.add(mutVal=mutVal)
  read method Elem (Void that)=this.acc()
  read method Elem acc()=this.elem()
  lent method lent This res()=this
  lent method Void <=(Elem that)=this.elem(that)
  }
read method lent ElemBox reduce()=ElemBox(vals=this.vals(start=1\),elem=this.left())
read method lent ElemBox reduce(Elem that)=ElemBox(vals=this.vals(start=0\),elem=that)

read method lent MatchAny matchAny()=MatchAny(pass=Bool.false(),vals=this)
MatchAny={
  var Bool pass read This1 vals
  class method lent This(Bool pass,read This1 vals)
  lent method Bool (Void that)=this.pass()
  lent method lent This res()=this
  lent method Void <=(Bool b)[Void]=if b (this.pass(b) Break())
  }
read method lent MatchAll matchAll()=MatchAll(pass=Bool.true(),vals=this)
MatchAll={
  var Bool pass read This1 vals
  class method lent This(Bool pass,read This1 vals)
  lent method Bool (Void that)=this.pass()
  lent method lent This res()=this
  lent method Void <=(Bool b)[Void]=if !b (this.pass(b) Break())
  }
read method lent MatchNone matchNone()=MatchNone(pass=Bool.true(),vals=this)
MatchNone={
  var Bool pass read This1 vals
  class method lent This(Bool pass,read This1 vals)
  lent method Bool (Void that)=this.pass()
  lent method lent This res()=this
  lent method Void <=(Bool b)[Void]=if b (this.pass(!b) Break())
  }

read method read Iterator cut()=Iterator(start=0\,end=this.size(),cut=\.true(),list=this)
mut method mut Iterator #cut()=Iterator(start=0\,end=this.size(),cut=\.true(),list=this)

read method read Iterator vals(Size start)=Iterator(start=start,end=this.size(),cut=\.false(),list=this)
mut method mut Iterator #vals(Size start)=Iterator(start=start,end=this.size(),cut=\.false(),list=this)
read method read Iterator cutVals(Size start)=Iterator(start=start,end=this.size(),cut=\.true(),list=this)
mut method mut Iterator #cutVals(Size start)=Iterator(start=start,end=this.size(),cut=\.true(),list=this)

read method read Iterator vals(Size end)=Iterator(start=0\,end=end,cut=\.false(),list=this)
mut method mut Iterator #vals(Size end)=Iterator(start=0\,end=end,cut=\.false(),list=this)
read method read Iterator cutVals(Size end)=Iterator(start=0\,end=end,cut=\.true(),list=this)
mut method mut Iterator #cutVals(Size end)=Iterator(start=0\,end=end,cut=\.true(),list=this)

read method read Iterator vals(Size start,Size end)=Iterator(start=start,end=end,cut=\.false(),list=this)
mut method mut Iterator #vals(Size start,Size end)=Iterator(start=start,end=end,cut=\.false(),list=this)
read method read Iterator cutVals(Size start,Size end)=Iterator(start=start,end=end,cut=\.true(),list=this)
mut method mut Iterator #cutVals(Size start,Size end)=Iterator(start=start,end=end,cut=\.true(),list=this)

Iterator={
  Size start
  Size end
  Bool cut
  mut This1 list
  class method mut This(Size start,Size end,Bool cut,fwd mut This1 list)
  read method read This #iterator()=this
  mut method mut This #varIterator()=this
  read method Size #startIndex()=0Size
  read method Bool #hasElem(Size that)=that<this.end()
  read method Bool #incomplete(Size that)=that!=this.end()
  read method Elem #elem#imm(Size that)=this.list().val(that)
  mut method mut Elem #elem#mut(Size that)=this.#list().#val(that)
  read method Elem #elem#default(Size that)=this.list().#elem#imm(that)
  read method read Elem #elem#read(Size that)=this.list().readVal(that)
  mut method mut Elem #update#mut(Size that, mut Elem val)=(this.#list().#set(that,val=val) val)
  mut method Elem #update#imm(Size that, Elem val)=(this.#list().set(that,val=val) val)
  mut method Elem #update#default(Size that, Elem val)=this.#list().#update#imm(that,val=val)
  read method Void #close(Size that)=
    if this.#incomplete(that) error IterationIncomplete
      "While iterating on multiple collections, iteration terminated abruptly. The size of the collections may have not been the same."
  }
