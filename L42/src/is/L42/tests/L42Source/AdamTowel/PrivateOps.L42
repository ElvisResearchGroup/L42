ClassName={
  class method S (class Any that)=S"toFix"
  class method S superInterfaces(class Any that)=S"toFix"
  class method S excName(class Any that, S text)=S"Message %(This(that))(%This.superInterfaces(that)):%S.nl()%text"
  }
MessageTrait=Trait:{[Message]
  method toS()=ClassName.excName(This,text=this.text())
  var S text
  class method mut This (S text)
  class method mut This (S that)=This(text=that) 
  class method This #from(StringBuilder stringLiteral)=This(stringLiteral.toS())  
  }
LazyMessageTrait=Trait:{
  class method This #apply()
  class method mut This #apply(This2.S that)=native{trusted:lazyMessageK} error void
  read method This2.S text()=native{trusted:get}error void
  mut method Void text(This2.S that)=native{trusted:setMsg}error void
  #norm{typeDep=This,This2.ToS,This2.S,This2.Message,This2.StringBuilder,This1.ClassName coherentDep=This,This1.ClassName declaresClassMethods nativeKind=LazyMessage}
  }+{[Message]
  read method S text()
  class method This #from(StringBuilder stringLiteral)=This(stringLiteral.toS())
  method toS()=ClassName.excName(This,text=this.text())
  }

MessageDecorator={
  class method Trait:(Trait t)=MessageTrait+t
  class method Trait:(class Trait.Lifted l)=MessageTrait+l
  class method Trait:(Library lib)=MessageTrait+lib
  }