[This1.HasToS]
class method This zero()
class method This from(This1.S string)=string.toNum()
method This #plus0(This that)=native{trusted:OP+} error void
method This #times0(This that)=native{trusted:OP*} error void
method This #divide0(This that)=native{trusted:OP/} error void
method This #minus0(This that)=native{trusted:OP-} error void

method This1.Bool #lt0(This that)=native{trusted:OP<} error void
method This1.Bool #gt0(This that)=that.#lt0(that=this)
method This1.Bool #ltequal0(This that)=native{trusted:OP<=} error void
method This1.Bool #gtequal0(This that)=that.#ltequal0(that=this)

read method This1.Bool readEquality(read This that)=native{trusted:OP==} error void
method This1.Bool #equalequal0(This that)=this.readEquality(that=that)
method This1.Bool #bangequal0(This that)=(This1.Bool tmp=this.#equalequal0(that=that) tmp.not())

read method This1.S toS()=native{trusted:toS} error void
@This1.Cache.Call class method This0 #from(This1.S$StringBuilder stringLiteral)=(
  This1.S s=stringLiteral.toS()
  s.toNum()
  )
method This1.Double toDouble() = This1.Double<:class This1.Double.from(num=this)

#norm{nativeKind=BigRational
  typeDep=This,This1.S,This1.Bool,This1.S$StringBuilder,This1.HasToS,This1.AbstractTowel,This1.Cache.Call,This1.Double
  coherentDep=This,This1.Bool,This1.S,This1.Double,
  usedMethods=This1.S.toNum(), This1.Bool.not(), This1.S$StringBuilder.toS(), This1.S.toNum(),This1.Double.from(num)
  refined=toS()
  }
@This1.AbstractTowel{num}