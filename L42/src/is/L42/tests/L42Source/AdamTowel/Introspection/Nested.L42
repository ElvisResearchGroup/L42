[HasToS]
NativeNested i
class method This(NativeNested that)=\(i=that)

class method This from(class Any classAny)=\(\.fromClass(classAny))
  
class method This from(Library library)=\(\.fromLibrary(library))
  
method This nested(Name name)=\(this.i().nestedByName(name=name.that()))

method S outerName()=this.i().outerName()

method This outer()=\(this.i().outer())

method Doc outerDoc()=\(this.i().outerDoc())

method Doc innerDoc()=\(this.i().innerDoc())

method Nesteds nesteds()=\()((
  size=this.i().nestedNum()
  var i=0Size
  while i<size (
    \res<=Nested$(this.i().nestedIn(i))
    i+=1Size//sadly, range will be added later
    )))
method Methods methods()=\()((
  size=this.i().methodNum()
  var i=0Size
  while i<size (
    \res<=Method$(this.i().methodIn(i))
    i+=1Size
    )))
method Types implements()=\()((
  size=this.i().implementedNum()
  var i=0Size
  while i<size (
    \res<=Type$(this.i().implementedIn(i))
    i+=1Size//sadly, range will be added later
  )))
method Bool hasOuter()=this.i().hasOuter()

method Bool hasHiddenImplements()=this.i().hasHiddenImplements()

method Bool isClose()=this.i().isClose()

method Bool isInterface()=this.i().isInterface()

method Bool isBinded()=this.i().isBinded()

method S toFullS()=this.i().toFullString()

method This root()=\(this.i().root())  

method Name nameFromRoot()=\.of(this.i().nameFromRoot())

method S position()=this.i().position()

method class Any classAny()=this.i().classAny()

read method S toS()=this.i().toS()

method S excName(S text)=
  S"Message %(Name$Mapping().pathName(this.classAny()))%this.superInterfaces():%S.nl()%text"
method S className()=Name$Mapping().pathName(this.classAny())
method S superInterfaces()={
  i=this.implements()
  if i.isEmpty() return S""
  var res=S"("++i.left().nested()<:This.className()
  for t in i.withoutLeft() (res++=S", "++t.nested()<:This.className())
  return res++S")"
  }  