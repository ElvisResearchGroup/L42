[HasToS]
NativeNested i
class method This(NativeNested that)=\(i=that)

@Public class method This from(class Any classAny)=\(\.fromClass(classAny))
  
@Public class method This from(Library library)=\(\.fromLibrary(library))
  
@Public method This nested(Name name)=\(this.i().nestedByName(name=name.that()))

@Public method S outerName()=this.i().outerName()

@Public method This outer()=\(this.i().outer())

@Public method Doc outerDoc()=\(this.i().outerDoc())

@Public method Doc innerDoc()=\(this.i().innerDoc())

@Public method Nested$List nesteds()=\()((
  size=this.i().nestedNum()
  var i=0Size
  while i<size (
    \res<=Nested$(this.i().nestedIn(i))
    i+=1Size//sadly, range will be added later
    )))
@Public method Method$List methods()=\()((
  size=this.i().methodNum()
  var i=0Size
  while i<size (
    \res<=Method$(this.i().methodIn(i))
    i+=1Size
    )))
@Public method Method$ meth(S selector)={
  size=this.i().methodNum()
  var i=0Size
  while i<size (
    mi=Method$(this.i().methodIn(i))
    if mi.nameFromRoot()<:Name.selector()==selector return mi
    i+=1Size
    )
  error Collection$NoElementInOpt"Method %selector not in methods list: %this.methods()"
  }
@Public method Type$List implements()=\()((
  size=this.i().implementedNum()
  var i=0Size
  while i<size (
    \res<=Type$(this.i().implementedIn(i))
    i+=1Size//sadly, range will be added later
  )))
@Public method Bool hasOuter()=this.i().hasOuter()

@Public method Bool hasHiddenImplements()=this.i().hasHiddenImplements()

@Public method Bool isClose()=this.i().isClose()

@Public method Bool isInterface()=this.i().isInterface()

@Public method Bool isBinded()=this.i().isBinded()

@Public method S isCoherent()=this.i().isCoherent()

@Public method S toFullS()=this.i().toFullString()

@Public method This root()=\(this.i().root())  

@Public method Name nameFromRoot()=\.of(this.i().nameFromRoot())

@Public method S position()=this.i().position()

@Public method class Any classAny()=this.i().classAny()

method toS()=this.i().toS()

@Public method S msgTitle(S text)=
  S"Message %(Name$Mapping().pathName(this.classAny()))%this.superInterfaces():%S.nl()%text"

method S className()=Name$Mapping().pathName(this.classAny())

method S superInterfaces()={
  i=this.implements()
  if i.isEmpty() return S""
  var res=S"("++i.left().nested()<:This.className()
  for t in i.withoutLeft() (res++=S", "++t.nested()<:This.className())
  return res++S")"
  } 