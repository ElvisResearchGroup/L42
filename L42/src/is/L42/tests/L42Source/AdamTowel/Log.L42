read method This1.S name::0()
class method This immOf::0(This1.S name)
class method This #apply(This1.S that)=this.immOf::0(name=that)
class method This #from(This1.StringBuilder stringLiteral)=this.#apply(that=stringLiteral.toS())
class method mut This #$of::0(This1.S name)
mut method This1.S read()=(
  This1.Debug d=This1.Debug<:class This1.Debug.of()
  d.#$readLog(logName=this.name::0())
  )
read method mut This #$reader()=This<:class This.#$of::0(name=this.name::0())
read method Void write(This1.S that)=(
  This1.Debug d=This1.Debug<:class This1.Debug.of()
  d.addToLog(logName=this.name::0(),text=that)
  )
read method Void clear()=(
  This1.Debug d=This1.Debug<:class This1.Debug.of()
  d.clearLog(logName=this.name::0())
  )

#norm{typeDep=This0,This1.S,This1.Debug,This1.StringBuilder, coherentDep=This0,This1.Debug,This1.S,close
  usedMethods=This1.StringBuilder.toS(), This1.Debug.of(), This1.Debug.#$readLog(logName), This1.Debug.addToLog(logName,text), This1.Debug.clearLog(logName)}