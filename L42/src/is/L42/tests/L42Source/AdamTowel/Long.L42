[This1.HasToS]
@This1.Public class method This zero()
@This1.Public class method This from(This1.S string)=string.toLong()
@This1.Public class method This from(This1.Num num)=native{trusted:fromNum} error void
@This1.Public method This1.Num toNum(This denominator)=This1.S<:class This1.S.longToNum(that=this,denominator=denominator)
@This1.Public method This #plus0(This that)=native{trusted:OP+} error void
@This1.Public method This #times0(This that)=native{trusted:OP*} error void
@This1.Public method This #divide0(This that)=native{trusted:OP/} error void
@This1.Public method This #minus0(This that)=native{trusted:OP-} error void
@This1.Public method This mod(This that)=native{trusted:mod} error void

@This1.Public read method This1.Bool #lt0(read This that)=native{trusted:OP<} error void
@This1.Public read method This1.Bool #gt0(read This that)=that.#lt0(that=this)
@This1.Public read method This1.Bool #ltequal0(read This that)=native{trusted:OP<=} error void
@This1.Public read method This1.Bool #gtequal0(read This that)=that.#ltequal0(that=this)
@This1.Public read method This1.Bool #equalequal0(read This that)=native{trusted:OP==} error void
@This1.Public read method This1.Bool #bangequal0(read This that)=(This1.Bool tmp=this.#equalequal0(that=that) tmp.not())

read method This1.S toS()=native{trusted:toS} error void
@This1.Public @This1.Cache.Call class method This0 #from(This1.S$StringBuilder stringLiteral)=(
  This1.S s=stringLiteral.toS()
  s.toLong()
  )
method This randomNextSeed()=native{trusted:randomNextSeed} error void
method This randomNextLong()=native{trusted:randomNextLong} error void
method This1.Double randomNextDouble()=native{trusted:randomNextDouble} error void
method This1.Size randomNextSize(This1.Size bound)=native{trusted:randomNextSize} error void
class method This #$randomSeed()=native{trusted:#$randomSeed} error void

#norm{nativeKind=Long
  typeDep=This1.Public,This,This1.Num,This1.S,This1.Size,This1.Double,This1.Bool,This1.S$StringBuilder,This1.HasToS,This1.AbstractTowel,This1.Cache.Call
  coherentDep=This,This1.Num,This1.Bool,This1.S,This1.Size,This1.Double
  usedMethods=This1.S.toLong(),This1.S.longToNum(that,denominator), This1.Bool.not(), This1.S$StringBuilder.toS()
  refined=toS()
  }
@This1.AbstractTowel{long}