{
  @This.Public AbstractTowel={#typed{watched=This1.Introspection.Nested, This1.Trait usedMethods=This1.S.StringBuilder.toS()hiddenSupertypes=This1.Message, This1.HasToS, This1.Trait.Lifted, This1.Message.Guard close}}
  @This.Public Public={#typed{close}@This1.AbstractTowel{public}}
  @This.Public HasToS={interface read method This1.S toS()#typed{}@This1.AbstractTowel{hasToS}}
  @This.Public Break={class method Void #apply()[Void]=(..)#typed{close}@This1.AbstractTowel{break}}
  @This.Public Bool={[This1.HasToS]
    class method This false()=(..)
    class method This true()=(..)
    method This #if()=(..)
    method Void #checkTrue()[Void]=(..)
    method This not()=(..)
    method This #bang0()=(..)
    method This and(This that)=(..)
    method This or(This that)=(..)
    method This #shortCircut#andand()=(..)
    method This #shortResult#andand(This that)=(..)
    method This #shortProcess#andand(This that, This other)=(..)
    method This #shortCircut#oror()=(..)
    method This #shortResult#oror(This that)=(..)
    method This #shortProcess#oror(This that, This other)=(..)
    method This #shortCircut#minusgt()=(..)
    method This #shortResult#minusgt(This that)=(..)
    method This #shortProcess#minusgt(This that, This other)=(..)
    read method This1.S toS()=(..)
    read method This #equalequal0(read This that)=(..)
    read method This #bangequal0(read This that)=(..)
    #typed{refined=toS()close nativeKind=Bool}
    @This1.AbstractTowel{bool}
    }
  @This.Public Size={[This1.HasToS]
    class method This zero()=(..)
    method This #plus0(This that)=(..)
    method This #times0(This that)=(..)
    method This #divide0(This that)=(..)
    method This #minus0(This that)=(..)
    read method This1.Bool #lt0(read This that)=(..)
    read method This1.Bool #gt0(read This that)=(..)
    read method This1.Bool #ltequal0(read This that)=(..)
    read method This1.Bool #gtequal0(read This that)=(..)
    read method This1.Bool #equalequal0(read This that)=(..)
    read method This1.Bool #bangequal0(read This that)=(..)
    read method This1.S toS()=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    method This #succ()=(..)
    method This #pred()=(..)
    method mut This.Range0 range()=(..)
    Range0={
      read method This1 limit()=(..)
      class method mut This #apply(This1 limit)=(..)
      mut method mut This #iterator()=(..)
      mut method Void #close(This1 that)=(..)
      mut method This2.Bool #incomplete(This1 that)=(..)
      mut method This1 #elem#default(This1 that)=(..)
      mut method This2.Bool #hasElem(This1 that)=(..)
      mut method This1 #startIndex()=(..)
      #typed{usedMethods=This1.#lt0(that), This1.zero()close}
      }
    InverseRange={
      read method This1 limit()=(..)
      class method mut This #apply(This1 limit)=(..)
      mut method mut This #iterator()=(..)
      mut method Void #close(This1 that)=(..)
      mut method This2.Bool #incomplete(This1 that)=(..)
      mut method This1 #elem#default(This1 that)=(..)
      mut method This2.Bool #hasElem(This1 that)=(..)
      mut method This1 #startIndex()=(..)
      #typed{usedMethods=This1.#ltequal0(that), This1.#minus0(that), This1.zero(), This1.#succ()close}
      }
    List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This1 capacity)=(..)
      read method This2.Bool isEmpty()=(..)
      read method This1 size()=(..)
      read method read This1 readVal(This1 that)=(..)
      read method This1 val(This1 that)=(..)
      mut method mut This1 #val(This1 that)=(..)
      mut method Void set(This1 that, This1 val)=(..)
      mut method Void #set(This1 that, mut This1 val)=(..)
      mut method Void add(This1 that, This1 val)=(..)
      mut method Void #add(This1 that, mut This1 val)=(..)
      mut method Void remove(This1 that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This1 #startIndex()=(..)
      read method This2.Bool #hasElem(This1 that)=(..)
      read method This2.Bool #incomplete(This1 that)=(..)
      read method This1 #elem#imm(This1 that)=(..)
      mut method mut This1 #elem#mut(This1 that)=(..)
      read method This1 #elem#default(This1 that)=(..)
      read method read This1 #elem#read(This1 that)=(..)
      mut method mut This1 #update#mut(This1 that, mut This1 val)=(..)
      mut method This1 #update#imm(This1 that, This1 val)=(..)
      mut method This1 #update#default(This1 that, This1 val)=(..)
      read method Void #close(This1 that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This1 that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This1 that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This1 index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This1 start)=(..)
      mut method mut This.Iterator #vals(This1 start)=(..)
      read method read This.Iterator cutVals(This1 start)=(..)
      mut method mut This.Iterator #cutVals(This1 start)=(..)
      read method read This.Iterator vals(This1 end)=(..)
      mut method mut This.Iterator #vals(This1 end)=(..)
      read method read This.Iterator cutVals(This1 end)=(..)
      mut method mut This.Iterator #cutVals(This1 end)=(..)
      read method read This.Iterator vals(This1 start, This1 end)=(..)
      mut method mut This.Iterator #vals(This1 start, This1 end)=(..)
      read method read This.Iterator cutVals(This1 start, This1 end)=(..)
      mut method mut This.Iterator #cutVals(This1 start, This1 end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=(..)
      method This2.S immToString()=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This1 indexOfLeft(read This1 val)=(..)
      read method This1 indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This2 start()=(..)
        read method This2 end()=(..)
        read method This3.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This2 start, This2 end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This2 #startIndex()=(..)
        read method This3.Bool #hasElem(This2 that)=(..)
        read method This3.Bool #incomplete(This2 that)=(..)
        read method This2 #elem#imm(This2 that)=(..)
        mut method mut This2 #elem#mut(This2 that)=(..)
        read method This2 #elem#default(This2 that)=(..)
        read method read This2 #elem#read(This2 that)=(..)
        mut method mut This2 #update#mut(This2 that, mut This2 val)=(..)
        mut method This2 #update#imm(This2 that, This2 val)=(..)
        mut method This2 #update#default(This2 that, This2 val)=(..)
        read method Void #close(This2 that)=(..)
        #typed{usedMethods=This2.#lt0(that), This2.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This1.#from(stringLiteral), This1.#lt0(that), This1.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This1.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This1.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This1.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This1.#ltequal0(that), This2.S.StringBuilder.#sless(), This1.#plus0(that), This1.#minus0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{watched=This1.S usedMethods=This1.Bool.not(), This1.S.StringBuilder.toS(), This.Range0.#apply(limit)refined=toS()close nativeKind=Int}
    @This1.AbstractTowel{size}
    }
  @This.Public Num={[This1.HasToS]
    class method This zero()=(..)
    method This #plus0(This that)=(..)
    method This #times0(This that)=(..)
    method This #divide0(This that)=(..)
    method This #minus0(This that)=(..)
    read method This1.Bool #lt0(read This that)=(..)
    read method This1.Bool #gt0(read This that)=(..)
    read method This1.Bool #ltequal0(read This that)=(..)
    read method This1.Bool #gtequal0(read This that)=(..)
    read method This1.Bool #equalequal0(read This that)=(..)
    read method This1.Bool #bangequal0(read This that)=(..)
    read method This1.S toS()=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=(..)
      read method This2.Bool isEmpty()=(..)
      read method This2.Size size()=(..)
      read method read This1 readVal(This2.Size that)=(..)
      read method This1 val(This2.Size that)=(..)
      mut method mut This1 #val(This2.Size that)=(..)
      mut method Void set(This2.Size that, This1 val)=(..)
      mut method Void #set(This2.Size that, mut This1 val)=(..)
      mut method Void add(This2.Size that, This1 val)=(..)
      mut method Void #add(This2.Size that, mut This1 val)=(..)
      mut method Void remove(This2.Size that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1 #elem#imm(This2.Size that)=(..)
      mut method mut This1 #elem#mut(This2.Size that)=(..)
      read method This1 #elem#default(This2.Size that)=(..)
      read method read This1 #elem#read(This2.Size that)=(..)
      mut method mut This1 #update#mut(This2.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This2.Size that, This1 val)=(..)
      mut method This1 #update#default(This2.Size that, This1 val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This2.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=(..)
      method This2.S immToString()=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1 val)=(..)
      read method This2.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2 #elem#imm(This3.Size that)=(..)
        mut method mut This2 #elem#mut(This3.Size that)=(..)
        read method This2 #elem#default(This3.Size that)=(..)
        read method read This2 #elem#read(This3.Size that)=(..)
        mut method mut This2 #update#mut(This3.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This3.Size that, This2 val)=(..)
        mut method This2 #update#default(This3.Size that, This2 val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.#equalequal0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{watched=This1.S usedMethods=This1.Bool.not(), This1.S.StringBuilder.toS()refined=toS()close nativeKind=BigRational}
    @This1.AbstractTowel{num}
    }
  @This.Public S={[This1.HasToS]
    @This1.Public method This #plusplus0(This that)=(..)
    read method This toS()=(..)
    @This1.Public read method This1.Size size()=(..)
    @This1.Public class method This #from(This.StringBuilder stringLiteral)=(..)
    @This1.Public read method This1.Bool #equalequal0(read This that)=(..)
    @This1.Public read method This1.Bool #bangequal0(read This that)=(..)
    @This1.Public method This1.Bool contains(This that)=(..)
    @This1.Public method This replace(This that, This with)=(..)
    @This1.Public method This subString(This1.Size start, This1.Size end)=(..)
    @This1.Public method This1.Bool startsWith(This that)=(..)
    @This1.Public method This1.Bool endsWith(This that)=(..)
    @This1.Public method This trim()=(..)
    @This1.Public class method This dq()=(..)
    @This1.Public class method This nl()=(..)
    @This1.Public ParseError={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This1 that)=(..)
      read method This1 text()=(..)
      mut method Void text(This1 that)=(..)
      class method This #from(This1.StringBuilder stringLiteral)=(..)
      read method This1 toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This1.StringBuilder.toS()refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    @This1.Public StringBuilder={[This2.HasToS]
      mut method Void #d0()=(..)
      mut method Void #d1()=(..)
      mut method Void #d2()=(..)
      mut method Void #d3()=(..)
      mut method Void #d4()=(..)
      mut method Void #d5()=(..)
      mut method Void #d6()=(..)
      mut method Void #d7()=(..)
      mut method Void #d8()=(..)
      mut method Void #d9()=(..)
      mut method Void #lq()=(..)
      mut method Void #lw()=(..)
      mut method Void #le()=(..)
      mut method Void #lr()=(..)
      mut method Void #lt()=(..)
      mut method Void #ly()=(..)
      mut method Void #lu()=(..)
      mut method Void #li()=(..)
      mut method Void #lo()=(..)
      mut method Void #lp()=(..)
      mut method Void #la()=(..)
      mut method Void #ls()=(..)
      mut method Void #ld()=(..)
      mut method Void #lf()=(..)
      mut method Void #lg()=(..)
      mut method Void #lh()=(..)
      mut method Void #lj()=(..)
      mut method Void #lk()=(..)
      mut method Void #ll()=(..)
      mut method Void #lz()=(..)
      mut method Void #lx()=(..)
      mut method Void #lc()=(..)
      mut method Void #lv()=(..)
      mut method Void #lb()=(..)
      mut method Void #ln()=(..)
      mut method Void #lm()=(..)
      mut method Void #uQ()=(..)
      mut method Void #uW()=(..)
      mut method Void #uE()=(..)
      mut method Void #uR()=(..)
      mut method Void #uT()=(..)
      mut method Void #uY()=(..)
      mut method Void #uU()=(..)
      mut method Void #uI()=(..)
      mut method Void #uO()=(..)
      mut method Void #uP()=(..)
      mut method Void #uA()=(..)
      mut method Void #uS()=(..)
      mut method Void #uD()=(..)
      mut method Void #uF()=(..)
      mut method Void #uG()=(..)
      mut method Void #uH()=(..)
      mut method Void #uJ()=(..)
      mut method Void #uK()=(..)
      mut method Void #uL()=(..)
      mut method Void #uZ()=(..)
      mut method Void #uX()=(..)
      mut method Void #uC()=(..)
      mut method Void #uV()=(..)
      mut method Void #uB()=(..)
      mut method Void #uN()=(..)
      mut method Void #uM()=(..)
      mut method Void #splus()=(..)
      mut method Void #sless()=(..)
      mut method Void #stilde()=(..)
      mut method Void #sbang()=(..)
      mut method Void #sand()=(..)
      mut method Void #sor()=(..)
      mut method Void #sleft()=(..)
      mut method Void #sright()=(..)
      mut method Void #sequal()=(..)
      mut method Void #stimes()=(..)
      mut method Void #sdivide()=(..)
      mut method Void #soRound()=(..)
      mut method Void #scRound()=(..)
      mut method Void #soSquare()=(..)
      mut method Void #scSquare()=(..)
      mut method Void #soCurly()=(..)
      mut method Void #scCurly()=(..)
      mut method Void #sdQuote()=(..)
      mut method Void #ssQuote()=(..)
      mut method Void #shQuote()=(..)
      mut method Void #sqMark()=(..)
      mut method Void #shat()=(..)
      mut method Void #scomma()=(..)
      mut method Void #ssemicolon()=(..)
      mut method Void #scolon()=(..)
      mut method Void #sdot()=(..)
      mut method Void #sunderscore()=(..)
      mut method Void #shash()=(..)
      mut method Void #sat()=(..)
      mut method Void #sdollar()=(..)
      mut method Void #spercent()=(..)
      mut method Void #sbackSlash()=(..)
      mut method Void #sspace()=(..)
      mut method Void #snewLine()=(..)
      mut method Void #stringAddAll(mut This that)=(..)
      mut method Void #stringAddExpr(This2.HasToS that)=(..)
      mut method Void addAll(This1 string)=(..)
      class method mut This #stringLiteralBuilder()=(..)
      read method This1 toS()=(..)
      #typed{usedMethods=This2.HasToS.toS()refined=toS()close nativeKind=StringBuilder}
      }
    @This1.Public List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=(..)
      read method This2.Bool isEmpty()=(..)
      read method This2.Size size()=(..)
      read method read This1 readVal(This2.Size that)=(..)
      read method This1 val(This2.Size that)=(..)
      mut method mut This1 #val(This2.Size that)=(..)
      mut method Void set(This2.Size that, This1 val)=(..)
      mut method Void #set(This2.Size that, mut This1 val)=(..)
      mut method Void add(This2.Size that, This1 val)=(..)
      mut method Void #add(This2.Size that, mut This1 val)=(..)
      mut method Void remove(This2.Size that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1 #elem#imm(This2.Size that)=(..)
      mut method mut This1 #elem#mut(This2.Size that)=(..)
      read method This1 #elem#default(This2.Size that)=(..)
      read method read This1 #elem#read(This2.Size that)=(..)
      mut method mut This1 #update#mut(This2.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This2.Size that, This1 val)=(..)
      mut method This1 #update#default(This2.Size that, This1 val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This1 readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This2.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This1 toS()=(..)
      read method This readClone()=(..)
      method This1 immToString()=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1 val)=(..)
      read method This2.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2 #elem#imm(This3.Size that)=(..)
        mut method mut This2 #elem#mut(This3.Size that)=(..)
        read method This2 #elem#default(This3.Size that)=(..)
        read method read This2 #elem#read(This3.Size that)=(..)
        mut method mut This2 #update#mut(This3.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This3.Size that, This2 val)=(..)
        mut method This2 #update#default(This3.Size that, This2 val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This2.StringBuilder.#stringLiteralBuilder(), This2.StringBuilder.#uW(), This2.StringBuilder.#lh(), This2.StringBuilder.#li(), This2.StringBuilder.#ll(), This2.StringBuilder.#le(), This2.StringBuilder.#sspace(), This2.StringBuilder.#lt(), This2.StringBuilder.#lr(), This2.StringBuilder.#la(), This2.StringBuilder.#ln(), This2.StringBuilder.#lg(), This2.StringBuilder.#lo(), This2.StringBuilder.#lm(), This2.StringBuilder.#lu(), This2.StringBuilder.#lp(), This2.StringBuilder.#lc(), This2.StringBuilder.#ls(), This2.StringBuilder.#scomma(), This2.StringBuilder.#ld(), This2.StringBuilder.#lb(), This2.StringBuilder.#ly(), This2.StringBuilder.#sdot(), This2.StringBuilder.#uT(), This2.StringBuilder.#lz(), This2.StringBuilder.#lf(), This2.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This1.StringBuilder.#stringLiteralBuilder(), This1.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This1.StringBuilder.#lm(), This1.StringBuilder.#lu(), This1.StringBuilder.#ll(), This1.StringBuilder.#lt(), This1.StringBuilder.#li(), This1.StringBuilder.#sspace(), This1.StringBuilder.#lf(), This1.StringBuilder.#lo(), This1.StringBuilder.#lr(), This1.StringBuilder.#ls(), This1.StringBuilder.#lk(), This1.StringBuilder.#lp(), This1.StringBuilder.#le(), This1.StringBuilder.#ld(), This1.StringBuilder.#ln(), This1.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This1.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This1.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.#equalequal0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>, <private>coherentDep=<private>watched=This1.AbstractTowel usedMethods=This.StringBuilder.toS(), This1.Bool.not(), This.StringBuilder.#stringLiteralBuilder(), This.StringBuilder.#sdQuote(), This.StringBuilder.#snewLine()refined=toS()close nativeKind=String nativePar=This.ParseError}
    @This1.AbstractTowel{s}
    }
  @This.Public Debug={
    class method Void #apply(read This1.HasToS that)=(..)
    class method This of()=(..)
    method Void strDebug(This1.S that)=(..)
    method Void deployLibrary(This1.S that, Library lib)=(..)
    method Void testActualExpected(Library pos, This1.S name, This1.S actual, This1.S expected, This1.S message, This1.S hole)=(..)
    method Void testCondition(Library pos, This1.S name, This1.Bool cond, This1.S message)=(..)
    method Void addToLog(This1.S logName, This1.S text)=(..)
    method Void clearLog(This1.S logName)=(..)
    method This1.S #$readLog(This1.S logName)=(..)
    #typed{usedMethods=This1.HasToS.toS()close nativeKind=TrustedIO}
    @This1.AbstractTowel{debug}
    }
  @This.Public Url={[This1.HasToS]
    read method This1.S that()=(..)
    class method This of(This1.S that)=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    read method This1.S toS()=(..)
    #typed{usedMethods=This1.S.StringBuilder.toS()refined=toS()close}
    @This1.AbstractTowel{url}
    }
  @This.Public Test={
    class method This.WithName #from(This1.S.StringBuilder stringLiteral)=(..)
    class method This1.S hole()=(..)
    WithName={
      read method This2.S name()=(..)
      class method This #apply(This2.S name)=(..)
      method This1.Condition #apply(This2.Bool that)=(..)
      method This1.ExpectedActual #apply(read This2.HasToS expected, read This2.HasToS actual)=(..)
      method This1.ExpectedActual #apply(read This2.HasToS actual, read This2.HasToS expected)=(..)
      #typed{usedMethods=This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.#from(stringLiteral), This1.Condition.#apply(name,cond,message), This2.HasToS.toS(), This1.ExpectedActual.#apply(name,expected,actual,message)close}
      }
    Condition={
      read method This2.S name()=(..)
      read method This2.Bool cond()=(..)
      read method This2.S message()=(..)
      class method This #apply(This2.S name, This2.Bool cond, This2.S message)=(..)
      method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method Void #colon1(Library pos)=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.S.#plusplus0(that), This2.Debug.of(), This2.Debug.testCondition(pos,name,cond,message)close}
      }
    ExpectedActual={
      read method This2.S name()=(..)
      read method This2.S expected()=(..)
      read method This2.S actual()=(..)
      read method This2.S message()=(..)
      class method This #apply(This2.S name, This2.S expected, This2.S actual, This2.S message)=(..)
      method Void #colon1(Library pos)=(..)
      #typed{usedMethods=This2.Debug.of(), This1.hole(), This2.Debug.testActualExpected(pos,name,actual,expected,message,hole)close}
      }
    #typed{usedMethods=This1.S.StringBuilder.toS(), This.WithName.#apply(name), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#soSquare(), This1.S.StringBuilder.#shash(), This1.S.StringBuilder.#scSquare(), This1.S.#from(stringLiteral)close}
    @This1.AbstractTowel{test}
    }
  @This.Public Log={
    class method This #apply(This1.S that)=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    mut method This1.S read()=(..)
    read method mut This #$reader()=(..)
    read method Void write(This1.S that)=(..)
    read method Void clear()=(..)
    #typed{usedMethods=This1.S.StringBuilder.toS(), This1.Debug.of(), This1.Debug.#$readLog(logName), This1.Debug.addToLog(logName,text), This1.Debug.clearLog(logName)close}
    @This1.AbstractTowel{log}
    }
  @This.Public Name={[This1.HasToS]
    @This1.Public read method This1.Bool #equalequal0(read This that)=(..)
    @This1.Public method This1.S x()=(..)
    @This1.Public method This1.S selector()=(..)
    @This1.Public method This1.S path()=(..)
    @This1.Public method This with(This1.S x)=(..)
    @This1.Public method This with(This1.S selector)=(..)
    @This1.Public method This with(This1.S path)=(..)
    @This1.Public method This #plusplus1(This1.S prefix)=(..)
    @This1.Public class method This #apply(This1.S that)=(..)
    @This1.Public class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    @This1.Public method This.Mapping #equalgt0(class Any target)=(..)
    @This1.Public method This.Mapping #equalgt0(This other)=(..)
    @This1.Public method This1.Bool #shortCircut#minusgt()=(..)
    @This1.Public method This.Mapping #shortResult#minusgt(This1.Bool that)=(..)
    @This1.Public method This.Mapping #shortProcess#minusgt(This1.Bool that, This other)=(..)
    read method This1.S toS()=(..)
    @This1.Public Mapping={
      @This2.Public class method This #apply()=(..)
      @This2.Public class method This1 #from(This2.S.StringBuilder stringLiteral)=(..)
      #typed{typeDep=<private>, <private>watched=This2.AbstractTowel usedMethods=This1.#from(stringLiteral)close nativeKind=Meta nativePar=This2.Trait.ClassClash, This2.Trait.MethodClash, This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.S.ParseError}
      }
    @This1.Public List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=(..)
      read method This2.Bool isEmpty()=(..)
      read method This2.Size size()=(..)
      read method read This1 readVal(This2.Size that)=(..)
      read method This1 val(This2.Size that)=(..)
      mut method mut This1 #val(This2.Size that)=(..)
      mut method Void set(This2.Size that, This1 val)=(..)
      mut method Void #set(This2.Size that, mut This1 val)=(..)
      mut method Void add(This2.Size that, This1 val)=(..)
      mut method Void #add(This2.Size that, mut This1 val)=(..)
      mut method Void remove(This2.Size that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1 #elem#imm(This2.Size that)=(..)
      mut method mut This1 #elem#mut(This2.Size that)=(..)
      read method This1 #elem#default(This2.Size that)=(..)
      read method read This1 #elem#read(This2.Size that)=(..)
      mut method mut This1 #update#mut(This2.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This2.Size that, This1 val)=(..)
      mut method This1 #update#default(This2.Size that, This1 val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This2.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=(..)
      method This2.S immToString()=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1 val)=(..)
      read method This2.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2 #elem#imm(This3.Size that)=(..)
        mut method mut This2 #elem#mut(This3.Size that)=(..)
        read method This2 #elem#default(This3.Size that)=(..)
        read method read This2 #elem#read(This3.Size that)=(..)
        mut method mut This2 #update#mut(This3.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This3.Size that, This2 val)=(..)
        mut method This2 #update#default(This3.Size that, This2 val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.#equalequal0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>, <private>watched=This1.AbstractTowel, This1.S, This.Mapping usedMethods=This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lh(), This1.S.StringBuilder.#li(), This1.S.StringBuilder.#ls(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.S.StringBuilder.#sdot(), This1.S.StringBuilder.toS(), This1.Bool.false()refined=toS()close}
    @This1.AbstractTowel{name}
    }
  @This.Public Trait={
    @This1.Public read method Library code()=(..)
    @This1.Public class method This #apply(Library that)=(..)
    @This1.Public method This #plus0(Library lib)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This #plus1(Library lib)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This #plus0(class This.Lifted lifted)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This #plus1(class This.Lifted lifted)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This #plus0(This trait)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This #colon0(Library lib)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This #colon0(class This.Lifted lifted)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This #colon0(This trait)[This.ClassClash, This.MethodClash]=(..)
    @This1.Public method This1.Introspection.Nested nested()=(..)
    @This1.Public method This #apply(read This.Acc squareBuilder)[This.InvalidName, This.InvalidMap, This.ClassClash, This.MethodClash]=(..)
    @This1.Public method Library #toLibrary()=(..)
    @This1.Public Lifted={interface
      class method Library code()
      class method This1 #plus0(Library lib)[This1.ClassClash, This1.MethodClash]
      class method This1 #plus1(Library lib)[This1.ClassClash, This1.MethodClash]
      class method This2.Introspection.Nested nested()
      #typed{}
      }
    @This1.Public ClassOperators={class method This1 #apply()=(..)#typed{watched=This1 close}}
    @This1.Public Acc={
      mut method Void that(This2.Name.Mapping that)=(..)
      read method This2.Name.Mapping that()=(..)
      class method mut This #apply(This2.Name.Mapping that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This2.Name.Mapping that)=(..)
      mut method Void #squareAdd(This2.Name clear)=(..)
      mut method Void #squareAdd(This2.Name deepClear)=(..)
      mut method Void #squareAdd(This2.Name.Mapping deep)=(..)
      mut method Void #squareAdd(This2.Name hide)=(..)
      #typed{watched=This2.Name.Mapping usedMethods=This2.Bool.true(), This2.Name.#shortCircut#minusgt(), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.Name.#shortResult#minusgt(that), This2.S.StringBuilder.#stringLiteralBuilder(), This2.Name.#from(stringLiteral), This2.Name.#shortProcess#minusgt(that,other), This2.Name.#equalgt0(other)close}
      }
    @This1.Public MethodClash={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    @This1.Public ClassClash={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    @This1.Public InvalidName={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    @This1.Public InvalidMap={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    #typed{typeDep=<private>coherentDep=<private>watched=This1.Name.Mapping usedMethods=This.Lifted.code(), This1.Introspection.Nested.from(library), This.Acc.that()hiddenSupertypes=This.Lifted close}
    @This1.AbstractTowel{trait}
    }
  @This.Public Class={
    class method Library #colon0(This1.Trait that)=(..)
    class method Library #colon0(class This1.Trait.Lifted lifted)=(..)
    ClassOperators={class method class This1 #apply()=(..)#typed{close}}
    MutReferenceEquality={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    MutStructuralEquality={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    ImmEquality={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    MutClone={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    ReadClone={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    ReadEquality={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    ImmNorm={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    ImmToString={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    ReadToString={[This2.Trait.Lifted]
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut This2.Trait.Acc squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method Library code()=(..)
      class method This2.Trait #plus0(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Trait #plus1(Library lib)[This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      class method This2.Introspection.Nested nested()=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This3.Trait usedMethods=This1.code()close}}
      #typed{usedMethods=This.ClassOperators.#apply(), This2.Trait.#apply(squareBuilder), This2.Trait.#plus0(lib), This2.Trait.#plus1(lib), This2.Trait.nested()refined=code(), #plus0(lib), #plus1(lib), nested()close}
      }
    #typed{usedMethods=This1.Trait.code(), This1.Trait.Lifted.code()close}
    @This1.AbstractTowel{class}
    }
  @This.Public Deploy={
    class method Void towel(This1.Url url, Library code)=(..)
    class method Void module(This1.Url url, Library code, This1.Name name)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.MethodClash, This1.Trait.ClassClash]=(..)
    class method This1.Trait module(Library that, This1.Name n)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.MethodClash, This1.Trait.ClassClash]=(..)
    #typed{usedMethods=This1.Debug.of(), This1.Url.toS(), This1.Debug.deployLibrary(that,lib), This1.Trait.code(), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uA(), This1.S.StringBuilder.#lb(), This1.S.StringBuilder.#ls(), This1.S.StringBuilder.#lt(), This1.S.StringBuilder.#lr(), This1.S.StringBuilder.#la(), This1.S.StringBuilder.#lc(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lo(), This1.S.StringBuilder.#lw(), This1.S.StringBuilder.#le(), This1.S.StringBuilder.#ll(), This1.Name.#from(stringLiteral), This1.Introspection.Nested.from(library), This1.Introspection.Nested.nested(name), This1.Name.Mapping.#apply(), This1.Trait.Acc.#apply(that), This1.Introspection.Nested.nesteds(), This1.Introspection.Nested.List.#iterator(), This1.Introspection.Nested.List.#startIndex(), This1.Introspection.Nested.List.#hasElem(that), This1.Bool.#shortCircut#andand(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.Bool.#shortResult#andand(that), This1.Introspection.Nested.List.#incomplete(that), This1.Bool.#shortProcess#andand(that,other), This1.Introspection.Nested.List.#elem#default(that), This1.Introspection.Nested.nameFromRoot(), This1.Name.#equalequal0(that), This1.Bool.#shortCircut#oror(), This1.Bool.#shortResult#oror(that), This1.Bool.#shortProcess#oror(that,other), This1.Introspection.Nested.innerDoc(), This1.Introspection.Doc.annotation(nested), This1.Introspection.Doc.Opt.#if(), This1.Name.toS(), This1.Name.#plusplus1(prefix), This1.Name.#equalgt0(other), This1.Trait.Acc.#squareAdd(deep), This1.Trait.Acc.#squareAdd(hide), This1.Size.#succ(), This1.Introspection.Nested.List.#close(that), This1.Trait.#apply(that), This1.Trait.#apply(squareBuilder), This1.Trait.Acc.##apply#squareBuilder(), This1.Trait.Acc.#shortCircutSquare(), This1.Trait.Acc.#squareAdd(deepClear), This1.S.StringBuilder.#lh(), This1.S.StringBuilder.#li(), This1.Name.Mapping.#from(stringLiteral)close}
    @This1.AbstractTowel{deploy}
    }
  @This.Public Message={interface[This1.HasToS]
    @This1.Public mut method Void text(This1.S that)
    read method This1.S toS()
    @This1.Public read method This1.S text()
    @This1.Public method This #whoopsed(Library atPos)
    @This1.Public ClassOperators={class method This2.Trait #apply()=(..)#typed{typeDep=<private>, <private>coherentDep=<private>watched=This2.AbstractTowel close}}
    @This1.Public Guard={interface[This1, This2.HasToS]
      mut method Void text(This2.S that)
      read method This2.S toS()
      read method This2.S text()
      method This1 #whoopsed(Library atPos)
      #typed{refined=text(that), toS(), text(), #whoopsed(atPos)}
      }
    @This1.Public Assertion={interface[This1, This2.HasToS]
      mut method Void text(This2.S that)
      read method This2.S toS()
      read method This2.S text()
      method This1 #whoopsed(Library atPos)
      #typed{refined=text(that), toS(), text(), #whoopsed(atPos)}
      }
    #typed{typeDep=<private>, <private>metaCoherentDep=<private>watched=This1.AbstractTowel refined=toS()}
    @This1.AbstractTowel{message}
    }
  @This.Public X={[This1.Message, This1.HasToS, This1.Message.Assertion]
    mut method Void text(This1.S that)=(..)
    read method This1.S text()=(..)
    class method mut This #apply(This1.S text)=(..)
    class method mut This #apply(This1.S that)=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    method This1.Message #whoopsed(Library atPos)=(..)
    read method This1.S toS()=(..)
    #typed{watched=This1.Introspection.Nested usedMethods=This1.S.StringBuilder.toS()refined=text(that), text(), #whoopsed(atPos), toS()close}
    @This1.AbstractTowel{x}
    }
  @This.Public Collection={
    @This1.Public class method This1.Trait optionalTrait()=(..)
    @This1.Public class method Library optional(class Any that)=(..)
    @This1.Public class method This1.Trait listTrait()=(..)
    @This1.Public class method This1.Trait listEqTrait()=(..)
    @This1.Public class method Library list(class Any that)[This1.Trait.InvalidMap]=(..)
    @This1.Public IterationIncomplete={[This2.Message, This2.HasToS, This2.Message.Guard]
      mut method Void text(This2.S that)=(..)
      read method This2.S text()=(..)
      class method mut This #apply(This2.S text)=(..)
      class method mut This #apply(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(that), text(), #whoopsed(atPos), toS()close}
      }
    @This1.Public NoElementInOpt={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    @This1.Public OutOfBounds={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    @This1.Public ElementNotImm={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    @This1.Public ElementNotMut={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=(..)
      read method This2.S text()=(..)
      mut method Void text(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{watched=This2.Introspection.Nested usedMethods=This2.S.StringBuilder.toS()refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    #typed{typeDep=<private>, <private>, <private>, <private>coherentDep=<private>, <private>, <private>, <private>watched=This1.Trait usedMethods=This1.Class.ClassOperators.#apply(), This1.Trait.Acc.##apply#squareBuilder(), This1.Trait.Acc.#shortCircutSquare(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uE(), This1.S.StringBuilder.#ll(), This1.S.StringBuilder.#le(), This1.S.StringBuilder.#lm(), This1.Name.Mapping.#from(stringLiteral), This1.Name.#equalgt0(target), This1.Trait.Acc.#squareAdd(that), This1.Class.#colon0(that), This1.Bool.true(), This1.S.StringBuilder.#d0(), This1.Size.#from(stringLiteral), This1.Size.#lt0(that), This1.Size.#bangequal0(that), This1.S.StringBuilder.#lu(), This1.S.StringBuilder.#lt(), This1.S.StringBuilder.#li(), This1.S.StringBuilder.#sspace(), This1.S.StringBuilder.#lf(), This1.S.StringBuilder.#lo(), This1.S.StringBuilder.#lr(), This1.S.StringBuilder.#ls(), This1.S.StringBuilder.#lk(), This1.S.StringBuilder.#lp(), This1.S.StringBuilder.#ld(), This1.S.StringBuilder.#ln(), This1.S.#from(stringLiteral), This1.Size.#pred(), This1.Bool.#shortCircut#andand(), This1.Bool.#shortResult#andand(that), This1.Bool.#shortProcess#andand(that,other), This1.Size.#succ(), This1.S.StringBuilder.#d1(), This1.Bool.false(), This1.Break.#apply(), This1.Bool.#bang0(), This1.S.StringBuilder.#uW(), This1.S.StringBuilder.#lh(), This1.S.StringBuilder.#la(), This1.S.StringBuilder.#lg(), This1.S.StringBuilder.#lc(), This1.S.StringBuilder.#scomma(), This1.S.StringBuilder.#lb(), This1.S.StringBuilder.#ly(), This1.S.StringBuilder.#sdot(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lz(), This1.S.StringBuilder.#lv(), This.IterationIncomplete.#from(stringLiteral), This1.Size.#equalequal0(that), This1.Bool.#shortCircut#oror(), This1.Bool.#shortResult#oror(that), This1.Bool.#shortProcess#oror(that,other), This1.Size.#ltequal0(that), This1.S.StringBuilder.#sless(), This1.Size.#plus0(that), This1.Size.#minus0(that)hiddenSupertypes=This1.Trait.Lifted, This1.HasToS close}
    @This1.AbstractTowel{collection}
    }
  @This.Public Cache={Lazy={#typed{close}@{lazyCache}}Now={#typed{close}@{readEagerCache}}Clear={#typed{close}@{invalidateCache}}#typed{close}@This1.AbstractTowel{cache}}
  @This.Public Data={
    @This1.Public class method This #apply()=(..)
    @This1.Public method Library #colon0(Library lib)=(..)
    @This1.Public method Library #colon0(This1.Trait that)=(..)
    @This1.Public Close={
      @This2.Public class method This #apply(This2.Name that)=(..)
      @This2.Public method This2.Trait #colon0(This2.Trait t)=(..)
      @This2.Public method This2.Trait #colon0(class This2.Trait.Lifted l)=(..)
      @This2.Public method This2.Trait #colon0(Library that)=(..)
      @This2.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ls(), This3.Name.#from(stringLiteral), This1.#apply(that)close}}
      @This2.Public Fail={[This3.Message, This3.HasToS, This3.Message.Guard]
        class method This #apply()=(..)
        class method mut This #apply(This3.S that)=(..)
        read method This3.S text()=(..)
        mut method Void text(This3.S that)=(..)
        class method This #from(This3.S.StringBuilder stringLiteral)=(..)
        method This3.Message #whoopsed(Library atPos)=(..)
        read method This3.S toS()=(..)
        #typed{watched=This3.Introspection.Nested usedMethods=This3.S.StringBuilder.toS()refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
        }
      #typed{typeDep=<private>coherentDep=<private>usedMethods=This2.Trait.code(), This2.Trait.Lifted.code(), This2.Name.toS(), This2.Trait.#apply(that)close}
      }
    @This1.Public AddConstructors={
      @This2.Public class method This #apply(This2.Name that)=(..)
      @This2.Public method This2.Trait #colon0(This2.Trait t)=(..)
      @This2.Public method This2.Trait #colon0(class This2.Trait.Lifted l)=(..)
      @This2.Public method This2.Trait #colon0(Library that)=(..)
      @This2.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ls(), This3.Name.#from(stringLiteral), This1.#apply(that)close}}
      @This2.Public Fail={[This3.Message, This3.HasToS, This3.Message.Guard]
        class method This #apply()=(..)
        class method mut This #apply(This3.S that)=(..)
        read method This3.S text()=(..)
        mut method Void text(This3.S that)=(..)
        class method This #from(This3.S.StringBuilder stringLiteral)=(..)
        method This3.Message #whoopsed(Library atPos)=(..)
        read method This3.S toS()=(..)
        #typed{watched=This3.Introspection.Nested usedMethods=This3.S.StringBuilder.toS()refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
        }
      #typed{typeDep=<private>coherentDep=<private>usedMethods=This2.Trait.code(), This2.Trait.Lifted.code(), This2.Name.toS(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#shash(), This2.S.StringBuilder.#la(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#ly(), This2.S.#from(stringLiteral), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#uK(), This2.Trait.#apply(that)close}
      }
    @This1.Public Wither={
      @This2.Public class method This #apply(This2.Name that)=(..)
      @This2.Public method This2.Trait #colon0(This2.Trait t)=(..)
      @This2.Public method This2.Trait #colon0(class This2.Trait.Lifted l)=(..)
      @This2.Public method This2.Trait #colon0(Library that)=(..)
      @This2.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ls(), This3.Name.#from(stringLiteral), This1.#apply(that)close}}
      @This2.Public Fail={[This3.Message, This3.HasToS, This3.Message.Guard]
        class method This #apply()=(..)
        class method mut This #apply(This3.S that)=(..)
        read method This3.S text()=(..)
        mut method Void text(This3.S that)=(..)
        class method This #from(This3.S.StringBuilder stringLiteral)=(..)
        method This3.Message #whoopsed(Library atPos)=(..)
        read method This3.S toS()=(..)
        #typed{watched=This3.Introspection.Nested usedMethods=This3.S.StringBuilder.toS()refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
        }
      #typed{typeDep=<private>coherentDep=<private>usedMethods=This2.Trait.code(), This2.Trait.Lifted.code(), This2.Name.toS(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#shash(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#uK(), This2.S.#from(stringLiteral), This2.Trait.#apply(that)close}
      }
    @This1.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This1.#apply()close}}
    #typed{typeDep=<private>, <private>, <private>coherentDep=<private>, <private>, <private>watched=This1.Trait usedMethods=This.AddConstructors.ClassOperators.#apply(), This.AddConstructors.#colon0(t), This.Wither.ClassOperators.#apply(), This.Wither.#colon0(t), This.Close.ClassOperators.#apply(), This.Close.#colon0(t), This1.Class.ClassOperators.#apply(), This1.Class.#colon0(that), This1.Bool.#bang0()hiddenSupertypes=This1.Trait.Lifted, This1.HasToS close}
    @This1.AbstractTowel{data}
    }
  @This.Public Introspection={@This1.Public Nested={[This2.HasToS]
    @This2.Public method This2.Bool #equalequal0(This that)=(..)
    @This2.Public method This2.Bool #bangequal0(This that)=(..)
    @This2.Public class method This from(class Any classAny)=(..)
    @This2.Public class method This from(Library library)=(..)
    @This2.Public method This nested(This2.Name name)=(..)
    @This2.Public method This2.S outerName()=(..)
    @This2.Public method This outer()=(..)
    @This2.Public method This1.Doc outerDoc()=(..)
    @This2.Public method This1.Doc innerDoc()=(..)
    @This2.Public method This.List nesteds()=(..)
    @This2.Public method This1.Method.List methods()=(..)
    @This2.Public method This1.Type.List implements()=(..)
    @This2.Public method This2.Bool hasOuter()=(..)
    @This2.Public method This2.Bool hasHiddenImplements()=(..)
    @This2.Public method This2.Bool isClose()=(..)
    @This2.Public method This2.Bool isInterface()=(..)
    @This2.Public method This2.Bool isBinded()=(..)
    @This2.Public method This2.S toFullS()=(..)
    @This2.Public method This root()=(..)
    @This2.Public method This2.Name nameFromRoot()=(..)
    @This2.Public method This2.S position()=(..)
    @This2.Public method class Any classAny()=(..)
    read method This2.S toS()=(..)
    @This2.Public List={[This3.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This3.Size capacity)=(..)
      read method This3.Bool isEmpty()=(..)
      read method This3.Size size()=(..)
      read method read This1 readVal(This3.Size that)=(..)
      read method This1 val(This3.Size that)=(..)
      mut method mut This1 #val(This3.Size that)=(..)
      mut method Void set(This3.Size that, This1 val)=(..)
      mut method Void #set(This3.Size that, mut This1 val)=(..)
      mut method Void add(This3.Size that, This1 val)=(..)
      mut method Void #add(This3.Size that, mut This1 val)=(..)
      mut method Void remove(This3.Size that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This3.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This3.Size #startIndex()=(..)
      read method This3.Bool #hasElem(This3.Size that)=(..)
      read method This3.Bool #incomplete(This3.Size that)=(..)
      read method This1 #elem#imm(This3.Size that)=(..)
      mut method mut This1 #elem#mut(This3.Size that)=(..)
      read method This1 #elem#default(This3.Size that)=(..)
      read method read This1 #elem#read(This3.Size that)=(..)
      mut method mut This1 #update#mut(This3.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This3.Size that, This1 val)=(..)
      mut method This1 #update#default(This3.Size that, This1 val)=(..)
      read method Void #close(This3.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This3.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This3.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This3.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This3.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This3.Size start)=(..)
      mut method mut This.Iterator #vals(This3.Size start)=(..)
      read method read This.Iterator cutVals(This3.Size start)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start)=(..)
      read method read This.Iterator vals(This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size end)=(..)
      read method read This.Iterator vals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size start, This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start, This3.Size end)=(..)
      read method This3.S toS()=(..)
      read method This readClone()=(..)
      method This3.S immToString()=(..)
      class method This3.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This3.Bool contains(read This1 that)=(..)
      read method This3.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This3.Bool #equalequal0(read This that)=(..)
      read method This3.Size indexOfLeft(read This1 val)=(..)
      read method This3.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This4.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#bang0(), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Bool.#bang0(), This4.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This4.Size start()=(..)
        read method This4.Size end()=(..)
        read method This4.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This4.Size start, This4.Size end, This4.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This4.Size #startIndex()=(..)
        read method This4.Bool #hasElem(This4.Size that)=(..)
        read method This4.Bool #incomplete(This4.Size that)=(..)
        read method This2 #elem#imm(This4.Size that)=(..)
        mut method mut This2 #elem#mut(This4.Size that)=(..)
        read method This2 #elem#default(This4.Size that)=(..)
        read method read This2 #elem#read(This4.Size that)=(..)
        mut method mut This2 #update#mut(This4.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This4.Size that, This2 val)=(..)
        mut method This2 #update#default(This4.Size that, This2 val)=(..)
        read method Void #close(This4.Size that)=(..)
        #typed{usedMethods=This4.Size.#lt0(that), This4.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.S.StringBuilder.#stringLiteralBuilder(), This4.S.StringBuilder.#uW(), This4.S.StringBuilder.#lh(), This4.S.StringBuilder.#li(), This4.S.StringBuilder.#ll(), This4.S.StringBuilder.#le(), This4.S.StringBuilder.#sspace(), This4.S.StringBuilder.#lt(), This4.S.StringBuilder.#lr(), This4.S.StringBuilder.#la(), This4.S.StringBuilder.#ln(), This4.S.StringBuilder.#lg(), This4.S.StringBuilder.#lo(), This4.S.StringBuilder.#lm(), This4.S.StringBuilder.#lu(), This4.S.StringBuilder.#lp(), This4.S.StringBuilder.#lc(), This4.S.StringBuilder.#ls(), This4.S.StringBuilder.#scomma(), This4.S.StringBuilder.#ld(), This4.S.StringBuilder.#lb(), This4.S.StringBuilder.#ly(), This4.S.StringBuilder.#sdot(), This4.S.StringBuilder.#uT(), This4.S.StringBuilder.#lz(), This4.S.StringBuilder.#lf(), This4.S.StringBuilder.#lv(), This4.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{watched=This1 usedMethods=This3.Bool.true(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#d0(), This3.Size.#from(stringLiteral), This3.Size.#lt0(that), This3.Size.#bangequal0(that), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#lk(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#ln(), This3.S.#from(stringLiteral), This3.Size.#pred(), This.SlashRes.#apply(that), This3.Bool.#shortCircut#andand(), This3.Bool.#shortResult#andand(that), This3.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This3.Size.#succ(), This3.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This3.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This3.Bool.#bang0(), This3.Size.#equalequal0(that), This3.Bool.#shortCircut#oror(), This3.Bool.#shortResult#oror(that), This3.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This3.Size.#ltequal0(that), This3.S.StringBuilder.#sless(), This3.Size.#plus0(that), This3.Size.#minus0(that)refined=toS()close nativeKind=Vector nativePar=This1, This3.Collection.OutOfBounds, This3.Collection.ElementNotImm, This3.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>coherentDep=<private>watched=This1, This2.Name, This1.Doc, This1.Method, This1.Type, This2.Name.Mapping usedMethods=This2.Bool.#bang0(), This.List.#apply(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Bool.#checkTrue(), This.List.res(), This.List.SlashRes.#ltequal0(e), This2.S.StringBuilder.#d1(), This2.Size.#plus0(that), This.List.#apply(that), This1.Method.List.#apply(), This1.Method.List.res(), This1.Method.List.SlashRes.#ltequal0(e), This1.Method.List.#apply(that), This1.Type.List.#apply(), This1.Type.List.res(), This1.Type.List.SlashRes.#ltequal0(e), This1.Type.List.#apply(that), This2.S.StringBuilder.#uM(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#la(), This2.S.StringBuilder.#lg(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#stringAddAll(that), This2.S.StringBuilder.#stringAddExpr(that), This2.S.StringBuilder.#scolon(), This2.S.nl(), This2.S.#from(stringLiteral), This1.Type.List.isEmpty(), This2.Bool.#if(), This2.S.StringBuilder.#soRound(), This1.Type.List.left(), This2.S.#plusplus0(that), This1.Type.List.withoutLeft(), This1.Type.List.#iterator(), This1.Type.List.#startIndex(), This1.Type.List.#hasElem(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This1.Type.List.#incomplete(that), This2.Bool.#shortProcess#andand(that,other), This1.Type.List.#elem#default(that), This2.S.StringBuilder.#scomma(), This2.Size.#succ(), This1.Type.List.#close(that), This2.S.StringBuilder.#scRound()refined=toS()close}
    }
  @This1.Public Type={[This2.HasToS]
    @This2.Public method This2.Bool #equalequal0(This that)=(..)
    @This2.Public method This2.Bool #bangequal0(This that)=(..)
    @This2.Public method This2.S mdf()=(..)
    @This2.Public method This1.Doc doc()=(..)
    @This2.Public method This1.Nested nested()=(..)
    read method This2.S toS()=(..)
    @This2.Public List={[This3.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This3.Size capacity)=(..)
      read method This3.Bool isEmpty()=(..)
      read method This3.Size size()=(..)
      read method read This1 readVal(This3.Size that)=(..)
      read method This1 val(This3.Size that)=(..)
      mut method mut This1 #val(This3.Size that)=(..)
      mut method Void set(This3.Size that, This1 val)=(..)
      mut method Void #set(This3.Size that, mut This1 val)=(..)
      mut method Void add(This3.Size that, This1 val)=(..)
      mut method Void #add(This3.Size that, mut This1 val)=(..)
      mut method Void remove(This3.Size that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This3.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This3.Size #startIndex()=(..)
      read method This3.Bool #hasElem(This3.Size that)=(..)
      read method This3.Bool #incomplete(This3.Size that)=(..)
      read method This1 #elem#imm(This3.Size that)=(..)
      mut method mut This1 #elem#mut(This3.Size that)=(..)
      read method This1 #elem#default(This3.Size that)=(..)
      read method read This1 #elem#read(This3.Size that)=(..)
      mut method mut This1 #update#mut(This3.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This3.Size that, This1 val)=(..)
      mut method This1 #update#default(This3.Size that, This1 val)=(..)
      read method Void #close(This3.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This3.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This3.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This3.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This3.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This3.Size start)=(..)
      mut method mut This.Iterator #vals(This3.Size start)=(..)
      read method read This.Iterator cutVals(This3.Size start)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start)=(..)
      read method read This.Iterator vals(This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size end)=(..)
      read method read This.Iterator vals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size start, This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start, This3.Size end)=(..)
      read method This3.S toS()=(..)
      read method This readClone()=(..)
      method This3.S immToString()=(..)
      class method This3.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This3.Bool contains(read This1 that)=(..)
      read method This3.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This3.Bool #equalequal0(read This that)=(..)
      read method This3.Size indexOfLeft(read This1 val)=(..)
      read method This3.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This4.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#bang0(), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Bool.#bang0(), This4.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This4.Size start()=(..)
        read method This4.Size end()=(..)
        read method This4.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This4.Size start, This4.Size end, This4.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This4.Size #startIndex()=(..)
        read method This4.Bool #hasElem(This4.Size that)=(..)
        read method This4.Bool #incomplete(This4.Size that)=(..)
        read method This2 #elem#imm(This4.Size that)=(..)
        mut method mut This2 #elem#mut(This4.Size that)=(..)
        read method This2 #elem#default(This4.Size that)=(..)
        read method read This2 #elem#read(This4.Size that)=(..)
        mut method mut This2 #update#mut(This4.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This4.Size that, This2 val)=(..)
        mut method This2 #update#default(This4.Size that, This2 val)=(..)
        read method Void #close(This4.Size that)=(..)
        #typed{usedMethods=This4.Size.#lt0(that), This4.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.S.StringBuilder.#stringLiteralBuilder(), This4.S.StringBuilder.#uW(), This4.S.StringBuilder.#lh(), This4.S.StringBuilder.#li(), This4.S.StringBuilder.#ll(), This4.S.StringBuilder.#le(), This4.S.StringBuilder.#sspace(), This4.S.StringBuilder.#lt(), This4.S.StringBuilder.#lr(), This4.S.StringBuilder.#la(), This4.S.StringBuilder.#ln(), This4.S.StringBuilder.#lg(), This4.S.StringBuilder.#lo(), This4.S.StringBuilder.#lm(), This4.S.StringBuilder.#lu(), This4.S.StringBuilder.#lp(), This4.S.StringBuilder.#lc(), This4.S.StringBuilder.#ls(), This4.S.StringBuilder.#scomma(), This4.S.StringBuilder.#ld(), This4.S.StringBuilder.#lb(), This4.S.StringBuilder.#ly(), This4.S.StringBuilder.#sdot(), This4.S.StringBuilder.#uT(), This4.S.StringBuilder.#lz(), This4.S.StringBuilder.#lf(), This4.S.StringBuilder.#lv(), This4.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{watched=This1 usedMethods=This3.Bool.true(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#d0(), This3.Size.#from(stringLiteral), This3.Size.#lt0(that), This3.Size.#bangequal0(that), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#lk(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#ln(), This3.S.#from(stringLiteral), This3.Size.#pred(), This.SlashRes.#apply(that), This3.Bool.#shortCircut#andand(), This3.Bool.#shortResult#andand(that), This3.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This3.Size.#succ(), This3.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This3.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This3.Bool.#bang0(), This3.Size.#equalequal0(that), This3.Bool.#shortCircut#oror(), This3.Bool.#shortResult#oror(that), This3.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This3.Size.#ltequal0(that), This3.S.StringBuilder.#sless(), This3.Size.#plus0(that), This3.Size.#minus0(that)refined=toS()close nativeKind=Vector nativePar=This1, This3.Collection.OutOfBounds, This3.Collection.ElementNotImm, This3.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>watched=This1, This1.Doc, This1.Nested usedMethods=This2.Bool.#bang0()refined=toS()close}
    }
  @This1.Public Doc={[This2.HasToS]
    @This2.Public method This2.Bool #equalequal0(This that)=(..)
    @This2.Public method This2.Bool #bangequal0(This that)=(..)
    @This2.Public method This1.Nested root()=(..)
    @This2.Public method This2.Name nameFromRoot()=(..)
    @This2.Public method This.List docs()=(..)
    @This2.Public method This2.S.List texts()=(..)
    @This2.Public method This2.Bool hasAnnotation()=(..)
    @This2.Public method This1.Nested nested()=(..)
    @This2.Public method This2.Name name()=(..)
    @This2.Public method This2.Bool annotatedAs(class Any that)=(..)
    @This2.Public method This2.Bool annotatedAs(This1.Nested nested)=(..)
    @This2.Public method This.Opt annotation(class Any that)=(..)
    @This2.Public method This.Opt annotation(This1.Nested nested)=(..)
    read method This2.S toS()=(..)
    @This2.Public Opt={
      class method mut This #apply()=(..)
      class method mut This #apply(fwd mut This1 that)=(..)
      read method read This1 get()=(..)
      mut method mut This1 #get()=(..)
      read method This3.Bool #if()=(..)
      #typed{close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
      }
    @This2.Public List={[This3.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This3.Size capacity)=(..)
      read method This3.Bool isEmpty()=(..)
      read method This3.Size size()=(..)
      read method read This1 readVal(This3.Size that)=(..)
      read method This1 val(This3.Size that)=(..)
      mut method mut This1 #val(This3.Size that)=(..)
      mut method Void set(This3.Size that, This1 val)=(..)
      mut method Void #set(This3.Size that, mut This1 val)=(..)
      mut method Void add(This3.Size that, This1 val)=(..)
      mut method Void #add(This3.Size that, mut This1 val)=(..)
      mut method Void remove(This3.Size that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This3.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This3.Size #startIndex()=(..)
      read method This3.Bool #hasElem(This3.Size that)=(..)
      read method This3.Bool #incomplete(This3.Size that)=(..)
      read method This1 #elem#imm(This3.Size that)=(..)
      mut method mut This1 #elem#mut(This3.Size that)=(..)
      read method This1 #elem#default(This3.Size that)=(..)
      read method read This1 #elem#read(This3.Size that)=(..)
      mut method mut This1 #update#mut(This3.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This3.Size that, This1 val)=(..)
      mut method This1 #update#default(This3.Size that, This1 val)=(..)
      read method Void #close(This3.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This3.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This3.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This3.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This3.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This3.Size start)=(..)
      mut method mut This.Iterator #vals(This3.Size start)=(..)
      read method read This.Iterator cutVals(This3.Size start)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start)=(..)
      read method read This.Iterator vals(This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size end)=(..)
      read method read This.Iterator vals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size start, This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start, This3.Size end)=(..)
      read method This3.S toS()=(..)
      read method This readClone()=(..)
      method This3.S immToString()=(..)
      class method This3.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This3.Bool contains(read This1 that)=(..)
      read method This3.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This3.Bool #equalequal0(read This that)=(..)
      read method This3.Size indexOfLeft(read This1 val)=(..)
      read method This3.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This4.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#bang0(), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Bool.#bang0(), This4.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This4.Size start()=(..)
        read method This4.Size end()=(..)
        read method This4.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This4.Size start, This4.Size end, This4.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This4.Size #startIndex()=(..)
        read method This4.Bool #hasElem(This4.Size that)=(..)
        read method This4.Bool #incomplete(This4.Size that)=(..)
        read method This2 #elem#imm(This4.Size that)=(..)
        mut method mut This2 #elem#mut(This4.Size that)=(..)
        read method This2 #elem#default(This4.Size that)=(..)
        read method read This2 #elem#read(This4.Size that)=(..)
        mut method mut This2 #update#mut(This4.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This4.Size that, This2 val)=(..)
        mut method This2 #update#default(This4.Size that, This2 val)=(..)
        read method Void #close(This4.Size that)=(..)
        #typed{usedMethods=This4.Size.#lt0(that), This4.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.S.StringBuilder.#stringLiteralBuilder(), This4.S.StringBuilder.#uW(), This4.S.StringBuilder.#lh(), This4.S.StringBuilder.#li(), This4.S.StringBuilder.#ll(), This4.S.StringBuilder.#le(), This4.S.StringBuilder.#sspace(), This4.S.StringBuilder.#lt(), This4.S.StringBuilder.#lr(), This4.S.StringBuilder.#la(), This4.S.StringBuilder.#ln(), This4.S.StringBuilder.#lg(), This4.S.StringBuilder.#lo(), This4.S.StringBuilder.#lm(), This4.S.StringBuilder.#lu(), This4.S.StringBuilder.#lp(), This4.S.StringBuilder.#lc(), This4.S.StringBuilder.#ls(), This4.S.StringBuilder.#scomma(), This4.S.StringBuilder.#ld(), This4.S.StringBuilder.#lb(), This4.S.StringBuilder.#ly(), This4.S.StringBuilder.#sdot(), This4.S.StringBuilder.#uT(), This4.S.StringBuilder.#lz(), This4.S.StringBuilder.#lf(), This4.S.StringBuilder.#lv(), This4.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{watched=This1 usedMethods=This3.Bool.true(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#d0(), This3.Size.#from(stringLiteral), This3.Size.#lt0(that), This3.Size.#bangequal0(that), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#lk(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#ln(), This3.S.#from(stringLiteral), This3.Size.#pred(), This.SlashRes.#apply(that), This3.Bool.#shortCircut#andand(), This3.Bool.#shortResult#andand(that), This3.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This3.Size.#succ(), This3.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This3.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This3.Bool.#bang0(), This3.Size.#equalequal0(that), This3.Bool.#shortCircut#oror(), This3.Bool.#shortResult#oror(that), This3.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This3.Size.#ltequal0(that), This3.S.StringBuilder.#sless(), This3.Size.#plus0(that), This3.Size.#minus0(that)refined=toS()close nativeKind=Vector nativePar=This1, This3.Collection.OutOfBounds, This3.Collection.ElementNotImm, This3.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>, <private>, <private>watched=This1, This2.AbstractTowel, This2.Name, This1.Nested usedMethods=This2.Bool.#bang0(), This.List.#apply(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Bool.#checkTrue(), This.List.res(), This.List.SlashRes.#ltequal0(e), This2.S.StringBuilder.#d1(), This2.Size.#plus0(that), This.List.#apply(that), This2.S.List.#apply(), This2.S.List.res(), This2.S.List.SlashRes.#ltequal0(e), This2.S.List.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#if(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This2.Bool.true(), This.List.matchAny(), This.List.MatchAny.vals(), This.List.#iterator(), This.List.#startIndex(), This.List.#hasElem(that), This.List.#incomplete(that), This.List.#elem#default(that), This.List.MatchAny.res(), This.List.MatchAny.#ltequal0(b), This2.Size.#succ(), This.List.#close(that), This.List.MatchAny.#apply(that), This.Opt.#apply(that), This.Opt.#if(), This.Opt.#apply()refined=toS()close}
    }
  @This1.Public Method={[This2.HasToS]
    @This2.Public method This2.Bool #equalequal0(This that)=(..)
    @This2.Public method This2.Bool #bangequal0(This that)=(..)
    @This2.Public method This1.Doc doc()=(..)
    @This2.Public method This1.Type returnType()=(..)
    @This2.Public method This1.Type.List parameters()=(..)
    @This2.Public method This1.Type.List exceptions()=(..)
    @This2.Public method This2.Bool isRefined()=(..)
    @This2.Public method This2.Bool isAbstract()=(..)
    @This2.Public method This1.Nested nested()=(..)
    @This2.Public method This2.Name nameFromRoot()=(..)
    @This2.Public method This2.S position()=(..)
    read method This2.S toS()=(..)
    @This2.Public List={[This3.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This3.Size capacity)=(..)
      read method This3.Bool isEmpty()=(..)
      read method This3.Size size()=(..)
      read method read This1 readVal(This3.Size that)=(..)
      read method This1 val(This3.Size that)=(..)
      mut method mut This1 #val(This3.Size that)=(..)
      mut method Void set(This3.Size that, This1 val)=(..)
      mut method Void #set(This3.Size that, mut This1 val)=(..)
      mut method Void add(This3.Size that, This1 val)=(..)
      mut method Void #add(This3.Size that, mut This1 val)=(..)
      mut method Void remove(This3.Size that)=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This3.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This3.Size #startIndex()=(..)
      read method This3.Bool #hasElem(This3.Size that)=(..)
      read method This3.Bool #incomplete(This3.Size that)=(..)
      read method This1 #elem#imm(This3.Size that)=(..)
      mut method mut This1 #elem#mut(This3.Size that)=(..)
      read method This1 #elem#default(This3.Size that)=(..)
      read method read This1 #elem#read(This3.Size that)=(..)
      mut method mut This1 #update#mut(This3.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This3.Size that, This1 val)=(..)
      mut method This1 #update#default(This3.Size that, This1 val)=(..)
      read method Void #close(This3.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This3.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This3.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This3.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This3.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This3.Size start)=(..)
      mut method mut This.Iterator #vals(This3.Size start)=(..)
      read method read This.Iterator cutVals(This3.Size start)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start)=(..)
      read method read This.Iterator vals(This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size end)=(..)
      read method read This.Iterator vals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #vals(This3.Size start, This3.Size end)=(..)
      read method read This.Iterator cutVals(This3.Size start, This3.Size end)=(..)
      mut method mut This.Iterator #cutVals(This3.Size start, This3.Size end)=(..)
      read method This3.S toS()=(..)
      read method This readClone()=(..)
      method This3.S immToString()=(..)
      class method This3.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This3.Bool contains(read This1 that)=(..)
      read method This3.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This3.Bool #equalequal0(read This that)=(..)
      read method This3.Size indexOfLeft(read This1 val)=(..)
      read method This3.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=(..)
        read method read This1 get()=(..)
        mut method mut This1 #get()=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This4.Collection.NoElementInOpt}
        }
      ElemBox={
        mut method Void elem(This2 that)=(..)
        read method read This1.Iterator vals()=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#bang0(), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This4.Bool that)=(..)
        read method This4.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This4.Bool pass, read This1 vals)=(..)
        lent method This4.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This4.Bool b)[Void]=(..)
        #typed{usedMethods=This4.Bool.#if(), This4.Bool.#checkTrue(), This4.Bool.#bang0(), This4.Break.#apply()close}
        }
      Iterator={
        mut method mut This1 #list()=(..)
        read method This4.Size start()=(..)
        read method This4.Size end()=(..)
        read method This4.Bool cut()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This4.Size start, This4.Size end, This4.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This4.Size #startIndex()=(..)
        read method This4.Bool #hasElem(This4.Size that)=(..)
        read method This4.Bool #incomplete(This4.Size that)=(..)
        read method This2 #elem#imm(This4.Size that)=(..)
        mut method mut This2 #elem#mut(This4.Size that)=(..)
        read method This2 #elem#default(This4.Size that)=(..)
        read method read This2 #elem#read(This4.Size that)=(..)
        mut method mut This2 #update#mut(This4.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This4.Size that, This2 val)=(..)
        mut method This2 #update#default(This4.Size that, This2 val)=(..)
        read method Void #close(This4.Size that)=(..)
        #typed{usedMethods=This4.Size.#lt0(that), This4.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This4.Bool.#if(), This4.Bool.#checkTrue(), This4.S.StringBuilder.#stringLiteralBuilder(), This4.S.StringBuilder.#uW(), This4.S.StringBuilder.#lh(), This4.S.StringBuilder.#li(), This4.S.StringBuilder.#ll(), This4.S.StringBuilder.#le(), This4.S.StringBuilder.#sspace(), This4.S.StringBuilder.#lt(), This4.S.StringBuilder.#lr(), This4.S.StringBuilder.#la(), This4.S.StringBuilder.#ln(), This4.S.StringBuilder.#lg(), This4.S.StringBuilder.#lo(), This4.S.StringBuilder.#lm(), This4.S.StringBuilder.#lu(), This4.S.StringBuilder.#lp(), This4.S.StringBuilder.#lc(), This4.S.StringBuilder.#ls(), This4.S.StringBuilder.#scomma(), This4.S.StringBuilder.#ld(), This4.S.StringBuilder.#lb(), This4.S.StringBuilder.#ly(), This4.S.StringBuilder.#sdot(), This4.S.StringBuilder.#uT(), This4.S.StringBuilder.#lz(), This4.S.StringBuilder.#lf(), This4.S.StringBuilder.#lv(), This4.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{watched=This1 usedMethods=This3.Bool.true(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#d0(), This3.Size.#from(stringLiteral), This3.Size.#lt0(that), This3.Size.#bangequal0(that), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#lk(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#ln(), This3.S.#from(stringLiteral), This3.Size.#pred(), This.SlashRes.#apply(that), This3.Bool.#shortCircut#andand(), This3.Bool.#shortResult#andand(that), This3.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This3.Size.#succ(), This3.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This3.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This3.Bool.#bang0(), This3.Size.#equalequal0(that), This3.Bool.#shortCircut#oror(), This3.Bool.#shortResult#oror(that), This3.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This3.Size.#ltequal0(that), This3.S.StringBuilder.#sless(), This3.Size.#plus0(that), This3.Size.#minus0(that)refined=toS()close nativeKind=Vector nativePar=This1, This3.Collection.OutOfBounds, This3.Collection.ElementNotImm, This3.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>watched=This1, This2.Name, This1.Doc, This1.Type, This1.Nested usedMethods=This2.Bool.#bang0(), This1.Type.List.#apply(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Bool.#checkTrue(), This1.Type.List.res(), This1.Type.List.SlashRes.#ltequal0(e), This2.S.StringBuilder.#d1(), This2.Size.#plus0(that), This1.Type.List.#apply(that)refined=toS()close}
    }
  #typed{typeDep=<private>, <private>, <private>, <private>, <private>, <private>metaCoherentDep=<private>, <private>, <private>, <private>, <private>watched=This1.AbstractTowel, This1.Trait hiddenSupertypes=This1.Trait.Lifted close}@This1.AbstractTowel{introspection}}
  @This.Public Organize={
    read method This1.Name public()=(..)
    class method This #apply(This1.Name public)=(..)
    class method This #apply()=(..)
    method This1.Size maxLev(This1.Introspection.Nested that)=(..)
    method This1.Trait #colon0(Library that)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.ClassClash, This1.Trait.MethodClash]=(..)
    method This1.Trait #colon0(This1.Trait trait)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.ClassClash, This1.Trait.MethodClash]=(..)
    method This1.Bool isPrivate(This1.Introspection.Doc that)=(..)
    method mut This1.Trait.Acc mapHide(mut This1.Trait.Acc that, This1.Introspection.Nested n, This1.Size level)=(..)
    method mut This1.Trait.Acc mapRename$(mut This1.Trait.Acc that, This1.Introspection.Nested n, This1.Size level)=(..)
    CloseAll={
      class method This2.Trait #apply(This2.Trait that)=(..)
      class method This2.Trait #apply(This2.Trait that, This2.Introspection.Nested n)=(..)
      #typed{usedMethods=This2.Trait.code(), This2.Introspection.Nested.from(library), This2.Introspection.Nested.nesteds(), This2.Introspection.Nested.List.#iterator(), This2.Introspection.Nested.List.#startIndex(), This2.Introspection.Nested.List.#hasElem(that), This2.Bool.#shortCircut#andand(), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.Bool.#shortResult#andand(that), This2.Introspection.Nested.List.#incomplete(that), This2.Bool.#shortProcess#andand(that,other), This2.Introspection.Nested.List.#elem#default(that), This2.Size.#succ(), This2.Introspection.Nested.List.#close(that), This2.Introspection.Nested.isInterface(), This2.Bool.#bang0(), This2.Introspection.Nested.isClose(), This2.Introspection.Nested.nameFromRoot(), This2.Data.Close.#apply(that), This2.Data.Close.#colon0(t)close}
      }
    ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This1.#apply()close}}
    EmptyOnThis={class method This2.S #apply(This2.S that)=(..)#typed{usedMethods=This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#uT(), This2.S.StringBuilder.#lh(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#ls(), This2.S.#from(stringLiteral), This2.S.#equalequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue()close}}
    #typed{usedMethods=This1.S.StringBuilder.#stringLiteralBuilder(), This1.Name.#from(stringLiteral), This1.S.StringBuilder.#d0(), This1.Size.#from(stringLiteral), This1.Introspection.Nested.nesteds(), This1.Introspection.Nested.List.#iterator(), This1.Introspection.Nested.List.#startIndex(), This1.Introspection.Nested.List.#hasElem(that), This1.Bool.#shortCircut#andand(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.Bool.#shortResult#andand(that), This1.Introspection.Nested.List.#incomplete(that), This1.Bool.#shortProcess#andand(that,other), This1.Introspection.Nested.List.#elem#default(that), This1.Size.#lt0(that), This1.Size.#succ(), This1.Introspection.Nested.List.#close(that), This1.S.StringBuilder.#d1(), This1.Size.#plus0(that), This1.Trait.#apply(that), This1.Trait.code(), This1.Introspection.Nested.from(library), This1.Name.Mapping.#apply(), This1.Trait.Acc.#apply(that), This1.Size.#minus0(that), This1.Trait.#apply(squareBuilder), This.CloseAll.#apply(that), This1.Name.#equalequal0(that), This1.Introspection.Doc.annotatedAs(that), This1.Bool.#bang0(), This1.Introspection.Doc.root(), This1.Introspection.Nested.nested(name), This1.Introspection.Doc.annotatedAs(nested), This1.Size.#bangequal0(that), This1.Introspection.Nested.methods(), This1.Bool.false(), This1.Name.List.#apply(), This1.Introspection.Nested.outerDoc(), This1.Name.List.res(), This1.Introspection.Nested.nameFromRoot(), This1.Name.List.SlashRes.#ltequal0(e), This1.Bool.true(), This1.Introspection.Method.List.#iterator(), This1.Introspection.Method.List.#startIndex(), This1.Introspection.Method.List.#hasElem(that), This1.Introspection.Method.List.#incomplete(that), This1.Introspection.Method.List.#elem#default(that), This1.Introspection.Method.doc(), This1.Introspection.Method.isRefined(), This1.Introspection.Method.nameFromRoot(), This1.Introspection.Method.List.#close(that), This1.Name.List.#apply(that), This1.Name.List.#iterator(), This1.Name.List.#startIndex(), This1.Name.List.#hasElem(that), This1.Name.List.#incomplete(that), This1.Name.List.#elem#default(that), This1.Trait.Acc.#squareAdd(hide), This1.Name.List.#close(that), This1.Name.toS(), This.EmptyOnThis.#apply(that), This1.S.size(), This1.Size.#equalequal0(that), This1.S.subString(start,end), This1.S.StringBuilder.#sdollar(), This1.S.#from(stringLiteral), This1.S.contains(that), This1.S.endsWith(that), This1.S.startsWith(that), This1.S.StringBuilder.#sdot(), This1.S.replace(that,with), This1.Name.#apply(that), This1.Name.#equalgt0(other), This1.Trait.Acc.#squareAdd(deep), This1.S.#plusplus0(that)close}
    @This1.AbstractTowel{organize}
    }
  @This.Public Load={
    read method This1.Introspection.Nested.List deps()=(..)
    class method This #apply(This1.Introspection.Nested.List deps)=(..)
    class method This #apply()=(..)
    class method mut This1.Introspection.Nested.List baseDeps()=(..)
    method This1.Trait.Acc collect(Library that)=(..)
    method Library #colon0(Library that)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.MethodClash, This1.Trait.ClassClash]=(..)
    method This1.Bool match(This1.S src, This1.S dest)=(..)
    ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This1.#apply()close}}
    N={class method This2.Introspection.Nested #colon0(class Any a)=(..)ClassOperators={class method class This1 #apply()=(..)#typed{close}}#typed{usedMethods=This2.Introspection.Nested.from(classAny)close}}
    #typed{usedMethods=This1.Introspection.Nested.List.##apply#squareBuilder(), This1.Introspection.Nested.List.#shortCircutSquare(), This1.Bool.#if(), This1.Bool.#checkTrue(), This.N.ClassOperators.#apply(), This.N.#colon0(a), This1.Introspection.Nested.List.#squareAdd(that), This1.Introspection.Nested.List.#apply(squareBuilder), This1.Introspection.Nested.from(library), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uA(), This1.S.StringBuilder.#lb(), This1.S.StringBuilder.#ls(), This1.S.StringBuilder.#lt(), This1.S.StringBuilder.#lr(), This1.S.StringBuilder.#la(), This1.S.StringBuilder.#lc(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lo(), This1.S.StringBuilder.#lw(), This1.S.StringBuilder.#le(), This1.S.StringBuilder.#ll(), This1.Name.#from(stringLiteral), This1.Introspection.Nested.nested(name), This1.Introspection.Nested.from(classAny), This1.Name.Mapping.#apply(), This1.Trait.Acc.#apply(that), This1.Introspection.Nested.nesteds(), This1.Introspection.Nested.List.#iterator(), This1.Introspection.Nested.List.#startIndex(), This1.Introspection.Nested.List.#hasElem(that), This1.Bool.#shortCircut#andand(), This1.Bool.#shortResult#andand(that), This1.Introspection.Nested.List.#incomplete(that), This1.Bool.#shortProcess#andand(that,other), This1.Introspection.Nested.List.#elem#default(that), This1.Introspection.Nested.innerDoc(), This1.Introspection.Doc.annotation(nested), This1.Introspection.Doc.Opt.get(), This1.Introspection.Doc.texts(), This1.S.List.left(), This1.Introspection.Nested.nameFromRoot(), This1.Introspection.Nested.classAny(), This1.Name.#equalgt0(target), This1.Trait.Acc.#squareAdd(deep), This1.Break.#apply(), This1.Size.#succ(), This1.Introspection.Nested.List.#close(that), This1.Class.ClassOperators.#apply(), This1.Trait.#apply(that), This1.Trait.#apply(squareBuilder), This1.Class.#colon0(that), This1.S.#equalequal0(that)close}
    @This1.AbstractTowel{load}
    }
  #typed{}
  }