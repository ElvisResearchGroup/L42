{
  @This.Public@<private>{public}Public={#typed{close}}
  @This.Public@<private>{hasToS}HasToS={interface read method This1.S toS()#typed{}}
  @This.Public@<private>{break}Break={class method Void #apply()[Void]=(..)#typed{close}}
  @This.Public@<private>{bool}Bool={[This1.HasToS]
    class method This false()=(..)
    class method This true()=(..)
    method This #if()=(..)
    method Void #checkTrue()[Void]=native{..}=(..)
    method This not()=native{..}=(..)
    method This #bang0()=(..)
    method This and(This that)=native{..}=(..)
    method This or(This that)=native{..}=(..)
    method This #shortCircut#andand()=(..)
    method This #shortResult#andand(This that)=(..)
    method This #shortProcess#andand(This that, This other)=(..)
    method This #shortCircut#oror()=(..)
    method This #shortResult#oror(This that)=(..)
    method This #shortProcess#oror(This that, This other)=(..)
    method This #shortCircut#minusgt()=(..)
    method This #shortResult#minusgt(This that)=(..)
    method This #shortProcess#minusgt(This that, This other)=(..)
    read method This1.S toS()=native{..}=(..)
    read method This #equalequal0(read This that)=native{..}=(..)
    read method This #bangequal0(read This that)=(..)
    #typed{refined=toS()close nativeKind=Bool}
    }
  @This.Public@<private>{size}Size={[This1.HasToS]
    class method This zero()=(..)
    method This #plus0(This that)=native{..}=(..)
    method This #times0(This that)=native{..}=(..)
    method This #divide0(This that)=native{..}=(..)
    method This #minus0(This that)=native{..}=(..)
    read method This1.Bool #lt0(read This that)=native{..}=(..)
    read method This1.Bool #gt0(read This that)=(..)
    read method This1.Bool #ltequal0(read This that)=native{..}=(..)
    read method This1.Bool #gtequal0(read This that)=(..)
    read method This1.Bool #equalequal0(read This that)=native{..}=(..)
    read method This1.Bool #bangequal0(read This that)=(..)
    read method This1.S toS()=native{..}=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    method This #succ()=native{..}=(..)
    method This #pred()=native{..}=(..)
    method mut This.Range0 range()=(..)
    Range0={
      read method This1 limit()=(..)
      class method mut This #apply(This1 limit)=(..)
      mut method mut This #iterator()=(..)
      mut method Void #close(This1 that)=(..)
      mut method This2.Bool #incomplete(This1 that)=(..)
      mut method This1 #elem#default(This1 that)=(..)
      mut method This2.Bool #hasElem(This1 that)=(..)
      mut method This1 #startIndex()=(..)
      #typed{usedMethods=This1.#lt0(that), This1.zero()close}
      }
    InverseRange={
      read method This1 limit()=(..)
      class method mut This #apply(This1 limit)=(..)
      mut method mut This #iterator()=(..)
      mut method Void #close(This1 that)=(..)
      mut method This2.Bool #incomplete(This1 that)=(..)
      mut method This1 #elem#default(This1 that)=(..)
      mut method This2.Bool #hasElem(This1 that)=(..)
      mut method This1 #startIndex()=(..)
      #typed{usedMethods=This1.#ltequal0(that), This1.#minus0(that), This1.zero(), This1.#succ()close}
      }
    List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This1 capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This1 size()=native{..}=(..)
      read method read This1 readVal(This1 that)=native{..}=(..)
      read method This1 val(This1 that)=native{..}=(..)
      mut method mut This1 #val(This1 that)=native{..}=(..)
      mut method Void set(This1 that, This1 val)=native{..}=(..)
      mut method Void #set(This1 that, mut This1 val)=native{..}=(..)
      mut method Void add(This1 that, This1 val)=native{..}=(..)
      mut method Void #add(This1 that, mut This1 val)=native{..}=(..)
      mut method Void remove(This1 that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This1 #startIndex()=(..)
      read method This2.Bool #hasElem(This1 that)=(..)
      read method This2.Bool #incomplete(This1 that)=(..)
      read method This1 #elem#imm(This1 that)=(..)
      mut method mut This1 #elem#mut(This1 that)=(..)
      read method This1 #elem#default(This1 that)=(..)
      read method read This1 #elem#read(This1 that)=(..)
      mut method mut This1 #update#mut(This1 that, mut This1 val)=(..)
      mut method This1 #update#imm(This1 that, This1 val)=(..)
      mut method This1 #update#default(This1 that, This1 val)=(..)
      read method Void #close(This1 that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This1 that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This1 that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This1 index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This1 start)=(..)
      mut method mut This.Iterator #vals(This1 start)=(..)
      read method read This.Iterator cutVals(This1 start)=(..)
      mut method mut This.Iterator #cutVals(This1 start)=(..)
      read method read This.Iterator vals(This1 end)=(..)
      mut method mut This.Iterator #vals(This1 end)=(..)
      read method read This.Iterator cutVals(This1 end)=(..)
      mut method mut This.Iterator #cutVals(This1 end)=(..)
      read method read This.Iterator vals(This1 start, This1 end)=(..)
      mut method mut This.Iterator #vals(This1 start, This1 end)=(..)
      read method read This.Iterator cutVals(This1 start, This1 end)=(..)
      mut method mut This.Iterator #cutVals(This1 start, This1 end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=native{..}=(..)
      method This2.S immToString()=native{..}=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This1 indexOfLeft(read This1 val)=(..)
      read method This1 indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2 that)=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This2 start()=(..)
        read method This2 end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This2 start, This2 end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This2 #startIndex()=(..)
        read method This3.Bool #hasElem(This2 that)=(..)
        read method This3.Bool #incomplete(This2 that)=(..)
        read method This2 #elem#imm(This2 that)=(..)
        mut method mut This2 #elem#mut(This2 that)=(..)
        read method This2 #elem#default(This2 that)=(..)
        read method read This2 #elem#read(This2 that)=(..)
        mut method mut This2 #update#mut(This2 that, mut This2 val)=(..)
        mut method This2 #update#imm(This2 that, This2 val)=(..)
        mut method This2 #update#default(This2 that, This2 val)=(..)
        read method Void #close(This2 that)=(..)
        #typed{usedMethods=This2.#lt0(that), This2.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This1.#from(stringLiteral), This1.#lt0(that), This1.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This1.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This1.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This1.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This1.#ltequal0(that), This2.S.StringBuilder.#sless(), This1.#plus0(that), This1.#minus0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{usedMethods=This1.Bool.not(), This1.S.StringBuilder.toS(), This1.S.toInt(), This.Range0.#apply(limit)refined=toS()close nativeKind=Int}
    }
  @This.Public@<private>{num}Num={[This1.HasToS]
    class method This zero()=(..)
    method This #plus0(This that)=native{..}=(..)
    method This #times0(This that)=native{..}=(..)
    method This #divide0(This that)=native{..}=(..)
    method This #minus0(This that)=native{..}=(..)
    read method This1.Bool #lt0(read This that)=native{..}=(..)
    read method This1.Bool #gt0(read This that)=(..)
    read method This1.Bool #ltequal0(read This that)=native{..}=(..)
    read method This1.Bool #gtequal0(read This that)=(..)
    read method This1.Bool #equalequal0(read This that)=native{..}=(..)
    read method This1.Bool #bangequal0(read This that)=(..)
    read method This1.S toS()=native{..}=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This2.Size size()=native{..}=(..)
      read method read This1 readVal(This2.Size that)=native{..}=(..)
      read method This1 val(This2.Size that)=native{..}=(..)
      mut method mut This1 #val(This2.Size that)=native{..}=(..)
      mut method Void set(This2.Size that, This1 val)=native{..}=(..)
      mut method Void #set(This2.Size that, mut This1 val)=native{..}=(..)
      mut method Void add(This2.Size that, This1 val)=native{..}=(..)
      mut method Void #add(This2.Size that, mut This1 val)=native{..}=(..)
      mut method Void remove(This2.Size that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1 #elem#imm(This2.Size that)=(..)
      mut method mut This1 #elem#mut(This2.Size that)=(..)
      read method This1 #elem#default(This2.Size that)=(..)
      read method read This1 #elem#read(This2.Size that)=(..)
      mut method mut This1 #update#mut(This2.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This2.Size that, This1 val)=(..)
      mut method This1 #update#default(This2.Size that, This1 val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This2.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=native{..}=(..)
      method This2.S immToString()=native{..}=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1 val)=(..)
      read method This2.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2 that)=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2 #elem#imm(This3.Size that)=(..)
        mut method mut This2 #elem#mut(This3.Size that)=(..)
        read method This2 #elem#default(This3.Size that)=(..)
        read method read This2 #elem#read(This3.Size that)=(..)
        mut method mut This2 #update#mut(This3.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This3.Size that, This2 val)=(..)
        mut method This2 #update#default(This3.Size that, This2 val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.#equalequal0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{usedMethods=This1.Bool.not(), This1.S.StringBuilder.toS(), This1.S.toNum()refined=toS()close nativeKind=BigRational}
    }
  @This.Public@<private>{s}S={[This1.HasToS]
    class method This empty()=(..)
    method This #plusplus0(This that)=native{..}=(..)
    read method This toS()=native{..}=(..)
    read method This1.Size size()=native{..}=(..)
    read method This1.Size toInt()=native{..}=(..)
    read method This1.Num toNum()=native{..}=(..)
    read method<private>toName()=native{..}=(..)
    method This sum(This that)=native{..}=(..)
    class method This #from(This.StringBuilder stringLiteral)=(..)
    read method This1.Bool #equalequal0(read This that)=native{..}=(..)
    read method This1.Bool #bangequal0(read This that)=(..)
    method This1.Bool contains(This that)=native{..}=(..)
    method This replace(This that, This with)=native{..}=(..)
    method This subString(This1.Size start, This1.Size end)=native{..}=(..)
    method This1.Bool startsWith(This that)=native{..}=(..)
    method This1.Bool endsWith(This that)=native{..}=(..)
    method This trim()=native{..}=(..)
    class method This dq()=(..)
    class method This nl()=(..)
    ParseError={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This1 that)=native{..}=(..)
      read method This1 text()=native{..}=(..)
      mut method Void text(This1 that)=native{..}=(..)
      class method This #from(This1.StringBuilder stringLiteral)=(..)
      read method This1 toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{usedMethods=This1.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    StringBuilder={[This2.HasToS]
      mut method Void #d0()=native{..}=(..)
      mut method Void #d1()=native{..}=(..)
      mut method Void #d2()=native{..}=(..)
      mut method Void #d3()=native{..}=(..)
      mut method Void #d4()=native{..}=(..)
      mut method Void #d5()=native{..}=(..)
      mut method Void #d6()=native{..}=(..)
      mut method Void #d7()=native{..}=(..)
      mut method Void #d8()=native{..}=(..)
      mut method Void #d9()=native{..}=(..)
      mut method Void #lq()=native{..}=(..)
      mut method Void #lw()=native{..}=(..)
      mut method Void #le()=native{..}=(..)
      mut method Void #lr()=native{..}=(..)
      mut method Void #lt()=native{..}=(..)
      mut method Void #ly()=native{..}=(..)
      mut method Void #lu()=native{..}=(..)
      mut method Void #li()=native{..}=(..)
      mut method Void #lo()=native{..}=(..)
      mut method Void #lp()=native{..}=(..)
      mut method Void #la()=native{..}=(..)
      mut method Void #ls()=native{..}=(..)
      mut method Void #ld()=native{..}=(..)
      mut method Void #lf()=native{..}=(..)
      mut method Void #lg()=native{..}=(..)
      mut method Void #lh()=native{..}=(..)
      mut method Void #lj()=native{..}=(..)
      mut method Void #lk()=native{..}=(..)
      mut method Void #ll()=native{..}=(..)
      mut method Void #lz()=native{..}=(..)
      mut method Void #lx()=native{..}=(..)
      mut method Void #lc()=native{..}=(..)
      mut method Void #lv()=native{..}=(..)
      mut method Void #lb()=native{..}=(..)
      mut method Void #ln()=native{..}=(..)
      mut method Void #lm()=native{..}=(..)
      mut method Void #uQ()=native{..}=(..)
      mut method Void #uW()=native{..}=(..)
      mut method Void #uE()=native{..}=(..)
      mut method Void #uR()=native{..}=(..)
      mut method Void #uT()=native{..}=(..)
      mut method Void #uY()=native{..}=(..)
      mut method Void #uU()=native{..}=(..)
      mut method Void #uI()=native{..}=(..)
      mut method Void #uO()=native{..}=(..)
      mut method Void #uP()=native{..}=(..)
      mut method Void #uA()=native{..}=(..)
      mut method Void #uS()=native{..}=(..)
      mut method Void #uD()=native{..}=(..)
      mut method Void #uF()=native{..}=(..)
      mut method Void #uG()=native{..}=(..)
      mut method Void #uH()=native{..}=(..)
      mut method Void #uJ()=native{..}=(..)
      mut method Void #uK()=native{..}=(..)
      mut method Void #uL()=native{..}=(..)
      mut method Void #uZ()=native{..}=(..)
      mut method Void #uX()=native{..}=(..)
      mut method Void #uC()=native{..}=(..)
      mut method Void #uV()=native{..}=(..)
      mut method Void #uB()=native{..}=(..)
      mut method Void #uN()=native{..}=(..)
      mut method Void #uM()=native{..}=(..)
      mut method Void #splus()=native{..}=(..)
      mut method Void #sless()=native{..}=(..)
      mut method Void #stilde()=native{..}=(..)
      mut method Void #sbang()=native{..}=(..)
      mut method Void #sand()=native{..}=(..)
      mut method Void #sor()=native{..}=(..)
      mut method Void #sleft()=native{..}=(..)
      mut method Void #sright()=native{..}=(..)
      mut method Void #sequal()=native{..}=(..)
      mut method Void #stimes()=native{..}=(..)
      mut method Void #sdivide()=native{..}=(..)
      mut method Void #soRound()=native{..}=(..)
      mut method Void #scRound()=native{..}=(..)
      mut method Void #soSquare()=native{..}=(..)
      mut method Void #scSquare()=native{..}=(..)
      mut method Void #soCurly()=native{..}=(..)
      mut method Void #scCurly()=native{..}=(..)
      mut method Void #sdQuote()=native{..}=(..)
      mut method Void #ssQuote()=native{..}=(..)
      mut method Void #shQuote()=native{..}=(..)
      mut method Void #sqMark()=native{..}=(..)
      mut method Void #shat()=native{..}=(..)
      mut method Void #scomma()=native{..}=(..)
      mut method Void #ssemicolon()=native{..}=(..)
      mut method Void #scolon()=native{..}=(..)
      mut method Void #sdot()=native{..}=(..)
      mut method Void #sunderscore()=native{..}=(..)
      mut method Void #shash()=native{..}=(..)
      mut method Void #sat()=native{..}=(..)
      mut method Void #sdollar()=native{..}=(..)
      mut method Void #spercent()=native{..}=(..)
      mut method Void #sbackSlash()=native{..}=(..)
      mut method Void #sspace()=native{..}=(..)
      mut method Void #snewLine()=native{..}=(..)
      mut method Void #stringAddAll(mut This that)=(..)
      mut method Void #stringAddExpr(This2.HasToS that)=(..)
      mut method Void addAll(This1 string)=native{..}=(..)
      class method mut This #stringLiteralBuilder()=(..)
      read method This1 toS()=native{..}=(..)
      #typed{usedMethods=This2.HasToS.toS()refined=toS()close nativeKind=StringBuilder}
      }
    List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This2.Size size()=native{..}=(..)
      read method read This1 readVal(This2.Size that)=native{..}=(..)
      read method This1 val(This2.Size that)=native{..}=(..)
      mut method mut This1 #val(This2.Size that)=native{..}=(..)
      mut method Void set(This2.Size that, This1 val)=native{..}=(..)
      mut method Void #set(This2.Size that, mut This1 val)=native{..}=(..)
      mut method Void add(This2.Size that, This1 val)=native{..}=(..)
      mut method Void #add(This2.Size that, mut This1 val)=native{..}=(..)
      mut method Void remove(This2.Size that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1 #elem#imm(This2.Size that)=(..)
      mut method mut This1 #elem#mut(This2.Size that)=(..)
      read method This1 #elem#default(This2.Size that)=(..)
      read method read This1 #elem#read(This2.Size that)=(..)
      mut method mut This1 #update#mut(This2.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This2.Size that, This1 val)=(..)
      mut method This1 #update#default(This2.Size that, This1 val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This1 readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This2.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This1 toS()=(..)
      read method This readClone()=native{..}=(..)
      method This1 immToString()=native{..}=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1 val)=(..)
      read method This2.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2 that)=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2 #elem#imm(This3.Size that)=(..)
        mut method mut This2 #elem#mut(This3.Size that)=(..)
        read method This2 #elem#default(This3.Size that)=(..)
        read method read This2 #elem#read(This3.Size that)=(..)
        mut method mut This2 #update#mut(This3.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This3.Size that, This2 val)=(..)
        mut method This2 #update#default(This3.Size that, This2 val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This2.StringBuilder.#stringLiteralBuilder(), This2.StringBuilder.#uW(), This2.StringBuilder.#lh(), This2.StringBuilder.#li(), This2.StringBuilder.#ll(), This2.StringBuilder.#le(), This2.StringBuilder.#sspace(), This2.StringBuilder.#lt(), This2.StringBuilder.#lr(), This2.StringBuilder.#la(), This2.StringBuilder.#ln(), This2.StringBuilder.#lg(), This2.StringBuilder.#lo(), This2.StringBuilder.#lm(), This2.StringBuilder.#lu(), This2.StringBuilder.#lp(), This2.StringBuilder.#lc(), This2.StringBuilder.#ls(), This2.StringBuilder.#scomma(), This2.StringBuilder.#ld(), This2.StringBuilder.#lb(), This2.StringBuilder.#ly(), This2.StringBuilder.#sdot(), This2.StringBuilder.#uT(), This2.StringBuilder.#lz(), This2.StringBuilder.#lf(), This2.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This1.StringBuilder.#stringLiteralBuilder(), This1.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This1.StringBuilder.#lm(), This1.StringBuilder.#lu(), This1.StringBuilder.#ll(), This1.StringBuilder.#lt(), This1.StringBuilder.#li(), This1.StringBuilder.#sspace(), This1.StringBuilder.#lf(), This1.StringBuilder.#lo(), This1.StringBuilder.#lr(), This1.StringBuilder.#ls(), This1.StringBuilder.#lk(), This1.StringBuilder.#lp(), This1.StringBuilder.#le(), This1.StringBuilder.#ld(), This1.StringBuilder.#ln(), This1.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This1.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This1.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.#equalequal0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>coherentDep=<private>watched=This1 usedMethods=This.StringBuilder.toS(), This1.Bool.not(), This.StringBuilder.#stringLiteralBuilder(), This.StringBuilder.#sdQuote(), This.StringBuilder.#snewLine()refined=toS()close nativeKind=String nativePar=This.ParseError}
    }
  @This.Public@<private>{debug}Debug={
    class method Void #apply(read This1.HasToS that)=(..)
    class method This of()=(..)
    method Void strDebug(This1.S that)=native{..}=(..)
    method Void deployLibrary(This1.S that, Library lib)=native{..}=(..)
    method Void testActualExpected(Library pos, This1.S name, This1.S actual, This1.S expected, This1.S message, This1.S hole)=native{..}=(..)
    method Void testCondition(Library pos, This1.S name, This1.Bool cond, This1.S message)=native{..}=(..)
    method Void addToLog(This1.S logName, This1.S text)=native{..}=(..)
    method Void clearLog(This1.S logName)=native{..}=(..)
    method This1.S #$readLog(This1.S logName)=native{..}=(..)
    #typed{usedMethods=This1.HasToS.toS()close nativeKind=TrustedIO}
    }
  @This.Public@<private>{url}Url={[This1.HasToS]
    read method This1.S that()=(..)
    class method This of(This1.S that)=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    read method This1.S toS()=(..)
    #typed{usedMethods=This1.S.StringBuilder.toS()refined=toS()close}
    }
  @This.Public@<private>{test}Test={
    class method This.WithName #from(This1.S.StringBuilder stringLiteral)=(..)
    class method This1.S hole()=(..)
    WithName={
      read method This2.S name()=(..)
      class method This #apply(This2.S name)=(..)
      method This1.Condition #apply(This2.Bool that)=(..)
      method This1.ExpectedActual #apply(read This2.HasToS expected, read This2.HasToS actual)=(..)
      method This1.ExpectedActual #apply(read This2.HasToS actual, read This2.HasToS expected)=(..)
      #typed{usedMethods=This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.#from(stringLiteral), This1.Condition.#apply(name,cond,message), This2.HasToS.toS(), This1.ExpectedActual.#apply(name,expected,actual,message)close}
      }
    Condition={
      read method This2.S name()=(..)
      read method This2.Bool cond()=(..)
      read method This2.S message()=(..)
      class method This #apply(This2.S name, This2.Bool cond, This2.S message)=(..)
      method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method Void #colon1(Library pos)=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.S.#plusplus0(that), This2.Debug.of(), This2.Debug.testCondition(pos,name,cond,message)close}
      }
    ExpectedActual={
      read method This2.S name()=(..)
      read method This2.S expected()=(..)
      read method This2.S actual()=(..)
      read method This2.S message()=(..)
      class method This #apply(This2.S name, This2.S expected, This2.S actual, This2.S message)=(..)
      method Void #colon1(Library pos)=(..)
      #typed{usedMethods=This2.Debug.of(), This1.hole(), This2.Debug.testActualExpected(pos,name,actual,expected,message,hole)close}
      }
    #typed{usedMethods=This1.S.StringBuilder.toS(), This.WithName.#apply(name), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#soSquare(), This1.S.StringBuilder.#shash(), This1.S.StringBuilder.#scSquare(), This1.S.#from(stringLiteral)close}
    }
  @This.Public@<private>{log}Log={
    class method This #apply(This1.S that)=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    mut method This1.S read()=(..)
    read method mut This #$reader()=(..)
    read method Void write(This1.S that)=(..)
    read method Void clear()=(..)
    #typed{usedMethods=This1.S.StringBuilder.toS(), This1.Debug.of(), This1.Debug.#$readLog(logName), This1.Debug.addToLog(logName,text), This1.Debug.clearLog(logName)close}
    }
  @This.Public@<private>{name}Name={[This1.HasToS]
    read method<private>that()=(..)
    class method This of(<private>that)=(..)
    read method This1.Bool #equalequal0(read This that)=(..)
    method This1.S x()=(..)
    method This1.S selector()=(..)
    method This1.S path()=(..)
    method This with(This1.S x)=(..)
    method This with(This1.S selector)=(..)
    method This with(This1.S path)=(..)
    method This #plusplus1(This1.S prefix)=(..)
    class method This #apply(This1.S that)=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    method<private>#equalgt0(class Any target)=(..)
    method<private>#equalgt0(This other)=(..)
    method This1.Bool #shortCircut#minusgt()=(..)
    method<private>#shortResult#minusgt(This1.Bool that)=(..)
    method<private>#shortProcess#minusgt(This1.Bool that, This other)=(..)
    read method This1.S toS()=(..)
    List={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This2.Size size()=native{..}=(..)
      read method read This1 readVal(This2.Size that)=native{..}=(..)
      read method This1 val(This2.Size that)=native{..}=(..)
      mut method mut This1 #val(This2.Size that)=native{..}=(..)
      mut method Void set(This2.Size that, This1 val)=native{..}=(..)
      mut method Void #set(This2.Size that, mut This1 val)=native{..}=(..)
      mut method Void add(This2.Size that, This1 val)=native{..}=(..)
      mut method Void #add(This2.Size that, mut This1 val)=native{..}=(..)
      mut method Void remove(This2.Size that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1 that)=(..)
      mut method Void #squareAdd(mut This1 mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1 #elem#imm(This2.Size that)=(..)
      mut method mut This1 #elem#mut(This2.Size that)=(..)
      read method This1 #elem#default(This2.Size that)=(..)
      read method read This1 #elem#read(This2.Size that)=(..)
      mut method mut This1 #update#mut(This2.Size that, mut This1 val)=(..)
      mut method This1 #update#imm(This2.Size that, This1 val)=(..)
      mut method This1 #update#default(This2.Size that, This1 val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1 that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1 left()=(..)
      read method This1 right()=(..)
      mut method mut This1 #left()=(..)
      mut method mut This1 #right()=(..)
      read method read This1 readLeft()=(..)
      read method read This1 readRight()=(..)
      mut method Void left(This1 that)=(..)
      mut method Void right(This1 that)=(..)
      mut method Void #left(mut This1 that)=(..)
      mut method Void #right(mut This1 that)=(..)
      mut method Void add(This1 left)=(..)
      mut method Void add(This1 right)=(..)
      mut method Void #add(mut This1 left)=(..)
      mut method Void #add(mut This1 right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1 right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1 val)=(..)
      method This withLeft(This1 that)=(..)
      method This withRight(This1 that)=(..)
      method This withAlso(This2.Size that, This1 val)=(..)
      method This withAlsoLeft(This1 that)=(..)
      method This withAlsoRight(This1 that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1 that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=native{..}=(..)
      method This2.S immToString()=native{..}=(..)
      class method This2.Bool equals(read This1 a, read This1 b)=(..)
      method This withoutAll(read This1 val)=(..)
      read method This2.Bool contains(read This1 that)=(..)
      read method This2.Bool #in1(read This1 that)=(..)
      method This #minus0(This1 right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1 val)=(..)
      read method This2.Size indexOfRight(read This1 val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2 e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2 that)=(..)
        read method This2 elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2 elem)=(..)
        lent method Void #add(This2 that)=(..)
        read method This2 #apply(Void that)=(..)
        read method This2 acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2 that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2 #elem#imm(This3.Size that)=(..)
        mut method mut This2 #elem#mut(This3.Size that)=(..)
        read method This2 #elem#default(This3.Size that)=(..)
        read method read This2 #elem#read(This3.Size that)=(..)
        mut method mut This2 #update#mut(This3.Size that, mut This2 val)=(..)
        mut method This2 #update#imm(This3.Size that, This2 val)=(..)
        mut method This2 #update#default(This3.Size that, This2 val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.#equalequal0(that)refined=toS()close nativeKind=Vector nativePar=This1, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    #typed{typeDep=<private>, <private>coherentDep=<private>watched=This1 usedMethods=This1.S.#equalequal0(that), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lh(), This1.S.StringBuilder.#li(), This1.S.StringBuilder.#ls(), This1.S.#from(stringLiteral), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.S.StringBuilder.#sdot(), This1.S.#plusplus0(that), This1.S.toName(), This1.S.StringBuilder.toS(), This1.Bool.false()refined=toS()close}
    }
  @This.Public@<private>{trait}Trait={
    @This1.Public MethodClash={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    @This1.Public ClassClash={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    @This1.Public InvalidName={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    @This1.Public InvalidMap={[This2.HasToS, This2.Message, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      read method This2.S toS()=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), toS(), #whoopsed(atPos), text(that)close nativeKind=LazyMessage}
      }
    #typed{typeDep=<private>, <private>, <private>, <private>coherentDep=<private>, <private>metaCoherentDep=<private>watched=This1 usedMethods=This1.Introspection.Nested.from(library), This1.Bool.true(), This1.Name.#shortCircut#minusgt(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.Name.#shortResult#minusgt(that), This1.S.StringBuilder.#stringLiteralBuilder(), This1.Name.#from(stringLiteral), This1.Name.#shortProcess#minusgt(that,other), This1.Name.#equalgt0(other)close}
    }
  @This.Public@<private>{class}Class={
    class method Library #colon0(This1.Trait that)=(..)
    class method Library #colon0(class<private>lifted)=(..)
    ClassOperators={class method class This1 #apply()=(..)#typed{close}}
    MutReferenceEquality={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    MutStructuralEquality={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    ImmEquality={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    MutClone={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    ReadClone={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    ReadEquality={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    ImmNorm={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    ImmToString={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    ReadToString={
      class method Library #apply()=(..)
      class method This2.Trait #apply(mut<private>squareBuilder)[This2.Trait.InvalidName, This2.Trait.InvalidMap, This2.Trait.ClassClash, This2.Trait.MethodClash]=(..)
      ClassOperators={class method This3.Trait #apply()=(..)#typed{watched=This1, This3.Trait close}}
      #typed{typeDep=<private>, <private>watched=This2.Trait usedMethods=This.ClassOperators.#apply()refined=code::14(), #plus0::15(lib), #plus1::16(lib), nested::17()close}
      }
    #typed{typeDep=<private>watched=This1.Trait close}
    }
  @This.Public@<private>{deploy}Deploy={
    class method Void towel(This1.Url url, Library code)=(..)
    class method Void module(This1.Url url, Library code, This1.Name name)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.MethodClash, This1.Trait.ClassClash]=(..)
    class method This1.Trait module(Library that, This1.Name n)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.MethodClash, This1.Trait.ClassClash]=(..)
    #typed{typeDep=<private>, <private>coherentDep=<private>, <private>watched=This1.Trait, This1 usedMethods=This1.Debug.of(), This1.Url.toS(), This1.Debug.deployLibrary(that,lib), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uA(), This1.S.StringBuilder.#lb(), This1.S.StringBuilder.#ls(), This1.S.StringBuilder.#lt(), This1.S.StringBuilder.#lr(), This1.S.StringBuilder.#la(), This1.S.StringBuilder.#lc(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lo(), This1.S.StringBuilder.#lw(), This1.S.StringBuilder.#le(), This1.S.StringBuilder.#ll(), This1.Name.#from(stringLiteral), This1.Introspection.Nested.from(library), This1.Introspection.Nested.nested(name), This1.Introspection.Nested.nesteds(), This1.Introspection.Nesteds.#iterator(), This1.Introspection.Nesteds.#startIndex(), This1.Introspection.Nesteds.#hasElem(that), This1.Bool.#shortCircut#andand(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.Bool.#shortResult#andand(that), This1.Introspection.Nesteds.#incomplete(that), This1.Bool.#shortProcess#andand(that,other), This1.Introspection.Nesteds.#elem#default(that), This1.Introspection.Nested.nameFromRoot(), This1.Name.#equalequal0(that), This1.Bool.#shortCircut#oror(), This1.Bool.#shortResult#oror(that), This1.Bool.#shortProcess#oror(that,other), This1.Introspection.Nested.outerDoc(), This1.Introspection.Doc.annotation(nested), This1.Introspection.Doc.Opt.#if(), This1.Name.toS(), This1.Name.#plusplus1(prefix), This1.Name.#equalgt0(other), This1.Size.#succ(), This1.Introspection.Nesteds.#close(that), This1.S.StringBuilder.#lh(), This1.S.StringBuilder.#li()close}
    }
  @This.Public@<private>{message}Message={interface[This1.HasToS]
    @This1.Public mut method Void text(This1.S that)
    @This1.Public read method This1.S text()
    @This1.Public method This #whoopsed(Library atPos)
    read method This1.S toS()
    @This1.Public ClassOperators={class method This2.Trait #apply()=(..)#typed{typeDep=<private>coherentDep=<private>watched=This2 close}}
    @This1.Public Guard={interface[This1, This2.HasToS]
      mut method Void text(This2.S that)
      read method This2.S text()
      method This1 #whoopsed(Library atPos)
      read method This2.S toS()
      #typed{refined=text(that), text(), #whoopsed(atPos), toS()}
      }
    @This1.Public Assertion={interface[This1, This2.HasToS]
      mut method Void text(This2.S that)
      read method This2.S text()
      method This1 #whoopsed(Library atPos)
      read method This2.S toS()
      #typed{refined=text(that), text(), #whoopsed(atPos), toS()}
      }
    #typed{typeDep=<private>metaCoherentDep=<private>watched=This1 refined=toS()}
    }
  @This.Public@<private>{x}X={[This1.Message, This1.HasToS, This1.Message.Assertion]
    mut method Void text(This1.S that)=(..)
    read method This1.S text()=(..)
    class method mut This #apply(This1.S text)=(..)
    class method mut This #apply(This1.S that)=(..)
    class method This #from(This1.S.StringBuilder stringLiteral)=(..)
    method This1.Message #whoopsed(Library atPos)=(..)
    read method This1.S toS()=(..)
    #typed{usedMethods=This1.S.StringBuilder.toS(), This1.Introspection.Nested.from(classAny), This1.Introspection.Nested.excName(text)refined=text(that), text(), #whoopsed(atPos), toS()close}
    }
  @This.Public@<private>{collection}Collection={
    @This1.Public class method This1.Trait optionalTrait()=(..)
    @This1.Public class method Library optional(class Any that)=(..)
    @This1.Public class method This1.Trait listTrait()=(..)
    @This1.Public class method This1.Trait listEqTrait()=(..)
    @This1.Public class method Library list(class Any that)[This1.Trait.InvalidMap]=(..)
    @This1.Public IterationIncomplete={[This2.Message, This2.HasToS, This2.Message.Guard]
      mut method Void text(This2.S that)=(..)
      read method This2.S text()=(..)
      class method mut This #apply(This2.S text)=(..)
      class method mut This #apply(This2.S that)=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(that), text(), #whoopsed(atPos), toS()close}
      }
    @This1.Public NoElementInOpt={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    @This1.Public OutOfBounds={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    @This1.Public ElementNotImm={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    @This1.Public ElementNotMut={[This2.Message, This2.HasToS, This2.Message.Guard]
      class method This #apply()=(..)
      class method mut This #apply(This2.S that)=native{..}=(..)
      read method This2.S text()=native{..}=(..)
      mut method Void text(This2.S that)=native{..}=(..)
      class method This #from(This2.S.StringBuilder stringLiteral)=(..)
      method This2.Message #whoopsed(Library atPos)=(..)
      read method This2.S toS()=(..)
      #typed{usedMethods=This2.S.StringBuilder.toS(), This2.Introspection.Nested.from(classAny), This2.Introspection.Nested.excName(text)refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
      }
    #typed{typeDep=<private>, <private>, <private>, <private>, <private>, <private>, <private>coherentDep=<private>, <private>, <private>, <private>, <private>, <private>watched=This1.Trait, This1 usedMethods=This1.Class.ClassOperators.#apply(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uE(), This1.S.StringBuilder.#ll(), This1.S.StringBuilder.#le(), This1.S.StringBuilder.#lm(), This1.Name.#equalgt0(target), This1.Class.#colon0(that), This1.Bool.true(), This1.S.StringBuilder.#d0(), This1.Size.#from(stringLiteral), This1.Size.#lt0(that), This1.Size.#bangequal0(that), This1.S.StringBuilder.#lu(), This1.S.StringBuilder.#lt(), This1.S.StringBuilder.#li(), This1.S.StringBuilder.#sspace(), This1.S.StringBuilder.#lf(), This1.S.StringBuilder.#lo(), This1.S.StringBuilder.#lr(), This1.S.StringBuilder.#ls(), This1.S.StringBuilder.#lk(), This1.S.StringBuilder.#lp(), This1.S.StringBuilder.#ld(), This1.S.StringBuilder.#ln(), This1.S.#from(stringLiteral), This1.Size.#pred(), This1.Bool.#shortCircut#andand(), This1.Bool.#shortResult#andand(that), This1.Bool.#shortProcess#andand(that,other), This1.Size.#succ(), This1.S.StringBuilder.#d1(), This1.Bool.false(), This1.Break.#apply(), This1.Bool.#bang0(), This1.S.StringBuilder.#uW(), This1.S.StringBuilder.#lh(), This1.S.StringBuilder.#la(), This1.S.StringBuilder.#lg(), This1.S.StringBuilder.#lc(), This1.S.StringBuilder.#scomma(), This1.S.StringBuilder.#lb(), This1.S.StringBuilder.#ly(), This1.S.StringBuilder.#sdot(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lz(), This1.S.StringBuilder.#lv(), This.IterationIncomplete.#from(stringLiteral), This1.Size.#equalequal0(that), This1.Bool.#shortCircut#oror(), This1.Bool.#shortResult#oror(that), This1.Bool.#shortProcess#oror(that,other), This1.Size.#ltequal0(that), This1.S.StringBuilder.#sless(), This1.Size.#plus0(that), This1.Size.#minus0(that)hiddenSupertypes=This1.HasToS close}
    }
  @This.Public@<private>{cache}Cache={Lazy={#typed{close}@{lazyCache}}Now={#typed{close}@{readEagerCache}}Clear={#typed{close}@{invalidateCache}}#typed{close}}
  @This.Public@<private>{data}Data={
    @This1.Public class method This #apply()=(..)
    @This1.Public method Library #colon0(Library lib)=(..)
    @This1.Public method Library #colon0(This1.Trait that)=(..)
    @This1.Public Close={
      @This2.Public class method This #apply(This2.Name that)=(..)
      @This2.Public method This2.Trait #colon0(This2.Trait t)=(..)
      @This2.Public method This2.Trait #colon0(class<private>l)=(..)
      @This2.Public method This2.Trait #colon0(Library that)=(..)
      @This2.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ls(), This3.Name.#from(stringLiteral), This1.#apply(that)close}}
      @This2.Public Fail={[This3.Message, This3.HasToS, This3.Message.Guard]
        class method This #apply()=(..)
        class method mut This #apply(This3.S that)=native{..}=(..)
        read method This3.S text()=native{..}=(..)
        mut method Void text(This3.S that)=native{..}=(..)
        class method This #from(This3.S.StringBuilder stringLiteral)=(..)
        method This3.Message #whoopsed(Library atPos)=(..)
        read method This3.S toS()=(..)
        #typed{usedMethods=This3.S.StringBuilder.toS(), This3.Introspection.Nested.from(classAny), This3.Introspection.Nested.excName(text)refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
        }
      #typed{typeDep=<private>, <private>coherentDep=<private>watched=This2.Trait usedMethods=This2.Name.toS()close}
      }
    @This1.Public AddConstructors={
      @This2.Public class method This #apply(This2.Name that)=(..)
      @This2.Public method This2.Trait #colon0(This2.Trait t)=(..)
      @This2.Public method This2.Trait #colon0(class<private>l)=(..)
      @This2.Public method This2.Trait #colon0(Library that)=(..)
      @This2.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ls(), This3.Name.#from(stringLiteral), This1.#apply(that)close}}
      @This2.Public Fail={[This3.Message, This3.HasToS, This3.Message.Guard]
        class method This #apply()=(..)
        class method mut This #apply(This3.S that)=native{..}=(..)
        read method This3.S text()=native{..}=(..)
        mut method Void text(This3.S that)=native{..}=(..)
        class method This #from(This3.S.StringBuilder stringLiteral)=(..)
        method This3.Message #whoopsed(Library atPos)=(..)
        read method This3.S toS()=(..)
        #typed{usedMethods=This3.S.StringBuilder.toS(), This3.Introspection.Nested.from(classAny), This3.Introspection.Nested.excName(text)refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
        }
      #typed{typeDep=<private>, <private>coherentDep=<private>watched=This2.Trait usedMethods=This2.Name.toS(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#shash(), This2.S.StringBuilder.#la(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#ly(), This2.S.#from(stringLiteral), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#uK()close}
      }
    @This1.Public Wither={
      @This2.Public class method This #apply(This2.Name that)=(..)
      @This2.Public method This2.Trait #colon0(This2.Trait t)=(..)
      @This2.Public method This2.Trait #colon0(class<private>l)=(..)
      @This2.Public method This2.Trait #colon0(Library that)=(..)
      @This2.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ls(), This3.Name.#from(stringLiteral), This1.#apply(that)close}}
      @This2.Public Fail={[This3.Message, This3.HasToS, This3.Message.Guard]
        class method This #apply()=(..)
        class method mut This #apply(This3.S that)=native{..}=(..)
        read method This3.S text()=native{..}=(..)
        mut method Void text(This3.S that)=native{..}=(..)
        class method This #from(This3.S.StringBuilder stringLiteral)=(..)
        method This3.Message #whoopsed(Library atPos)=(..)
        read method This3.S toS()=(..)
        #typed{usedMethods=This3.S.StringBuilder.toS(), This3.Introspection.Nested.from(classAny), This3.Introspection.Nested.excName(text)refined=text(), #whoopsed(atPos), text(that), toS()close nativeKind=LazyMessage}
        }
      #typed{typeDep=<private>, <private>coherentDep=<private>watched=This2.Trait usedMethods=This2.Name.toS(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#shash(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#uK(), This2.S.#from(stringLiteral)close}
      }
    @This1.Public ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This1.#apply()close}}
    #typed{typeDep=<private>, <private>, <private>, <private>, <private>coherentDep=<private>, <private>, <private>watched=This1.Trait usedMethods=This.AddConstructors.ClassOperators.#apply(), This.AddConstructors.#colon0(t), This.Wither.ClassOperators.#apply(), This.Wither.#colon0(t), This.Close.ClassOperators.#apply(), This.Close.#colon0(t), This1.Class.ClassOperators.#apply(), This1.Class.#colon0(that), This1.Bool.#bang0()hiddenSupertypes=This1.HasToS close}
    }
  @This.Public@<private>{introspection}Introspection={
    NativeNested={
      class method This instance()=(..)
      class method This fromClass(class Any that)=native{..}=(..)
      class method This fromLibrary(Library that)=native{..}=(..)
      method This nestedByName(<private>name)=native{..}=(..)
      method This2.S outerName()=native{..}=(..)
      method This outer()=native{..}=(..)
      method This1.NativeDoc outerDoc()=native{..}=(..)
      method This1.NativeDoc innerDoc()=native{..}=(..)
      method This2.Size nestedNum()=native{..}=(..)
      method This nestedIn(This2.Size that)=native{..}=(..)
      method This2.Size methodNum()=native{..}=(..)
      method This1.NativeMethod methodIn(This2.Size that)=native{..}=(..)
      method This2.Size implementedNum()=native{..}=(..)
      method This1.NativeType implementedIn(This2.Size that)=native{..}=(..)
      method This2.Bool hasOuter()=native{..}=(..)
      method This2.Bool hasHiddenImplements()=native{..}=(..)
      method This2.Bool isClose()=native{..}=(..)
      method This2.Bool isInterface()=native{..}=(..)
      method This2.Bool isBinded()=native{..}=(..)
      method This2.S toFullString()=native{..}=(..)
      method This root()=native{..}=(..)
      method<private>nameFromRoot()=native{..}=(..)
      method This2.S position()=native{..}=(..)
      method class Any classAny()=native{..}=(..)
      read method This2.S toS()=native{..}=(..)
      #typed{typeDep=<private>coherentDep=<private>watched=This2 close nativeKind=Nested nativePar=This2.Trait.InvalidName, This2.Collection.OutOfBounds, This2.Collection.NoElementInOpt}
      }
    NativeType={
      class method This instance()=(..)
      class method This fromClass(This2.S mdf, This1.NativeDoc doc, class Any classAny)=native{..}=(..)
      class method This fromLibrary(This2.S mdf, This1.NativeDoc doc, <private>name)=native{..}=(..)
      method This2.S mdf()=native{..}=(..)
      method This1.NativeDoc doc()=native{..}=(..)
      method This1.NativeNested nested()=native{..}=(..)
      read method This2.S toS()=native{..}=(..)
      #typed{typeDep=<private>coherentDep=<private>watched=This2 close nativeKind=Type}
      }
    NativeDoc={
      class method This instance()=(..)
      method This1.NativeNested root()=native{..}=(..)
      method<private>nameFromRoot()=native{..}=(..)
      method This2.Size docNum()=native{..}=(..)
      method This docIn(This2.Size that)=native{..}=(..)
      method This2.S textIn(This2.Size that)=native{..}=(..)
      method This2.Bool hasAnnotation()=native{..}=(..)
      method This1.NativeNested nested()=native{..}=(..)
      method<private>name()=native{..}=(..)
      read method This2.S toS()=native{..}=(..)
      #typed{typeDep=<private>coherentDep=<private>watched=This2 close nativeKind=Doc nativePar=This2.Collection.OutOfBounds, This2.Collection.NoElementInOpt}
      }
    NativeMethod={
      class method This instance()=(..)
      method This1.NativeDoc doc()=native{..}=(..)
      method This1.NativeType returnType()=native{..}=(..)
      method This2.Size parNum()=native{..}=(..)
      method This1.NativeType parIn(This2.Size that)=native{..}=(..)
      method This2.Size excNum()=native{..}=(..)
      method This1.NativeType excIn(This2.Size that)=native{..}=(..)
      method This2.Bool isRefined()=native{..}=(..)
      method This2.Bool isAbstract()=native{..}=(..)
      method This1.NativeNested nested()=native{..}=(..)
      method<private>nameFromRoot()=native{..}=(..)
      method This2.S position()=native{..}=(..)
      read method This2.S toS()=native{..}=(..)
      #typed{typeDep=<private>coherentDep=<private>watched=This2 close nativeKind=Method nativePar=This2.Collection.NoElementInOpt}
      }
    Nesteds={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This2.Size size()=native{..}=(..)
      read method read This1.Nested readVal(This2.Size that)=native{..}=(..)
      read method This1.Nested val(This2.Size that)=native{..}=(..)
      mut method mut This1.Nested #val(This2.Size that)=native{..}=(..)
      mut method Void set(This2.Size that, This1.Nested val)=native{..}=(..)
      mut method Void #set(This2.Size that, mut This1.Nested val)=native{..}=(..)
      mut method Void add(This2.Size that, This1.Nested val)=native{..}=(..)
      mut method Void #add(This2.Size that, mut This1.Nested val)=native{..}=(..)
      mut method Void remove(This2.Size that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1.Nested that)=(..)
      mut method Void #squareAdd(mut This1.Nested mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1.Nested #elem#imm(This2.Size that)=(..)
      mut method mut This1.Nested #elem#mut(This2.Size that)=(..)
      read method This1.Nested #elem#default(This2.Size that)=(..)
      read method read This1.Nested #elem#read(This2.Size that)=(..)
      mut method mut This1.Nested #update#mut(This2.Size that, mut This1.Nested val)=(..)
      mut method This1.Nested #update#imm(This2.Size that, This1.Nested val)=(..)
      mut method This1.Nested #update#default(This2.Size that, This1.Nested val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1.Nested that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1.Nested left()=(..)
      read method This1.Nested right()=(..)
      mut method mut This1.Nested #left()=(..)
      mut method mut This1.Nested #right()=(..)
      read method read This1.Nested readLeft()=(..)
      read method read This1.Nested readRight()=(..)
      mut method Void left(This1.Nested that)=(..)
      mut method Void right(This1.Nested that)=(..)
      mut method Void #left(mut This1.Nested that)=(..)
      mut method Void #right(mut This1.Nested that)=(..)
      mut method Void add(This1.Nested left)=(..)
      mut method Void add(This1.Nested right)=(..)
      mut method Void #add(mut This1.Nested left)=(..)
      mut method Void #add(mut This1.Nested right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1.Nested right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1.Nested val)=(..)
      method This withLeft(This1.Nested that)=(..)
      method This withRight(This1.Nested that)=(..)
      method This withAlso(This2.Size that, This1.Nested val)=(..)
      method This withAlsoLeft(This1.Nested that)=(..)
      method This withAlsoRight(This1.Nested that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1.Nested that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=native{..}=(..)
      method This2.S immToString()=native{..}=(..)
      class method This2.Bool equals(read This1.Nested a, read This1.Nested b)=(..)
      method This withoutAll(read This1.Nested val)=(..)
      read method This2.Bool contains(read This1.Nested that)=(..)
      read method This2.Bool #in1(read This1.Nested that)=(..)
      method This #minus0(This1.Nested right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1.Nested val)=(..)
      read method This2.Size indexOfRight(read This1.Nested val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2.Nested e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2.Nested that)=(..)
        read method This2.Nested elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2.Nested elem)=(..)
        lent method Void #add(This2.Nested that)=(..)
        read method This2.Nested #apply(Void that)=(..)
        read method This2.Nested acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2.Nested that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2.Nested #elem#imm(This3.Size that)=(..)
        mut method mut This2.Nested #elem#mut(This3.Size that)=(..)
        read method This2.Nested #elem#default(This3.Size that)=(..)
        read method read This2.Nested #elem#read(This3.Size that)=(..)
        mut method mut This2.Nested #update#mut(This3.Size that, mut This2.Nested val)=(..)
        mut method This2.Nested #update#imm(This3.Size that, This2.Nested val)=(..)
        mut method This2.Nested #update#default(This3.Size that, This2.Nested val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.Nested.readEquality(that)refined=toS()close nativeKind=Vector nativePar=This1.Nested, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    Types={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This2.Size size()=native{..}=(..)
      read method read This1.Type readVal(This2.Size that)=native{..}=(..)
      read method This1.Type val(This2.Size that)=native{..}=(..)
      mut method mut This1.Type #val(This2.Size that)=native{..}=(..)
      mut method Void set(This2.Size that, This1.Type val)=native{..}=(..)
      mut method Void #set(This2.Size that, mut This1.Type val)=native{..}=(..)
      mut method Void add(This2.Size that, This1.Type val)=native{..}=(..)
      mut method Void #add(This2.Size that, mut This1.Type val)=native{..}=(..)
      mut method Void remove(This2.Size that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1.Type that)=(..)
      mut method Void #squareAdd(mut This1.Type mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1.Type #elem#imm(This2.Size that)=(..)
      mut method mut This1.Type #elem#mut(This2.Size that)=(..)
      read method This1.Type #elem#default(This2.Size that)=(..)
      read method read This1.Type #elem#read(This2.Size that)=(..)
      mut method mut This1.Type #update#mut(This2.Size that, mut This1.Type val)=(..)
      mut method This1.Type #update#imm(This2.Size that, This1.Type val)=(..)
      mut method This1.Type #update#default(This2.Size that, This1.Type val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1.Type that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1.Type left()=(..)
      read method This1.Type right()=(..)
      mut method mut This1.Type #left()=(..)
      mut method mut This1.Type #right()=(..)
      read method read This1.Type readLeft()=(..)
      read method read This1.Type readRight()=(..)
      mut method Void left(This1.Type that)=(..)
      mut method Void right(This1.Type that)=(..)
      mut method Void #left(mut This1.Type that)=(..)
      mut method Void #right(mut This1.Type that)=(..)
      mut method Void add(This1.Type left)=(..)
      mut method Void add(This1.Type right)=(..)
      mut method Void #add(mut This1.Type left)=(..)
      mut method Void #add(mut This1.Type right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1.Type right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1.Type val)=(..)
      method This withLeft(This1.Type that)=(..)
      method This withRight(This1.Type that)=(..)
      method This withAlso(This2.Size that, This1.Type val)=(..)
      method This withAlsoLeft(This1.Type that)=(..)
      method This withAlsoRight(This1.Type that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1.Type that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=native{..}=(..)
      method This2.S immToString()=native{..}=(..)
      class method This2.Bool equals(read This1.Type a, read This1.Type b)=(..)
      method This withoutAll(read This1.Type val)=(..)
      read method This2.Bool contains(read This1.Type that)=(..)
      read method This2.Bool #in1(read This1.Type that)=(..)
      method This #minus0(This1.Type right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1.Type val)=(..)
      read method This2.Size indexOfRight(read This1.Type val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2.Type e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2.Type that)=(..)
        read method This2.Type elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2.Type elem)=(..)
        lent method Void #add(This2.Type that)=(..)
        read method This2.Type #apply(Void that)=(..)
        read method This2.Type acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2.Type that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2.Type #elem#imm(This3.Size that)=(..)
        mut method mut This2.Type #elem#mut(This3.Size that)=(..)
        read method This2.Type #elem#default(This3.Size that)=(..)
        read method read This2.Type #elem#read(This3.Size that)=(..)
        mut method mut This2.Type #update#mut(This3.Size that, mut This2.Type val)=(..)
        mut method This2.Type #update#imm(This3.Size that, This2.Type val)=(..)
        mut method This2.Type #update#default(This3.Size that, This2.Type val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.Type.readEquality(that)refined=toS()close nativeKind=Vector nativePar=This1.Type, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    Docs={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This2.Size size()=native{..}=(..)
      read method read This1.Doc readVal(This2.Size that)=native{..}=(..)
      read method This1.Doc val(This2.Size that)=native{..}=(..)
      mut method mut This1.Doc #val(This2.Size that)=native{..}=(..)
      mut method Void set(This2.Size that, This1.Doc val)=native{..}=(..)
      mut method Void #set(This2.Size that, mut This1.Doc val)=native{..}=(..)
      mut method Void add(This2.Size that, This1.Doc val)=native{..}=(..)
      mut method Void #add(This2.Size that, mut This1.Doc val)=native{..}=(..)
      mut method Void remove(This2.Size that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1.Doc that)=(..)
      mut method Void #squareAdd(mut This1.Doc mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1.Doc #elem#imm(This2.Size that)=(..)
      mut method mut This1.Doc #elem#mut(This2.Size that)=(..)
      read method This1.Doc #elem#default(This2.Size that)=(..)
      read method read This1.Doc #elem#read(This2.Size that)=(..)
      mut method mut This1.Doc #update#mut(This2.Size that, mut This1.Doc val)=(..)
      mut method This1.Doc #update#imm(This2.Size that, This1.Doc val)=(..)
      mut method This1.Doc #update#default(This2.Size that, This1.Doc val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1.Doc that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1.Doc left()=(..)
      read method This1.Doc right()=(..)
      mut method mut This1.Doc #left()=(..)
      mut method mut This1.Doc #right()=(..)
      read method read This1.Doc readLeft()=(..)
      read method read This1.Doc readRight()=(..)
      mut method Void left(This1.Doc that)=(..)
      mut method Void right(This1.Doc that)=(..)
      mut method Void #left(mut This1.Doc that)=(..)
      mut method Void #right(mut This1.Doc that)=(..)
      mut method Void add(This1.Doc left)=(..)
      mut method Void add(This1.Doc right)=(..)
      mut method Void #add(mut This1.Doc left)=(..)
      mut method Void #add(mut This1.Doc right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1.Doc right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1.Doc val)=(..)
      method This withLeft(This1.Doc that)=(..)
      method This withRight(This1.Doc that)=(..)
      method This withAlso(This2.Size that, This1.Doc val)=(..)
      method This withAlsoLeft(This1.Doc that)=(..)
      method This withAlsoRight(This1.Doc that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1.Doc that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=native{..}=(..)
      method This2.S immToString()=native{..}=(..)
      class method This2.Bool equals(read This1.Doc a, read This1.Doc b)=(..)
      method This withoutAll(read This1.Doc val)=(..)
      read method This2.Bool contains(read This1.Doc that)=(..)
      read method This2.Bool #in1(read This1.Doc that)=(..)
      method This #minus0(This1.Doc right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1.Doc val)=(..)
      read method This2.Size indexOfRight(read This1.Doc val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2.Doc e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2.Doc that)=(..)
        read method This2.Doc elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2.Doc elem)=(..)
        lent method Void #add(This2.Doc that)=(..)
        read method This2.Doc #apply(Void that)=(..)
        read method This2.Doc acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2.Doc that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2.Doc #elem#imm(This3.Size that)=(..)
        mut method mut This2.Doc #elem#mut(This3.Size that)=(..)
        read method This2.Doc #elem#default(This3.Size that)=(..)
        read method read This2.Doc #elem#read(This3.Size that)=(..)
        mut method mut This2.Doc #update#mut(This3.Size that, mut This2.Doc val)=(..)
        mut method This2.Doc #update#imm(This3.Size that, This2.Doc val)=(..)
        mut method This2.Doc #update#default(This3.Size that, This2.Doc val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.Doc.readEquality(that)refined=toS()close nativeKind=Vector nativePar=This1.Doc, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    Methods={[This2.HasToS]
      class method mut This #apply()=(..)
      class method mut This #apply(This2.Size capacity)=native{..}=(..)
      read method This2.Bool isEmpty()=native{..}=(..)
      read method This2.Size size()=native{..}=(..)
      read method read This1.Method readVal(This2.Size that)=native{..}=(..)
      read method This1.Method val(This2.Size that)=native{..}=(..)
      mut method mut This1.Method #val(This2.Size that)=native{..}=(..)
      mut method Void set(This2.Size that, This1.Method val)=native{..}=(..)
      mut method Void #set(This2.Size that, mut This1.Method val)=native{..}=(..)
      mut method Void add(This2.Size that, This1.Method val)=native{..}=(..)
      mut method Void #add(This2.Size that, mut This1.Method val)=native{..}=(..)
      mut method Void remove(This2.Size that)=native{..}=(..)
      class method mut This #apply(mut This squareBuilder)=(..)
      class method mut This ##apply#squareBuilder()=(..)
      class method This2.Bool #shortCircutSquare()=(..)
      mut method Void #squareAdd(This1.Method that)=(..)
      mut method Void #squareAdd(mut This1.Method mutVal)=(..)
      mut method Void #yield(Void that)=(..)
      read method read This vals()=(..)
      mut method mut This #vals()=(..)
      read method read This #iterator()=(..)
      mut method mut This #varIterator()=(..)
      read method This2.Size #startIndex()=(..)
      read method This2.Bool #hasElem(This2.Size that)=(..)
      read method This2.Bool #incomplete(This2.Size that)=(..)
      read method This1.Method #elem#imm(This2.Size that)=(..)
      mut method mut This1.Method #elem#mut(This2.Size that)=(..)
      read method This1.Method #elem#default(This2.Size that)=(..)
      read method read This1.Method #elem#read(This2.Size that)=(..)
      mut method mut This1.Method #update#mut(This2.Size that, mut This1.Method val)=(..)
      mut method This1.Method #update#imm(This2.Size that, This1.Method val)=(..)
      mut method This1.Method #update#default(This2.Size that, This1.Method val)=(..)
      read method Void #close(This2.Size that)=(..)
      mut method Void add(This1.Method that)=(..)
      mut method mut This #apply(Void that)=(..)
      read method This2.S readToString()=(..)
      read method This1.Method left()=(..)
      read method This1.Method right()=(..)
      mut method mut This1.Method #left()=(..)
      mut method mut This1.Method #right()=(..)
      read method read This1.Method readLeft()=(..)
      read method read This1.Method readRight()=(..)
      mut method Void left(This1.Method that)=(..)
      mut method Void right(This1.Method that)=(..)
      mut method Void #left(mut This1.Method that)=(..)
      mut method Void #right(mut This1.Method that)=(..)
      mut method Void add(This1.Method left)=(..)
      mut method Void add(This1.Method right)=(..)
      mut method Void #add(mut This1.Method left)=(..)
      mut method Void #add(mut This1.Method right)=(..)
      mut method Void removeLeft()=(..)
      mut method Void removeRight()=(..)
      mut method mut This.SlashRes res()=(..)
      method This #plus0(This1.Method right)=(..)
      method This #plusplus0(This right)=(..)
      method This with(This2.Size that, This1.Method val)=(..)
      method This withLeft(This1.Method that)=(..)
      method This withRight(This1.Method that)=(..)
      method This withAlso(This2.Size that, This1.Method val)=(..)
      method This withAlsoLeft(This1.Method that)=(..)
      method This withAlsoRight(This1.Method that)=(..)
      method This without(This2.Size index)=(..)
      method This withoutLeft()=(..)
      method This withoutRight()=(..)
      read method lent This.ElemBox reduce()=(..)
      read method lent This.ElemBox reduce(This1.Method that)=(..)
      read method lent This.MatchAny matchAny()=(..)
      read method lent This.MatchAll matchAll()=(..)
      read method lent This.MatchNone matchNone()=(..)
      read method read This.Iterator cut()=(..)
      mut method mut This.Iterator #cut()=(..)
      read method read This.Iterator vals(This2.Size start)=(..)
      mut method mut This.Iterator #vals(This2.Size start)=(..)
      read method read This.Iterator cutVals(This2.Size start)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start)=(..)
      read method read This.Iterator vals(This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size end)=(..)
      read method read This.Iterator vals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #vals(This2.Size start, This2.Size end)=(..)
      read method read This.Iterator cutVals(This2.Size start, This2.Size end)=(..)
      mut method mut This.Iterator #cutVals(This2.Size start, This2.Size end)=(..)
      read method This2.S toS()=(..)
      read method This readClone()=native{..}=(..)
      method This2.S immToString()=native{..}=(..)
      class method This2.Bool equals(read This1.Method a, read This1.Method b)=(..)
      method This withoutAll(read This1.Method val)=(..)
      read method This2.Bool contains(read This1.Method that)=(..)
      read method This2.Bool #in1(read This1.Method that)=(..)
      method This #minus0(This1.Method right)=(..)
      method This #minusminus0(This right)=(..)
      read method This2.Bool #equalequal0(read This that)=(..)
      read method This2.Size indexOfLeft(read This1.Method val)=(..)
      read method This2.Size indexOfRight(read This1.Method val)=(..)
      SlashRes={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        mut method Void #ltequal0(This2.Method e)=(..)
        Elem={#typed{close}}
        #typed{usedMethods=This1.add(that)close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      ElemBox={
        read method read This1.Iterator vals()=(..)
        mut method Void elem(This2.Method that)=(..)
        read method This2.Method elem()=(..)
        class method lent This #apply(read This1.Iterator vals, This2.Method elem)=(..)
        lent method Void #add(This2.Method that)=(..)
        read method This2.Method #apply(Void that)=(..)
        read method This2.Method acc()=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This2.Method that)=(..)
        #typed{close}
        }
      MatchAny={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchAll={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#bang0(), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Break.#apply()close}
        }
      MatchNone={
        mut method Void pass(This3.Bool that)=(..)
        read method This3.Bool pass()=(..)
        read method read This1 vals()=(..)
        class method lent This #apply(This3.Bool pass, read This1 vals)=(..)
        lent method This3.Bool #apply(Void that)=(..)
        lent method lent This res()=(..)
        lent method Void #ltequal0(This3.Bool b)[Void]=(..)
        #typed{usedMethods=This3.Bool.#if(), This3.Bool.#checkTrue(), This3.Bool.#bang0(), This3.Break.#apply()close}
        }
      Iterator={
        read method This3.Size start()=(..)
        read method This3.Size end()=(..)
        read method This3.Bool cut()=(..)
        mut method mut This1 #list()=(..)
        read method read This1 list()=(..)
        class method mut This #apply(This3.Size start, This3.Size end, This3.Bool cut, fwd mut This1 list)=(..)
        read method read This #iterator()=(..)
        mut method mut This #varIterator()=(..)
        read method This3.Size #startIndex()=(..)
        read method This3.Bool #hasElem(This3.Size that)=(..)
        read method This3.Bool #incomplete(This3.Size that)=(..)
        read method This2.Method #elem#imm(This3.Size that)=(..)
        mut method mut This2.Method #elem#mut(This3.Size that)=(..)
        read method This2.Method #elem#default(This3.Size that)=(..)
        read method read This2.Method #elem#read(This3.Size that)=(..)
        mut method mut This2.Method #update#mut(This3.Size that, mut This2.Method val)=(..)
        mut method This2.Method #update#imm(This3.Size that, This2.Method val)=(..)
        mut method This2.Method #update#default(This3.Size that, This2.Method val)=(..)
        read method Void #close(This3.Size that)=(..)
        #typed{usedMethods=This3.Size.#lt0(that), This3.Size.#bangequal0(that), This1.val(that), This1.#val(that), This1.#elem#imm(that), This1.readVal(that), This1.#set(that,val), This1.set(that,val), This1.#update#imm(that,val), This3.Bool.#if(), This3.Bool.#checkTrue(), This3.S.StringBuilder.#stringLiteralBuilder(), This3.S.StringBuilder.#uW(), This3.S.StringBuilder.#lh(), This3.S.StringBuilder.#li(), This3.S.StringBuilder.#ll(), This3.S.StringBuilder.#le(), This3.S.StringBuilder.#sspace(), This3.S.StringBuilder.#lt(), This3.S.StringBuilder.#lr(), This3.S.StringBuilder.#la(), This3.S.StringBuilder.#ln(), This3.S.StringBuilder.#lg(), This3.S.StringBuilder.#lo(), This3.S.StringBuilder.#lm(), This3.S.StringBuilder.#lu(), This3.S.StringBuilder.#lp(), This3.S.StringBuilder.#lc(), This3.S.StringBuilder.#ls(), This3.S.StringBuilder.#scomma(), This3.S.StringBuilder.#ld(), This3.S.StringBuilder.#lb(), This3.S.StringBuilder.#ly(), This3.S.StringBuilder.#sdot(), This3.S.StringBuilder.#uT(), This3.S.StringBuilder.#lz(), This3.S.StringBuilder.#lf(), This3.S.StringBuilder.#lv(), This3.Collection.IterationIncomplete.#from(stringLiteral)close}
        }
      #typed{usedMethods=This2.Bool.true(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Size.#bangequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.S.StringBuilder.#lm(), This2.S.StringBuilder.#lu(), This2.S.StringBuilder.#ll(), This2.S.StringBuilder.#lt(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#lf(), This2.S.StringBuilder.#lo(), This2.S.StringBuilder.#lr(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#lk(), This2.S.StringBuilder.#lp(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ld(), This2.S.StringBuilder.#ln(), This2.S.#from(stringLiteral), This2.Size.#pred(), This.SlashRes.#apply(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This2.Bool.#shortProcess#andand(that,other), This.SlashRes.#ltequal0(e), This2.Size.#succ(), This2.S.StringBuilder.#d1(), This.ElemBox.#apply(vals,elem), This2.Bool.false(), This.MatchAny.#apply(pass,vals), This.MatchAll.#apply(pass,vals), This.MatchNone.#apply(pass,vals), This.Iterator.#apply(start,end,cut,list), This2.Bool.#bang0(), This2.Size.#equalequal0(that), This2.Bool.#shortCircut#oror(), This2.Bool.#shortResult#oror(that), This2.Bool.#shortProcess#oror(that,other), This.MatchAll.res(), This.MatchAll.#ltequal0(b), This.MatchAll.#apply(that), This2.Size.#ltequal0(that), This2.S.StringBuilder.#sless(), This2.Size.#plus0(that), This2.Size.#minus0(that), This1.Method.readEquality(that)refined=toS()close nativeKind=Vector nativePar=This1.Method, This2.Collection.OutOfBounds, This2.Collection.ElementNotImm, This2.Collection.ElementNotMut}
      }
    Nested={[This2.HasToS]
      method This2.Bool immEquality(This that)=native{..}=(..)
      method This2.Bool #equalequal0(This that)=(..)
      method This2.Bool #bangequal0(This that)=(..)
      mut method This2.Bool mutReferenceEquality(mut This that)=native{..}=(..)
      mut method This2.Bool mutStructuralEquality(mut This that)=native{..}=(..)
      read method This readClone()=native{..}=(..)
      mut method capsule This mutClone()=native{..}=(..)
      read method This2.Bool readEquality(read This that)=(..)
      method This2.S immToString()=native{..}=(..)
      method This immNorm()=native{..}=(..)
      read method This1.NativeNested i()=(..)
      class method This #apply(This1.NativeNested that)=(..)
      class method This from(class Any classAny)=(..)
      class method This from(Library library)=(..)
      method This nested(This2.Name name)=(..)
      method This2.S outerName()=(..)
      method This outer()=(..)
      method This1.Doc outerDoc()=(..)
      method This1.Doc innerDoc()=(..)
      method This1.Nesteds nesteds()=(..)
      method This1.Methods methods()=(..)
      method This1.Types implements()=(..)
      method This2.Bool hasOuter()=(..)
      method This2.Bool hasHiddenImplements()=(..)
      method This2.Bool isClose()=(..)
      method This2.Bool isInterface()=(..)
      method This2.Bool isBinded()=(..)
      method This2.S toFullS()=(..)
      method This root()=(..)
      method This2.Name nameFromRoot()=(..)
      method This2.S position()=(..)
      method class Any classAny()=(..)
      read method This2.S toS()=(..)
      method This2.S excName(This2.S text)=(..)
      method This2.S className()=(..)
      method This2.S superInterfaces()=(..)
      class method This #immK(fwd imm This1.NativeNested i)=(..)
      class method This #apply(fwd imm This1.NativeNested i)=(..)
      method This with(fwd imm This1.NativeNested i)=(..)
      #typed{typeDep=<private>coherentDep=<private>watched=This2 usedMethods=This2.Bool.#bang0(), This1.NativeNested.fromClass(that), This1.NativeNested.fromLibrary(that), This2.Name.that(), This1.NativeNested.nestedByName(name), This1.NativeNested.outerName(), This1.NativeNested.outer(), This1.NativeNested.outerDoc(), This1.Doc.#apply(that), This1.NativeNested.innerDoc(), This1.Nesteds.#apply(), This1.NativeNested.nestedNum(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Bool.#checkTrue(), This1.Nesteds.res(), This1.NativeNested.nestedIn(that), This1.Nesteds.SlashRes.#ltequal0(e), This2.S.StringBuilder.#d1(), This2.Size.#plus0(that), This1.Nesteds.#apply(that), This1.Methods.#apply(), This1.NativeNested.methodNum(), This1.Methods.res(), This1.NativeNested.methodIn(that), This1.Method.#apply(that), This1.Methods.SlashRes.#ltequal0(e), This1.Methods.#apply(that), This1.Types.#apply(), This1.NativeNested.implementedNum(), This1.Types.res(), This1.NativeNested.implementedIn(that), This1.Type.#apply(that), This1.Types.SlashRes.#ltequal0(e), This1.Types.#apply(that), This1.NativeNested.hasOuter(), This1.NativeNested.hasHiddenImplements(), This1.NativeNested.isClose(), This1.NativeNested.isInterface(), This1.NativeNested.isBinded(), This1.NativeNested.toFullString(), This1.NativeNested.root(), This1.NativeNested.nameFromRoot(), This2.Name.of(that), This1.NativeNested.position(), This1.NativeNested.classAny(), This1.NativeNested.toS(), This2.S.StringBuilder.#uM(), This2.S.StringBuilder.#le(), This2.S.StringBuilder.#ls(), This2.S.StringBuilder.#la(), This2.S.StringBuilder.#lg(), This2.S.StringBuilder.#sspace(), This2.S.StringBuilder.#stringAddAll(that), This2.S.StringBuilder.#stringAddExpr(that), This2.S.StringBuilder.#scolon(), This2.S.nl(), This2.S.#from(stringLiteral), This1.Types.isEmpty(), This2.Bool.#if(), This2.S.StringBuilder.#soRound(), This1.Types.left(), This1.Type.nested(), This2.S.#plusplus0(that), This1.Types.withoutLeft(), This1.Types.#iterator(), This1.Types.#startIndex(), This1.Types.#hasElem(that), This2.Bool.#shortCircut#andand(), This2.Bool.#shortResult#andand(that), This1.Types.#incomplete(that), This2.Bool.#shortProcess#andand(that,other), This1.Types.#elem#default(that), This2.S.StringBuilder.#scomma(), This2.Size.#succ(), This1.Types.#close(that), This2.S.StringBuilder.#scRound()refined=toS()close}
      }
    Type={[This2.HasToS]
      method This2.Bool immEquality(This that)=native{..}=(..)
      method This2.Bool #equalequal0(This that)=(..)
      method This2.Bool #bangequal0(This that)=(..)
      mut method This2.Bool mutReferenceEquality(mut This that)=native{..}=(..)
      mut method This2.Bool mutStructuralEquality(mut This that)=native{..}=(..)
      read method This readClone()=native{..}=(..)
      mut method capsule This mutClone()=native{..}=(..)
      read method This2.Bool readEquality(read This that)=(..)
      method This2.S immToString()=native{..}=(..)
      method This immNorm()=native{..}=(..)
      read method This1.NativeType i()=(..)
      class method This #apply(This1.NativeType that)=(..)
      method This2.S mdf()=(..)
      method This1.Doc doc()=(..)
      method This1.Nested nested()=(..)
      read method This2.S toS()=(..)
      class method This #immK(fwd imm This1.NativeType i)=(..)
      class method This #apply(fwd imm This1.NativeType i)=(..)
      method This with(fwd imm This1.NativeType i)=(..)
      #typed{usedMethods=This2.Bool.#bang0(), This1.NativeType.mdf(), This1.NativeType.doc(), This1.Doc.#apply(that), This1.NativeType.nested(), This1.Nested.#apply(that), This1.NativeType.toS()refined=toS()close}
      }
    Doc={[This2.HasToS]
      method This2.Bool immEquality(This that)=native{..}=(..)
      method This2.Bool #equalequal0(This that)=(..)
      method This2.Bool #bangequal0(This that)=(..)
      mut method This2.Bool mutReferenceEquality(mut This that)=native{..}=(..)
      mut method This2.Bool mutStructuralEquality(mut This that)=native{..}=(..)
      read method This readClone()=native{..}=(..)
      mut method capsule This mutClone()=native{..}=(..)
      read method This2.Bool readEquality(read This that)=(..)
      method This2.S immToString()=native{..}=(..)
      method This immNorm()=native{..}=(..)
      read method This1.NativeDoc i()=(..)
      class method This #apply(This1.NativeDoc that)=(..)
      method This1.Nested root()=(..)
      method This2.Name nameFromRoot()=(..)
      method This1.Docs docs()=(..)
      method This2.S.List texts()=(..)
      method This2.Bool hasAnnotation()=(..)
      method This1.Nested nested()=(..)
      method This2.Name name()=(..)
      read method This2.S toS()=(..)
      method This2.Bool annotatedAs(class Any that)=(..)
      method This2.Bool annotatedAs(This1.Nested nested)=(..)
      method This.Opt annotation(class Any that)=(..)
      method This.Opt annotation(This1.Nested nested)=(..)
      class method This #immK(fwd imm This1.NativeDoc i)=(..)
      class method This #apply(fwd imm This1.NativeDoc i)=(..)
      method This with(fwd imm This1.NativeDoc i)=(..)
      Opt={
        class method mut This #apply()=(..)
        class method mut This #apply(fwd mut This1 that)=native{..}=(..)
        read method read This1 get()=native{..}=(..)
        mut method mut This1 #get()=native{..}=(..)
        read method This3.Bool #if()=native{..}=(..)
        #typed{close nativeKind=Opt nativePar=This1, This3.Collection.NoElementInOpt}
        }
      #typed{typeDep=<private>watched=This2 usedMethods=This2.Bool.#bang0(), This1.NativeDoc.root(), This1.Nested.#apply(that), This1.NativeDoc.nameFromRoot(), This2.Name.of(that), This1.Docs.#apply(), This1.NativeDoc.docNum(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Bool.#checkTrue(), This1.Docs.res(), This1.NativeDoc.docIn(that), This1.Docs.SlashRes.#ltequal0(e), This2.S.StringBuilder.#d1(), This2.Size.#plus0(that), This1.Docs.#apply(that), This2.S.List.#apply(), This2.S.List.res(), This1.NativeDoc.textIn(that), This2.S.List.SlashRes.#ltequal0(e), This2.S.List.#apply(that), This1.NativeDoc.hasAnnotation(), This1.NativeDoc.nested(), This1.NativeDoc.name(), This1.NativeDoc.toS(), This1.Nested.from(classAny), This2.Bool.#shortCircut#andand(), This2.Bool.#if(), This2.Bool.#shortResult#andand(that), This1.Nested.#equalequal0(that), This2.Bool.#shortProcess#andand(that,other), This2.Bool.true(), This1.Docs.matchAny(), This1.Docs.MatchAny.vals(), This1.Docs.#iterator(), This1.Docs.#startIndex(), This1.Docs.#hasElem(that), This1.Docs.#incomplete(that), This1.Docs.#elem#default(that), This1.Docs.MatchAny.res(), This1.Docs.MatchAny.#ltequal0(b), This2.Size.#succ(), This1.Docs.#close(that), This1.Docs.MatchAny.#apply(that), This.Opt.#apply(that), This.Opt.#if(), This.Opt.#apply()refined=toS()close}
      }
    Method={[This2.HasToS]
      method This2.Bool immEquality(This that)=native{..}=(..)
      method This2.Bool #equalequal0(This that)=(..)
      method This2.Bool #bangequal0(This that)=(..)
      mut method This2.Bool mutReferenceEquality(mut This that)=native{..}=(..)
      mut method This2.Bool mutStructuralEquality(mut This that)=native{..}=(..)
      read method This readClone()=native{..}=(..)
      mut method capsule This mutClone()=native{..}=(..)
      read method This2.Bool readEquality(read This that)=(..)
      method This2.S immToString()=native{..}=(..)
      method This immNorm()=native{..}=(..)
      read method This1.NativeMethod i()=(..)
      class method This #apply(This1.NativeMethod that)=(..)
      method This1.Doc doc()=(..)
      method This1.Type returnType()=(..)
      method This1.Types parameters()=(..)
      method This1.Types exceptions()=(..)
      method This2.Bool isRefined()=(..)
      method This2.Bool isAbstract()=(..)
      method This1.Nested nested()=(..)
      method This2.Name nameFromRoot()=(..)
      method This2.S position()=(..)
      read method This2.S toS()=(..)
      class method This #immK(fwd imm This1.NativeMethod i)=(..)
      class method This #apply(fwd imm This1.NativeMethod i)=(..)
      method This with(fwd imm This1.NativeMethod i)=(..)
      #typed{usedMethods=This2.Bool.#bang0(), This1.NativeMethod.doc(), This1.Doc.#apply(that), This1.NativeMethod.returnType(), This1.Type.#apply(that), This1.Types.#apply(), This1.NativeMethod.parNum(), This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#d0(), This2.Size.#from(stringLiteral), This2.Size.#lt0(that), This2.Bool.#checkTrue(), This1.Types.res(), This1.NativeMethod.parIn(that), This1.Types.SlashRes.#ltequal0(e), This2.S.StringBuilder.#d1(), This2.Size.#plus0(that), This1.Types.#apply(that), This1.NativeMethod.excNum(), This1.NativeMethod.excIn(that), This1.NativeMethod.isRefined(), This1.NativeMethod.isAbstract(), This1.NativeMethod.nested(), This1.Nested.#apply(that), This1.NativeMethod.nameFromRoot(), This2.Name.of(that), This1.NativeMethod.position(), This1.NativeMethod.toS()refined=toS()close}
      }
    #typed{close}
    }
  @This.Public@<private>{organize}Organize={
    read method This1.Name public()=(..)
    class method This #apply(This1.Name public)=(..)
    class method This #apply()=(..)
    method This1.Size maxLev(This1.Introspection.Nested that)=(..)
    method This1.Trait #colon0(Library that)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.ClassClash, This1.Trait.MethodClash]=(..)
    method This1.Trait #colon0(This1.Trait trait)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.ClassClash, This1.Trait.MethodClash]=(..)
    method This1.Bool isPrivate(This1.Introspection.Doc that)=(..)
    method mut<private>mapHide(mut<private>that, This1.Introspection.Nested n, This1.Size level)=(..)
    method mut<private>mapRename$(mut<private>that, This1.Introspection.Nested n, This1.Size level)=(..)
    CloseAll={
      class method This2.Trait #apply(This2.Trait that)=(..)
      class method This2.Trait #apply(This2.Trait that, This2.Introspection.Nested n)=(..)
      #typed{watched=This2.Trait usedMethods=This2.Introspection.Nested.from(library), This2.Introspection.Nested.nesteds(), This2.Introspection.Nesteds.#iterator(), This2.Introspection.Nesteds.#startIndex(), This2.Introspection.Nesteds.#hasElem(that), This2.Bool.#shortCircut#andand(), This2.Bool.#if(), This2.Bool.#checkTrue(), This2.Bool.#shortResult#andand(that), This2.Introspection.Nesteds.#incomplete(that), This2.Bool.#shortProcess#andand(that,other), This2.Introspection.Nesteds.#elem#default(that), This2.Size.#succ(), This2.Introspection.Nesteds.#close(that), This2.Introspection.Nested.isInterface(), This2.Bool.#bang0(), This2.Introspection.Nested.isClose(), This2.Introspection.Nested.nameFromRoot(), This2.Data.Close.#apply(that), This2.Data.Close.#colon0(t)close}
      }
    ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This1.#apply()close}}
    EmptyOnThis={class method This2.S #apply(This2.S that)=(..)#typed{usedMethods=This2.S.StringBuilder.#stringLiteralBuilder(), This2.S.StringBuilder.#uT(), This2.S.StringBuilder.#lh(), This2.S.StringBuilder.#li(), This2.S.StringBuilder.#ls(), This2.S.#from(stringLiteral), This2.S.#equalequal0(that), This2.Bool.#if(), This2.Bool.#checkTrue()close}}
    #typed{typeDep=<private>, <private>coherentDep=<private>, <private>watched=This1.Trait, This1 usedMethods=This1.S.StringBuilder.#stringLiteralBuilder(), This1.Name.#from(stringLiteral), This1.S.StringBuilder.#d0(), This1.Size.#from(stringLiteral), This1.Introspection.Nested.nesteds(), This1.Introspection.Nesteds.#iterator(), This1.Introspection.Nesteds.#startIndex(), This1.Introspection.Nesteds.#hasElem(that), This1.Bool.#shortCircut#andand(), This1.Bool.#if(), This1.Bool.#checkTrue(), This1.Bool.#shortResult#andand(that), This1.Introspection.Nesteds.#incomplete(that), This1.Bool.#shortProcess#andand(that,other), This1.Introspection.Nesteds.#elem#default(that), This1.Size.#lt0(that), This1.Size.#succ(), This1.Introspection.Nesteds.#close(that), This1.S.StringBuilder.#d1(), This1.Size.#plus0(that), This1.Introspection.Nested.from(library), This1.Size.#minus0(that), This.CloseAll.#apply(that), This1.Name.#equalequal0(that), This1.Introspection.Doc.annotatedAs(that), This1.Bool.#bang0(), This1.Introspection.Doc.root(), This1.Introspection.Nested.nested(name), This1.Introspection.Doc.annotatedAs(nested), This1.Size.#bangequal0(that), This1.Introspection.Nested.methods(), This1.Bool.false(), This1.Name.List.#apply(), This1.Introspection.Nested.outerDoc(), This1.Name.List.res(), This1.Introspection.Nested.nameFromRoot(), This1.Name.List.SlashRes.#ltequal0(e), This1.Bool.true(), This1.Introspection.Methods.#iterator(), This1.Introspection.Methods.#startIndex(), This1.Introspection.Methods.#hasElem(that), This1.Introspection.Methods.#incomplete(that), This1.Introspection.Methods.#elem#default(that), This1.Introspection.Method.doc(), This1.Introspection.Method.isRefined(), This1.Introspection.Method.nameFromRoot(), This1.Introspection.Methods.#close(that), This1.Name.List.#apply(that), This1.Name.List.#iterator(), This1.Name.List.#startIndex(), This1.Name.List.#hasElem(that), This1.Name.List.#incomplete(that), This1.Name.List.#elem#default(that), This1.Name.List.#close(that), This1.Name.toS(), This.EmptyOnThis.#apply(that), This1.S.size(), This1.Size.#equalequal0(that), This1.S.subString(start,end), This1.S.StringBuilder.#sdollar(), This1.S.#from(stringLiteral), This1.S.contains(that), This1.S.endsWith(that), This1.S.startsWith(that), This1.S.StringBuilder.#sdot(), This1.S.replace(that,with), This1.Name.#apply(that), This1.Name.#equalgt0(other), This1.S.#plusplus0(that)close}
    }
  @This.Public@<private>{load}Load={
    read method This1.Introspection.Nesteds deps()=(..)
    class method This #apply(This1.Introspection.Nesteds deps)=(..)
    class method This #apply()=(..)
    class method mut This1.Introspection.Nesteds baseDeps()=(..)
    method<private>collect(Library that)=(..)
    method Library #colon0(Library that)[This1.Trait.InvalidName, This1.Trait.InvalidMap, This1.Trait.MethodClash, This1.Trait.ClassClash]=(..)
    method This1.Bool match(This1.S src, This1.S dest)=(..)
    ClassOperators={class method This1 #apply()=(..)#typed{usedMethods=This1.#apply()close}}
    N={class method This2.Introspection.Nested #colon0(class Any a)=(..)ClassOperators={class method class This1 #apply()=(..)#typed{close}}#typed{usedMethods=This2.Introspection.Nested.from(classAny)close}}
    #typed{typeDep=<private>, <private>coherentDep=<private>, <private>watched=This1.Trait, This1 usedMethods=This1.Introspection.Nesteds.##apply#squareBuilder(), This1.Introspection.Nesteds.#shortCircutSquare(), This1.Bool.#if(), This1.Bool.#checkTrue(), This.N.ClassOperators.#apply(), This.N.#colon0(a), This1.Introspection.Nesteds.#squareAdd(that), This1.Introspection.Nesteds.#apply(squareBuilder), This1.Introspection.Nested.from(library), This1.S.StringBuilder.#stringLiteralBuilder(), This1.S.StringBuilder.#uA(), This1.S.StringBuilder.#lb(), This1.S.StringBuilder.#ls(), This1.S.StringBuilder.#lt(), This1.S.StringBuilder.#lr(), This1.S.StringBuilder.#la(), This1.S.StringBuilder.#lc(), This1.S.StringBuilder.#uT(), This1.S.StringBuilder.#lo(), This1.S.StringBuilder.#lw(), This1.S.StringBuilder.#le(), This1.S.StringBuilder.#ll(), This1.Name.#from(stringLiteral), This1.Introspection.Nested.nested(name), This1.Introspection.Nested.nesteds(), This1.Introspection.Nesteds.#iterator(), This1.Introspection.Nesteds.#startIndex(), This1.Introspection.Nesteds.#hasElem(that), This1.Bool.#shortCircut#andand(), This1.Bool.#shortResult#andand(that), This1.Introspection.Nesteds.#incomplete(that), This1.Bool.#shortProcess#andand(that,other), This1.Introspection.Nesteds.#elem#default(that), This1.Introspection.Nested.outerDoc(), This1.Introspection.Doc.annotation(nested), This1.Introspection.Doc.Opt.get(), This1.Introspection.Doc.texts(), This1.S.List.left(), This1.Introspection.Nested.nameFromRoot(), This1.Introspection.Nested.classAny(), This1.Name.#equalgt0(target), This1.Size.#succ(), This1.Introspection.Nesteds.#close(that), This1.Class.ClassOperators.#apply(), This1.Class.#colon0(that), This1.S.#equalequal0(that)close}
    }
  #norm{typeDep=<private>, <private>, <private>, <private>watched=This.Trait usedMethods=This.Name.#from(stringLiteral), This.S.StringBuilder.toS(), This.Introspection.Nested.from(classAny), This.Introspection.Nested.excName(text)hiddenSupertypes=This.Message, This.HasToS, This.Message.Guard close}
  }