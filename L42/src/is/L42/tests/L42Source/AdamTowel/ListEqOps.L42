Elem={}
class method Bool equals(read Elem a,read Elem b)

class method mut This (mut This squareBuilder)
class method mut This ##apply#squareBuilder()
class method Bool #shortCircutSquare()
mut method Void #squareAdd(Elem that)
mut method Void #squareAdd(mut Elem mutVal)
mut method Void #yield(Void that)
mut method mut This list()
read method read This #iterator()
mut method mut This #varIterator()
read method Size #startIndex()
read method Bool #hasElem(Size that)
read method Bool #incomplete(Size that)
read method Elem #elem#imm(Size that)
mut method mut Elem #elem#mut(Size that)
read method Elem #elem#default(Size that)
mut method mut Elem #update#mut(Size that, mut Elem val)
mut method Elem #update#imm(Size that, Elem val)
mut method Elem #update#default(Size that, Elem val)
read method Void #close(Size that)
class method mut This empty()
class method mut This empty(Size that)
read method Bool isEmpty()
read method Size size()
read method read Elem readVal(Size that)
read method imm  Elem val(Size that)
mut method mut Elem #val(Size that)
mut method Void set(Size that,Elem val)
mut method Void #set(Size that,mut Elem val)
mut method  Void remove(Size that)
mut method Void add(Size that, Elem val)
mut method Void #add(Size that, mut Elem val)
read method Elem left()
read method Elem right()
mut method mut Elem #left()
mut method mut Elem #right()
read method read Elem readLeft()
read method read Elem readRight()
mut method  Void left(Elem that)
mut method  Void right(Elem that)
mut method  Void #left(mut Elem that)
mut method  Void #right(mut Elem that)
mut method Void add(Elem left)
mut method Void add(Elem right)
mut method Void #add(mut Elem left)
mut method Void #add(mut Elem right)
mut method  Void removeLeft()
mut method  Void removeRight()
method This +(Elem right)
method This ++(This right)
method This with(Size that, Elem val)
method This withLeft(Elem that)
method This withRight(Elem that)
method This withAlso(Size that, Elem val)
method This withAlsoLeft(Elem that)
method This withAlsoRight(Elem that)
method This without(Size index)
method This withoutLeft()
method This withoutRight()
read method lent ElemBox reduce()
read method lent ElemBox reduce(Elem that)
ElemBox={
  read method Elem (Void that)
  read method Elem acc()
  lent method lent This res()
  lent method Void <=(Elem that)
  }
//----------------------------
/*
read method Bool contains(read Elem that)={
  for read e in this (
    if this.equals(a=e,b=that) return Bool.true()
    )
  return Bool.false()
  }

//################# operators
read method Bool #in1(read Elem that)=this.contains(that)

method This -(Elem right)=this.withoutAll(val:right)

method This --(This right)=This[for e in this ( if !(e in right) \list.add(e))]

//method This &(This right)=This[for e in this ( if e in right \list.add(e) )]

//method Bool >>(This right)= this >>=right & !(right>>=this)

//method Bool >>=(This right)=//TODO:
//  Bool.falseOr[{for read e in right(if !(e in this) return \true)}]
method Bool >>=(This right)={
  for read e in right (
    if !(e in this) return Bool.false()
    )
  return Bool.true()
  }
//read method Bool ==(read This that)=
//  Bool.trueAnd[{for read e1 in this, read e2 in that (if e1!=e2 return \false)
//    catch error IterationFailure  return \false //TODO:
//      }]
read method Bool ==(read This that)={
  for read e1 in this, read e2 in that (
    if e1!=e2 return Bool.false()
    )
  catch error IterationFailure ( return Bool.false() )//TODO:
  return Bool.true()
  }
read method Size indexOfLeft(read Elem val)={
  size=this.size()
  var Size pos=0Size
  loop ( //TODO: size.range() may range from 0 to size-1, and size.inverseRange() from size-1 to 0
    if this.val(pos)==val return pos
    if pos>=size return Size"-1"
    pos+=1Size
    )
  }
read method Size indexOfRight(read Elem val)={
  var Size pos=this.size()-1Size
  loop (
    if this.val(pos)==val return pos
    if pos<=0Size return Size"-1"
    pos-=1Size
    )
  }
method This without(Size index) //from VectorTrait
//TODO: HERE
method This withoutLeft(read Elem val) {
  pos=this.indexOfLeft(val:val)
  if pos<0Size return this
  return this.without(index:pos)
  }

method This withoutRight(read Elem val)={
  pos=this.indexOfRight(val:val)
  if pos<0Size return this
  return this.without(index:pos)
  }

method This withoutAll(read Elem val)=This[for e in this.vals() (if e!=val \list.add(e))]

mut method Void remove(Size that) //from VectorTrait

mut method Void removeAll(read Elem val){
  var Size pos=0Size
  loop (
    if this.val(pos)==val (this.remove(pos))
    else (pos+=1Size)
    if pos==this.size() (return void)
    )
  }

mut method
Void removeLeft(read Elem val){
  pos=this.indexOfLeft(val:val)
  if pos<0Size (return void)
  return this.remove(pos)
  }

mut method
Void removeRight(read Elem val){
  pos=this.indexOfRight(val:val)
  if pos<0Size (return void)
  return this.remove(pos)
  }




class method mut This (mut This squareBuilder)=squareBuilder
class method mut This ##apply#squareBuilder()=This.empty()
class method Bool #shortCircutSquare()=Bool.true()
mut method Void #add(Elem that)=this.add(val=that)
mut method Void #add(mut Elem mutVal)=this.add(mutVal=mutVal)
mut method Void #yield(Void that)=void
mut method mut This list()=this
read method read This #iterator()=this
mut method mut This #varIterator()=this
read method Size #startIndex()=0Size
read method Bool #hasElem(Size that)=that<this.size()
read method Bool #incomplete(Size that)=that!=this.size()
read method Elem #elem#imm(Size that)=this.val(that)
mut method mut Elem #elem#mut(Size that)=this.#val(that)
read method Elem #elem#default(Size that)=this.#elem#imm(that)
mut method mut Elem #update#mut(Size that, mut Elem val)=(this(that,mutVal=val) val)
mut method Elem #update#imm(Size that, Elem val)=(this(that,val=val) val)
mut method Elem #update#default(Size that, Elem val)=this.#update#imm(that,val=val)
read method Void #close(Size that)=
  if this.#incomplete(that) error S"multi for skipped some elements"
mut method Void add(Elem that)=this.add(right=that)

class method mut This empty()
read method Bool isEmpty()
read method Size size()
read method read Elem readVal(Size that)
read method imm  Elem val(Size that)
mut method mut Elem #val(Size that)
mut method Void #apply(Size that,Elem val)
mut method Void #apply(Size that,mut Elem mutVal)
mut method Void add(Elem val)
mut method Void add(mut Elem mutVal)
*/