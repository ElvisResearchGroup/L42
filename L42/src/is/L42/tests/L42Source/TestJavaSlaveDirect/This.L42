reuse [AdamTowel]
R={
  class method I #$size1()=native{
    resSlave{}{
    return 12;
    }} error void
  class method I #$size2()=native{
    resSlave{}{
    return null;
    }} error void
  class method I #$size3()[S.ParseError]=native{
    resSlave{}{
    return null;
    }} error void
  class method S.Opt #$s4()[S.ParseError]=native{
    resSlave{}{
    return "a string";
    }} error void
  class method S.Opt #$s5()[S.ParseError]=native{
    resSlave{}{
    return null;
    }} error void
  class method Name #$unexpectedType()[S.ParseError]=native{
    resSlave{}{
    return null;
    }} error void
  }
MainUnexpected=(
  {}:Test""(
    actual=(_=R.#$unexpectedType() catch S.ParseError m (m.text()) error X"")
    expected=S"The type [This1.Name] can not be safelly returned from Java"
    )
  Debug(R.#$s4())
  {}:Test""(actual=R.#$s4() expected=S"[%S.dq()a string%S.dq()]")
  Debug(R.#$s5())
  {}:Test""(actual=R.#$s5() expected=S"[]")
  Debug(R.#$size1())
  {}:Test""(actual=R.#$size1() expected=S"12")
  {}:Test""(
    actual=(_=R.#$size3() catch S.ParseError m (m.text()) error X"")
    expected=S"Java code was returning null, but the expected result is not optional"
    )
  )