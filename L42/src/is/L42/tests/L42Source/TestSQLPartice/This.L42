reuse [AdamTowel]

LoadJ=Load:{reuse[JavaServer]}
GuiJ=LoadJ(slaveName=S"miniGuiSlave{}")
LoadGui=Load:{reuse[GuiBuilder]}
Gui=LoadGui(javaServer=GuiJ)

DbJ=LoadJ(slaveName=S"dbServer{}")
Query=Load:{reuse[Query]}
DB=Query.sql(connectionString=S"jdbc:derby:PersonsGui;create=true",javaServer=DbJ)

SetUp={...}
Table=DB.#$of().tables()

IQL=Query.iql(javaServer=GuiJ)


Person=Data:{S name, I age, I height, I weight}
Persons=Collection.list(Person)
Key=Data:{I id}
Keys=Collection.list(Key)
Queries=DB.QueryBox:{
  @Public All=DB.query[Table.Person.List]"SELECT * FROM Person"
  
  @Public Insert=DB.query[Void;S;I;I;I]"""
    |INSERT INTO Person (name,age,height,weight)
    |Values (@name,@age,@height,@weight)
    """
  @Public DeleteId=DB.query[Void;I]"DELETE FROM Person WHERE id=@id"
  @Public DeleteName=DB.query[Void;S]"DELETE FROM Person WHERE name=@name"
  }
AddPersons=IQL.query[Persons]"""
  | 'Add data for more persons' Pages('Add data for more persons')
  | name 'name' String
  | age  'age'  Integer
  | height 'height' Decimal
  | weight 'weight' Decimal
  """//{regex='[0-9]*\\.[0-9][0-9]'}
RemoveById=IQL.query[Keys]"""
  | 'Deleting an entry' Single('Entry to delete?')
  | id 'index' String
  """
PName=Data:{S name}
PNames=Collection.list(PName)
RemoveByName=IQL.query[PNames]"""
  | 'Deleting entries' Tabular('Entries to delete?')
  | name 'name' String
  """
  
Model=Data:GuiJ.Handler:{
  mut GuiJ j
  mut Queries q
  @GuiJ.Handler mut method Void printAll(S msg)=(
    all=this.#q().all()()
    //this.#j().submitEvent(key='Example.Display, id=S"label1", msg=all.toS())
    this.#j().submitEvent(key='Example.Display, id=S"tableClear", msg=S"")
    for (id,name,age,height,weight) in all (
      this.#j().submitEvent(key='Example.Display, id=S"tableAdd",
        msg=S"%id,%name,%age,%height,%weight,")
      )
    whoops DB.Fail, GuiJ.Fail
    )
  @GuiJ.Handler mut method Void addPerson(S msg)=(
    ps=AddPersons(IQL(this.#j()))()
    for (name,age,height,weight) in ps (
      this.#q().insert()(name=name, age=age height=height weight=weight)
      )
    this.printAll(msg=msg)
    whoops DB.Fail, IQL.Fail
    )
  @GuiJ.Handler mut method Void removeById(S msg)=(
    ks=RemoveById(IQL(this.#j()))()
    for (id) in ks (//zero or one time
      this.#q().deleteId()(id=id)
      )
    this.printAll(msg=msg)
    whoops DB.Fail, IQL.Fail
    )
  @GuiJ.Handler mut method Void removeByName(S msg)=(
    ks=RemoveByName(IQL(this.#j()))()
    for (name) in ks (//zero or one time
      this.#q().deleteName()(name=name)
      )
    this.printAll(msg=msg)
    whoops DB.Fail, IQL.Fail
    )
  }
Main=(
  q=Queries(DB.#$of())
  j=GuiJ.#$of()
  model=Model(j=j,q=q)
  gui=Gui(j=j,package=S"miniGui",imports=S"""%
    | %Gui.defaultImports()
    | import javax.swing.table.DefaultTableModel;
    """,
    name='Example,x=800\,y=600\
    )
  gui"""%
    |JPanel screen1=new JPanel();
    |{add(screen1);}
    |JPanel buttons=new JPanel();
    |{addNorth(screen1,buttons);}
    |%gui.button(id=S"addPerson",msg='PressedAdd,text=S"add")
    |{addFlow(buttons,addPerson);}
    |%gui.button(id=S"removeById",msg='PressedRemove,text=S"remove by id")
    |{addFlow(buttons,removeById);}
    |%gui.button(id=S"removeByName",msg='PressedRemove,text=S"remove by name")
    |{addFlow(buttons,removeByName);}
    |%gui.button(id=S"printAll" msg='PressedPrint text=S"printAll")
    |{addFlow(buttons,printAll);}
    |Object[] tLabels={"id","name","age","height","weight"};
    |DefaultTableModel tModel=new DefaultTableModel(new Object[][]{},tLabels);
    |JTable table = new JTable(tModel);
    |{addCenter(screen1,new JScrollPane(table));}
    |{event.registerEvent("Example.Display","tableAdd",
    |  (k,id,msg)->SwingUtilities.invokeLater(()->tModel.addRow(msg.split(","))));}
    |{event.registerEvent("Example.Display","tableClear",
    |  (k,id,msg)->SwingUtilities.invokeLater(()->tModel.setRowCount(0)));}
    """
  for e in j(\['Example]) ( e>>model )
  )
TearDown={...}