E=Class.Relax:TraitE
L=Class.Relax:Trait(Collection.list(E))[clear='This]
mut Random r
Size side
mut L cells
mut Size.List seeds=Size.List()
Size maxSeeds
read method Size coords(Size x,Size y)

mut method Void addSeed(Point that,E val)=
  this.addSeed(coord=this.coords(x=that.x(),y=that.y()),val=val)
mut method Void addSeed(Size coord,E val)=(
  this.#seeds().add(coord)
  this.#cells().set(coord val=val)
  )
mut Points order=Points[
  \(x=\"-1" y=\"-1"); \(x=\"0"  y=\"-1"); \(x=\"1"  y=\"-1");
  \(x=\"-1" y=\"0");                       \(x=\"1"  y=\"0");
  \(x=\"-1" y=\"1");  \(x=\"0"  y=\"1");   \(x=\"1"  y=\"1");
  ]
mut method Void initGrow()=(
  ShufflePoint.shuffle(this.#order(),r=this.#r())
  limit=this.seeds().size()-this.maxSeeds()
  if this.maxSeeds()>0Size (
   while this.seeds().size()>this.maxSeeds() this.#seeds().removeLeft()
   )
  ShuffleSize.shuffle(this.#seeds(),r=this.#r())
  )
mut method Void growInOrder(Double chance,Size x,Size y,Size c)=(
  seed=this.cells().val(c)
  for o in this.order() {
    xd=x+o.x()
    yd=y+o.y()
    if xd<0Size || xd>=this.side() || yd<0Size || yd>=this.side() return void
    nearC=this.coords(x=xd,y=yd)
    if this.#r().nextDouble()>chance return void
    newSeed=this.combine(x=x,y=y,seed=seed,oldCell=this.cells().val(nearC))
    if newSeed==E.base() return void
    this.#cells().set(nearC, val=newSeed)
    this.#cells().set(c, val=newSeed)
    this.#seeds().add(nearC)
    return void
    }
  )
mut method Void grow(Double chance)=(
  this.initGrow()
  for i in Range(this.seeds().size()) (//will grow down below
    c=this.seeds().val(i)//so we only iterate on the current ones
    this.growInOrder(chance=chance,x=this.x(coord=c),y=this.y(coord=c),c=c)
    )
  )
mut method Size rCoord()=
  this.#r().nextInRange(start=0\ end=this.side()*this.side())
mut method Size rCoord(Size xMin,Size xMax,Size yMin,Size yMax)=this.coords(
  x=this.#r().nextInRange(start=xMin,end=xMax)
  y=this.#r().nextInRange(start=yMin,end=yMax)
  )
mut method Void clearSeeds()=
  while !this.seeds().isEmpty() this.#seeds().removeRight()

read method E combine(Size x, Size y, E seed,E oldCell)//To override

read method E baseCombine(Size x, Size y, E seed,E oldCell)={
  if oldCell!=E.base() return E.base()
  return seed
  }