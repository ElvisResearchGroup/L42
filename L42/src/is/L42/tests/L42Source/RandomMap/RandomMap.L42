//### numeral is Size, string is S
Size side
mut Random r
Size waterLevel
Size rockLevel
Size maxZ
HeightMap=Class:Data:MapList.expansion(Size.List,base='zero()):{...}
BoolMap=Class:Data:MapList.expansion(Bool.List,base='false()):{
  read method Bool combine(Size x,Size y,Bool seed,Bool oldCell)=seed
  }
//  read method Bool combine(Size x,Size y,Bool seed,Bool oldCell)=this.baseCombine(x=x,y=y,seed=seed,oldCell=oldCell)
mut HeightMap map
mut BoolMap grassMap
mut BoolMap treesMap
mut BoolMap rocksMap

class method mut This (
                Size side,
                mut Random r,
                Size waterLevel,
                Size rockLevel,
                Size maxZ)=
  This(side = side,
    r = r,
    waterLevel = waterLevel,
    rockLevel=rockLevel,
    maxZ = maxZ,
    map = HeightMap(side=side, r=r, maxSeeds=\"-1", maxZ=maxZ)
    grassMap = BoolMap(side=side, r=r, maxSeeds=(side*side)/4Size)
    treesMap = BoolMap(side=side, r=r, maxSeeds=(side*side)/7Size)
    rocksMap = BoolMap(side=side, r=r, maxSeeds=\"-1")
    )
  
mut method Void makeGrass()=this.makeBools(c=this.#grassMap())
mut method Void makeTrees()=this.makeBools(c=this.#treesMap())
mut method Void makeBools(mut BoolMap c)=(
  m=this.map()
  s=this.side()
  for i in Range(50\) (c.addSeed(
    x=this.#r().nextInRange(start=0\ end=s)
    y=this.#r().nextInRange(start=0\ end=s)
    val=\.true()))
  for i in Range(50\) (c.grow(percent=20\))
  for x in Range(s) (
    for y in Range(s) (
      if m(x=x,y=y)<this.waterLevel()+3Size ( c(x=x,y=y,val=\.false()) )
      if m(x=x,y=y)>this.rockLevel() ( c(x=x,y=y,val=\.false()) )
      if m.riverMap()(x=x,y=y)>0Size ( c(x=x,y=y,val=\.false()) )
      )
    )
  )
mut method Void addShores()=(
  s=this.side()
  c=BoolMap(side=s,r=this.#r(),maxSeeds=\"-1")
  for x in Range(s) (
    c.addSeed(x=x,y=0\,val=\.true())
    c.addSeed(x=x,y=s-1\,val=\.true())
    )
  for y in Range(s) (
    c.addSeed(x=0\,y=y,val=\.true())
    c.addSeed(x=s-1\,y=y,val=\.true())
    )
  for x in Range(s/3\) (
    for y in Range(s/3\) (
      c.addSeed(x=x,y=y,val=\.true())
      )
    )
  seeds=c.seeds().size()
  for attempts in Range(150\) (
      if c.seeds().size()>=seeds*3Size Break()
      c.grow(percent=10\)
      )
  for x in Range(s) (
    for y in Range(s) (
      if c(x=x,y=y) this.#map()(x=x,y=y,val=0\)
      )
    )
  )

mut method Void montainsErosion(Size rounds)=
  for r in Range(rounds) this.montainsErosionRound()
mut method Void montainsErosionRound()=(
  s=this.side()
  m=this.#map()
  o=m.#order()
  ShufflePoint.shuffle(o,r=this.#r())
  for x in Range(s) (
    for y in Range(s) (
      for (x1,y1) in o (
        xd=x+x1
        yd=y+y1//TODO: consider having defaults for MapList instead
        if m.inRange(x=xd,y=yd) (
          h0=m(x=x,y=y)
          h1=m(x=xd,y=yd)
          if h0>h1+6Size m(x=x,y=y,val=h0-4Size)
          )
        )
      )
    )
  )
mut method Void addMontains()=(
  m=this.#map()
  m.initTops()
  var lastSize=this.side()*this.side()
  for h in Range(1\ to=this.maxZ()) (
    m.clearSeeds()
    for p in m.montainsTop() ( if p.z()>=h m.addSeed(p val=h) )
    Debug(S"-- start growing for h=%h; seeds size=%m.seeds().size()")
    for attempts in Range(150\) (
      if m.seeds().size()>=(lastSize*9Size)/10Size Break()
      m.grow(percent=30\)
      )
    lastSize:=m.seeds().size()
    )
  )

read method S msg()=(
  g=S"Ground;"
  w=S"Water;"
  gr=S"Grass;"
  r=S"Rock;"
  tree=S"TreeTrunk;TreeTrunk;TreeTop;"
  var res=S.StringBuilder()
  for x in Range(this.side()) (
    for y in Range(this.side()) (
      h=this.map()(x=x,y=y)
      isRock=this.rocksMap()(x=x, y=y)
      isGrass=this.grassMap()(x=x,y=y)
      rockH=if isRock h else ( (h-6Size).max(0\) )
      groundH=if isRock 0Size else (
        if isGrass ( h.min(5\) ) else ( h.min(6\) ) )
      for z in Range(rockH) (res.append(r))
      for z in Range(groundH) (res.append(g))
      if isGrass (res.append(gr))
      if this.treesMap()(x=x,y=y) (res.append(tree))
      river=this.map().riverMap()(x=x,y=y)
      if river>0Size for z in Range(river) (res.append(w))
      wl=(this.waterLevel()-h)-river
      if wl>0Size for z in Range(wl) (res.append(w))
      res.append(S.nl())
      )
    )
  res.toS()
  )
mut method Void markRocks()=(
  s=this.side()-1Size
  m=this.map()
  r=this.#rocksMap()
  o=this.map().order()
  for x in Range(1\ to=s) (
    for y in Range(1\ to=s) {
      h=m(x=x,y=y)
      if h>=this.rockLevel() ( return r(x=x,y=y,val=\.true()) )
      var min=this.maxZ()
      for (x1,y1) in o ( min:=min.min(m(x=x+x1,y=y+y1)) )
      return if min<h-6Size (
        r(x=x,y=y, val=\.true())
        this.#grassMap()(x=x,y=y, val=\.false())
        this.#treesMap()(x=x,y=y, val=\.false())
        )
      }
    )
  )