TraitSec=Trait:{interface @{securityLevel}}
TraitDecl=Trait:{Top={} T={} class method T (@Top T that)=that}
TraitDeclCaps=Trait:{Top={} T={} class method capsule T (capsule @Top T that)=that}
@Public class method Library declassify(class Any that,class Any top)[_]
  =Class:TraitDecl['Top=>top;'T=>that]
@Public class method Library declassifyCapsule(class Any that,class Any top)[_]
  =Class:TraitDeclCaps['Top=>top;'T=>that]
@Public ClassOperators={
  class method class This ()=this
  class method Library :(Library that)[_]=Class:TraitSec:that
  }
@Public Fail=Class:Message.Native:{[Message.Guard]} 
Meta={
  class method This #apply()
  method Library sifo(Library input,class Any top)
    =native{trusted:sifo} error void
  #norm{nativeKind=Meta,
    typeDep=This This1.Fail
    watched=This1.Fail
    coherentDep=This1.Fail,
    nativePar=This1.Fail This1.Fail This1.Fail This1.Fail This1.Fail
    }}
$={
  class Any that
  @Public class method This(class Any that)
  @Public method Trait :(Trait t)[Fail]=Trait(this:t.code())
  @Public method Trait :(class Trait.Lifted l)[Fail]=Trait(this:l.code())
  @Public method Library :(Library that)[Fail]={
    return Meta().sifo(input=that,top=this.that())
    catch error Fail x exception x
    }
  }