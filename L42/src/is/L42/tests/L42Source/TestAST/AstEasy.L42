Case=Decorator:{
  HasSelf=Trait:{method This self()=this}
  method Trait(Trait trait)[Message.Guard]
    =Data('This,autoNorm=Bool.true()):HasSelf:trait
  }
Base=Trait:{
  Node={interface}
  Nodes=Collection.list(Node)
  P=Case:{[Node] S text}
  H1=Case:{[Node] S text}
  Div=Case:{[Node] Nodes nodes}
  Divs=Collection.list(Div)
  Head=Case:{[Node]}
  Body=Case:{[Node] Divs divs}
  Html=Case:{[Node] Head head,Body body}
  A=Case:{S href, S text}
  }
Abs=Base[clear='This]
ToHtml=Trait({
  Dom=Class.Relax:Abs:{Node={method S toHtml()}}
  P={method Dom.P self() method S toHtml()=S"<P>%this.self().text()</P>"}
  H1={method Dom.H1 self() method S toHtml()=S"<H1>%this.self().text()</H1>"}
  Div={method Dom.Div self() method S toHtml()=(
    var ss=S""
    for e in this.self().nodes() (ss++=e.toHtml())
    S"<Div>%ss</Div>"
    )}
  Head={method Dom.Head self() method S toHtml()=S"<Head></Head>"}
  Body={method Dom.Body self() method S toHtml()=(
    var ss=S""
    for e in this.self().divs() (ss++=e.toHtml())
    S"<Body>%ss</Body>"
    )}
  Html={method Dom.Html self() method S toHtml()=
    S"<Div>%this.self().head().toHtml() this.self().body().toHtml()</Div>"
    }
  })['Dom=>'This]
WithH2=Trait({
  Dom=Class.Relax:Abs
  H2=Case:{[Dom.Node] S text}
  })['Dom=>'This]
WTC=Class.Relax:WithH2
All=Trait({
  Dom=Class.Relax:Base:WithH2:ToHtml
  H2={method Dom.H2 self() method S toHtml()=S"<H2>%this.self().text()</H2>"}
  })['Dom=>'This]