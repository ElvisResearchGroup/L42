using Microsoft.Contracts;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System;

class Point {
	public double x, y;
	public Point(double x, double y) { this.x = x; this.y = y; }

	[Pure] public virtual bool Equal(double x, double y) { return x == this.x && y == this.y;  }
}

class Hamster {
	[Peer] public Point pos;
	public Hamster([Captured] Point pos) { this.pos = pos; }
}

class Cage {
	[Rep] public Hamster h;
	[Rep, ElementsRep] List<Point> path;

	public Cage([Captured] Hamster h, [Captured] List<Point> path)
		requires Owner.Same(Owner.ElementProxy(path), path);
	{ this.h = h; this.path = path; base(); }

	invariant exists {int i in (0 : this.path.Count); this.path[i].Equal(this.h.pos.x, this.h.pos.y)};
	public void Move() { 
		int index = 0;
		while (index < this.path.Count && !this.path[index++].Equal(this.h.pos.x, this.h.pos.y));
		assume 0 <= index && index < this.path.Count;
	expose (this) {
		this.h.pos = this.path[index % this.path.Count];
	} }
}


class Program
{
  static void Main(String[] args)
  {
	List<Point> pl = new List<Point>{new Point(0, 0), new Point(0, 1)};
	Owner.AssignSame(pl, Owner.ElementProxy(pl));
	Cage c = new Cage(new Hamster(new Point(0, 0)), pl);
	
	Console.WriteLine("hello");
    assume c.h.pos.x == 0 && c.h.pos.y == 0;
    c.Move();
    assume c.h.pos.x == 2 && c.h.pos.y == 2;
    c.Move();
    assume c.h.pos.x == 0 && c.h.pos.y == 0;
    c.Move();
    assume c.h.pos.x == 2 && c.h.pos.y == 2;
  }
} 
