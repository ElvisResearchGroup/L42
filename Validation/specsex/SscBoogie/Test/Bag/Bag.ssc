using System;
using Microsoft.Contracts;

public class Bag
{
  int[]! elems;
  int count;
  invariant 0 <= count && count <= elems.Length;

  public Bag(int[] initialElements) {
    this.count = initialElements.Length;
    int[] e = new int[initialElements.Length];
    initialElements.CopyTo(e, 0);
    this.elems = e;
    base();
  }

  public Bag(int[]! initialElements, int start, int howMany)
    requires 0 <= start && 0 <= howMany;
    requires start + howMany <= initialElements.Length;
  {
    this.count = howMany;
    int[] e = new int[howMany];
    Array.Copy(initialElements, start, e, 0, start+howMany);
    this.elems = e;
    base();
  }

  public int RemoveMin()
  {
    int m = System.Int32.MaxValue;
    int mindex = 0;
    for (int i = 0; i < count; i++) {
      if (elems[i] < m) {
        mindex = i;
        m = elems[i];
      }
    }
    count--;
    elems[mindex] = elems[count];
    return m;
  }

  public void Add(int x)
  {
    if (count == elems.Length)
    {
      int[]! b = new int[2*elems.Length];
      Array.Copy(elems, 0, b, 0, elems.Length);
      elems = b;
    }
    elems[this.count] = x;
    count++;
  }
}
