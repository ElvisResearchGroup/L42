using Microsoft.Contracts;

public class Memory {
  [Rep] [StrictReadonly] public readonly byte[]! contents;

  public Memory(int n) 
    requires 0 < n;
    ensures contents.Length == n;
  {
    contents = new byte[n];
    base();
  }

  [Pure][Reads(ReadsAttribute.Reads.Owned)]
  public byte get_cont(int addr)
    requires 0 <= addr;
    requires addr < contents.Length;
  {
    return contents[addr];
  }

  public void set_cont(int addr, byte value) 
    requires 0 <= addr;
    requires addr < contents.Length;
  {
    expose(this) {
      contents[addr] = value;
    }
  }

  [Pure][Reads(ReadsAttribute.Reads.Owned)]
  public bool InSandbox(int addr)
    ensures result ==> 0 <= addr && addr < contents.Length;
  {
    return 0 <= addr && addr < contents.Length;
  }

}

public class RTE {

  // enum RTEMode
  const int Primary = 10;
  const int Math = 11;

  // enum ReturnCode
  const int Normal = 20;
  const int SandboxError = 21;
  const int CallStackError = 22;
  const int MathStackError = 23;
  const int DataMemError = 24;
  const int ProgramMemError = 25;

  // enum ArithmeticOpcode
  const int ADD = 30;
  const int SUB = 31;
  const int AND = 32;
  const int OR = 33;
  const int XOR = 34;
  
  // enum DataTransferOpcode
  const int LDA = 40;
  const int LDAC = 41;
  const int LDAD = 42;
  const int LDAI = 43;
  const int STA = 44;
  const int STAD = 45;
  const int STAI = 46;
      
  // enum ControlTransferOpcode
  const int JMP = 50;
  const int JZ = 51;
  const int JNZ = 52;
  const int JC = 53;
  const int JNC = 54;
  const int CALL = 55;
  const int RET = 56;

  // enum MemoryOpcode
  const int CLR = 60;
  const int DEC = 61;
  const int INC = 62;
        
  // enum MiscOpcode
  const int NOP = 70;
  const int END = 71;
  const int STOP = 72;
  const int ESC = 73;
  const int SYS = 74;

  // enum MathArithmeticOpcode
  const int mADD = 80;
  const int mSUB = 81;
  const int mMUL = 82;
  const int mDIV = 83;
  const int mMOD = 84;
  const int mNEG = 85;

  // enum MathControlTransferOpcode
  const int mJMP = 90;
  const int mJZ = 91;
  const int mJNZ = 92;
  const int mJGEZ = 93;
  const int mJLTZ = 94;
  const int mCALL = 95;
  const int mRET = 96;

  // enum MathMiscOpcode
  const int mNOP = 100;
  const int mEND = 101;
  const int mSTOP = 102;

  // enum MathDataTransferOpcode
  const int mPUSH = 110;
  const int mPOP = 111;
  const int mPOP1 = 112;
  const int mPOPA = 113;
  const int mDUP = 114;
  const int mSWAP = 115;

  const int Literal = 120;
  const int Indirect = 121;

  [Rep] int[]! Instructions;

  int A = 0;
  bool Z = false;
  bool C = false;

  int PC = 0;

  int CurrRTEMode = Primary;
  int RtnCode = 0;
  
  [Rep] Memory! Program = new Memory(64*1024);
  const int DataSize = 65536; //64*1024;
  [Rep] Memory! Data = new Memory(DataSize);
  invariant DataSize == Data.contents.Length;
  [Rep] Memory! Scratch = new Memory(256);

  [Rep] int[]! CallStack;
  const int CallStackMax = 10;
  invariant CallStack.Length == CallStackMax;
  int CSP = 0;
  invariant 0 <= CSP;
  invariant CSP <= CallStackMax;

  int MSP; // current math stack pointer value
  [Microsoft.Contracts.StrictReadonly]
  readonly int MStackBase; // lower bound of math stack
  [Microsoft.Contracts.StrictReadonly]
  readonly int MStackMaxSize; // number of *bytes* in math stack
  invariant MStackBase <= MSP;                 // MStackBase == MSP means stack is empty
  invariant MSP <= MStackBase + MStackMaxSize; // MSP == MStackBase + MStackMaxSize means stack is full
  invariant MSP % 4 == 0; // every element is 4-index aligned
  invariant MStackBase % 4 == 0;
  invariant MStackMaxSize % 4 == 0;
  invariant MStackBase + MStackMaxSize <= Scratch.contents.Length;
  invariant 0 <= MStackBase;
  invariant 0 <= MStackMaxSize;

  readonly int DPP;
  invariant DPP == MStackBase + MStackMaxSize;
  
  const int ScratchDefaultValue = 0;

  RTE(int[]! input, int baseAddress, int size)
    requires 0 <= baseAddress;
    requires baseAddress % 4 == 0;
    requires 0 <= size;
    requires size % 4 == 0;
    requires baseAddress + size <= 254; // size of Scratch memory - 2 (for DPP)
  {
    MStackBase = baseAddress; //0;
    MStackMaxSize = size; //16;
    MSP = baseAddress;
    
    DPP = baseAddress + size; // put the register in the two bytes above the math stack.
    
    int n = input.Length;
    int[] instrs = new int[n];
    Instructions = instrs;
    System.Array.Copy(input, 0, instrs, 0, n);

    CallStack = new int[CallStackMax];

    base();
  }
  
  static int apply(int op, int a, int b)
  {
    switch (op) {
      case ADD: return a + b;
      case SUB: return a - b;
      default: return 0;
    }
  }

  static int ApplyQuad(int op, int a, int b)
  {
    switch (op) {
      case mADD: return a + b;
      case mSUB: return a - b;
      default: return 0;
    }
  }

  static bool carry(int op, int a, int b)
    requires op == ADD || op == SUB;
  {
    if (op == ADD) {
      return ((a+b) >> 8) % 2 != 0;
    } else { // op == SUB
      return ((a-b) >> 8) % 2 != 0;
    }
  }

  static int ReadQuad(Memory! m, int addr)
    requires 0 <= addr;
    requires addr <= m.contents.Length - 4;
  {
    return m.get_cont(addr) << 12 + m.get_cont(addr+1) << 8 + m.get_cont(addr+2) << 4 + m.get_cont(addr+3);
  }

  static void WriteQuad(Memory! m, int addr, int value)
    requires 0 <= addr;
    requires addr <= m.contents.Length - 4;
    modifies m.*;
  {
    m.set_cont(addr,   (byte) ((value & 0xf000) >> 12));
    m.set_cont(addr+1, (byte) ((value & 0x0f00) >> 8));
    m.set_cont(addr+2, (byte) ((value & 0x00f0) >> 4));
    m.set_cont(addr+3, (byte) (value & 0x000f));
  }
  
  [Inside]
  int DP()
    requires Scratch.IsPeerConsistent;
    requires 0 <= DPP && DPP+1 < Scratch.contents.Length;
    ensures 0 <= result;
    modifies this.0;
  {
    byte a = Scratch.get_cont(DPP);
    byte b = Scratch.get_cont(DPP+1);
    return (a << 8) + b;
  }

  [Inside]
  void Terminate(int code)
    modifies CurrRTEMode, RtnCode;
  {
    CurrRTEMode = 0;
    RtnCode = code;
  }

  int Run()
  {
    while ( RtnCode == 0 ) {
      ExecuteInstruction();
    }
    return RtnCode;
  }

  [Inside]
  void ApplyALU(int opcd, int valType, int val)
    requires Data.IsPeerConsistent;
    requires valType == Literal || valType == Indirect;
    modifies A, Z, C;
    modifies CurrRTEMode, RtnCode;
    ensures Data.contents.Length == old(Data.contents.Length);
  {
    int val2;
    switch (valType) {
      case Literal: val2 = val; break;
      case Indirect: 
        if (Data.InSandbox(val)) {
          val2 = Data.get_cont(val); 
        } else {
          Terminate(DataMemError);
          return;
        }
        break;
      default:
        assert false;
    }
    int res = apply(opcd, A, val2);
    A = res;
    Z = res == 0;
    if (opcd == ADD || opcd == SUB) {
      C = carry(opcd, A, val2);
    }
    return;
  }

  void OpArith(int op, int operand, int operandType)
    requires operandType == Literal || operandType == Indirect;
  {
    expose (this) {
      ApplyALU(op, operandType, operand);
      PC = PC + 1;
    }
  }

  void OpLDA(int operand, int operandType)
    requires 0 <= operand && operand < Data.contents.Length;
    requires operandType == Literal || operandType == Indirect;
  {
    expose (this) {
      switch (operandType) {
      case Literal:
        A = operand;
        break;
      case Indirect:
        A = Data.get_cont(operand);
        break;
      }
      PC = PC + 1;
    }
  }

  void OpLDAC(int operand)
  {
    expose (this) {
      if (Program.InSandbox(PC + A + operand)) {
        A = Program.get_cont(PC + A + operand);
      } else {
        Terminate(ProgramMemError);
      }
      PC = PC + 1;
    }
  }

  void OpCLR(int operand)
  {
    expose (this) {
      if (Scratch.InSandbox(operand)) {
        Scratch.set_cont(operand, (byte) 0);
        Z = true;
      } else {
        Terminate(SandboxError);
      }
      PC = PC + 1;
    }
  }

  void OpDEC(int operand)
  {
    expose (this) {
      if (Scratch.InSandbox(operand)) {
        Scratch.set_cont(operand, (byte)(Scratch.get_cont(operand) - 1));
        Z = (Scratch.get_cont(operand) - 1) == 0;
      }
      else {
        Terminate(SandboxError);
      }
      PC = PC + 1;
    }
  }

  void OpINC(int operand)
  {
    expose (this) {
      if (Scratch.InSandbox(operand)) {
        Scratch.set_cont(operand, (byte)(Scratch.get_cont(operand) + 1));
        Z = (Scratch.get_cont(operand) + 1) == 0;
      } else {
        Terminate(SandboxError);
      }
      PC = PC + 1;
    }
  }

  void OpJMP(int operand)
  {
    expose (this) {
      PC = PC + operand + 1;
    }
  }
  
  void OpConditionalJump(int op, int operand)
    requires op == JZ || op == JNZ || op == JC || op == JNC;
  {
    expose (this) {
      bool takeBranch;
      switch (op) {
        case JZ: takeBranch = Z; break;
        case JNZ: takeBranch = !Z; break;
        case JC: takeBranch = C; break;
        case JNC: takeBranch = !C; break;
        default:
          assert false;
      }
      if (takeBranch) {
        PC = PC + operand + 1;
      } else {
        PC = PC + 1;
      }
    }
  }

  void OpCALL(int operand)
  {
    expose (this) {
      if (CSP < CallStackMax) {
        CallStack[CSP] = PC + 1;
        CSP = CSP + 1;
        PC = PC + operand + 1;
      } else {
        Terminate(CallStackError);
      }
    }
  }
  
  void OpRET()
  {
    expose (this) {
      if (CSP > 0) {
        PC = CallStack[CSP - 1];
        CSP = CSP - 1;
      } else {
        Terminate(CallStackError);
      }
    }
  }

  void OpNOP()
  {
    expose (this) {
      PC = PC + 1;
    }
  }

  void OpEND()
  {
    expose (this) {
      Terminate(Normal);
    }
  }

  void OpESC()
  {
    expose (this) {
      CurrRTEMode = Math;
      PC = PC + 1;
    }
  }

  void MOpNEG()
  {
    expose (this) {
      if (MSP != MStackBase) {
        WriteQuad(Scratch, MSP-4, -1 * ReadQuad(Scratch,MSP-4));
      } else {
        Terminate(MathStackError);
      }
      PC = PC + 1;
    }
  }

  void MOpArith(int op)
  {
    expose (this) {
      if (MSP - 4 != MStackBase && MSP != MStackBase) {
        assume 0 <= MSP-8;
        int val = ApplyQuad(op, ReadQuad(Scratch, MSP-8), ReadQuad(Scratch, MSP-4));
        WriteQuad(Scratch, MSP-8, val);
        MSP = MSP - 4;
      } else {
        Terminate(MathStackError);
      }
      PC = PC + 1;
    }
  }

  void MOpJMP(int operand)
  {
    expose (this) {
      PC = PC + operand + 1;
    }
  }

  void MOpCALL(int operand)
  {
    expose (this) {
      if (CSP < CallStackMax) {
        CallStack[CSP] = PC + 1;
        CSP = CSP + 1;
        PC = PC + operand + 1;
      } else {
        Terminate(CallStackError);
      }
    }
  }

  void MOpRET()
  {
    expose (this) {
      if (CSP > 0) {
        PC = CallStack[CSP - 1];
        CSP = CSP - 1;
      } else {
        Terminate(CallStackError);
      }
    }
  }

  void MConditionalJump(int op, int operand)
    requires op == mJZ || op == mJNZ || op == mJGEZ || op == mJLTZ;
  {
    expose (this) {
      if (MSP != MStackBase) {
        int val = ReadQuad(Scratch, MSP-4);
        bool takeBranch;
        switch (op) {
          case mJZ: takeBranch = val == 0; break;
          case mJNZ: takeBranch = val != 0; break;
          case mJGEZ: takeBranch = val >= 0; break;
          case mJLTZ: takeBranch = val < 0; break;
          default:
            assert false;
        }
        if (takeBranch) {
          PC = PC + operand + 1;
        } else {
          PC = PC + 1;
        }
      } else {
        Terminate(MathStackError);
      }
    }
  }

  void MOpDUP() 
  {
    expose (this) {
      if (MSP != MStackBase && MSP != MStackBase + MStackMaxSize) {
        assume MStackBase % 4 == 0 && MStackMaxSize % 4 == 0 ==> (MStackBase + MStackMaxSize) % 4 == 0;
        WriteQuad(Scratch, MSP, ReadQuad(Scratch, MSP-4));
        MSP = MSP + 4;
      } else {
        Terminate(MathStackError);
      }
      PC = PC + 1;
    }
  }

  void MOpPUSH(int operand, int operandType)
    requires 0 <= operand;
  {
    expose (this) {
      switch (operandType) {
      case Literal:
        if (MSP != MStackBase + MStackMaxSize) {
          assume MStackBase % 4 == 0 && MStackMaxSize % 4 == 0 ==> (MStackBase + MStackMaxSize) % 4 == 0;
          WriteQuad(Scratch, MSP, operand);
          MSP = MSP + 4;
        } else {
          Terminate(MathStackError);
        }
        break;
      case Indirect:
        if (Scratch.InSandbox(DPP) && Scratch.InSandbox(DPP+1)) {
          int address = DP() + operand * 4;
          if (address + 4 <= DataSize) {
            if (MSP != MStackBase + MStackMaxSize) {
              assume MStackBase % 4 == 0 && MStackMaxSize % 4 == 0 ==> (MStackBase + MStackMaxSize) % 4 == 0;
              WriteQuad(Scratch, MSP, ReadQuad(Data, address));
              MSP = MSP + 4;
            } else {
              Terminate(MathStackError);
            }
          } else {
            Terminate(DataMemError);
          }
        } else {
          Terminate(SandboxError);
        }
        break;
      }
      PC = PC + 1;
    }
  }

  void MOpSWAP()
  {
    expose (this) {
      if (MSP - 4 != MStackBase && MSP != MStackBase ) {
        assume 0 <= MSP-8;
        WriteQuad(Scratch, MSP-8, ReadQuad(Scratch, MSP-4));
        WriteQuad(Scratch, MSP-4, ReadQuad(Scratch, MSP-8));
      } else {
        Terminate(MathStackError);
      }
      PC = PC + 1;
    }
  }

  void MOpPOP(int operand)
  {
    expose (this) {
      if (Scratch.InSandbox(DPP) && Scratch.InSandbox(DPP+1)) {
        int address = DP() + operand * 4 + 4;
        if (0 <= address && address < DataSize - 4) {
          if (MSP != MStackBase) {
            WriteQuad(Data, address, ReadQuad(Scratch, MSP-4));
            MSP = MSP - 4;
          } else {
            Terminate(MathStackError);
          }
        } else {
          Terminate(DataMemError);
        }
        PC = PC + 2;
      } else {
        Terminate(SandboxError);
      }
    }
  }  
  
  void MOpPOPA()
  {
    expose (this) {
      MSP = MStackBase;
      PC = PC + 1;
    }
  }

  void MOpPOP1()
  {
    expose (this) {
      if (MSP != MStackBase) {
        MSP = MSP - 4;
      } else {
        Terminate(MathStackError);
      }
      PC = PC + 1;
    }
  }

  void MOpNOP()
  {
    expose (this) {
      PC = PC + 1;
    }
  }
  
  void MOpEND()
  {
    expose (this) {
      CurrRTEMode = Primary;
      PC = PC + 1;
    }
  }

  void ExecuteInstruction()
  {
    expose (this) {
        if ( !(0 <= PC) || !(PC < Instructions.Length) ) {
            Terminate(ProgramMemError);
            return;
        }
        
        int currInstr = Instructions[PC];
        int opcd = currInstr;
        int oprnd = 0; // should be set by Decode()
        int oprndType = DecodeOperandType(currInstr); // should be set to Literal or Indirect by Decode()
        switch ( currInstr ) {
        case ADD:
        case SUB:
        case AND:
        case OR:
        case XOR:
            ApplyALU(opcd, oprndType, oprnd);
            PC = PC + 1;
            break;
        case LDA:
            switch (oprndType) {
            case Literal:
                A = oprnd;
                break;
            case Indirect:
                A = Data.get_cont(oprnd);
                break;
            }
            PC = PC + 1;
            break;
        case LDAC:
            if ( Program.InSandbox(PC+A+oprnd) ) {
                A = Program.get_cont(PC + A + oprnd);
            } else {
                Terminate(ProgramMemError); // CHECK TECHREPORT
            }
            PC = PC + 1;
            break;
        case CLR:
            if (Scratch.InSandbox(oprnd)) {
                Scratch.set_cont(oprnd,(byte) 0);
                Z = true;
            } else {
                Terminate(SandboxError);
            }
            PC = PC + 1;
            break;
        case DEC:
            if (Scratch.InSandbox(oprnd)) {
                Scratch.set_cont(oprnd, (byte)(Scratch.get_cont(oprnd) - 1));
                Z = (Scratch.get_cont(oprnd) - 1) == 0;
            }
            else {
                Terminate(SandboxError);
            }
            PC = PC + 1;
            break;
        case INC:
            if (Scratch.InSandbox(oprnd)) {
                Scratch.set_cont(oprnd, (byte)(Scratch.get_cont(oprnd) + 1));
                Z = (Scratch.get_cont(oprnd) + 1) == 0;
            }
            else
            Terminate(SandboxError);
            PC = PC + 1;
            break;
        case JMP:
            PC = PC + oprnd + 1;
            break;
        case JZ:
        case JNZ:
        case JC:
        case JNC:
            bool takeBranch;
            switch (opcd) {
            case JZ: takeBranch = Z; break;
            case JNZ: takeBranch = !Z; break;
            case JC: takeBranch = C; break;
            case JNC: takeBranch = !C; break;
            default:
                assert false;
            }
            if (takeBranch) {
                PC = PC + oprnd + 1;
            } else {
                PC = PC + 1;
            }
            break;
        case CALL:
            if (CSP < CallStackMax) {
                CallStack[CSP] = PC + 1;
                CSP = CSP + 1;
                PC = PC + oprnd + 1;
            } else {
                Terminate(CallStackError);
            }
            break;
        case RET:
            if (CSP > 0) {
                PC = CallStack[CSP - 1];
                CSP = CSP - 1;
            } else {
                Terminate(CallStackError);
            }
            break;
        case NOP:
            PC = PC + 1;
            break;
        case END:
            Terminate(Normal);
            break;
        case ESC:
            CurrRTEMode = Math;
            PC = PC + 1;
            break;
        case mNEG:
            if (MSP != MStackBase) {
                WriteQuad(Scratch,MSP-4, -1 * ReadQuad(Scratch,MSP-4));
            } else {
                Terminate(MathStackError);
            }
        break;
        case mADD:
        case mSUB:
        case mMUL:
        case mDIV:
        case mMOD:
            if (MSP - 4 != MStackBase && MSP != MStackBase) {
                assume 0 <= MSP-8;
                WriteQuad(Scratch,MSP-8,ApplyQuad(opcd,ReadQuad(Scratch,MSP-8),ReadQuad(Scratch,MSP-4)));
                MSP = MSP - 4;
            } else {
                Terminate(MathStackError);
            }
            PC = PC + 1;
            break;
        case mJMP:
            PC = PC + oprnd + 1;
            break;
        case mCALL:
            if (CSP < CallStackMax) {
                CallStack[CSP] = PC + 1;
                CSP = CSP + 1;
                PC = PC +  oprnd + 1;
            } else {
                Terminate(CallStackError);
            }
            break;          
        case mRET:
            if (CSP > 0) {
                PC = CallStack[CSP - 1];
                CSP = CSP - 1;
            } else {
                Terminate(CallStackError);
            }
            break;
        case mJZ:
        case mJNZ:
        case mJGEZ:
        case mJLTZ:
            if (MSP != MStackBase) {
                int val = ReadQuad(Scratch,MSP-4);
                bool takeBranch2;
                switch (opcd) {
                    case mJZ: takeBranch2 = (val == 0); break;
                    case mJNZ: takeBranch2 = (val != 0); break;
                    case mJGEZ: takeBranch2 = (val >= 0); break;
                    case mJLTZ: takeBranch2 = (val < 0); break;
                    default:
                    assert false;
                }
                if (takeBranch2) {
                    PC = PC + oprnd + 1;
                } else {
                    PC = PC + 1;
                }
            } else {
                Terminate(MathStackError);
            }
            break;
        case mDUP:
            if (MSP != MStackBase && MSP != MStackBase + MStackMaxSize) {
                assume MStackBase % 4 == 0 && MStackMaxSize % 4 == 0 ==> (MStackBase + MStackMaxSize) % 4 == 0;
                WriteQuad(Scratch, MSP, ReadQuad(Scratch, MSP-4));
                MSP = MSP + 4;
            } else {
                Terminate(MathStackError);
            }
            PC = PC + 1;
            break;
        case mPUSH:
            switch (oprndType) {
            case Literal:
                if (MSP != MStackBase + MStackMaxSize) {
                    assume MStackBase % 4 == 0 && MStackMaxSize % 4 == 0 ==> (MStackBase + MStackMaxSize) % 4 == 0;
                    WriteQuad(Scratch,MSP,oprnd);
                    MSP = MSP + 4;
                } else {
                    Terminate(MathStackError);
                }
                break;
            case Indirect:
                if (Scratch.InSandbox(DPP) && Scratch.InSandbox(DPP+1)) {
                    int address = DP() + oprnd * 4;
                    if (address + 4 <= DataSize) {
                        if (MSP != MStackBase + MStackMaxSize) {
                            assume MStackBase % 4 == 0 && MStackMaxSize % 4 == 0 ==> (MStackBase + MStackMaxSize) % 4 == 0;
                            WriteQuad(Scratch, MSP, ReadQuad(Data, address));
                            MSP = MSP + 4;
                        } else {
                            Terminate(MathStackError);
                        }
                    } else {
                        Terminate(DataMemError);
                    }
                } else {
                    Terminate(SandboxError);
                }
                break;
            }
            PC = PC + 1;
            break;
        case mSWAP:
            if (MSP - 4 != MStackBase && MSP != MStackBase ) {
                assume 0 <= MSP-8;
                WriteQuad(Scratch,MSP-8,ReadQuad(Scratch,MSP-4));
                WriteQuad(Scratch,MSP-4,ReadQuad(Scratch,MSP-8));
            } else {
                Terminate(MathStackError);
            }
            PC = PC + 1;
            break;
        case mPOP:
            if (Scratch.InSandbox(DPP) && Scratch.InSandbox(DPP+1)) {
                int address = DP() + oprnd * 4 + 4;
                if (0 <= address && address < DataSize - 4) { // CHECK THIS CONDITION AGAINST THE TECHREPORT!!
                    if (MSP != MStackBase) {
                        WriteQuad(Data,address,ReadQuad(Scratch,MSP-4));
                        MSP = MSP - 4;
                    } else {
                        Terminate(MathStackError);
                    }
                } else {
                    Terminate(DataMemError);
                }
                PC = PC + 2;
            } else {
                Terminate(SandboxError);
            }
            break;
        case mPOPA:
            MSP = MStackBase;
            PC = PC + 1;
            break;
        case mPOP1:
            if (MSP != MStackBase) {
                MSP = MSP - 4;
            } else {
                Terminate(MathStackError);
            }
            PC = PC + 1;
            break;
        case mNOP:
            ; //skip
            PC = PC + 1;
            break;
        case mEND:
            CurrRTEMode = Primary;
            PC = PC + 1;
            break;
        } // end switch
    } // end expose
  } // end ExecuteInstruction
  
  static int DecodeOperandType(int instr)
    ensures result == Literal || result == Indirect;
  {
    return Literal;  // TODO: really decode the instruction
  }
} // end class RTE
