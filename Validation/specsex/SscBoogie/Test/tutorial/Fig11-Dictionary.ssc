using Microsoft.Contracts;

public class Dictionary {
  [Rep] Node? head = null;
  [Rep] Node? tail = null;
  invariant head == null <==> tail == null;

  public bool Find(string key, out int val) {
    for (Node? n = head; n != null; n = n.next) {
      if (n.key == key) {
        val = n.val;
        return true;
      }
    }
    val = 0;
    return false;
  }

  public void InsertA(string key, int val) {
    expose (this) {
      Node? h = head;
      head = new Node(key, val);  // new.owner = this;
      head.next = h;              // h.owner = head.owner;
      if (tail == null) {
        tail = head;              // head.owner = this;
      }
    }
  }

  public void InsertB(string key, int val) {
    expose (this) {
      Node n = new Node(key, val);
      if (head != null) {
        Owner.AssignSame(n, head);  // n.owner = head.owner;
        n.next = head;              // head.owner = n.owner;
      }
      head = n;                     // n.owner = this;
      if (tail == null) {
        tail = head;                // head.owner = this;
      }
    }
  }
}

class Node {
  public string key;
  public int val;
  [Peer] public Node? next;
  public Node(string key, int val) {
    this.key = key;
    this.val = val;
  }
}
