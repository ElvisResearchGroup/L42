using System;
using Microsoft.Contracts;

public class BagFixed
{
  [Rep] int[]! elems;
  [SpecPublic] int count; // Make this field [SpecPublic]!
  invariant 0 <= count && count <= elems.Length;

  public BagFixed(int[]! initialElements) {
    this.count = initialElements.Length; // Guard this dereference!
    int[] e = new int[initialElements.Length]; // Make initialElements a non-null parameter!
    Array.Copy(initialElements, 0, e, 0, initialElements.Length); // Use the less restrictive Copy method!
    this.elems = e;
    base();
  }

  public BagFixed(int[]! initialElements, int start, int howMany)
    requires 0 <= start && 0 <= howMany;
    requires start + howMany <= initialElements.Length;
  {
    this.count = howMany;
    int[] e = new int[howMany];
    Array.Copy(initialElements, start, e, 0, howMany); // Fix the fifth argument!
    this.elems = e;
    base();
  }

  public virtual int RemoveMin() // make this virtual
    requires 0 < this.count;
  {
    expose (this){
      int m = System.Int32.MaxValue;
      int mindex = 0;
      for (int i = 0; i < count; i++) // Add a loop invariant!
        invariant 0 <= i && i <= count && 0 <= mindex && mindex < count;
      {
        if (elems[i] < m) {
          mindex = i;
          m = elems[i];
        }
      }
      count--; // Make sure the object is exposed when you assign to its fields, potentially causing the object invariant not to hold!
      elems[mindex] = elems[count]; // Add a precondition requiring at least one element in the bag!
      return m;
    }
  }

  public virtual void Add(int x) // make this virtual
  {
    expose (this){
      if (count == elems.Length)
      {
        int[]! b = new int[2*elems.Length+1]; // Always grow the array, even if elems.Length == 0!
        Array.Copy(elems, 0, b, 0, elems.Length);
        elems = b;
      }
      elems[this.count] = x;
      count++; // Make sure the object is exposed when you assign to its fields, potentially causing the object invariant not to hold!
    }
  }
}
