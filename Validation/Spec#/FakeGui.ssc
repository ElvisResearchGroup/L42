using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Microsoft.Contracts;

[Immutable] internal partial class Gui
{
	internal readonly string id;

	internal void display(string title, int x, int y, Widget body) 
		modifies body.**;
	{ 
		this.display(title, x, y, body, new string[]{});
	}
	internal void display(string title, int x, int y, Widget body, string[] events)
		modifies body.**;
	{
		this.open(title, "<div id='Top'></div>", x, y);
		this.draw(body);
		
		foreach (string event_ in events) 
		{
			if (event_ == "EXIT") return;
			body.dispatch(new Event(event_));
			this.draw(body);
		}
		// TODO: this.dispatch(body, this.events);
	}

	void draw(Widget that)
	{
		this.set_("<div id='Top' style='position: relative; height: 750px; width: 750px; border: solid black 2px;'>" + this.format(that) + "</div>", "Top");
	}

	string JsEscape(string that) 
	{
		return that.Replace("\\", @"\\").Replace("\"", @"\""").Replace("\'", @"\'").Replace("\n", @"\n");
	}

	void set_(string that, string id)
	{
		string qid = "'" + JsEscape(id) + "'";
		string qText = "'" + JsEscape(that) + "'";
		string cmd = @"var oldElem = document.getElementById(" + qid + @"');
			oldElem.innerHTML = " + qText + @"';
			var parentElem = oldElem.parentNode;
			var innerElem; 
			while (innerElem = oldElem.firstChild) {
				parentElem.insertBefore(innerElem, oldElem); 
			}
			parentElem.removeChild(oldElem);";

        this.executeJs(cmd);
	}

	[Pure] string formatChildren(Widget that)
	{
		StringBuilder children = new StringBuilder();
		for (int i = 0; i < that.children.Count; i++) 
			children.Append(this.format(that.children[i]));
		return children.ToString();
	}

	// This horrible looking stream of functions is just to make verification faster compared to putting it all in one function.
	[Pure] string format(Widget that)              { return format1("<div id='" + that.id + "' onclick=\"event42('" + that.id + "::Pressed::more')\" style='position: absolute;", that); }
	[Pure] string format1(string res, Widget that) { return format2(res + "left: " + that.left + "px;",               that); }
	[Pure] string format2(string res, Widget that) { return format3(res + "top: " + that.top + "px;",                 that); }
	[Pure] string format3(string res, Widget that) { return format4(res + "height: " + that.height + "px;",           that); }
	[Pure] string format4(string res, Widget that) { return format5(res + "width: " + that.width + "px;",             that); }
	[Pure] string format5(string res, Widget that) { return format6(res + "background-color: " + that.colour + ";'>", that); }
	[Pure] string format6(string res, Widget that) { return res + "<div style='position: relative;'>" + formatChildren(that) + "</div></div>"; }

	void open(string title, string body, int x, int y) { this.open(HtmlHeader() + "<title>" + title + "</title></head><body>" + body + "</body></html>", x, y); }

	string HtmlHeader() { return "<!DOCTYPE html><html><head><meta http-equiv='content-class' content='text/html; charset=UTF-8'>"; }

	void open(string html, int x, int y)  /*mut*/ 
	{
		//Debug("GuiPlugin.open(wName: {0}, html: {1}, x: {2}, y: {3})", this.id, html, x, y);
		// TODO: PLUGIN
	}

	string executeJs(string that) /*mut*/ 
	{
		//Debug("GuiPlugin.executeJs(wName: {0}, command: {1})", this.id, that);
		// TODO: PLUGIN
		return "";
	}

	internal Gui(string id) { this.id = id; }
}