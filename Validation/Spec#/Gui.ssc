using System;
using System.Collections.Generic;
using Microsoft.Contracts;

internal partial class Gui
{
	[Immutable] internal class Event 
	{
		internal readonly string targetId;
		internal readonly string eventId;
		internal readonly string[] all;

		internal Event(string that)
		{
			string[] s = that.Split(new string[]{"::"}, StringSplitOptions.None);
			// If I don't do some check like this, boogie will complain about potential out-of bounds indexes in the following lines,
			// (Despite that fact that those lines will throw exceptions anyway if the index is invalid...)
			if (s.Length < 2)
				throw new System.ArgumentException("Expected a string containing ::", "that");

			this.targetId = s[0];
			this.eventId = s[1];
			this.all = s;
		}
	}

	internal interface Widget 
	{
		string id { get; }
		int left { get; }
		int top { get; }
		int width { get; }
		int height { get; }
		string colour { get; }
		
		List<Widget> children 
		{
			[Peer, ResultNotNewlyAllocated] get
				ensures Owner.Same(Owner.ElementProxy(result), result);
		}
		bool dispatch(Event that) modifies this.**;
	}

	//internal delegate void Action(Event);
	internal interface Action { void apply(Event event_) modifies this.**; }

	internal class Button: Widget {
		[Captured] internal Button(string id, int left, int top, int width, int height, Action action) 
				ensures Owner.Same(this, action); {
			Owner.AssignSame(this, action);
			this.id = id;
			this.left = left;
			this.top = top;
			this.width = width;
			this.action = action;
			this.children = new List<Widget>();
		}
		[Peer] readonly Action action;
		public string colour { get { return "gray"; } }
		[Pure] public override String ToString() { return this.id; }
		
		public bool dispatch(Event that)
		{
			if (this.id == that.targetId)
			{
				this.action.apply(that);
				return true;
			}
			return false;
		}

		[Peer][ElementsPeer] List<Widget> children; 
		readonly int left, top, width, height;
		readonly string id;

		// Boilerplate widget implementation
		int Gui.Widget.left              { get { return this.left;     } }
		int Gui.Widget.top               { get { return this.top;      } }
		int Gui.Widget.width             { get { return this.width;    } }
		int Gui.Widget.height            { get { return this.height;   } }
		string Gui.Widget.id             { get { return this.id;       } }
		List<Widget> Gui.Widget.children { get { return this.children; } }
	}
}
