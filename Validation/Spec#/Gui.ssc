using System;
using System.Collections.Generic;
using Microsoft.Contracts;

internal partial class Gui
{
	[Immutable] internal class Event 
	{
		internal readonly string targetId;
		internal readonly string eventId;
		internal readonly string[] all;

		internal Event(string that)
		{
			string[] s = that.Split(new String[]{"::"}, StringSplitOptions.None);
			if (s.Length < 2)
				throw new System.ArgumentException("Expected a string containing ::", "that");

			this.targetId = s[0];
			this.eventId = s[1];
			this.all = s;
		}
	}

	static List<Widget> WidgetList()
	{
		return new List<Widget>();
	}
	internal interface Widget 
	{
		string id { get; }
		int left { get; }
		int top { get; }
		int width { get; }
		int height { get; }
		string colour { get; }
		
		/*read*/ List<Widget> children 
		{
			[Peer, ResultNotNewlyAllocated] get
				ensures Owner.Same(Owner.ElementProxy(result), result);
		}
		bool dispatch(Event that) /*mut*/;
	}
	internal abstract partial class DispatchTrait
	{
		internal string id; 
		[Peer] [ElementsPeer] internal List<Widget> children; 

		public abstract void process(Event event_) /*mut*/
			modifies this.**;
		; 

		public bool dispatch(Event that) /*mut*/ 
			modifies this.**;
		{
			if (this.id == that.targetId)
			{
				this.process(that);
				return true;
			}

			for (int i = 0; i < this.children.Count; i++)
				if (this.children[i].dispatch(that)) return true;
			return false;
		}

		#region boilerplate
			[Captured] internal DispatchTrait(string id, List<Widget> children)
				requires Owner.Same(Owner.ElementProxy(children), children);
				ensures Owner.Same(this, children);
			{ 
				Owner.AssignSame(this, Owner.ElementProxy(children));
				this.children = children;
				this.id = id; 
			} 
		#endregion

	}
}