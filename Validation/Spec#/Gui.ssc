using System;
using System.Collections.Generic;
using Microsoft.Contracts;

internal partial class Gui
{
	[Immutable] internal class Event 
	{
		internal readonly string targetId;
		internal readonly string eventId;
		internal readonly string[] all;

		internal Event(string that)
		{
			string[] s = that.Split(new string[]{"::"}, StringSplitOptions.None);
			// If I don't do some check like this, boogie will complain about potential out-of bounds indexes in the following lines,
			// (Despite that fact that those lines will throw exceptions anyway if the index is invalid...)
			if (s.Length < 2)
				throw new System.ArgumentException("Expected a string containing ::", "that");

			this.targetId = s[0];
			this.eventId = s[1];
			this.all = s;
		}
	}

	internal interface Widget 
	{
		string id { get; }
		int left { get; }
		int top { get; }
		int width { get; }
		int height { get; }
		string colour { get; }
		
		List<Widget> children 
		{
			[Peer, ResultNotNewlyAllocated] get
				ensures Owner.Same(Owner.ElementProxy(result), result);
		}
		bool dispatch(Event that);
	}

	internal abstract partial class DispatchTrait
	{
		internal string id; 
		[Peer] [ElementsPeer] internal List<Widget> children; 

		public abstract void process(Event event_)
			modifies this.**;
		; 

		public bool dispatch(Event that)
			modifies this.**;
		{
			if (this.id == that.targetId)
			{
				this.process(that);
				return true;
			}

			for (int i = 0; i < this.children.Count; i++)
				if (this.children[i].dispatch(that)) return true;

			return false;
		}
	
		[Captured] internal DispatchTrait(string id, List<Widget> children)
			requires Owner.Same(children, Owner.ElementProxy(children));
			ensures Owner.Same(this, children);
		{ 
			Owner.AssignSame(this, children);
			assume Owner.Same(children, Owner.ElementProxy(children)); // WTF? Why do I have to assume my own pre condition?

			// If I delete the above line, the following line gives the following verification errors:
			//     assigning the owner of this object may violate the modifies clause
			//     illegal assignment to ElementsPeer field, elements may have different owners
			this.children = children;
			this.id = id; 
		} 
	}
}
