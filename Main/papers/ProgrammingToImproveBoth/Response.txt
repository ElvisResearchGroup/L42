-----------------
Rev1:
comment about page 2: 
In a language where subclassing does not imply subtyping,
the programmer is not required to satisfy the LSP when they extend/reuse code.
The 'this leaking problem' shows that the LSP is not always desirable when
code reuse is beneficial.
However, in the common OO design, subclassing must imply subtyping.
----
DJ and TR are first defined at page 3
----
In Abadi/Cardelli all methods can be overridden on a per-instance base.
Thus they use method overriding (on getters) to encode field updates.
This is unrelated to our work, where field getters and setters both exist, but they are both abstract
methods, with no body.
---
About detailing the meaning of summing in the tables, we attempted to implement your suggestion, but we discovered it would take too much space to explain them in detail.
We also considered just removing them and leave only the total.
---

Rev2:
About your 7 important points:
1: We have added that this is so that it can be typed before flattening
2: We reworded our discussion about flattening. Flattening is the expected trait semantic, but alternative (equivalent) semantics exists for the sake of more effient implementations
3: We have now cited Bracaha and reworded his justification for this design decision
4: We expanded on the cost of our solution to this leaking problem directly after the mentioned sentence.
5: We exapand the explanation in page 9 and pointed to the related work that expands on the details.
6: Classes are coherent if they follow a specific pattern, which is isomorphic to declaring state by hand. We clarified this in the text.
7: We reworded this section, saying that this is one objective for our future work, but is not strictly needed for this paper.

We explain better what we mean by modularity in page 12.

We discussed about allowing classes to be used only as object factories in appendix B.2; we made it more clear in the main paper.


Rev3:
Mapping the language of the formalism with the language of the examples:
In both the language we formalised, and use in our examples, the only difference between trait declarations and class declaration is the fact that trait declarations have lowercase trait names (t), while class declarations have uppercase class names (C). Types can only contain upper case identifiers (C), thus trait names (t) cannot be used as types. In the version you have reviewed, the subsumption rules delegated subtyping to the '<=' operator, which was indeed not defined. We updated the formalism to define conventional subtyping explicitly.
Note, the fact that only interfaces can induce subtyping is handled by well formedness, as defined in 'consistentSubtype'.

About point ii:
"we would lose the information that it was an IB object"
Our goal is not to retain a more precise typing even in the presence of subtyping, but to prevent subtyping when it is not desirable.
The 'this leaking' problem is about how to type the usages of 'this' in a method body; since
interfaces do not have method bodies, the problem does not exist in such context.

About point iii, discussion about section 4.3:
We did not originally realise that injecting the 'merge' method suggested the need to forcast extension points.
We added a little explanation after that, showing how to modularly add the 'merge' method and calls to it.

The biggest limitation we are aware of comes from our decision to maintain the general OO design where behaviour can be changed only by replacing the body of a method with a new one, not by specifying a change in an arbitrary point of the AST. This design is needed in order to preserve the general idea that method bodies are 'private' information that should not be visible nor relevant to class users.
