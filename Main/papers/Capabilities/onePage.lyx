#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\use_default_options true
\begin_modules
logicalmkup
\end_modules
\maintain_unincluded_children false
\begin_local_layout
InsetLayout Flex:Code
        LyxType               charstyle
        LabelString           code
        LatexType             command
        LatexName             code
        Font
          Family              Typewriter
        EndFont
        Preamble  \providecommand*{\code}[1]{\mintinline{Java}!#1!}
        EndPreamble
        InToc                 true
        HTMLTag               code
        ResetsFont true
        Spellcheck            false
ForcePlain true
PassThru true
FreeSpacing true
End
\end_local_layout
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "tgschola" "TeX Gyre Schola"
\font_sans "default" "Segoe UI"
\font_typewriter "lmtt" "Latin Modern Mono"
\font_math "auto" "default"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 93
\font_tt_scale 100 109
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style british
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "tabsize=4,obeytabs=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Method Based Capability Control
\end_layout

\begin_layout Standard
In imperative languages, reasoning on side-effects can be very challenging,
 since any piece of code can potentially do anything.
 In object oriented systems where dynamic dispatch is pervasive, we do not
 even have access to such code.
 For example, executing the innocent looking method 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

foo
\end_layout

\end_inset

 can format your hard drive.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

void foo(Point myPoint) { myPoint.getX(); }
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Object capabilities
\emph default
 allow delegating reasoning on side effects, by reasoning on aliasing: only
 special unforgeable objects can do special actions.
 Then, if reasoning over aliasing proves that the reachable-object-graph
 of 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

myPoint
\end_layout

\end_inset

 does not contain a 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

fileSystem
\end_layout

\end_inset

 (or stronger) capability, then we can be certain calling 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

foo(myPoint)
\end_layout

\end_inset

 will not format the hard drive.
\end_layout

\begin_layout Standard
In this paper we explore alternative approach, where methods can be called
 only when sufficient permissions are available.
 For simplicity we will use class and method names as permission labels,
 but conceptually any kind of label would do.
 By default a methods permissions require only the labels of methods they
 directly invoke.
 However method declarations can chose to declare more permissions, in-order
 to restrict their usage and aid maintainability.
 For example, if our standard library provides a class:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class System { 
\end_layout

\begin_layout Plain Layout

	static String readFile(String fileName)
\end_layout

\begin_layout Plain Layout

	{ /*magic implementation*/ }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then every function in the system could read any kind of file.
 We can use permissions to change this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class System { 
\end_layout

\begin_layout Plain Layout

	@Permissions(System.readFile) // permission label! 
\end_layout

\begin_layout Plain Layout

	static String readFile(String fileName) 
\end_layout

\begin_layout Plain Layout

	{ /*magic implementation*/ }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now, only when the permission 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

System.readFile
\end_layout

\end_inset

 is in scope can 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

System.readFile
\end_layout

\end_inset

 be (directly) called; for example this is correct:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class Documents {
\end_layout

\begin_layout Plain Layout

	@Permissions(System.readFile, Directory.new, Directory.contains)
\end_layout

\begin_layout Plain Layout

	static String readFile(String fileName) {
\end_layout

\begin_layout Plain Layout

		if (new Directory("~/Documents").contains(fileName))
\end_layout

\begin_layout Plain Layout

			return System.readFile(fileName);
\end_layout

\begin_layout Plain Layout

		else return null; // Not allowed to read the file
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Documents.readFile
\end_layout

\end_inset

 acts as a filter, and reads only files presents in the 
\begin_inset Quotes bld
\end_inset

Documents
\begin_inset Quotes brd
\end_inset

 folder.
 Of course we can call 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Documents.readFile
\end_layout

\end_inset

 if we have the 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

System.readFile
\end_layout

\end_inset

, 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Directory.new
\end_layout

\end_inset

 and, 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Directory.contains
\end_layout

\end_inset

 permissions.
 However, merely having the permission 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Documents.readFile
\end_layout

\end_inset

 does not give us the  
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

System.readFile
\end_layout

\end_inset

 permission, and so we cannot directly call it:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@Permissions(Documents.readFile)
\end_layout

\begin_layout Plain Layout

static void main() {
\end_layout

\begin_layout Plain Layout

	String doc1 = Documents.readFile("~/Documents/hi.txt") 
\end_layout

\begin_layout Plain Layout

	// Invalid!
\end_layout

\begin_layout Plain Layout

	//String doc2 = System.readFile("~/Documents/hi.txt")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this way, by reasoning on the code of 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Documents.readFile
\end_layout

\end_inset

, we can understand how the power of 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

System
\end_layout

\end_inset

 is tamed, in particular, we can guarantee that code that only has the 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Documents.readFile
\end_layout

\end_inset

 permission can only read files in the documents folder.
 This is similar to object-capabilities where one would provide a 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Document
\end_layout

\end_inset

 object with a (private) 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

System
\end_layout

\end_inset

 field, and a 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

readFile
\end_layout

\end_inset

 would be an instance method.
\end_layout

\begin_layout Standard
For convenience, we allow classes to define a set of 
\emph on

\begin_inset Quotes bld
\end_inset

implied
\emph default

\begin_inset Quotes brd
\end_inset

 permissions: in this way the class name is just shorthand for those other
 permissions.
 For example, if Directory was declared as:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@Implies(Directory.new, Directory.contains)
\end_layout

\begin_layout Plain Layout

class Directory {â€¦}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
then, while declaring 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Documents.readFile
\end_layout

\end_inset

 before, we could have written 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Directory
\end_layout

\end_inset

 instead of 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

Directory.new, Directory.contains
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The system as presented up to now is completely static and does not require
 nor take advantage of objects.
 Every method requires an exact set of permissions and thus can do a specific
 set of actions.
 Using generics, subtyping, and objects we can write permission generic
 code, in true object-capability style:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

interface IFiles[A] {
\end_layout

\begin_layout Plain Layout

	@Permissions(A)
\end_layout

\begin_layout Plain Layout

	String readFile(String fileName);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Files implements IFiles[System.readFile] {
\end_layout

\begin_layout Plain Layout

	@Permissions(Files.new)
\end_layout

\begin_layout Plain Layout

	Files() { }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Permissions(System.readFile)
\end_layout

\begin_layout Plain Layout

	@Override System.readFile String readFile(String fileName) { 
\end_layout

\begin_layout Plain Layout

		return System.readFile(fileName); 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class DocFiles implements IFiles[Documents.readFile] {
\end_layout

\begin_layout Plain Layout

	@Permissions(DocFiles.new)
\end_layout

\begin_layout Plain Layout

	DocFiles() { }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Permissions(Documents.readFile)
\end_layout

\begin_layout Plain Layout

	@Override String readFile(String fileName) { 
\end_layout

\begin_layout Plain Layout

		return Documents.readFile(fileName); 
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class MockFiles implements IFiles[] {
\end_layout

\begin_layout Plain Layout

	MockFiles(){ }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Permissions()
\end_layout

\begin_layout Plain Layout

	@Override String readFile(String fileName) { return ""; }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice that unlike a traditional object-capability system, we need not restrict
 the use of the above constructors, since we can independently restrict
 methods; however we can still do so to properly enforce the object-capability
 pattern.
 With these classes defined, one can now write a parametric method 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

foo
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@Permissions(A)
\end_layout

\begin_layout Plain Layout

[A] String foo(IFiles[A] cap) {
\end_layout

\begin_layout Plain Layout

	// Internally, cap can be used without 
\end_layout

\begin_layout Plain Layout

	// static knowledge of what it can do
\end_layout

\begin_layout Plain Layout

	return cap.readFile("foo.txt");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice that 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

A
\end_layout

\end_inset

 stands for a list of permissions, not a single one, however these annotations
 could be inferred.
 The call 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

cap.readFile(
\begin_inset Quotes bld
\end_inset

foo.txt
\begin_inset Quotes brd
\end_inset

)
\end_layout

\end_inset

 is valid since 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

foo
\end_layout

\end_inset

 has permission 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

A
\end_layout

\end_inset

, which is more than sufficient to call 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

IFiles[A].readFile
\end_layout

\end_inset

.
 Following the presented pattern, the programmer has control on how much
 static information they require and how much they are ready to rely on
 dynamic (aliasing based) control.
 For example, we could declare:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class FilesStart extends Files {
\end_layout

\begin_layout Plain Layout

	@Permissions(Files.new)
\end_layout

\begin_layout Plain Layout

	FilesStart() { super(); }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Permissions(System.readFile)
\end_layout

\begin_layout Plain Layout

	@Override String readFile(String fileName) {
\end_layout

\begin_layout Plain Layout

		return super.readFile(fileName).substring(0,10);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And now, our capability object 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

new FilesStart()
\end_layout

\end_inset

 can do less (but not more) then our capability 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout

new Files()
\end_layout

\end_inset

, but from a static perspective there is no difference.
\end_layout

\begin_layout Standard
An important benefit of our approach is that it allows safety and control
 even in the case of static methods performing primitive operations.
 This is very useful with making native calls; with the simple restriction
 that native calls need to correspond to restricted static method calls,
 we believe our system allows encoding safe object capabilities as a user
 library, instead of requiring them to be integrated in the standard library.
 
\end_layout

\end_body
\end_document
