#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usepackage{xcolor}
%\usepackage{scrlayer-scrpage}

%\newcommand{\lfoot}[1]{\ifoot{\textnormal{#1}}}
%\newcommand{\rfoot}[1]{\ofoot{\textnormal{#1}}}

\definecolor{AccentB80}{RGB}{197, 213, 255}
\definecolor{AccentB60}{RGB}{139, 171, 255}
\definecolor{AccentB40}{RGB}{81,  130, 255}
\definecolor{Accent}   {RGB}{0,   63,  221}
\definecolor{AccentD25}{RGB}{0,   46,  165}
\definecolor{AccentD50}{RGB}{0,   31,  110}

%\renewcommand\Huge{\@setfontsize\Huge{10pt}{26}} % Was 25?
%\renewcommand\Large{\@setfontsize\Large{10pt}{14}} % Was 14?
%\large	 10.5 % was 11?
%\newcommand{\StyleTitle}[1]{{\Huge{\textcolor{Accent}{{#1}}}}} % Expanded +0.5pt
%\newcommand{\StyleSubTitle}[1]{{\large{\textcolor{AccentB40}{{#1}}}\medskip}} % 25pt after , Expanded +0.5pt
%\renewcommand{\maketitle}{\StyleTitle{\@title}\\\StyleSubTitle{\@author}}
\newcommand{\zwnbsp}{}
%\renewcommand{\ensuremath}[1]{#1}

%\renewcommand{\thanks}[1]{\footnote{#1}}
\definecolor{blue}{HTML}{0000F0} % 
\definecolor{purple}{HTML}{700090}
\definecolor{orange}{HTML}{F07000}
\definecolor{teal}{HTML}{0090B0}
\definecolor{brown}{HTML}{A00000}
\definecolor{green}{HTML}{008000}
\definecolor{pink}{HTML}{F000F0}

%\usepackage{enumitem}
%\setlist{nolistsep}

\usepackage{fontspec} % To set xetex fonts
\setmainfont[Ligatures={Common, Discretionary}]{TeX Gyre Schola}
\setmonofont[Ligatures={Discretionary}, Scale=0.9545454545454545]{Consolas} % 10.5/11
\setsansfont[Ligatures={Discretionary}, Scale=0.9090909090909091]{Segoe UI} %10/11

\unimathsetup{math-style=ISO}
\setmathfont{TeX Gyre Schola Math}

%\newcommand{\parj}{\setlength{\parskip}{0pt}}
%\newcommand{\pars}{\setlength{\parskip}{\medskipamount}}
\newcommand{\parj}{}
\newcommand{\pars}{}
%\usepackage[para]{footmisc}
\usepackage{hyperref}

\hypersetup{colorlinks,urlcolor=[RGB]{0, 155, 240}}
\newcommand{\email}[1]{%
	\href{mailto:#1}{\texttt{#1}}
}
\raggedright
\usepackage{soul}
\newcommand{\comment}[1]{\note{\hl{#1}}}
\usefonttheme{professionalfonts}
%\setbeameroption{show notes on second screen}
\end_preamble
\use_default_options true
\begin_modules
foottoend
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\begin_local_layout
Format 66
InsetLayout Flex:Beamer_Comment
  LyXType          custom
  LabelString      Comment
  LatexType        command
  LatexName        comment
  Decoration       Classic
  BgColor        notebg
  ResetsFont       true
End
\end_local_layout
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "tgschola" "TeX Gyre Schola"
\font_sans "lms" "Segoe UI"
\font_typewriter "lmtt" "Consolas"
\font_math "auto" "default"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 104
\font_tt_scale 100 109
\use_microtype false
\use_dash_ligatures true
\graphics xetex
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification false
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\headheight 0.7cm
\headsep 0.7cm
\footskip 1.05cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style british
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Callability Control
\end_layout

\begin_layout Author
By Isaac Oscar Gariano
\begin_inset script superscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 and Marco Servetto
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 (Victoria University of Wellington)
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\empty}{\zwnbsp}
{\text{﻿}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\k}[1]{\textcolor{blue}{\texttt{#1}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\t}[1]{\textcolor{teal}{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\f}[1]{\textcolor{purple}{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\l}[1]{\textcolor{brown}{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\v}[1]{\textcolor{orange}{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\m}[1]{\textcolor{green}{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\c}[1]{\texttt{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\ck}[1]{\c{\k{#1}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\ct}[1]{\c{\t{#1}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\cf}[1]{\c{\f{#1}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\cv}[1]{\c{\v{#1}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\cm}[1]{\c{\m{#1}}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\cl}[1]{\c{\l{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\tab}{\texttt{\ \ \ \ }}
{    }
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\calls}[1]{\ck{calls[}#1\ck ]}
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The Problem
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Consider an imperative language, such as C♯, which: 
\end_layout

\begin_deeper
\begin_layout Itemize
is statically-typed
\end_layout

\begin_layout Itemize
has named/identifiable functions (e.g.
 static/instance methods or constructors)
\end_layout

\begin_layout Itemize
has dynamic dispatch (e.g.
 interfaces, delegates, and virtual methods)
\end_layout

\begin_layout Itemize
supports dynamic code loading and execution
\end_layout

\begin_layout Standard
\begin_inset Flex Beamer Comment
status open

\begin_layout Plain Layout
TODO shorten the above, or just speek it?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: for brevity I will omit accessibility modifiers and allow free standing
 static functions
\end_layout

\begin_layout Enumerate
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout

+-
\end_layout

\end_inset

What 
\emph on
could
\emph default
 this method do?
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\ck{static} \ck{void} \cf{M1(}\cf ) \{ \cf{Abs(}\cl 0\cf ); \}}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Beamer Note
status collapsed

\begin_layout Plain Layout
Well it looks like it does nothing, it just gets the absolute value of 0
 (which is 0) and discards the result.
 But how do we know Abs won’t send sensitive information to a third-party?
\begin_inset Flex Beamer Comment
status collapsed

\begin_layout Plain Layout
 I prefered my Russia version… 
\end_layout

\end_inset

Well the documentation dosn’t say it will, and we trust the implementator,
 Microsoft, to follow it.
 But, if we didn’t trust it, what could we do?
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
What about this, what 
\emph on
could
\emph default
 it do?
\begin_inset Newline newline
\end_inset


\begin_inset Flex Beamer Comment
status collapsed

\begin_layout Plain Layout
Note: I am now using a user-defined interface, so that I can freely play
 with it’s declaration 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\ck{interface} \ct I \{ \ck{void} \cf{Run()}; \}}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\ck{static} \ck{void} \cf{M2(}\ct I \cv x\cf ) \{ \cv x.\cf{Run()}; \}}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Beamer Note
status collapsed

\begin_layout Plain Layout
This one can do anything the language will let it, so it is likely to be
 memory and type safe.
 However it can still do all sorts of stuff, like perform I/O or use reflection
 to inspect and invoke arbitrary code.
 The reason why we don’t know what this can do is that I.Run, is a virtual
 method, this means that it is dynamically dispatched and in this case,
 literally anyone can override it.
 So we have to trust the writer of every class that x could be at run-time.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
How about this?
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\ck{static} \ck{void} \cf{M3(}\ct{String} \cv{url}\cf ) \{}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\tab\ck{var} \cv{code} = \ct{Assembly}.\cf{LoadFrom(}\cv{url}\cf );}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\tab\ck{new} \ct{FunctionHandle<}\cf{[]}\ct >\cf (\cv{code}, \cl{"M"}\cf ).\cf{Invoke(}\ck{null}, \ck{null}\cf ); \}}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Beamer Note
status collapsed

\begin_layout Plain Layout
This will throw an exception if M isn’t declared to only (indirectly) call
 UnrestrictedPrimitive operations.
 Note that the check will happen before you invoke M, giving you an early
 error.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Callability
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\emph on
Callability
\emph default
 is the 
\emph on
ability
\emph default
 to 
\emph on
call
\emph default
 a function.
\end_layout

\begin_layout Frame
A function's callability is the set of things it can call.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Beamer Note
status open

\begin_layout Plain Layout
We will abstract away performing an ‘operation’ (such as reading a file,
 create a new object, doing integer addition etc) as calling a named function
 In this way we can look at a functions callability to constrain what a
 function can do.
 /* Improve: For example if it only has the ability to call functions we
 know wont read from the file system, then we know it wont.*/
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\texttt{\tab\ck{new} \ct{FunctionHandle<}\cf{[]}\ct >\cf (\cv{code}, \cl{"M"}\cf ).\cf{Invoke(}\ck{null}, \ck{null}\cf ); \}}$
\end_inset


\end_layout

\begin_layout Standard
Heloo
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
EXTRA
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset script superscript

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
email{isaac@ecs.vuw.ac.nz}
\end_layout

\end_inset

 
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
email{marco.servetto@ecs.vuw.ac.nz}
\end_layout

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
How does one know whether a called function will access arbitrary files
 on your system? One common option is to say that if the called function
 is not declared impure (e.g.
 with Haskell
\begin_inset Quotes brd
\end_inset

s 
\begin_inset Formula $\ct{IO}$
\end_inset

 monad) it will not read any files (or do any other I/O).
 Another option is to raise a runtime error or trap if it tries to do so
 (e.g.
 with Java
\begin_inset Quotes brd
\end_inset

s 
\begin_inset Formula $\ct{SecurityManager}$
\end_inset

).
 The first option is overly restrictive and heavy weight (what if the function
 only needs access to standard out?) whilst the second hampers static and
 modular reasoning.
 We call the operations a function may call its 
\emph on
callability
\emph default
; we propose a simple and flexible type-system feature that allows one to
 soundly statically reason about functions callability on a fine-grained
 level.
 Importantly our system only restricts 
\emph on
calling
\emph default
 functions, it does not restrict what 
\emph on
objects
\emph default
 can be created, passed around, or aliased.
\end_layout

\begin_layout Standard
In our systems, all functions are annotated with a base-callability using
 the syntax 
\begin_inset Formula $\calls{\f{\f x}_{1},\dots,\f x_{n}}$
\end_inset

, where each 
\begin_inset Formula $\f x_{i}$
\end_inset

 indicates the name of a function (or set of functions) that can be called.
 Note how here a function declares what 
\emph on
it can access
\emph default
, compare this with conventional accessibility, (like Scala
\begin_inset Quotes brd
\end_inset

s 
\begin_inset Formula $\k{private[}\t C\k ]$
\end_inset

 modifier) where a function declares what 
\emph on
can access it
\emph default
.
 Our system has three core rules:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
parj{}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Any function can call call itself.
\end_layout

\begin_layout Itemize
A function can call each function in its base-callability.
\end_layout

\begin_layout Itemize
If a function 
\begin_inset Formula $\f f$
\end_inset

 can call everything in the base-callability of a function 
\begin_inset Formula $\f g$
\end_inset

, then 
\begin_inset Formula $\f f$
\end_inset

 can call 
\begin_inset Formula $\f g$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pars{}
\end_layout

\end_inset

With these rules harmless language/library primitives/intrinsics (such as
 integer addition) would be marked with 
\begin_inset Formula $\calls{\empty}$
\end_inset

, allowing any function to call it.
 On the other hand, if a primitive 
\begin_inset Formula $\f f$
\end_inset

 should be restricted (e.g.
 a function to exit the program), one could annotate it with 
\begin_inset Formula $\calls{\f f}$
\end_inset

, thus allowing only specifically marked functions to call it.
 Other systems can be envisioned, such as having a dummy 
\begin_inset Formula $\cf{io}$
\end_inset

 function, and than marking all I/O primitives with 
\begin_inset Formula $\calls{\cf{io}}$
\end_inset

.
\end_layout

\begin_layout Standard
We also support callability generics and dynamic dispatch, thus allowing
 the system to become quite flexible; consider for example the following
 (where 
\begin_inset Formula $\cf{'a}$
\end_inset

 denotes a generic callability parameter):
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
parj{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula $\texttt{\ck{static} \ck{extern} \ct{long} \cf{posix\_read(}\ct{int} \cv{file\_descriptor}, \ct{void*} \cv{buffer}, \ct{ulong} \cv{count}\cf )}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\tab\calls{\cf{posix\_read}}; \cm{// system function defined by the OS}}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\ck{static} \ct{long} \cf{stdin\_read(}\ct{void*} \cv{buffer}, \ct{ulong} \cv{count}\cf ) \calls{\cf{posix\_read}} \{}\lyxlock$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\tab\ck{return} \cf{posix\_read(}\cv{STDIN\_FILENO}, \cv{buffer}, \cv{count}\cf ); \}}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\ck{interface} \ct{Input\_Stream<}\cf{'a}\ct > \{}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\tab\ct{char} \cf{get\_char()} \calls{\cf{'a}};}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\tab… \} \cm{// other usefull functions}}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\texttt{\ck{static} \ct{void} \cf{do\_stuff<'a>(}\ct{Input\_Stream<}\cf{'a}\ct > \cv{stream}\cf ) \calls{\cf{'a}} \{}$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $\tab\texttt{… \} \cm{//} \cm{could have any well-typed code}}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pars{}
\end_layout

\end_inset


\begin_inset Formula $\c{\t{Input\_Stream<}\f{'a}\t >}$
\end_inset

 is conceptually similar to a generic 
\begin_inset Formula $\c{\t{Input\_Stream<T>}}$
\end_inset

, where 
\begin_inset Formula $\ct T$
\end_inset

 denotes a type-parameter.
\end_layout

\begin_layout Standard
For any base-callability 
\begin_inset Formula $\f c$
\end_inset

 one can then call 
\begin_inset Formula $\cf{do\_stuff<}\f c\cf >$
\end_inset

and pass it an instance of a class that implements 
\begin_inset Formula $\ct{\t{Input\_Stream<}}\f c\ct{\t >}$
\end_inset

.
 For example, a call 
\begin_inset Formula $\cf{do\_stuff<[]>(}\v{a\_stream}\cf )$
\end_inset

 cannot (even indirectly) read from a file, since it doesn
\begin_inset Quotes brd
\end_inset

t have the callability 
\begin_inset Formula $\cf{posix\_read}$
\end_inset

 or any callability which could indirectly call it.
 Another important benefit of our system is that we can even reason over
 a call like 
\begin_inset Formula $\cf{do\_stuff<[stdin\_read]>(}\v{a\_stream}\cf )$
\end_inset

, it can read-files, but only standard-input (the file identified by 
\begin_inset Formula $\cv{STDIN\_FILENO}$
\end_inset

).
 As is usual in OO languages, for such a call to type-check, 
\begin_inset Formula $\v{a\_stream}$
\end_inset


\begin_inset Quotes brd
\end_inset

s static-type must be a subtype of 
\begin_inset Formula $\ct{Input\_Stream<}\cf{[stdin\_read]}\ct >$
\end_inset

 but one could always perform a run-time cast, but risk getting an exception.
\end_layout

\begin_layout Standard
This system is designed to soundly enforce reasoning: by looking at the
 declarations of functions 
\begin_inset Formula $\f f$
\end_inset

 and 
\begin_inset Formula $\f g$
\end_inset

, and all functions transitively referenced in their base-capabilities,
 one can statically determine whether 
\begin_inset Formula $\f f$
\end_inset

 can call 
\begin_inset Formula $\f g$
\end_inset

.
 In addition, it is also designed to work in an environment with dynamic-code
 loading, if you have reasoned that one function cannot call another, no
 matter what additional code you load or dynamically invoke, that guarantee
 still holds.
 We have also looked at adding other features to reduce the burden of our
 annotations: such as wildcards and annotation inference.
\end_layout

\end_body
\end_document
