// This file contains definitions that are not needed by the algorithm, but are needed for the proof
//Do we need to define well formedness for p?

//CCz implies_p CCz' iff forall R: R satisfies_p CCz --> R satisfies_p CCz'

Define (P, R) in ValidProblems iff:
  forall P in ran(R):
    p.minimize(P)=P
    P not of form This0._
    p |- p[P][with ncz=empty] : OK // Guaranteed by our reduction rules and type-system? // TODO is this the right from?
  Redirectable(p; RedirectSet(p, R))
  // All of these, save for the well-typedness, are guaranteed by Redirect

Define R' in PossibleRedirectMaps(p; R)
  R subseteq R'
  dom(R') = RedirectSet(p; R)
  (P, R') in ValidProblems

Define R' in ValidRedirectMaps(p; R)
  R' in PossibleRedirectMaps(p; R)
  forall Cs in dom(R'):
    p |- R'(Cs); p[R'(Cs)] <= Cs; R'(p[Cs])

Define p |- P;L <= Cs;L
 p|- P; {interface?' implements Pz' mwtz', ncz'} <= Cs; {interface? implements Pz mwtz, ncz}
  p.minimize(Pz) subseteq SuperClasses(p; P) //SuperClasses is Pz',P,Any. In this way F-bound polimoprhism works as usual: {implements Foo} can be redirected to Foo
  forall s in dom(mwtz): // This implicity checks sdom(mwtz) subseteq sdom(mwtz') 
    p |- mwtz'(s).mt <= mwtz(s).mt
  if interface?=empty: // If the LHS is not an interface
    // One can only call class methods on a non-interface, so if the RHS has them, than the LHS can't be an interface
    if interface?' = interface then class not in mwtz.mdfz
  // If the LHS is an interface, we need to ensure that any valid implementation of the LHS
  // Is a valid implemention of the RHS, which requires that the RHS have the exact same method signatures as the LHS
  else:
    interface? = interface?' // You can't implement non-interfaces
    forall s in dom(mwtz'): // This implicity checks the sdom
      p |- mwtz(s).mt <= mwtz'(s).mt


========================================
R satisfies_p CC1,...,CCn iff R satisfies_p CC1 ... R satisfies_p CCn

R satisfies_p Cs <= P iff p |- R(Cs) <= P
R satisfies_p P <= Cs iff p |- P <= R(Cs)

===============================================
define MostSpecificRedirectMap(p; R,Rz) = R
  forall Cs: 
    // forall is limited since R(Cs) is undefined if none of the R,Rz define it
    R(Cs) = MostSpecific(p; {R'(Cs) | R' in R,Rz})

================================
CompletedConstraints(p; R; CCz) iff:
  forall Cs in RedirectSet(p; R):  _ <= Cs in CCz //dom would do it on both directions

(CCz,CCz')[Cs] = CCz
  dom(CCz) subseteq {Cs}
  Cs notin dom(CCz')

Lemmas (I.e. Proof these!)
=================================
forall R0,p,R
If range(R) not subseteq dom(p), then R not in PossibleRedirectMaps(p; R0)

--------------------------------------------------------------



-------------------------------------------------------------------------------------------------

dom(CollectConstraints(p; R)) subseteq RedirectSet(p; R)

Define p <= p' // But for paper language only!
=======================================================================================
p <= p' // reflexive

p <= p': // transitive
  exists p" such that:
    p <= p"
    p" <= p'

//(DLs; DVs) <= (DLs DLs'; DVs DVs') //broken in the current form, and not needed?

// (C=L)s; (id=LV)z // Isaac likes this form
// (id=E)s; (id=LV)z // Marco likes this form

(DLs id = L[remove Csz] DLs'; DVs) <= (DLs id = L DLs'; DVs)// I.e. L has less nested classes
// TODO: Can this change the meaning of p.minimize?

// NOTE: We are not adding methods! (as doing so will break redirect)

// TODO: Change p to have a DVz for the top-level declarations?
// Or is their order actually important?


Define p.defineClass(L) = (p', This1.C) // But for paper language only!
=======================================================================================
  C is fresh
  (id0 = L0, id1 = L0, p).defineClass(L[from This1], C) = (id0 = L0, id1 = L1[mwtz = L1.ncz, C: L], p)
  (id0 = L0; DVs).defineClass(L, C) = (id0 = L0; DVs, C = L)

-------------------------------------------
Lemma:,
forall LV and (non empty?) p, 
  (p', P) =  p.defineClass(LV),
  p <= p'
  p.top() = p'.top()
  p'[P] = R(p.minimize(LV))
  R = Cs1 -> P.Cs1, ...,  Csn -> P.Csn
    where Cs1,...,Csn = dom(LV) \ sdom(LV)
  // don't need to use the R if the caller of defineClass knows what the resulting P is going to be
-----------------------------
{interface? implements Pz, Mz}[ifrom P] = {interface? implements Pz[from P], Mz[ifrom P]}
(C: L)[ifrom P] = L[ifrom P.C]
mwtz[ifrom P] = mwtz[with mt = mwtz.mt[from P], e = e[from P]]

p[P] = p.minimize(p(P)[ifrom P])
-----------------------------------








