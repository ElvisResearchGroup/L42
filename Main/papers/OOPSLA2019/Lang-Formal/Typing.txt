          DVz; Empty |- DV1 : Ok, ..., DVz; Empty |- DVn : Ok
(DVz ok) ------------------------------ DVz = DV1 ... DVn
	                 DVz |- Ok

	Dz; T?.C |- Ok
(DV ok) ---------------------------------
	Dz;  T? |- private? C = LV : Ok            
	
	This = LV, Dz; This |- Ok
(tDV ok) ---------------------------------
	Dz;  Empty |- t = LV : Ok 
	


		Dz; T |- M1 : Ok .... p |- Mn : Ok
		Dz; T |- T1 : Implemented .... p |- Tn : Implemented
		Dz; T |- implements(Pz; Ms)
		Dz; T |- K : Ok                    Dz.superTypes(T) = T1...Tn
(LV ok) -------------------------------------------Dz(T) = {K; _; M1...Mn}
             Dz |- T : Ok
	             

                  amt1 _ in p.top().Ms ... amtn _ in p.top().Ms
(T implemented) ----------------------------------------------- p[P] = interface {Pz; amt1 ... amtn;}
                  p |- P : Implemented

(amt-ok) ------------------- p.exists(T, Txs.Ts)
          p |- T m(Tcs) : Ok

           p; This0 this, Txs |- e : T
(mt-ok) ------------------------------ p.exists(T, Txs.Ts)
          p |- T m(Tcs) e : Ok

              |- C = L, p
(cd-Ok) -------------------
	        p |- C = L : OK


Define p; Txs |- e : T
=====================================
(var)
----------------------- T x in Txs
   p;  Txs |- x : T

(call)
   p; Txs |- e0 : T0
   ...
   p; Txs |- en : Tn
-----------------------------------  T' m(T1 x1 ... Tn xn) _ in p[T0].Ms
   p; Txs |- e0.m(e1 ... en) : T'

(field)
   p; Txs |- e : T
---------------------------------------  p[T].K = constructor(_ T' x _)
   p; Txs |- e.x : T'


(new)
   p; Txs |- e1 : T1 ... p; Txs |- en : Tn
------------------------------------------- p[T].K = constructor(T1 x1 ... Tn xn)
   p; Txs |- new T(e1 ... en)


(sub)
   p; Txs |- e : T
-----------------------------------  T' in p[T].Pz
   p; Txs |- e : T'


(equiv)
   p; Txs |- e : T
-----------------------------------  T =p T'
   p; Txs |- e : T'
