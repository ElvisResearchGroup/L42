grammar: 
D::= private? id = E //well formedness, top level D have no private

Define: T^p to extract the current type
T^(DFz; t=E C1=E1..Cn=En)=This.C1..Cn
T^(DFz; C1=E1..Cn=En)=C1..Cn

Define: fields({_;T1 x1 .. Tn xn;_})=x1:T1..xn:Tn //instead of defining T x in K, dom and range
-----------------------------------------------------
Define: complete(Ds)
complete(D1..Dn)=complete(D1)..complete(Dn)
complete(t = L)
complete(C = {Tz;K; Mz})
  K !=abstract
  forall C = L in Mz: complete(C = L)
  if static? _ m(_) in Mz, then K =interface  
----------------------------------------------------------------------------------------------------------
Define: p.accessible(T)
p.accessible(T) if T^p=T._
p.accessible(T.C.Cs) if T^p=T._ and p(T.C).public(Cs)
----------------------------------------------------------------------------------------------------------
Define: L.public(Cs)
L.public() holds
{Tz;K;C=L,_}.public(C.Cs)=L.public(Cs)
----------------------------------------------------------------------------------------------------------
Define: p.exportable(T)
p.exportable(T.Cs') if T^p=T._ and Dz(T).public(Cs') //implies accessible
p.exportable(C.Cs) if  p(C).public(Cs)
p.exportable(T.C'.Cs) if T^p=T.C_, Dz(T.C').public(Cs) and not p(T).public(C)
//p.exportable(T1..Tn) = p.exportable(T1) .. p.exportable(Tn) //not needed, usual expansion
---------------------------------------------------------------------------------

(|- DFz e) // this is the main rule for our type-system it checks DFz and e
================================================================================================================
    |- DFz
    DFz; Empty |- e : T
    complete(DFz)   //doing it in the typing of the D was wrong, was called in traits
    ---------------------------------------
    |- DFz e

(|- DFz) // this rule checks the entire DFz
==================================================================================================================
    DF1, ..., DFn; Empty |- DF1 
    ... 
    DF1, ..., DFn; Empty |- DFn                
    ------------------------------------------
               DF1, ..., DFn |- DFz
 
(p |- DF)  (p |- L)  (p |- M)
// these rules check that DF (or nested class) (which was found in T) is well-typed, assuming everything else in Dz is
//Marco: I think we do not need exportable for implements
==========================================================================================================================
	   Dz; Ds,private? id = L |- L
    ------------------------------------
    Dz; Ds|- private? id = L


(p |- L) // this rule checks that L is well-typed (assuming everything else in p is)
===================================
    L={ Tz;K; M1 ... Mn}
    forall M in L:  p |- M
    p.exportable(exposed(L))
    p.implOk(L)
    forall T in range(fields(L)): p.accessible(T)
    -------------------
	   p |-  L


(p |- M) // check that M is well-typed, where M was found in T
==============================================================
    if e? = e  p; this:T^p, x1:T1,  ...., xn:Tn |- e : T0   
    ---------------------------------------------------------------
    p |- static? T0 m(T1 x1 ... Tn xn) e?
