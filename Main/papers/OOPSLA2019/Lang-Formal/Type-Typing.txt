# Language Grammar and Well-Formedness
===============================================================

e  ::= x | e.m(es) | T.m(es) | e.x | new T(es)
L  ::= {K; Tz; Mz} //DISCUSSION: if we put Ms instead of Mz then enter can be deterministic
K  ::= interface | abstract | Txs
M  ::= static? T m(Txs) e? | private? D
E  ::= L | t | E1<+E2 | E<R>
R  ::= Cs1=T1 .. Csn=Tn

T  ::= C| T.C
Tx ::= T x
D  ::= id = E
id ::= C | t
v  ::= new T(vs)

Well formedness:
- An L marked as an 'interface' cannot have an M which is static or implemented (i.e. have an e as its body).
- An M cannot be of the form private? t = E, i.e. it must not declare a trait.
- In a Txs each x (i.e. field or parameter name) must be distinct, and not named 'this'. 
- A 'static' method cannot contain 'this' in its body.
- Method names (m) and class names (C) inside the Mz of a code-literal (L) must be distinct. Thus we will use the notations Mz(m) and Mz(C) to extract the (unique) M in Mz declared with name m or C (respectively).
- The names of the top-level declarations (Ds) provided in the source code must all be distinct, and not 'This'.
- In an R, each Cs must be distinct. Thus an R is a (partial) function from Cs to T, as such we will use the usual functional R(Cs) to get the T corresponding to the given Cs.
	

# Auxiliary Notations
============================================================

DF ::= id = LF
LF ::= {K; Tz; MFz}
MF ::= static? T m(Txs) e? | private? DF
p  ::= DFz;Ds

// top::= Ds e // WHY?
-----------------------------------------------------
Define M in L: 
	M in {_;_;M,Mz}
-----------------------------------------------------
Define E(Cs) = E':
  E(empty)=E
  {_;_;Mz, private? C=L}(C.Cs) = L(Cs)
-----------------------------------------------------------------
Define: fields({K; _; _}) = Txs
fields({Txs; _; _}) = Txs
fields({K; _; _}) = Empty, otherwise
-----------------------------------------------------
Define L[T := T'] = L, by propagating in the usual way to T"[T := T']
T.Cs[T := T'] = T'.Cs
T[T' = T"] = T, otherwise 
-----------------------------------------------------

Define Tp = T:
  T^(DFz; id=E C1=E1..Cn=En)=C.C1..Cn
    where if id is of form t, then C = This, otherwise C = id
-----------------------------------------------------
Define Ds.sameStart(T):
  (C=E,Ds).sameStart(C.Cs)
Define p(T) = E:
	(C=L,DFz;Ds)(C.Cs)=L(Cs) where !Ds.sameStart(Cs)
	(DFz;id=E, C1=E1 .. Cn=En,Ds)(C.C1..Cn.Cs)=En(Cs) 
		where not Ds.sameStart(Cs) and if id is of form t, then C = This, otherwise C = id
-----------------------------------------------------

# Flattening Rules
============================================================

top
    DFz subseteq DFs
             |- DFz:Ok
    DFz;id=E |-E=>E'
    ---------------------------
    DFs id=E Ds => DFs id=E' Ds

Ctx-F
    DFz;Ds,id=E|-E=>E'
    ----------------------------
    DFz;Ds,id=_|-CtxF[E]=>CtxF[E']


enter
    DFz;Ds,C=E|-E=>E'
    ----------------------------
    DFz;Ds|-{K;Tz;private? C=E,Mz}=>{K;Tz;private? C=E',Mz}

trait
    ----------------------
    t = LF, DFz; Ds |-t=>LF[This=Tp]

sum
	LF1 <+ LF2.refreshPrivate(Tp) = LF3
	-------------------------------------
	p |- LF1 <+ LF2 => LF3
	
redirect
    Csz = LF.redirectSet(Tp, R)
    LF.redirectable(Csz)
    p.validTargets(range(R))
    R' = p.bestMap(LF, R)
    ----------------------------
    p |-LF<R> => LF.remove(Csz)[R']Tp
    
CtxF ::= []| CtxF <+ E | LF <+ CtxF | CtxF<R> //please, can we just put all the grammar together?

# The Sum Operator
============================================================
Define: L1 <+ L2 =  L3
L1 <+ L2 = {K1 <+ K2; Tz1 U Tz2; (Mz <+ Mz'), Mz1, Mz2}
	L1 = {K1; Tz1; Mz, Mz1}
	L2 = {K2; Tz2; Mz', Mz2}
	if K = interface then {m in dom(L1)} = {m in dom(L2)}
-----------------------------------------------------
Define: K <+ K' = K"
interface <+ interface = interface
abstract <+ abstract = abstract
abstract <+ Txs = Txs <+ abstract = Txs
---------------------------------------------------
Define: Mz <+ Mz' = Mz"
M1..Mn <+ M1'..Mn' = (M1 <+ M1') .. (Mn <+ Mn')
static? T m(Txs) e? <+ static? T m(Txs) e = static? T m(Txs) e
static? T m(Txs) e? <+ static? T m(Txs) = static? T m(Txs) e?
(C = L) <+ (C = L') = (C = (L <+ L'))
--------------------------------------------

# Type System Notations
==============================================================================================
---------------------------------------------------------------------------------------------
Define: L.public(Cs)
L.public(empty)
{_; _; C = L, _}.public(C.Cs) iff L.public(Cs)
------------------------------------------------------------------------------------
Define: p.exposable(T, T')
p.exposable(T._, T.Cs) if p(T).public(Cs)
p.exposable(T.C._, T.C'.Cs) if p(T.C').public(Cs) and not p(T).public(C)
p.exposable(_, C.Cs) if p(C).public(Cs)
------------------------------------------------------------------
Define: p.accessible(T, T')
p.accessible(T, T') if p.exposable(T, T')
p.accessible(T._,T.C.Cs) if p(T.C).public(Cs)
--------------------------------------------------------
Define p.supertypes(T) = Tz:
p.supertypes(T) = T, p.supertypes(T1), ..., p.supertypes(Tn)
  where p(T)={_; T1 , ..., Tn; _}
  forall i in {1, ..., n} : p(Ti) = {interface;_;_}
---------------------------------------------------------------------------------
Define exposedTypes(L) = Tz :
exposedTypes({K; Tz; Mz})= Tz, exposedTypes(Mz)
exposedTypes(static? T0 m(T1 x1 ... Tn xn) _)=T0..Tn
exposedTypes(private? D)=empty
------------------------------------------------
Define p.reacheableTypes(Tz) = Tz':
T in p.reacheableTypes(T',_) if T in T',exposedTypes(p(T'))
T in p.reacheableTypes(Tz) if T in p.reacheableTypes(T'), where T' in p.reacheableTypes(Tz)
---------------------------------------------------------------------------------
Define p.validImpls(T) and p.validImpls(T, T')
p.validImpls(T) if p.validImpls(T, T1) and ... and p.validImpls(T, Tn)
  where p.superTypes(T) = T1 ... Tn
p.validImpls(T, T')
  where forall static? T0' m(T1 _  ... Tn _) _ in p(T'),
    static? T0  m(T1 _ ... Tn _) _ in p(T)
    p |- T0 <= T0'
-------------------------------------------------------------------
Define: complete(Ds)
complete(t = L)
complete(C = {K; _; Mz})
  K != abstract
  forall private? D in Mz: complete(D)
  if static? _ m(_) in Mz, then K =interface  
-------------------------------------------------------------------
Define subtyping notations: p|-T<=T', p|- M<=M' and p|-T<=L
p|-T<=T' if T' in p.supertypes(T)

p|-static? T0 m(T1 _, ..., Tn _) _ <= static? T0' m(T'1 _, ..., T'n _) _
  p|-T0 <= T'0 and p|-T'1<=T'1 and ... and p|-T'n<=T'n

p|-T <= {K'; Tz'; Mz'}
  p(T) = {K; Tz; Mz}
  forall T' in Tz' : p |- T <= T'
  forall m in dom(Mz'), p |- Mz(m) <= Mz'(m)
  if K = interface then K' = interface
  if K = inteface then forall m in dom(Mz), p |- Mz'(m) <= Mz(m)
==========================================================================================


# The Redirect Operator
==========================================================================================

----------------------------------------------------------------
Define L.redirectSet(T, R) = Csz:
Cs in L.redirectSet(T, R) if Cs in dom(R)
Cs in L.redirectSet(T, R) if T.Cs in exposedTypes(L(Cs')), where Cs' in L.redirectSet(T, R)
----------------------------------------------------------
Define L.redirectable(Csz): //Marco: may be call it validSources?
L.redirectable(Csz) iff forall Cs in Csz:
  Cs != empty
  Cs in dom(L)
  L.public(Cs) 
  forall C = L' in L(Cs), Cs.C in Csz
--------------------------------------------------------------
Define p.validTargets(Tz): //Marco: call it on R' instead of R?
p.validTargets(Tz) if p.validTarget(T1) and ... and p.validTarget(Tn)
  where p.reacheableTypes(Tz) = T1..Tn
(C=L,DFz;Ds).validTarget(C.Cs) if L.public(Cs)
p.validTarget(T) if p.validImpls(T), p.accessible(Tp, T), p=DFz;Ds and C notin dom(DFz)
----------------------------------------------------------
Define L[R]T = L', by propagating in the usual way to T[R]T'
T.Cs[R]T=R(Cs)
T'[R]T = T', otherwise 
----------------------------------------------------------
Define L.remove(Csz) = L':
L.remove(Cs1 ... Csn) = L.remove(Cs1) ... L.remove(Csn)
{K; Tz; Mz,private? C=L}.remove(C)={K; Tz; Mz}
{K; Tz; Mz,private? C=L}.remove(C.Cs)={K; Tz; Mz, private? C=L.remove(Cs)}
========================================================================================================

# TO DO: fix everything below here
==============================================================
Define: p.bestMap(L,R)=p.stableMostSpecific(L,R,validMaps)
==============================================================
Define: p.stableMostSpecific(L,R,f)=R', with p.f(L,R)=Rz
  where
  forall p' > p :  p.mostSpecificMap(p.f(L,R))=R'
==============================================================
Define: Dz' > Dz
Dz,_;Ds >Dz;Ds
p1>p3 iff p1>p2, p2>p3
Dz,C=L;Ds>Dz,C=L.remove(Tz);Ds  if !sameStart(Ds,C)
Dz;Ds1, private? C=L, Ds2 >Dz;Ds1, private? C=L.remove(T), Ds2  
  if !sameStart(Ds2,T)

==============================================================
Define: R' in p.validMaps(L,R) iff
  R' in p.possibleMaps(L,R)
  forall Cs in dom(R'), p|- R'(Cs) <= L(Cs)[R']Tp

==============================================================
Define: R' in p.possibleMaps(L,R)
  R subsetEq R'
  dom(R') = L.redirectSet(Tp,R)
  p.validTargets(range(R))
==============================================================
Define: p.mostSpecificMap(R1..Rn)=R1
  where forall T in dom(R1) :
    R1(T)=p.mostSpecific(R1(T) .. Rn(T))
==============================================================
Define: p.mostSpecific(T,Tz)=T
  where p.supertypes(T)=Tz,_
==============================================================
==============================================================

(|- DFz e) // this is the main rule for our type-system it checks DFz and e
========================================================================================================
    |- DFz
    DFz; Empty |- e : T
    complete(DFz)   //doing it in the typing of the D was wrong, was called in traits
    ---------------------------------------
    |- DFz e

(|- DFz) // this rule checks the entire DFz
=======================================================================================================
    DF1, ..., DFn; Empty |- DF1 
    ... 
    DF1, ..., DFn; Empty |- DFn                
    ------------------------------------------
               DF1, ..., DFn |- DFz
 
(p |- DF)  (p |- L)  (p |- M)
// these rules check that DF (or nested class) (which was found in T) is well-typed, assuming everything else in Dz is
====================================================================================================
	   Dz; Ds,D |- L
    ------------------------------------
    Dz; Ds|- private? D


(p |- L) // this rule checks that L is well-typed (assuming everything else in p is)
===================================
    forall M in L:  p |- M
    p.exposable(Tp, exposedTypes(L))
    p.validImpls(Tp)
    forall T _ in fields(L): p.accessible(Tp,T)
    -------------------
	   p |-  L


(p |- M) // check that M is well-typed, where M was found in T
==============================================================
    if e? = e  p; this:Tp, x1:T1,  ...., xn:Tn |- e : T0   
    ---------------------------------------------------------------
    p |- static? T0 m(T1 x1 ... Tn xn) e?
