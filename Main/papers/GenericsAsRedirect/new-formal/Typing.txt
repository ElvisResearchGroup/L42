Define p |- Ok
===========================================================
DVs |- Ok
    forall DV in DVs
        DV; DVs |- Ok

p |- Ok:
   p.top() = interface? {Pz; DVs; mtz; K?}

   forall P in Pz:
        p.minimize(p[P].Pz) subseteq p.minimize(Pz)

       forall T m(Txs) in p[P].mtz:
            T m(Txs) _ in mtz

   forall T m(Txs) e? in mtz:
        p |- T, Txs.Ts : Ok
        if e? = e:
            p; Txs |- e : T

   if K? = K:
       p |- K.Txs.Ts : Ok

   forall id = LV in DVs
        id = LV, p |- Ok

Define p |- Ts : Ok
=================================
    forall T in Ts:
        p(T) is defined

Define p; Txs |- e : T
=====================================
(var)
----------------------- T x in Txs
   p; Txs |- x : T

(this)
-------------------------------
   p; Txs |- this : This0

(call)
   p; Txs |- e0 : T0
   ...
   p; Txs |- en : Tn
-----------------------------------  T' m(T1 x1 ... Tn xn) _ in p(T0)
   p; Txs |- e0.m(e1 ... en) : T'

(field)
-----------------------------------  p(This0).K = constructor(_ T x _)
   p; Txs |- this.x : T


(new)
   p; Txs |- e1 : T1
   ...
   p; Txs |- en : Tn
-----------------------------------  p(T).K = constructor(T1 x1 ... Tn xn)
   p; Txs |- new T(e1 ... en)


(sub)
   p; Txs |- e : T
-----------------------------------  T' in p(T).Pz
   p; Txs |- e : T'

   
(equiv)
   p; Txs |- e : T
-----------------------------------  p.minimize(T) = p.minimize(T')
   p; Txs |- e : T'
