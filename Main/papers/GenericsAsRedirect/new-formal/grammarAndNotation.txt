id  ::= t | C
T,P ::= Thisn.Cs

CD  ::= C = E  // class declaration
CV  ::= C = LV // evaluated class declaration
D   ::= id = E // declaration
DL  ::= id = L // partially-evaluated-declaration
DV  ::= id = LV // evaluated-declaration

L   ::= interface {Tz; amtz;} | {Tz; Ms;  K?}  // literal
LV  ::= interface {Tz; amtz;} | {Tz; MVs; K?}  // literal value

amt ::= T m(Txs) // abstract method
mt  ::= T m(Txs) e? // method
Tx  ::= T x // paramater-declaration
M   ::= CD | mt // member
MV  ::= CV | mt
Mid ::= C | m // member-id
K   ::= constructor(Txs) // constructor
e   ::= x | e.m(es) | e.x | new T(es) // expression
E   ::= L  |  t  |  E <+ E    |  E(Cs=T) // library-expression

CtxV ::= [] | CtxV <+ E| LV <+ CtxV | CtxV(Cs=T) // Context of library-evaluation
Ctxv ::= [] | ctxv.m(es) | v.m(vs ctxv es) | ctxv.x | new T(vs ctxv es)
v    ::= new T(vs)

p   ::= DLs; DVs // program
S   ::= Ds e // Source Code
=====================================================================================
Define p(P) = LV
-----------------------------------
(; _, C = L, _)(This0.C.Cs) = L(Cs)
(id = L, p)(This0.Cs)   = L(Cs)
(id = L, p)(Thisn+1.Cs) = p(Thisn.Cs)
(DLs; _, t = LV, _)[t] = LV[from This(#DLs)]
p[P] = p(P)[from P]

p.exists(Ps) iff forall P in Ps: p(P) is defined

Define L(Cs) = L
--------------------------------------
L(empty) = L
L(C.Cs) = L(Cs)
    L = interface? {_; _, C = L, _; _}

Define L[CD]=L'
---------------------------------------------
L[C = E'] = interface? {Tz; MVs C = E' Ms; K?}
  L = interface? {Tz; MVs C = _ Ms; K?}


Define operations on p
--------------------------------------
p.evilPush(L) = (C = L, p)
	for fresh C

p.push(id) = (id = L, p)
    p = (id' = {_;_, id = L, _ ;_}, _; Ds)

(id = L, p).pop() = p
(id = L, p).top() = L

Define equivy ops...
------------------------------
empty =p empty
P, Ps =p P', Ps' iff:
	p.minimize(P) = p.minimize(P')
	Ps =p Ps'

Pz subseteq_p Pz' iff:
	p.minimize(Pz) subseteq p.minimize(Pz')

p.minimize(empty) = empty
p.minimize(P, Pz) = p.minimize(P), p.minimize(Pz)

p.minimize(Thisn+1.idn.Cs) = p.minimize(Thisn.Cs):
  p = id0 = L0, ..., idn = Ln, _; Ds
  p(Thisn.Cs) = L
  // TODO: Check that Ln is an L instead?
otherwise p.minimize(P) = P

define dom(Mz) = Midz
===========================================
dom(empty) = empty
dom(C = E, Mz) = C, dom(Mz)
dom(T m(Txs), Mz) = m, dom(Mz)
