Define Ds e --> Ds' e'
================================================================
            DVs' |- Ok
            empty; DVs'; id | E --> E'
(compile)---------------------------------------- DVs' subsetof DVs
            DVs id = E Ds e --> DVs id = E' Ds e

            DVs |- Ok
            DVs |- e : T
            DVs |- e --> e'
(main)---------------------------------- for some type T
            DVs e --> DVs e'

Define p; id |- E --> E'
=========================================================
          p; id |- E --> E'
(CtxV) ----------------------------------------------
          p; id |- CtxV[E] --> CtxV[E']

       id = L[C = E], p; C |- E --> E'
(L) --------------------------------------------- // TODO use fresh C?
      p; id |- L[C = E] ---> L[C = E']

(trait) -----------------------------------
          p; id |- t -> p[t]

         LV1 <+p' LV2 = LV3                  p' = C' = LV3, p
(sum) -------------------------------------- for fresh C'
        p; id |- LV1 <+ LV2 --> LV3

            // TODO: Inline and de-42 redirect formalism
(redirect) ------------------------------------LV'=redirect(p, LV, Cs, P)
            p; id |- LV(Cs=P) -> LV'

Define L1 <+p L2 = L3
========================================================================================
{Tz1; Mz1; K?1} <+p {Tz2; Mz2; K?2} = {Tz; Mz; K?}
  Tz = p.minimize(Tz1 U Tz2)
  Mz1 <+p Mz1 = Mz
  {empty, K?1, K?2} = {empty, K?} //may be too sophisticated?

interface{Tz1; amtz,amtz';} <+p interface?{Tz2;amtz;} = interface {Tz;amtz,amtz';}
  Tz = p.minimize(Tz1 U Tz2)
  if interface? = interface then amtz'=empty

Define Mz <+p Mz' = Mz"
------------------------------------------
M, Mz <+p M', Mz' = M <+p M', Mz <+p Mz
	//note: only defined when M.Mid = M'.Mid

Mz <+p Mz' = Mz, Mz':
	dom(Mz) disjoint dom(Mz')

Define M <+p M' = M"
-----------------------------------------
T' m(Txs') e? <+p T m(Txs) e = T m(Txs) e
	T', Txs'.Ts =p Ts, Txs

T' m(Txs') e? <+p T m(Txs) = T m(Txs) e?
	T', Txs'.Ts =p Ts, Txs

(C = L) <+p (C = L') = L <+p.push(C) L'
