
=====================================================
---------------------------------------------
Computability: thanks to RedirectSet we know the dom(V)
we can compute a part of the mapping by looking to method types.
All that is left is implements and exceptions
however, we can match, for example
A:{implements Cs1..Csn Ms}
with the corresponding
EB:{implements P1..Pk Ms'}
by method names.
To pass, for each Csi there must be at least 1 Pi with (exactly) the same ms
in order to be still ambiguos:
there must be a P,P' in P1..Pk with the same ms.
For this to be the case, either there are interfaces with no methods
in Cs1..Csn or P must implement P' and P must add no methods
Thus, the only case where it may be hard is the degenerate case
of an interface without methods


A:{class method T m() exception A1,A2,A3}

EA:{class method T m() exception EA1,EA2}

A1:{}, A2: {}
A:{
  T m() exception A1  T f() exception A1, A2
}

EA: {
  T m exception EA1 ...
  T f exception EA1 ...
}
EA1: {}

interface A {  }
interface B {  }
class C implements A,B{ }

interface EA {  }
interface EB {  }
class EC implements EA,EB{ }




EI1:{interface}
EI2:{interface implements EI1}

L={
I1:{interface}
I2:{interface implements I1}
}[I2=EI2]
I2=EI2,I1=EI1
I2=EI2,I1=EI2


------

L: {A1: {interface implements A2, ..., An}
A2: {interface implements A3, ..., An}
...
An: {interface}
}

B1: {interface implements B2, ..., Bn}
B2: {interface implements B3, ..., Bn}
...
Bn: {interface}

L[A1 = B1]

================================//may be move in rename
L[PathRename Cs->Cs']p = V(L)
  V = collectV(p.evilPush(L); Cs->This0.Cs')

collectV(p; Cs->P, V) = collectV(p; Cs.C->P.C, Cs->P, V)
  Cs.C not in dom(V)
  C in dom(p(This0.Cs))
otherwise
  collectV(p; V) = V


-----------------------------------------------------------------------------------------
Kind of errors in current implementation
1 p.equiv
3 interface with different methods
2 ambiguity resolution with interface
1 exception spec coalscing...
1 self implementation

-----------------------------------------------------------------------------------------


Usefull examples that need to go in paper
---------------------
EA:{interface XX}
EA2:{implements EA XX YY}
EC:{EA m()}
----
{
A:{XX}
C:{ A m()}
}
C=EC
---------
one could redirect A=EA, and C=EC after
but C=EC is ambiguis A=EA or A=EA2
worst, there could me many "EA2" everywhere in the system; want EA

---------

EA2: {interface}
EA: {interface implements EA2}
EB: {EA foo()}

{A: {interface} B: {A foo()}}[ B = EB] // A = EA
---//Also good to go in paper, ambiguos EAA and EA, want EA
EAA: {interface +}
EA: {interface implements EAA  +}
EA1: {interface implements EA  +}
EA2: {interface implements EA  +}
EB: {EA1 foo() EA2 bar()}

{A: {MEAA} B: {A foo() A bar()}}[ B = EB]
===========================
Common:{interface }
EAA1: {interface +}
EAA2: {interface +}
EA1: {interface implements EAA1 EAA2  +}
EA2: {interface implements EAA1 EAA2  +}
EB: {EA1 foo() EA2 bar()}
{A: {} B: {A foo() A bar()}}[ B = EB]
//here we obviusly can not chose a best result between EAA1 and EAA2, however Common

one of the difficulties is the model of multiple subtyping
in java, I1 and I2 with same method can be both implementend, in C# too, and ....
for a clean reasoning.... 42



Define  p|-V1< V2

p |- V <= V

p |- V1 <= V1'
p |- V2 <= V2'
-----------------------
p|- V1,V2 <= V1',V2'

case1: return type the same
p |- Cs->P1,Cs'->P1'<= Cs->P2
  This0.Cs=p.top()[Cs'].ms.T
  p[P1'].ms.T=P1

case2: param type the same
p |- Cs->P1,V<= Cs->P2,V
  This0.Cs =p.top()[Cs'].ms.Ts.i
  p[V(Cs')].ms.Ts.i=P1

case3: return type subtype
p |- Cs->P1,V<= Cs->P2,V
  This0.Cs =p.top()[Cs'].ms.T
  p[V(Cs')].ms.T=P
  not p.equiv(P,P1) and not p.equiv(P,P2)
  p|-P1<=P2

case4: param type supertype
p |- Cs->P1,V<= Cs->P2,V
  This0.Cs =p.top()[Cs'].ms.Ts.i
  p[V(Cs')].ms.Ts.i=P
  not p.equiv(P,P1) and not p.equiv(P,P2)
  p|-P1>= P2

-------------------

EB: {}
A: {EB foo C.Z bar}
C: {B: {} X:{B foo} Z: {}}[X=A]
C = {B: {}}

ValidR(p,V) iff
    dom(V) = RedirectSet(p.top(); dom(V)) // maybe unnecessary
    forall Cs in dom(V):
      V(Cs)=p.minimize(V(Cs))
      p|- Cs; V(p[Cs]) >= V(Cs); p[V(Cs)]

given a r function, we can preserve 1 by filtering the output with ValidR

r is a partial function from (p;V)->V'
such that
  p.minimize(V)=V,
  p.minimize(V')=V'
  V'=V,_
  forall P in range(V'), p(P) is a well typed L

and V' = p.minimize(V')
we find redirect:r
0- redirect(p,redirect(p,V))=redirect(p,V)
1- if redirect(p,V')=V and p.pop()|-p.top():ok
   then p.pop()|-V(p.top()):ok
  // if redirect apply V on well typed L input, well typed result
2a- Internal Stability://formal after seams broken?
 if redirect(p,V')=V and p'=p[with p.top()[Css=Ls]] and Css disjoint dom(V)
 then redirect(p',V')=V
2b- External Stability://if you do not add anything to the program
or change anything that is not connected with the redirect, the choice do not change

 //if redirect chose V on L, it would chose the same V on
 //L with different members not in dom(V), this would include privates
3- minimilaty
   if r(p, V) = V' then dom(V') <= RedirectSet(p.top(); dom(V))

Fact--forall r' such that 0,1,2 holds,
    forall V,V',p, if  r'(p;V) = V' then ValidR(V', p) holds
//this is an example showing why 2 is needed in Fact above
//{F: {class method Void bar()} ...}[F = Void]


UniqueR(p, V, V')
  true iff their is no V'' such that V <= V' and V'' != V' and validR(p, V')

possible rs satisfing 0,1,2,3

Singleton sets:
  0-r(p, V) is always undefined
  1- r(p, V) = V' IFF V = V' and ValidRedirect(p; V; V')
  2- r(p, V) = V' IFF UniqueR(p, V, V') and 0,1,2,3

Infinite sets:
  3- if r(p, V) is undefined, there is no V' such that ValidR(p, V') and 0,1,2,3
    // always suceeds if possible
  4- if r(p, V) = V' then UniqueR(p, V, V') and not 2// weaker than 2
    // if it suceeds, the answer is unqiue
  5- if UniqueR(p, V, V') then r(p, V) = V' and not 2 and 1// stronger than 2
    // it always suceeds if their is a unique result
    // but solves some ambiguites
  5a- range(V') do not P out of thin air but rely on type mentioned in the targets
  6- other
    // sometimes it fails, even if their is a solution
    // and sometimes it resolves ambiguities but not always
