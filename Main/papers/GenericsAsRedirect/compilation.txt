Marco version:
p::=DEs0;..;DEsn 


      Ds'| EV --> EV'
      p=Ds id=EV DE; DEs
      Ds' in p.last()
      |- Ds':Ok
(top)----------------------------
      p ==>Ds id=EV' DE; DEs

      
      MVz C=E Ms;p==>MVz C=E' Ms;p
      p=Ds id={interface? implements Pz MVz C=E Ms} DE; DEs   
(enter)-----------------------      
      p ==>Ds id={interface? implements Pz MVz C=E' Ms} DE; DEs
+++++++++++++++++++++++++++++++++++++

(main-top)
----------------------------------------
Ds id=EV DEs ==> Ds id=L Des
    EV not of form L
    Ds | EV -->* L

(main-enter)
----------------------------------------
Ds id=CtxV[L] DEs ==> Ds id=CtxV[LV] Des
    L not of form LV
    if id = C:
        C' = C
    else:
        C' is fresh

    C' = L'; Ds ==>* C' = LV; Ds
    
    
(top)
----------------------------------------
C = L; Dz ==> C = L[C' := L'], cls; Dz:
		L = {interface? implements Pz MVz C' = EV Ms}
		EV not of form L
		C = L, cls; Dz | EV -->* L'

(enter) // TODO? Use fresh C' or not?
----------------------------------------------
C = L, cls; Dz ==> C = L[C' := CtxV[LV]], cls; Dz:
	L = {interface? implements Pz MVz C' = CtxV[L'] Ms}
    L' not of form LV
    C'=L', C = L, cls; Dz ==>* C'=LV  C = L, cls; Dz	

=========================================================


C' = E; Ds ==>* C' = LV; Ds                      E not of the form LV
         |- Ds:Ok                               C' = C if id = C, otherwise C' is fresh
------------------------------------------------Ds subset Ds'
  Ds' id=E DEs e --> Ds' id=LV DEs e

      Ds |- E ==>* L
         |- Ds:Ok                               C' = C if id = C, otherwise C' is fresh
------------------------------------------------Ds subset Ds'
  Ds' id=E DEs e --> Ds' id=LV DEs e
-----------------------------------





======================================================================
  Ds |- e --> e'
     |-Ds:Ok
------------------------------------
    Ds e --> Ds e'

    
------------------------------------
  p |- LV1 <+ LV2 -> sum(p; LV1; LV2)

-----------------
  p |- t -> p[t]

//old
  Dss;{D in MVs}|-E->E'
--------------------------------------
  Dss|- {implements Ts MVs C=E Ms K?}->{implements Ts MVs C=E' Ms K?}


  C = L, cls; Dz |- D=E -> D=E'
--------------------------------------L = {implements Ts MVs D=E Ms K?}
          cls;Dz |- C = L-> C = {implements Ts MVs D=E' Ms K?}




  C = L, cls; Dz |- D=E -> D=E'       For fresh C
--------------------------------------L = {implements Ts MVs D=E Ms K?}
          cls;Dz |- {implements Ts MVs D=E Ms K?}->{implements Ts MVs D=E' Ms K?}



p |- E -> E'
-------------------------------------- where E != L
p |- D = E -> D = E'


------------------------------------LV'=redirect(Dss,LV,Cs,T)
  Dss|- LV(Cs=T)  -> LV'


  Ds|-LV1:Ok .. Ds|-LVn:Ok
------------------------------- Ds= id1=LV1...idn=LVn
  Ds:Ok
  


-define sum(p,LV1,LV2)=LV
  p.evilPush(LV)|-LV1<+LV2

p|-{implements Tz1 M1..Mn K?1} <+ {implements Tz2 Mz2 K?2} ={implements Tz Mz K?}
  Tz=minimize(p;Tz1 U Tz2)
  Mz=p|-M1+Mz2[M1] .. p|-Mn+Mz2[Mn]
  {empty,K?1,K?2}={empty,K?}//may be too sophisticate?
  // check that we don't implement two interfaces with the same methods...

  

p|-interface{implements Tz1 AMs,AMs0} <+ interface?{implements Tz2 AMs} =
  interface {implements Tz AMs}
  Tz=minimize(p;Tz1 U Tz2)
  if interface?=interface then AMs0=empty

(mwt1, Mz)[mwt2]=mwt1 with mwt1.ms=mwt2.ms
(nc1, Mz)[nc2]=nc1 with nc1.C=nc2.C
Mz[M']=empty otherwise

p|-M+empty = M
p|-M1+M2 = p|-M2+M1
p|-mh e?+mh = mh e?
p|-C:LV1+C:LV2 = C:LV  where p.push(C)|-LV1<+LV2=LV


C = L, cls; Dz ==> C = L[C' := L'], cls; Dz:
		L = {interface? implements Pz MVz C' = EV Ms}
		EV not of form L
		C = L, cls; Dz | EV -->* L'

----------------------------------------
//current 42 code
C = L, cls; Dz ==> C = L[C' := CtxV[LV]], cls; Dz:
		L = {interface? implements Pz MVz C' = CtxV[L'] Ms}
    L' not of form LV
    C'=L', C = L, cls; Dz ==>* C'=LV  C = L, cls; Dz
    
    
//stricter equiv
C = L, cls; Dz ==> C = L[C' := CtxV[LV]], cls; Dz:
		L = {interface? implements Pz MVz C' = CtxV[L'] Ms}
    L' not of form LV
    C"=L', C = L, cls; Dz ==>* C"=LV  C = L, cls; Dz
    C" fresh
//solve my assertion
//try to make equiv stricter

//isaac1
C = L, cls; Dz ==> C = L[C' := CtxV[LV]], cls; Dz:
		L = {interface? implements Pz MVz C' = CtxV[L'] Ms}
    L' not of form LV
    CtxV not of form []
    C"=L', C = L, cls; Dz ==>* C"=LV  C = L, cls; Dz
    C" fresh
//isaac2
C = L, cls; Dz ==> C = L[C' := CtxV[LV]], cls; Dz:
		L = {interface? implements Pz MVz C' = L' Ms}
    L' not of form LV
    C'=L', C = L, cls; Dz ==>* C'=LV  C = L, cls; Dz
