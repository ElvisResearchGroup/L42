# Expresivity vs. Simplicity
The goal of our work was to use the L42's pre-existing work on type modifiers: we want to keep the additional restrictions the system imposes to be simple and easy to understand, as well as to minimise the number of many additional constructs and concepts. In particular we wanted to keep the number of different kinds of annotations, and their complexity to a minimum, thus for example (line 162, page 4) 'we needed to write a separate moveTo method, since we do not want to burden our language with extra constructs such as Spec#â€™s expose.' 

We believe that the restrictions we impose (over existing work) to be simple enough to follow that users can easily apply and understand them. In addition, by using the Box pattern and capsule-mutator methods it makes the deliniation of encapsulated state and mutations over them explicit and obvious to the programmer. We should have made this much more clear in the introduction.

Many of our restrictions can be (partially) overcome by writing code in a way that explicitly seperates code (see code example 1 below, which demonstrates this):

* The 'box' pattern can be used to temporarilly 'break' an invariant, or to perform batch operations without additional checking. See our code example bellow, in which the `BinaryTree.Box` class does not have an invariant, methods on this object can see an unsorted `BinaryTree.Box`, can perform multiple field updates, and even violate sortedness, without any invariant checks. However, a `BinaryTree` is guaranteed to be sorted, any method call on it that muates the contained `Box` will invoke an invariant check. Spec# instead allows (with `NoDefaultContract`) methods to explicitly annotated as to what objects need to have there invariants hold, and which invariants will be preserved, they also support an `expose` block that can be used to perform multiple operations with a single invariant check at the end. Such features can allivate the need for the box pattern, however we still found it was needed to handle invariants over cyclic object structures (such as the SafeMovable in GUI).
* Multiple uses of 'this' in a capsule mutator method can be simulated using a Box (in which case the `Box` will have a normal method that uses it's `this` multiple times), allternatively a normal method could use `this` to call capsule mutator methods multiple times. (see the code example). Such workarounds would be allievated by Spec#'s `expose` block.
* The restrictions on constructors can be eliavted by either using the `Box` pattern, or by creating a factory method that can freely use the object after it's constructor has executed. Compare this with Dafny's `new;` statement, this can be used inside a constructor to verify that the object has been properly constructed, and then allowing it to be freely used for the remainder of the constructor.

The code examples section below demonstrating the above patterns and comparing to prior work.

# Limitations
Our approach however does have two key limitations, 
* Our type modifiers apply to the whole ROG, there is currently no way of having part of an immutable/capsule/read ROG refer to externally mutatble things. This means that the contents of the nodes of a BinaryTree with an invariant, cannot be externally mutable, even if the invariant method never accesses them. This is in contrast with the work of Flanagan et. all. (citation 33 in our paper) where an invariant can read the `final` fields of objects, even if the other fields are externally mutable. See code example 2 below.
* We require the object with an invariant to 'dominate' the modification of all state it depends on, this prevents verifying classes with shared state. We mentioned this limitation in the appendix (page 41) were we mentioned two papers on Spec# that were able to verify such invariants. See Code example 3 below.

The code examples section below demonstrating the above patterns and comparing to prior work.

# Case Studies
Our paper we actually had 4 case studies:
* The `Hamster`: Section 1, Pages 2-4, this shows that our system can handle a simple example with eases, in comparison to Spec#.
* The `Gui`: Section 7, this shows that our system can handle real interactive programs, that our runtime cost is reasonable, in comparison to the easier to use approachs of D and Eiffel, whose runtime cost makes them effectively unusable here. In addition, we show the simplicity of annotation against Spec#
* The `Family`: Appendix C, pages 38-40, this was designed as a worst case for the performance of our approahc compared to visible state semantics. In it we only performed X% less invariant checks than D and Y% less then Eiffel.
* The Spec# Papers: here we looked at three papers on Spec#.
    *  We were able to encode the examples from their first paper 'Verification of Object-Oriented Programs with Invariants', in both L42 and the actualy Spec# implementation.
    *  We were not able to encode the other two papers 'Object Invariants in Dynamic Contexts' ''Friends Need a Bit More: Maintaining Invariants Over Shared State' since they covered verifying invariants over state that is *not* encapsulated.

We should probably enphasise those results of the last two case studies in the main paper!
The code for all the above case studies were also included in our artifact.

## Code Example 1
This example shows variouse patterns that can be used to workaround our systems restrictions.

```Java
class BinaryTree {
	private capsule BinaryTreeBox state;
	private BinaryTree() { 
		this.state = ...; 
		// Note that the type system will guurantee that the ROG of this.state (minus any immutable objects) is externally unique at this point.	
		// In Dafny, one could write `new;` statement here, and then use 'this' exactly as factory does.
	}
	static method mut BinaryTree factory(mut List<BinaryTree> collection) {
		mut BinaryTree bt = new BinaryTree(box)
		// bt's invariant is guaranteed to hold now
		
		// can use bt freely now like any other mut variable
		bt.foo(); // can call methods on it
		collection.add(bt); // can store the object somewhere else
	}
	
	read method Bool invariant() { 
		... // check that this.state is properly sorted
	}
	mut method Void addElement(imm Object elem) { 
	    this.state.addElement(elem); } // Capsule mutator method!
	    
	mut method addElements(read ImmList<Object> elems) { // where ImmList<T> is a list of imm T's
	    // Not a capsule mutator method! (dosn't directly access the state field)
		for (object e in elems) { 
			this.addElement(e); // Uses this multiple times???
			/* In Spec#, one could instead write something like this:
		       expose(this) { this.state.addElement(elem); }*/}}}

    class Box {
    	mut Node head
    	imm Int size;Friends Need a Bit More: Maintaining Invariants Over Shared State
    	mut method Void addElement(imm Object e) {
    	    this.head.unsort();  // can temporarilly break sortedness here
    	    this.head = ...;
    	    // only the trivial invariant will be 'checked' here (which is an elidable no-op)
    	    this.size += 1;
    	    // sortedness must be restored here however
    	}
    }
    
    class Node {
        ...
        mut method addElement(imm Object e) {
            // can arbitrarilly break
        }
    }
}
```

## Code Example 2: Partially encapsulated state
This example shows an invariant we cannot verify.
```Java
class DoublyLinkedList {
    class Node { 
        final mut Node prev; 
        final mut Node next; 
        mut Object elem; 
    }
    
    private mut Node head;  // Can't be capsule, since head.elem could refer to outside of `this'!
    mut method addFront(mut Object elem) {
        // would fail if this.head was capsule, since elem is not capsule or imm!
        this.head.prev = this.head.prev.next = new Node(this.head.prev, this.head, elem);
    }
    
    read method bool invariant() {
        // Error, head is not capsule!
        return this.head.prev.next == this.head;
        // The approach of Flanagan et. al. (which does not have type-modifiers) would allow this,
        // as accesing the head field is 'pure', and the 'next' is declared final.
    }
}
```

## Code Example 3: Unencapsulated Shared State
This code was taken from the Spec# paper `Friends Need a Bit More: Maintaining Invariants Over Shared State` (citation number 6 in our paper), their system is able to verify it, whereas ours is not.
```
class Master {
    UInt time = 0;
    mut method Void tick(UInt n); { this.time += n; }
}

class Clock {
    UInt t = 0;
    mut Master m; // We don't want this to be capsule in case others use it.
    read method Bool invariant() { 
        // error: m is niether imm nor capsule!
        return t <= this.m.time; 
    }
    Clock(Master mast) { this.m = mast; }
    mut method Void sync() {
        this.t = m.time;
    }
}
```

