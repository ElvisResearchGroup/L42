using System;
using System.Collections.Generic;
using Microsoft.Contracts;

class Person { 
	internal readonly String name;
	internal Int32 daysLived;
	internal readonly Int32 birthday; 
	internal Person(String n, Int32 a, Int32 b) { 
		this.name = n; 
		this.daysLived = a; 
		this.birthday = b;
	}

	internal void processDay(Int32 dayOfYear) { 
		this.daysLived += 1;
		if (this.birthday == dayOfYear) { 
			Console.WriteLine("Happy birthday " + name + "!"); } 
	}

	invariant this.name.Length != 0 && this.daysLived >= 0 && this.birthday >= 0 && this.birthday < 365; // Can't write this.name != "" since String.Equals isn't pure
}

class Family { 
	[Rep, ElementsRep] internal List<Person> parents;
	[Rep, ElementsRep] internal List<Person> children;
	internal void processDay(Int32 dayOfYear) {
		expose (this) {
			for (Int32 p = 0; p < this.parents.Count; p++) { // As you can guess, foreach (Person p in this.parents) dosn't work...
				this.parents[p].processDay(dayOfYear); }
			for (Int32 c = 0; c < this.children.Count; c++) { 
				this.children[c].processDay(dayOfYear); }
		}
	}

	internal Family([Captured] List<Person> parents, [Captured] List<Person> children) 
		requires Owner.Same(Owner.ElementProxy(parents), parents);
		requires Owner.Same(Owner.ElementProxy(children), children);
	{ 
		this.parents = parents; 
		this.children = children;
		base();
	}

	
	internal void addChild(Person child) {
		expose (this) { 
			Person newChild = new Person(child.name, child.daysLived, child.birthday);
			Owner.AssignSame(newChild, Owner.ElementProxy(this.children));
			this.children.Add(newChild); }
	}

	invariant forall {Int32 p in (0: this.parents.Count); // forall {Person p in this.parents; ...} dosn't work!
		forall {Int32 c in (0: this.children.Count); 
			p < this.parents.Count && // Spec# verifier needs this...
			this.parents[p].daysLived > this.children[c].daysLived }};
}

public class Program
{
	static void Main(string[] args) {
		List<Person> parents = new List<Person>{new Person("Bob", 11720, 40), new Person("Alice", 12497 87)};
		Owner.AssignSame(parents, Owner.ElementProxy(parents));
		List<Person> children = new List<Person>{};
		Owner.AssignSame(children, Owner.ElementProxy(children));
		Family fam = new Family(parents, children);

		for (Int32 day = 0; day < 365; day++) { // Run for 3 years
			fam.processDay(day);
		}
		for (Int32 day = 0; day < 365; day++) {
			fam.processDay(day);
			if (day == 45) {
				fam.addChild(new Person("Tim", 0, day)); }
		}
		for (Int32 day = 0; day < 365; day++) {
			fam.processDay(day);
			if (day == 340) {
				fam.addChild(new Person("Diana", 0, day)); }
		}

	}
}
