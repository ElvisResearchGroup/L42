// Annotations not counted
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Microsoft.Contracts;

internal sealed partial class Gui
{
	internal readonly string id;
	string JsEscape(string that) 
	{
		return that.Replace("\\", @"\\").Replace("\"", @"\""").Replace("\'", @"\'").Replace("\n", @"\n");
	}

	void set_(string that, string id)
	{
		string qid = "'" + JsEscape(id) + "'";
		string qText = "'" + JsEscape(that) + "'";
		string cmd = @"var oldElem = document.getElementById(" + qid + @"');
			oldElem.innerHTML = " + qText + @"';
			var parentElem = oldElem.parentNode;
			var innerElem; 
			while (innerElem = oldElem.firstChild) {
				parentElem.insertBefore(innerElem, oldElem); 
			}
			parentElem.removeChild(oldElem);";

        this.executeJs(cmd);
	}

	void open(string title, string body, int x, int y) { this.open(HtmlHeader() + "<title>" + title + "</title></head><body>" + body + "</body></html>", x, y); }

	string HtmlHeader() { return "<!DOCTYPE html><html><head><meta http-equiv='content-class' content='text/html; charset=UTF-8'>"; }

	void open(string html, int x, int y) 
	{
		//Debug("GuiPlugin.open(wName: {0}, html: {1}, x: {2}, y: {3})", this.id, html, x, y);
		//unimplemented since we are not rendering the GUI
	}

	string executeJs(string that) 
	{
		//Debug("GuiPlugin.executeJs(wName: {0}, command: {1})", this.id, that);
		//unimplemented since we are not rendering the GUI
		return "";
	}

	internal Gui(string id) { this.id = id; }
}
