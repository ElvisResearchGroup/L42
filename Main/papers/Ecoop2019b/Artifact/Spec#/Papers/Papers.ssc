using System;
using Microsoft.Contracts;

abstract class Reader { 
	public abstract int GetChar(); 
}

class ArrayReader: Reader {
	[Rep] private char[] src;
	private int n;
	invariant 0 <= n && n <= src.Length;
	public ArrayReader ([Captured] char[] source) { src = source; n = 0; }
	
	public override int GetChar() {
		int ch;
		if (n == src.Length) { 
			ch = -1; }
		else { 
			ch = src[n];
			n += 1; }
		return ch; }
}

class Lexer {
	[Rep] private Reader? rd;
	invariant rd != null;

	Lexer([Captured] Reader reader) { this.rd = reader; }
	
	public int GetToken() {
    	int t = 0;
    	int ch = 0;
    	while (ch != -1) {
			expose (this) { 
				assert rd != null;
				ch = rd.GetChar(); }
      		t += ch;
      	}
    	return t;
	}

  // page 45
  [NoDefaultContract] Reader relinquishReader() 
  	requires this.IsPeerConsistent; ensures result.IsPeerConsistent; {
		expose (this) {
			assert rd != null;
			return rd; }
	  	/* This dosn't work, as the above line is essentially equiavalent to:
	  		Reader res;  expose (this) { assert rd != null; res = rd; } return res;
	  	Which does not satisfiey the postcondition, since at the point of the return, res is not-consistant (since its owner, 'this', is valid) */ }
}

// page 45
abstract class FileList {
  protected string[] names;
  protected int selection;
  invariant 0 <= selection && selection < names.Length;
  public abstract bool isSelectionADirectory();
  public void resetSelection() { selection = 0; }

  protected FileList(string[] n, int s) { names = n; selection = s; }
}

class DirFileList: FileList {
  bool[] isDirectory;
  invariant isDirectory.Length == names.Length;
  public override bool isSelectionADirectory() {
	  return isDirectory[selection]; }

  protected DirFileList(string[] n, int s, bool[] id) { base(n, s); isDirectory = id; }
}