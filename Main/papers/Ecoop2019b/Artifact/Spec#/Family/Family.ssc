// 16 total annotations, 45 tokens
using System;
using System.Collections.Generic;
using Microsoft.Contracts;

class Person { 
	internal readonly string name;
	internal int daysLived;
	internal readonly int birthday; 
	internal Person(string n, int a, int b) { 
		name = n; 
		daysLived = a; 
		birthday = b;
	}

	internal void processDay(int dayOfYear) { 
		daysLived += 1;
		if (birthday == dayOfYear) { 
			Console.WriteLine("Happy birthday " + name + "!"); } 
	}

	// 1 annotation, 1 token
	invariant Debug.IncrementCounter() 
		&& name.Length != 0 && daysLived >= 0 && birthday >= 0 && birthday < 365; // Can't write name != "" since string.Equals isn't pure
}

class Family { 
	[Rep, ElementsRep] internal List<Person> parents; // 2 annotations, 2 tokens
	[Rep, ElementsRep] internal List<Person> children; // 2 annotations, 2 tokens
	internal void processDay(int dayOfYear) { // 1 annotation, 2 tokens
		expose (this) {
			for (int c = 0; c < children.Count; c++) {  // As you can guess, foreach (Person p in parents) dosn't work...
				children[c].processDay(dayOfYear); }
			for (int p = 0; p < parents.Count; p++) {
				parents[p].processDay(dayOfYear); }
		}
	}

	
	// 5 annotations, 17 tokens 
	internal Family([Captured] List<Person> ps, [Captured] List<Person> cs)
		requires Owner.Same(Owner.ElementProxy(ps), ps);
		requires Owner.Same(Owner.ElementProxy(cs), cs); 
	{ 
		parents = ps; 
		children = cs;
		base(); // This needs to be here, since Spec# thinks it could invalidate this functions precondition
	}

	
	internal void addChild(Person child) { // 2 annotations, 8 tokens
		expose (this) {
			Person newChild = new Person(child.name, child.daysLived, child.birthday);
			Owner.AssignSame(newChild, Owner.ElementProxy(children));
			children.Add(newChild); }
	}

	// 1 annotation, 1 token
	invariant Debug.IncrementCounter() &&
		forall {int p in (0: parents.Count); // forall {Person p in parents; ...} dosn't work!
			forall {int c in (0: children.Count); 
				p < parents.Count && // Spec# verifier needs  (Not counted)
				parents[p].daysLived > children[c].daysLived }};
}

public class Program
{
	static void Main(string[] args) { // 2 annotations, 12 tokens
		List<Person> parents = new List<Person>{new Person("Bob", 11720, 40), new Person("Alice", 12497, 87)};
		Owner.AssignSame(parents, Owner.ElementProxy(parents));
		List<Person> children = new List<Person>{};
		Owner.AssignSame(children, Owner.ElementProxy(children));
		Family fam = new Family(parents, children);

		for (int day = 0; day < 365; day++) { // Run for 3 years
			fam.processDay(day);
		}
		for (int day = 0; day < 365; day++) {
			fam.processDay(day);
			if (day == 45) {
				fam.addChild(new Person("Tim", 0, day)); }
		}
		for (int day = 0; day < 365; day++) {
			fam.processDay(day);
			if (day == 340) {
				fam.addChild(new Person("Diana", 0, day)); }
		}

		Debug.PrintCounter("Invariant");
	}
}
