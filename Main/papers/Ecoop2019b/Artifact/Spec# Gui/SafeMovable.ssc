// 29 annotations, 78+6 tokens, 501+146 characters
using System;
using Microsoft.Contracts;
using System.Collections.Generic;

// I need to define this class since the constructor for System.Object is not declared as 'Pure'
// This means that the static analayser thinks calls to 'base()' on a class deriving from Object could mutate memory.
// This particularlly means that after that call (which is implicitly the first thing in a constructor)
// A constructors precondition can no longer be assumed
internal class PureObject{[Pure] internal PureObject(){}} // 1 annotation, 1 + 5 tokens, 6 + 51 characters
internal sealed class Box: // 7 annotations, 20+1 tokens, 172+10 characters
	PureObject // +1 token, +10 characters
{
	internal readonly string id;
	internal int left, top;

	[Peer,ElementsPeer] internal readonly List<Gui.Widget> children;  // 2 annotations, 2 tokens, 19 characters

	// It is practically impossible in Spec# to make a verified class that derives from List<T>,
	// so rather than add the dispatch method using inheritence, I'm just going to put it here
	public bool dispatch(Gui.event_ that) // 1 annotation, 3 tokens, 17 characters
		modifies this.**;
	{
		for (int i = 0; i < this.children.Count; i++)
			if (this.children[i].dispatch(that)) return true;

		return false;
	}

	[Captured] internal Box(string id, List<Gui.Widget> children, int left, int top) // 4 annotations, 15 tokens, 136 characters
		requires Owner.Same(Owner.ElementProxy(children),children);
		ensures Owner.Same(this,children);
	{
		this.left = left;
		this.top = top;
		this.id = id;

		Owner.AssignSame(this,children);
		this.children = children;
	}
}

internal sealed class MoveAction: Gui.Action // 4 annotation, 11 token, 6 characters
{
	[Peer] readonly Box outer; // 1 annotation, 1 token, 6 characters
	readonly int leftDelta, topDelta;

	public void apply(Gui.event_ e)
	{
		Debug.Print("Button pressed on :" + this.outer.id);
		outer.left = outer.left + leftDelta;
		outer.top  = outer.top + topDelta;
	}

	[Captured] internal MoveAction(Box outer, int leftDelta, int topDelta) // 3 annotations, 10 tokens, 70 characters
		ensures Owner.Same(this,outer);
	{
		Owner.AssignSame(this,outer);
		this.outer = outer;
		this.leftDelta = leftDelta;
		this.topDelta = topDelta;
	}
}
internal sealed class SafeMovable: Gui.Widget // 17 annotations, 46 tokens, 317+85 characters
{
	[Rep] private readonly Box box; // 1 annotation, 1 token, 5 characters

	internal static Gui.Button Left(Box outer, int scale) // 1 annotation, 5 tokens, 33 characters
		ensures Owner.Same(result,outer);
	{
		return MakeButton(outer, scale, "_Left", 0, 13, 6, 6, -5, 0, "left.png");
	}
	internal static Gui.Button Right(Box outer, int scale) // 1 annotation, 5 tokens, 33 characters
		ensures Owner.Same(result,outer);
	{
		return MakeButton(outer, scale, "_Right", 26, 13, 6, 6, 5, 0, "right.png");
	}
	internal static Gui.Button Up(Box outer, int scale) // 1 annotation, 5 tokens, 33 characters
		ensures Owner.Same(result,outer);
	{
		return MakeButton(outer, scale, "_Up", 13, 0, 6, 6, 0, -5, "up.png");
	}
	internal static Gui.Button Down(Box outer, int scale) // 1 annotation, 5 tokens, 33 characters
		ensures Owner.Same(result,outer);
	{
		return MakeButton(outer, scale, "_Down", 13, 26, 6, 6, 0, 5, "down.png");
	}

	internal static Gui.Button MakeButton(Box outer, int scale, string suffix, int left, int top, int width, int height, int leftDelta, int topDelta, string imgName) // 1 annotation, 5 tokens, 33 characters
		ensures Owner.Same(result,outer);
	{
		return new Gui.Button(outer.id + suffix, left*scale, top*scale, width*scale, height*scale, new MoveAction(outer, leftDelta, topDelta), "examples/resources/" + imgName);
	}

	internal SafeMovable(string id, int left, int top, int width, int height, string colour, [Captured] List<Gui.Widget> children) // 3 annotations, 11 tokens, 90 characters
		modifies children.**;
		requires Owner.Same(Owner.ElementProxy(children),children);
	{
		Box box = new Box(id, children, left, top);

		// I have to put these in variables (and not pass them directly to box.children.Add) otherwise Boogie complains
		Gui.Button bl = Left(box, height/32);
		Gui.Button br = Right(box, height/32);
		Gui.Button bu = Up(box, height/32);
		Gui.Button bd = Down(box, height/32);

		box.children.Add(bl);
		box.children.Add(br);
		box.children.Add(bu);
		box.children.Add(bd);

		this(width, height, colour, box);
	}

	public string id { get { return this.box.id; } }

	// Note characters and annotations are relative to the prefered version:
	//     public List<Gui.Widget>children{get{return this.box.children;}} // +10 tokens, +63 characters
	// 3 annotations, 3+9 token, 13+57 characters
	[Pure]public int children_count()
	{
		return this.box.children.Count;
	}
	[Pure]public Gui.Widget?children(int i)
	{
		assume 0 <= i && i < this.box.children.Count; // Not counted
		return this.box.children[i];
	}

	public int left { get { return this.box.left; } }
	public int top { get { return this.box.top; } }

	public bool dispatch(Gui.event_ that) // 1 annotation, 2 tokens, 12 characters
	{
		expose(this) return this.box.dispatch(that);
	} // Verification error: Object invariant possibly does not hold

	// 1 annotation, 1 token, 9 characters
	invariant Debug.IncrementCounter("Invariant") && forall {int i in (0: this.box.children.Count);
		   Inside(this.box.children[i], this.width, this.height)
		&& forall {int j in (0: this.box.children.Count);
			// Without this I get a verification error: '
			//     all of System.Collections.Generic.List<Gui.Widget!>.this[int].get, unsatisfied precondition: index < Count'
			   i < this.box.children.Count
			&& (!this.box.children[i].id.Equals(this.box.children[j].id) ==> !Overlap(this.box.children[i], this.box.children[j]))
		}
	};

	// 1 annotation, 1 token, 6 characters
	[Pure] private static bool Overlap(Gui.Widget w1, Gui.Widget w2)
	{
		if (w1.left > w2.left + w2.width || w2.left > w1.left + w1.width)
			return false;
		if (w1.top > w2.top + w2.height || w2.top > w1.top + w1.height)
			return false;

		return true;
	}
	// Since this method is only called in the invariant,
	// Its significantly easier to just pass the width and height, as opposed to trying to make it an instance method.
	// Note: counts are relative to the preffered header of:
	//   private bool Inside(Gui.Widget that) // 6 tokens, 36 characters
	[Pure]private static bool Inside(Gui.Widget that,int width,int height) // 1 annotation, 1+5 tokens, 6+28 characters
	{
		if (that.left < 0) return false;
		if (that.left + that.width > width) return false;
		if (that.top < 0) return false;
		if (that.top + that.height > height) return false;
		return true;
	}

	internal SafeMovable(int width, int height, string colour, [Captured] Box box) // 1 annotation, 1 token, 11 characters
	{
		this.width = width;
		this.height = height;
		this.colour = colour;
		this.box = box;
	} // Verification error: Object invariant possibly does not hold

	// Spec# (unlike newer versions of C#) does not have auto implemented properties
	readonly int width, height;
	readonly string colour;

	int    Gui.Widget.width  { get { return this.width;  } }
	int    Gui.Widget.height { get { return this.height; } }
	string Gui.Widget.colour { get { return this.colour; } }
}
