-------------
Module R: defines R, R(Cs)=P, R(L)=L', dom(R), ran(R);
using auxiliary R_Cs(e)=e', R_Cs(T)=T', R_Cs(M)=M', R(Cs=L)=L'

R ::= (Cs->P)z // Redirection map
// A R is a methematical partial function from the set of Cs to the set of P

//______
//Define R.minimize(p)
//(Cs1->P1,...,Csn->Pn).minimize(p)=Cs1->p.minimize(P1), ..., Csn->p.minimize(Pn)

______
Define dom(R)
dom(Cs1->P1, ..., Csn->Pn) = Cs1, ..., Csn

______
Define ran(R)
dom(Cs1->P1, ..., Csn->Pn) = P1, ..., Pn
______
Define R(Cs)=P
R(Cs) = P
  Cs->P in R // Cs renamed using R
______
// Apply R to all references to the class-names in dom(L)
// Note: this only applies to references (i.e. P's), the nested classes themselves (if present) are not redirected
Define  R(L)=R(empty=L) // Note: the top-level 'class' has no name, so we use 'empty'

// Note: that Ls found found inside expressions (i.e. es) have no names, whereas the RHS of a nested-class definition do
// However even an unanamed L may be inside a named L, and we need this information to understand what a path refers to.
// As such we will just geneerate fresh names for unnamaed Ls, thus simplifying things by giving all L's a name.

// We could also just use R_Cs(C: L) and R_Cs(L) to apply R to nested classes and L expressions (respectivley),
// however this general R(Cs = L) function prevents duplication, and so the above two just forward to it
_________
// Apply R to class 'Cs' which has body 'L'
// We need to keep track of the Cs since paths are relative, in order to know if they refer to something in dom(R)
// we need to know where the is
AuxDefine R(Cs = L)=L'

// Simply apply R to the Pz and Mz
R(Cs = {interface? implements Pz Mz}) = {interface? implements R_Cs(Pz)\{Any} R_Cs(Mz)}

_________
// Apply R to a member M that was found in nested class Cs
AuxDefine R_Cs(M)=M'

// Case for methods, apply R to all types, paths and expressions
R_Cs(refine? mdf method T m(T1 x1,..,Tn xn) exception Pz e?) =
  refine? mdf method R_Cs(T) m(R_Cs(T1) x1,..,R_Cs(Tn) xn) exception R_Cs(Pz) R_Cs(e?)

// Case for nested classes, apply R to the library literal, giving it the appropriate name
R_Cs(C: L) = C: R(Cs.C = L) // Apply R to a nested class, which has name C and is in Cs
_________
// Apply R to an e, which was found in nested class Cs
AuxDefine R_Cs(e)=e'
R_Cs(L) = R(Cs.C = L), for fresh C
// TODO: Other kinds of expressions (just apply R_Cs to all e, L, T and P inside)

_________
AuxDefine R_Cs(T)=T'
// Apply R to a type, by just applying it to the mentioned path
R_Cs(mdf P) = mdf R_Cs(P)

_________
// Apply R to the path P that we found in Cs
// If a prefix of P refers to something in the domain of R, we will redirect it
// Otherwise we will leave it untouched
AuxDefine R_Cs(P)=P' // P found in Cs is renamed to P'

// We found P in Cs (of length k), so give it to R (which is defined relative to This0, but we are in This0.Cs)
// and from the result (since the start, This0, is actually Thisk from the point of view of This0.Cs,
// which is where we found the original P)
R_Cs(P) = R(Cs')[from Thisk]
  where Cs = C1...Ck
  P[from This0.CS] = This0.Cs'

otherwise
R(P in Cs) = P


------------------------
// Returns all the nested classes that are accessed from This0; assume Pz is minimized
Define Internals(Pz) = Csz
  Internals(P, Pz) = Internal(P), Internals(Pz)
  Internals(P, Pz) = Internals(Pz)
    otherwise
  Internals(empty) = empty

Internal(This0.Cs) = Cs

Externals(P, Pz) = P, Externals(Pz)
  where Internal(P) is undefined
Externals(P, Pz) = Externals(Pz)
  otherwise
Externals(empty) = empty
-----------------------------------
Define p[P.ms] = p[P](ms)
Define p[Cs.ms] = p[This0.Cs.ms]
Define mwt.P = mwt.mt.T.P
Define mwt.Pi = mwt.mt.Ts.i.P

Define mwt.Cs = Internal(mwt.mt.T.P)
Define mwt.Csi = Internal(mwt.mt.Ts.i.P)
Define L.Csz = Internals(L.Pz)
