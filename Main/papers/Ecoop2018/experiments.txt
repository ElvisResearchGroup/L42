TODO : change \name to L42
TODO : add citation to Classless Java where it is mentioned first time

We conducted two experiments i.e. case studies.

The first one was about the first part of the PointAlgebra example presented in this paper. Considering Sum, Subtraction, Multiplication and Division, there are 16 different possible combinations. We coded this example in three different styles: (a) Java (normal) (= 243 lines), (b) \name (= 57 lines), (c) Classless Java (= 226 lines).

We observed that in Java we had to duplicate 28 method bodies across the 16 classes. Of these, 11 method bodies were duplicated because Java doesnot support multiple inheritance and the remaining 17 bodies had to be duplicated to ensure that the right type is returned by the method. Those could be avoided if Java supported the `This` type [footnote here]. On the other hand, the solution in \name was much more compact since we could efficiently reuse traits. The solution in Classless Java was slightly smaller than the Java one, but was still quite longer than the \name solution because we still had to redefine the sum/sub/etc operations in each of the classes because of limited support of the `This` type.

This example is the best-case scenario for \name: this is an example where a maximum level of reuse is required since we considered the case where all the 16 permutations need to be materialized in the code.

The results (number of lines of the solution and etc) in each of the styles are presented below.

--------------------------------------------------------------------------------------------------
Language       ! Lines of code ! number of members ! number of toplevel concepts (classes or traits)
--------------------------------------------------------------------------------------------------
Java           !   243         ! 50                !      16
\name          !    57         ! 7                 !      21
Classless Java !   226         ! 34                !      16

The second experiment was conducted in regards to the {Point, CPoint, FCPoint} example presented building over the PointAlgebra example. This experiment was conducted in two different styles: (a) Java (normal), (b) \name.
On the opposite side of the former example, this represents a worst case scenario for \name against Java because we model just a single chain of reuse - easy to model with the single inheritance.

Like the previous experiment, we still found that the Java solution was longer (109 lines) than that in \name (50 lines). This is caused by the absence support for the `This` type, where the withers in each of the CPoint/FCpoint classes need to be repeated to make sure that the returned type will be correct.[2nd footnote here]

Complex patterns in Java allow to support the `This` type and the `This` type instantiation but they required a lot of setup code. We started experimenting using those patterns, but it soon became very clear that the resulting code of this approach would have been even larger; albeit without duplicated code.

The results for the second experiment are presented below.

--------------------------------------------------------------------------------------------------
Language       ! Lines of code ! number of members ! number of toplevel concepts (classes or traits)
--------------------------------------------------------------------------------------------------
Java           !  109          !    27             !         6
\name          !   50          !    24             !         8


