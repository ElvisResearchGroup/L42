-------------------------------
Reviewers express concern that while our work may simplify some corner cases, the most common cases may be penalized:
  >RA: Extending *the state of a class* when evolving the software seems tedious
  >RB: Emphasis on the this-leaking problem [..] potential negative impact [..]

This is not the case, even restricting to only 42μ features. We tried to show that in the Point/CPoint/FCPoint case study. 

Why this is the case:
  -In Java/C++/C# a class extending another class needs to define a constructor calling a super constructor.
   This typically has as many parameters as the full set of fields. Those parameters are then used at least one time in the body of the constructor.
  -In 42μ to add a field you need to define (abstract) the factory method and implement the "super" factory method by calling the new one.
The amount of code between 42 and Java is often about the same.
How class invariants and state encapsulation is established and preserved without explicit super constructors is a different issue, addressed in paper 13 of Ecoop right now.

In full 42, when ThisType instantiation is not needed, you can write

  ColoredPoint=Data<><Use[point]<><{method Color color()}

To create a colored point class using a point trait (that does not define a abstract state factory method) and some extra code (in this case, a color field).
Also note that widely used languages (Java, C++,C#) do NOT allow to extend the state of a class, but only to create a subclass with extended state. Moreover, ThisType instantiation is not allowed. This causes many bugs, when a programmer "thinks" that "new C()" inside of class "C" would create an instance of the "current class". Then "class D extends C" still creates instances of "C".

-------------------------------
Concepts in our models are a different but not worst:
  >RB: The design [..] allows no class extensions [thus] it makes it difficult [..] to build class hierarchies,
We allows Interface hierarchies. We believe that this will encourage better programming patterns: users have a more natural understanding that method calls on interface receivers are allowed to perform arbitrary operations.

  >RC: The programmer would need to keep an extra idea in their heads in 42μ: the trait set along with the class Set

This is not the case. The USER of Set needs to keep in mind only the class Set.
The REUSER of set needs to keep in mind only the trait set.
Those are quite different roles, so they may very well being handled by different programmers.

Our logic model support traits, interfaces and final classes.
Java is more complicated, supporting interfaces, classes, abstract classes and final classes.
Moreover, fields and constructors are separated concepts too.

-------------------------------
Reviewers express concern that our simplicity metrics are oversimplified:
  >RA: Only the size of the different solutions is considered
  >RB: using lines of code for measurement of the quality of a programming language is not ideal.

We consider not only lines of code but also number of methods and classes.
Our particular examples are focused on code reuse, thus method implementations are all trivial.
We believe that in this particular context the number of methods/classes is a good indicator.

-------------------------------
RC seams very concerned: is this solution actually good enough to overcome the intrinsic disadvantage in separing use and reuse?
  >RC: languages where inheritance is not subtyping [] tend to have more complex object models.

This observation clarify the (otherwise contradictory statements)
  >RC + The 42μ OO model looks reasonable: separating use from reuse is a solid design choice
  >RC - The paper does not make a strong argument why inheritance should (still) not be subtyping -- is it really a big improvement on e.g. Java?
  >RC There is not universal agreement that "inheritance is not subtyping";
  (we interpret it as: there is no agreement that the benefit are worth the cost)

We believe that our solution do not have any real disadvantage over languages coupling subtyping and subclassing. As shown while solving the this leaking problem, 42 just requires to be explicit when subtyping and subclassing are both supposed to happen, by declaring an extra interface. Then the USERS can rely on the interface name and mostly forgot about the class implementing it.

This programming pattern is more and more common in Java: For example 'Path' and all kinds of 'Stream' are interfaces, and most of the time we work with 'List' without creating new instances directly. We believe 42 encourages a better code structure also for those 98% cases where the ThisType and ThisType instantiation is not required.

We emphasize that our object model is very simple since our flattened language is just a language of interfaces and final classes. Novice programmers may start by learning that. They could learn to use traits later, and to define their own traits even later.

  >RC: it is very natural if you do not take types in to account.
Our semantic model does not take types into account.

  >RC: - 42μ is not all that different from the cited TR/PT/DJ
The way of managing state is completely novel. The formalization is much much simpler than TR/PT/DJ.
This new approach is a core component in making separating use/reuse transparent.

  >RC: it is more a synthesis and it does appear to be a promising one.

We think that a "promising synthesis" of 3 independent lines of research should deserve more than a C.