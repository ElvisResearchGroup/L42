----------- Overall evaluation -----------
SCORE: -2 (strong reject)
----- TEXT:
The paper proposes strict runtime invariant checking. Strict, in the sense
 that invariants must hold while the object is reachable from the objects
involved in current execution. The approach
uses reference capabilities and leverages the heap topology (much as owners-as-modifiers do),
and imposes restrictions on which references may modify other objects.

The paper contains a formal model of their approach, with an operational semantics, an informal
description of the  imposed restrictions, and present a lemma stating soundness.

The paper also contains a case study comparing the number of invariant checks needed
by their approach with that needed by C-sharp, Eiffel, and D (their approach requires
fewer checks). They also compare the annotation  burden imposed by their approach
and that of C-sharp (they require fewer annotations).

 There are more case studies in the appendix, several of which
cannot be expressed in the proposed approach.


All previous works I know of, propose that objects' invariants should hold upon entry and
exit from a method call, but may be broken during method execution.
//## No, in Pack-Unpack Packed objects are not broken
//## thus our approach is very related with pack/unpack. Also, we would like to note that our work soundly support catching exceptions and IO. This does not happen in other Pack/Unpack.
--------
 This is in line with loop
invariants (they hold each time we enter a loop), and with monitors (they hold each time we
enter the monitor). In contrast to this,  the authors propose that invariants should be strict,
that is, all objects which are in the ROG (reachable object graph) of the objects involved
in the current execution should be valid (their invariant should hold).
As this is often difficult to adhere to, the authors also follow a pattern which puts
an intermediate object (a Box) between the object which has the invariant and the state which
affects that invariant.

The problem with invariants is that field update in some object might invalidate the invariant of
Several other objects, o1, … on. To tackle this, the authors propose several restrictions on programs
(eg the variable “this” may not appear more than once in some methods), and also
Require  that invariants should only depend on
immutable fields or capsule fields.
I believe that capsule fields offer external uniqueness (as in Wrigstad&Clarke).
//## no but is not a battle worth fighting 
As a result, several known patterns from the literature on invariants (eg doubly linked list of nodes
whose invariants depend on each other, subject/observer, the Composite pattern, etc) cannot be expressed
with the proposed approach. The authors argue that this is not an issue, because it can be tackled
through the introduction if further Box-es.

I am concerned that the protocol requires the introduction of more
objects into the program.
//## sure, we can express most semantic but we need to do it in specific ways
The fact that in some cases their approach requires fewer annotations and fewer checks
than requires in D or Eiffel does not seem decisive to me: A simpler system can do fewer things
(eg cannot deal with cycles), more succinctly and more efficiently. The question is whether the
system is powerful enough to be useful.
//## D/E are not usable (for example) in the case of gui, or any form of composite pattern where the invariant dependes on calling methods on sub nodes in the tree
//## HERE IN THE FOLLOWING IS THE BIG DEAL
I think that the restriction on cycles is too severe; cycles appear a lot in code. But I may be
wrong; we just ; just looking at 5 examples is not sufficient to convince the
readers either way. Perhaps a library (eg Rust's which avoids cycles) would provide useful case studies.
I believe that the GUI case study as offered in section 6 does not really classify as a Composite
(following the definition of the Composite pattern from the invariants literature (as in [59], eg)
Namely, in the Composite pattern we have essentially a tree, and 1) the invariant of a Node
Is the conjunction of the invariant of all its children separately and a property depending on the
state of the children as well of the Node itself, 2) we allow pointers to any Node which may
be used to modify the state of that  Node, and need to then walk up the tree and update the
parents' state so as to re-instate the invariant.  In your GUI example, and I think in your approach,
you have a flat invariant structure: an object's update may break the invariant of only one
other object. And I think you cannot support a version of the GUI where I would have a
pointer to a Widget, update its position, and then walk up to the SafeMoveable and,
in turn, update the Moveable's co-ordinates so as to re-establish the SafeMoveable's
invariant.
//## Such variation of the GUI is possible.
A general approach to a graph of objects with individual invariants in the style of [59] (check) is present in the appendix C.
The main idea is that the top level invariant on the graph just calls a subInvariant on the nodes.
In such example, we allows for a graph of Nodes and we allows for Node pointers to be directly referenced and (using the Transformer pattern) modified.
The mutation of a node can in turn modify all other reachable nodes, clearly supporting the design suggested by Rev1.
Applying this pattern to the GUI to implement the variation suggested by the rev we would...


----------- Reviewer's confidence -----------
SCORE: 3 ((expert))
----------- Questions for author response -----------
1. Does the fact that you are enforcing invariants dynamically (rather than statically thought theorem provers) make any difference for the design of the invariant protocol?
//## Yes, thanks to using normal code to verify invariants, we do not need to
annotate all methods with pre/post condition, but we can refer to the encoded semantic of those methods, thus making our approach more modular, allowing annotaitons only in the fiew points where the user want them enforced.
2. Where is the exact definition of ROG? Is that the transitive closure of reachability through fields, or is it something more involved than that?
//## It is the simple transtive closure throght fields.


----------------------- REVIEW 2 ---------------------
SUBMISSION: 15
TITLE: Using Capabilities for Strict Runtime Invariant Checking
AUTHORS: Isaac Oscar Gariano, Marco Servetto and Alex Potanin

----------- Overall evaluation -----------
SCORE: 1 (weak accept)
----- TEXT:
The paper presents an approach for sound runtime verification of representation invariants (predicates on the state of the object and its reachable graphs). The central aspect of the paper is the proposal of strict invariance protocol, which enforces the invariants to be correct at all times during the execution. This is in contrast to the current approaches, which require the invariants to hold only at the end of some operations. The approach is based on reference/object capabilities, well-known type system features for statically reasoning about the mutability and aliasing properties of objects. The paper presents several patterns and formalizes the language extension for runtime checking with reference capabilities (mutable, immutable, read-only, encapsulated). The paper presents a detailed case study of


Pros:

+ The paper makes a clear case for the strict invariant protocol.

+ Detailed presentation of the patterns and the interaction with reference capabilities

+ Well-written

Cons:

- The organization of the results should be improved

- The tradeoff between verifiability vs. performance vs. programmability is not clearly discussed or evaluated.


The paper makes a clear case for the strict invariant protocol. While the proposal to keep the invariants satisfied at all points during the execution is in some way extreme, the authors generally make a good case for why to adopt this model to simplify runtime verification.

The invariant methods in the proposed protocol can access only immutable and encapsulated fields. Supporting this protocol may require significant re-engineering of the code. This naturally brings the questions like: how much effort does it put on the developer; what are the limitations of the program transformation; is there a way to automate the re-factoring process? While the case study aims to present this on a particular example, more discussion would help in showing the approach is practical.

The proposed design brings up a more general question on the tradeoff between verifiability vs. performance vs. programmability. The case study shows some of the verifiability vs. programmability (e.g., by discussing the encoding of GUI in Spec# and the number of tokens), but a more in-depth discussion would be welcome. The performance aspect has not been discussed in detail: (1) how much does a restructuring of the code impact its run time, and (2) how does the new protocol impact the run-time monitoring? It seems the first time may increase, but the hope is that the second time would decrease compared to the alternatives. The number of times the invariant() was called for D/Eiffel/L42 that the paper reported may serve as a good proxy, but it would be good to discuss this point more deliberately.

The paper is mostly self-contained: the main definitions and background are incorporated in the main text, making the paper accessible to a broader audience. However, sometimes, the paper jumps between the general concepts it introduces and the implementation in L42. A way to resolve is to either provide a background of L42 or defer the discussion of the implementation details until later (e.g., in a dedicated section).

However, the organization of the paper can be improved:

- Section 5 hints that the assumptions on the type system exist, and point the reader to Appendix A. These assumptions should be in the main paper. Also, it would be good if you could discuss the intuition behind the proof of Theorem 1 (also in the same Appendix)

- The evaluation is only a single case study, with the pointer to the Appendix B. While it is ok to leave out the details of these case studies in the interest of space, the main paper should outline these studies and the main findings.

- The paper should discuss the quantitative properties of these benchmarks (also in the Appendix, in-text), as a table in the main paper.

- Related work occupies too much space. While it is informative, most of it can be summarized in less space (to make the space for the items above)

Detailed comments:

- The formatting of the MCALL rule looks off.

- The TRY ENTER rule probably missing one \sigma in the term \sigma | try^{\sigma} ... 

- It may be useful to describe how the 'error' token gets set in the "Reduction Rules" section.

- \Rightarrow^{+} operator was not defined but used for the definition of valid (pg 17). Similarly, for \rightarrow^{+}.

- The formatting of the paragraphs in Section "Statement of Soundness" looks off: reduction, valid, trusted, etc. should be proper definitions.
----------- Reviewer's confidence -----------
SCORE: 2 ((knowledgeable))


----------------------- REVIEW 3 ---------------------
SUBMISSION: 15
TITLE: Using Capabilities for Strict Runtime Invariant Checking
AUTHORS: Isaac Oscar Gariano, Marco Servetto and Alex Potanin

----------- Overall evaluation -----------
SCORE: 2 (strong accept)
----- TEXT:
The authors propose a notion of class invariants for object-oriented programs.
They show how to enforce these invariants using latest programming language technology.
Experiments demonstrate that invariants can be added and enforced at low overhead.
Let me elaborate on the points.

The authors propose to specify class invariants as a method within the class.
The method has to be deterministic and can only rely on immutable and encapsulated state.
It returns a Boolean, and the invariant is declared to hold as long as the method returns true.
To be precise, the invariant is required to hold only when the object is involved in execution, meaning the object is reachable from the currently executed method.
Mutation thus requires a level of indirection, called the box pattern, where the invariant is specified in an outer class and the fields are kept in an inner class.
The fields can then be updated in a way that may temporarily break the invariant, as long as the outer class remains unreachable from the inner class.
The benefit of this strong form of isolation is that the invariant is guaranteed to hold in an open world, no context can observe the invariant broken.
Experiments show that the annotation overhead for introducing invariants is small. 

The main contribution is a technique to enforce the invariants at runtime. 
It combines type checking and runtime verification. 
As for the types, the authors propose to use reference capabilities as supported by recent programming languages.
These capabilities make sure the invariant method only depends on immutable and encapsulated state, as required above.
An imm(utable) capability guarantees the corresponding object cannot be altered.
A capsule reference is the only way to reach the corresponding object.
With this, it remains to runtime check the invariant (invoke the invariant method) in the following moments: when an object is created, when a field has changed, and when a capsule reference is updated.
As the experiments show, the resulting monitoring overhead is small.

The third contribution is a strong experimental evaluation.
The authors have implemented their invariants together with the enforcement mechanism on top of the recent language L42.
They conduct a number of case studies, both in their system and in related languages like Spec#, D, Eiffel.
The new approach seems to be advantageous in terms of specification and enforcement overhead.
It is less flexible than related techniques, but comes with stronger soundness guarantees.

I enjoyed reading the paper, and I learned a lot.
The idea of using capabilities to restrict invariants to local state is great.
Introducing the one level of indirection (proper boxing) may ultimately become a compiler task.
The contribution of bringing this from paper to a full programming language and carefully evaluating it on realistic case studies and against competitors is also convincing.
The paper is very competent on the programming language side: the authors do a good job in justifying design decision, making explicit their assumptions (about available commands and semantics), and explaining differences with related approaches.
Also the theoretical development is good, but short to a point that it becomes hard to follow.

The paper looks like an accept to me.
----------- Reviewer's confidence -----------
SCORE: 1 ((no familiarity))

Hi Alex.
Here is our first attempt to a response.
Please, read it and tell us what you think.
Marco and Isaac

---------------------------------------------------------
Response:
--------------------------------------------------
We would like to thank all the reviewers for their insightful reviews. We will reorganize the content according to the suggestions of REV2 and REV3.

Gopinathan et al. argue the importance of ensuring invariants over certain stretches of time, not just at the specific moment the invariant is checked.
To the best of our knowledge we are the only approach soundly enforcing this in a language allowing I/O and the catching of unchecked exceptions, without requiring invariants to be written in a separate specification language. Thus, when these features are required, we are the only usable approach.

We show that our approach is also practical by comparing it with other established approaches with different goals:
-Our annotation burden is less then Spec# (which also aims to enforce invariants over stretches of time, but it allows for unsound use of I/O and unchecked exceptions).
-Our performance can be orders of magnitude better than D and Eiffel (they have minimal annotation burden but only enforce invariants at specific points in time).
-----------------------
> Rev3 Question1:
As with Spec#, the only difference between dynamically and statically verifying the invariant would be that points where a dynamic check would be performed would instead be points were the theorem prover must statically verify the invariant holds.
For our protocol to work in practice however, we would likely need to write pre/post conditions on most methods in order for the theorem prover to determine if the invariant method would return true.

> Rev3 Question2:
We use the conventional interpretation, that an object's ROG includes itself and the ROGs of all it's fields, formally:
  rog(sigma, l) = {l} U rog(sigma, l1) U ... U rog(sigma, ln)
where sigma(l) = C{l1 ... ln}

>I believe that the GUI case study as offered in section 6 does not really classify as a Composite ...
>In your GUI example, and I think in your approach, you have a flat invariant structure: an object's update may break the invariant of only one other object.

In the GUI you can break the invariant of many of the outer widgets by updating a single widget and pushing it outside their boundaries.
We will improve our explanation to make this more clear.

Note: SaveMovable's invariant does not manually check the invariants of its children, but our invariant protocol guarantees that they will hold.

>And I think you cannot support a version of the GUI where I would have a pointer to a Widget, update its position, and then walk up to the SafeMoveable and, in turn, update the Moveable's coordinates so as to re-establish the SafeMoveable's invariant.

The variation proposed by Rev1 is possible.
We show and discuss the code for such variation at the end of the response.
The given code is an adaptation of our solution to represent graphs with individual invariants on their nodes presented in Appendix C (page 47); such an approach could also be used for doubly linked lists and many other kinds of data structures.
The main idea is that the top level invariant on the graph just calls a subInvariant on the nodes.
In such an example, we allow for a graph of Nodes and also allows Node
pointers to be directly referenced and (using the Transformer pattern) modified.
The mutation of a node can in turn modify all other reachable nodes, clearly supporting the kind of expressive power suggested by Rev1.


>I think that the restriction on cycles is too severe;
An object with an invariant can not be reachable from any of its imm or capsule fields. However, cycles are allowed using mut fields. Thus, the box pattern allows for an object with invariant to express a constraint over a contained group of objects with internal cycles; as we show in the GUI (pg 18: Box contains MoveAction, MoveAction contains Box). Also the alternative GUI example shown at then of this response contains cyclic objects.


>All previous works I know of, propose that objects' invariants should hold upon entry and exit from a method call, but may be broken during method execution.

This is not always the case. As discussed in our related work section on "Invariant Protocols" (Page 22), there are many variations in the
literature, in particular the various versions of the Pack-Unpack/Boogie methodology requires the invariant to hold for all Packed objects, regardless of what methods are active.


>A simpler system can do fewer things, more succinctly and more efficiently. The question is whether the system is powerful enough to be useful.

Depending on the kind of application, some systems may be unusable.
Our GUI example shows that D/Eiffel are unusable if an invariant evaluation must call methods of sub-objects whose invariants behave similarly. The checks grow exponentially with respect to the depth of such objects. Such a dire slow down makes the system unusable, even if only used for testing. In particular, running the GUI code in D/Eiffel mode took multiple days.

In addition our approach is the only one we are aware of that soundly allows for non-deterministic I/O and catching exceptions, making other approaches unusable when this is required. We discuss these limitations of other systems in our related work section (particularly pages 24 & 25), for example Dafny does not support input or exceptions, and Spec# is unsound when using I/O or catching unchecked exceptions.
Runtime verification systems like D and Eiffel do not ensure that invariants are deterministic, in particular at no point in the code can one be sure that an invariant will hold if manually checked, only that the runtime inserted checks had passed. Refer to page 54, where we quoted Gopinathan et al.'s discussion of issues caused by visible state semantics being too weak.


> I believe that capsule fields offer external uniqueness (as in Wrigstad&Clarke).

Our capsule definition subsumes the definition of external uniqueness (no incoming references are allowed to point at the capsule object from the outside of the capsule) but also extends it further by prohibiting any references from any objects contained in the capsule to any mutable outside object - in this sense, capsules are the closest to "Islands" or full alias encapsulation approaches
------------------------------------------------------
Modified GUI code:
The main idea is to define an interface HasSubInvariant, to denote widgets with a subInvariant method. Then, WidgetWithInvariant is a decorator over a Widget; and its invariant method checks the subInvariant of each widget in its ROG.

We define SafeMovable as a Widget with a subInvariant, since subInvariant methods don't have the restrictions of invariant methods, it allows SafeMovable to be significantly simpler than the version shown in the paper.

In this way, the method WidgetWithInvariant.dispatch is the only capsule mutator. Thus the only invariant checks will be at the end of WidgetWithInvariant's constructor and dispatch methods.

Thus only when a WidgetWithInvariant itself is directly created or mutated is the invariant ensured to hold. Importantly, this allows the graph of widgets to be cyclic and for each to freely mutate each
other, even if such mutations (temporarily) violate their subInvariant's.
Thus, as the reviewer suggestion requires, a widget can access its parent, whose subInvariant may not hold; in order to reestablish it.
 However, as guaranteed by our system, the outer WidgetWithInvariant will not be reachable during such operations, and every time the WidgetWithInvariant is reachable, then all subInvariants also holds.

interface HasSubInvariant{read method Bool subInvariant();}

class SafeMovable implements Widget,HasSubInvariant {
  Int width = 300; Int height = 300;
  Int left; Int top;    // Here we do not use a box, thus all the state
  mut Widgets c;  // is in SafeMovable.
  mut Widget parent;//We add a parent field
  @Override read method Int left(){return this.left;}
  @Override read method Int top(){return this.top;}
  @Override read method Int width(){return this.width;}
  @Override read method Int height(){return this.height;}
  @Override read method read Widgets children(){return this.c;}
  @Override mut method Void dispatch(Event e){
    for(mut Widget w :this.c){w.dispatch(e);}
    }
  @Override read method Bool subInvariant(){/*same code as in our
original GUI*/}
  SafeMovable(mut Widget parent,mut Widgets c){
    this.c=c;          //SafeMovable no longer has an invariant,
   this.left=5;       //so we impose no restrictions on its constructor
    this.top=5;
    this.parent=parent;
    c.add(new Button(0,0,10,10,new MoveAction(this));
    }
  }
class MoveAction implements Action{
  mut SafeMovable o;
  MoveAction(mut SafeMovable o){this.o=o;}
  mut method Void process(Event e){
    this.o.left+=1;
    Widget p = this.o.parent;
    ... // mutate p to reestablish its subInvariant
  }
}
class WidgetWithInvariant implements Widget{
  capsule Widget w;
  @Override read method Int left(){return this.w.left;}
  @Override read method Int top(){return this.w.top;}
  @Override read method Int width(){return this.w.width;}
  @Override read method Int height(){return this.w.height;}
  @Override read method read Widgets children(){return this.w.c;}
  @Override mut method Void dispatch(Event e){w.dispatch(e);}
  @Override read method Bool invariant(){
    return this.wInvariant(w);
  }
  read method Bool wInvariant(read Widget w){
    for(read Widget wi:w.children()){       // Check that the
subInvariant of all
      if(!this.wInvariant(wi)){return false;} // of w's descendants holds
    }
    if(!(w instanceof HasSubInvariant)){return true;}
    HasSubInvariant si=(HasSubInvariant)w;
    return si.subInvariant();
  }
  WidgetWithInvariant(capsule Widget w){this.w=w;}
}
... // main expression
//#$ is a capability operation making a Gui object
mut Widget top=new WidgetWithInvariant(new SafeMovable(...))
Gui.#$().display(top);

We believe this code example captures the behavior that reviewer 1 suggested; in this example there is no need to expose Widget references outside of the Gui.
However, this is not prevented: to expose "read" references to (sub-)widgets you can just call top.children().