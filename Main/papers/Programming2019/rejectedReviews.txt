 
Review #13A
===========================================================================

Overall merit
-------------
D. Reject

Reviewer expertise
------------------
Y. I am knowledgeable in this area, but not an expert

Paper summary
-------------
This paper proposes an approach for the dynamic checking of class invariants for Java-like languages, based on a variety of existing techniques (type-based mutability control, object capabilities, and strong exception safety). Invariants are written in the language itself, and under certain restrictions can be soundly enforced at runtime. This result is motivated informally and then proved formally for a core calculus, based on the meta-theory of the ingredient techniques. A prototype implementation exists, but no evaluation or evidence of practical usefulness is offered.

Points For and Against
----------------------
The paper does a reasonable job of explaining why sound invariant checking is difficult. The prospect of being able to implement invariants in the language itself (as opposed to a specification language) is appealing, and the fact that this can be achieved by simply combining existing techniques is neat.

However, there are two major flaws to this paper.

Firstly, the restrictions imposed on the language are very severe. Strong exception safety in particular seems very restrictive, and the restrictions on constructors sound difficult to work with in practice. In particular, no allowance is made for constructors temporarily breaking invariants, which sounds like it would be quite common in real-world code. The use of capability objects is only alluded to, but sounds like another serious restriction.

Even with all these constraints, soundness is only proved (to some extent, see below) for encapsulated classes. The paper claims that this covers "the most common categories of objects", but no evidence is offered for this claim, and I personally doubt it is true. Similarly, while the runtime verification is described as "ultra-lightweight", no evaluation is shown to back this up. In fact, if I understand correctly the invariant method needs to be called after each write to a field, which sounds anything but lightweight.

Secondly, the formal development is confusing and sloppily done, and its practical applicability is unclear. Part of the problem is that the formalisation is based on, and assumes results of, the formalisation of the ingredient techniques, which is reasonable enough. However, the interface between existing formalisations and new material is not delineated clearly enough, and the exposition is hard to follow in places, so I eventually gave up.

The formalisation also introduces yet more restrictions: for example, invariant methods are now no longer allowed to call methods on their receiver, which seems extremely awkward. Finally, one crucial property the soundness proof relies on is that methods accessing capsule fields can only mention `this` once; in the core calculus this is easy to ensure, but it is not easy to see how this would be achieved at the source level. After all, one could simply assign `self = this` and then use `self` multiple times.

All these points leave me very unconvinced of the value of the formalisation. Given my doubts about the practical usefulness of the approach, I do not think this paper is ready for publication at this point.

Comments for author
-------------------
I would suggest that you look into performing an empirical evaluation to substantiate your claims that most classes occurring in the wild are encapsulated, and that the runtime overhead induced by invariant checking is low.

Alternatively (or in addition), it would probably be worth your while trying to work on strengthening the soundness proof to rely on less restrictive properties. I would particularly like to see more general invariant methods and fewer restrictions on constructors.


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #13B
===========================================================================

Overall merit
-------------
C. Weak reject

Reviewer expertise
------------------
X. I am an expert in this area

Paper summary
-------------
The paper tackles the problem of runtime verification of invariants. It proposes SI, which ensures that any object currently
executing a method satisfied its invariant upon method entry. Moreover, any object detected to be "broken" (not to satisfy
its invariant) is removed. The SIC methodology requires that for any object o. all objects which are in the footprint on
the invariant are either encapsulated in $o$ (using the capsule mechanism) or are immutable.

The paper presents the ideas by showing several examples and posing challenges, and then showing SIC's answers to
these challenges. It then presents the ideas more formally and proves soundness.

Points For and Against
----------------------
(+) The paper is written with enthusiasm and is beautifully presented. 
(+) There are many examples
(+) There is a formal model, and I trust that the formal model does indeed prove soundness
of the SIC approach,
(-) However, I believe that the solutions proposed ignore a very relevant amount of earlier work from the literature on static verification, and do not consider important cases uncovered in that research strand. 
(-) No real evaluation on anything except the examples in the paper - at least this is my impression, while the abstract is over-claiming: eg "SIC is sufficient to handle the most common categories of objects"
(-) Several grammar errors - minor point

Comments for author
-------------------
More details

*solutions proposed ignore a very relevant amount of earlier work from the literature on static verification*

Even though dynamic and static verification differ, they both have to tackle the problem of deciding at which time should an object's invariant be established (either statically or dynamically). The rich research in static verification have uncovered many interesting examples of very common programming patterns which expose problems that
need to be tackled in static as well as in dynamic verification.
In particular, very early on it was recognized that an object's invariant does not hold all the time - in contrast to the first sentence in 3.1.

The idea of using encapsulation (ownership) was proposed by Peter Mueller and Arnd Peotzsch Heffter,  eg Müller, P.: Modular Specification and Verification of Object-Oriented Programs, 2002. In this thesis, Mueller proposes that invariants impose proof obligations upon method exit (as also in this paper), requires that an  object's invariants only depend on objects it owns (which I think compares to your use of encapsulated state). 
I think that when you introduce the capsules and encapsulated state you need to compare with these  pre-existing ideas.

However, very soon in was discovered that such an approach is far too restrictive because of re-entrancy,  and because in fact objects may share their ROG (your interconnected objects). Several solutions have been  proposed, eg   in Leino, K. R. M. and Müller, P.: Object Invariants in Dynamic Contexts (ECOOP), 2004.  In this paper the authors also study the problems which arise when a method called on object $o$ needs to break the invariants of another object $o'$ -- SIC does not offer a solution to this.

A survey of several solutions to this problem, as well as a framework for modelling many such solutions, can be found in S. Drossopoulou and A. Francalanza and  P. Müller and A. J. Summers: A Unified Framework for Verification Techniques for Object Invariants ECOOP 2008. 

Finally, ownership-based verification has been implemented in Spec#, M. Barnett and M. Fähndrich and K. R. M. Leino and P. Müller and W. Schulte and H. Venter: Specification and Verification: The Spec# Experience. Communications of the ACM, 2011.

 There is huge amount of further literature on the subject. The examples they study are very common programming patterns.

Note also that Matthew Parkinson argued that class invariants are the wrong foundation: M Parkinson:  Class Invariants: The end of the road? FTfJP 2008.

*The points*
- I am unclear why it is a good idea to garbage collect a broken object. For example, what happens to the cargo of an overloaded boat?
- I am unclear what SIP proposes as a solution to the possibility that Items "cheats" and returns the wrong weight.
- I think that your restriction on constructors is far too severe. How will you construct any cyclic structure?


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #13C
===========================================================================

Overall merit
-------------
C. Weak reject

Reviewer expertise
------------------
Y. I am knowledgeable in this area, but not an expert

Paper summary
-------------
This paper investigates the problem of sound dynamic checking of
object invariants.  It argues that there are various reasons that
once-established object invariants are invalidated and discuss
required linguistic supports to prevent invalidation of invariants,
such as immutability and strong exception safety.  A formal statement
of what it means for a language supports sound invariant checking is
given by using a formal OO language and its operational semantics.
Proofs of some required properties are also shown under the assumption
about correctness properties of the type system for the language.

Points For and Against
----------------------
Points for:

- The paper raises an interesting question.

- The proposed solution seems reasonable -- at least, it shows how
  complex the problem is.

Points against:

- Writing is not clear enough.

- Formal modeling is not complete and correctness of the solution is
  far from trivial.

Comments for author
-------------------
First of all, English should be improved.  There are a lot of
grammatical errors like missing periods, missing articles, and missing
-s for third-person singular verbs (in the present tense).

It's not clear how issues raised by the motivating example are
addressed by SIC.  The author(s) seem to say that cargo.weight() may
return a false value to its client namely Boat so a boat may sink even
if checking of class invarint is successful.  It means that the method
weight doesn't necessarily reflect the item's *real* weight (whatever
it is).  But, doesn't it just mean that the invariant condition has
nothing to do with whether a boat will sink or not?  Another such
example is weight() that always return 0 regardless of the real weight
of an item.  Does SIC address such an extreme case?  If so, I have no
idea how SIC does it from the writing.  If it doesn't, the argument is
pretty misleading.

In the next paragraph, I don't see why the result of weigh() being an
Int can be a hope.

I find the informal definition of SIC too informal.  In particular, it
should be clarified what you mean by "a reduction step involves an
object".  I also didn't see why this property deserved its name
because it doesn't mention any kind of invariant checking.  Maybe it's
partly because I didn't know you had in mind language semantics in
which invariant checking would be automatically run at appropriate
program points.  Actually, my immediate response to this section was
something like "what if no one calls invariant checking code?"  So, it
would be nice if you emphasize at this point that you are going to
consider such "instrumented" semantics.

So, I appreciate the attempt at formalizing SIC using a formal
language.  Now I see a clearer view of the language semantics and what
is meant by SIC.  I'm wondering if Sections 5.3 and 5.4 should be
swapped.  Your ultimate goal is to prove Theorem 1, which doesn't
depend on Assumptions.  After stating the goal, you can start
discussing how it could be proved (after posing assumptions on the
type system).

Having said that, I'm not sure how much the following proof sketches
make sense.  They rely on a lot of nontrivial assumptions.  I agree
that language features used are studied in the literature but their
combination is not studied.  Related to this point, I would suggest
that you state theorems and lemmas as conjectures to avoid
misunderstanding.


More minor comments:

The heading of Section 3.1 should be "Broken objects"?

There should be a rule for the case where the third expression of a
monitor is false, in which case I think the monitor should raise an
error.

The notation r_l, in particular the fact that l is a parameter, should
be explained more carefully.  Otherwise, l in, e.g., H(\sigma,l) in
the statement of Theorem 1 and the statement doesn't make much sense.
Similarly for the definition of trusted.

Does @ stand for "Assumption"?

In the definition of monitored, the font for "M" is wrong; the comma
after l should be a semicolon.

The predicate garbage, used in the definition of IOK, is undefined.

