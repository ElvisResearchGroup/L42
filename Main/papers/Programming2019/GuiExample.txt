


-------
class B1 implements ActionPerformed{
	capsule WTA textArea;
	mut method Void act(){this.textArea().text()="hi";}
	}
Box:{
	mut WTA textArea;
	Area area;
	mut ButtonL bL;
	mut method Void init(){
		this.bL.get(0).addAction(new B1(this.textArea));
		...
	}
	mut method Bool dispatch(E e){ ..loop..}
}
MyTextEditor extends W{
	capsule Box b;
	mut method Void setText(String s){this.b.textArea.setText(s);}
	mut method Void setBText(Int i,String s){this.b.bL.get(i).setText(s);}
	read method Bool validate(){
		for all b in this.b.bL, if(!this.area.contains(b.area())){return false;}
		if(!this.b.area.contains(textArea)){return false;}
	mut method Void init(){this.b.init();}
	mut method Bool dispatch(E e){return this.b.dispatch(e)}
	}
}
---------------------------------------
abstract class WBox {
	mut List<mut W> children = new List();
	mut method Bool dispatch(Event e) { for c in this.children {if c.dispatch(e) return true;}return false; }
}

abstract class W {
	mut method Bool dispatch(E e);
	.. other stuff ...
}

abstract class BoxedW<B: WBox>: W {
	W(capsule B b) { this.box = b; }
	protected capsule B box;
	mut method read T mutate(imm Function<mut B, read T> f) { return f(this.box); }

	@override
	mut method Bool dispatch(E e) { return this.box.dispatch(e); }
}

class MyTextEditorBox: WBox {
	mut WTA textArea = new WTA();
	mut Button b = new Button();
	Bool toSave = false;

	MyTextEditorBox() {
		this.children = new List(this.textArea, this.b);
		this.b.addAction(e => {
			this.textArea.setText("Hi");
		});

		this.toSave = true;
	}
}

class MyTextEditor: BoxedW<MyBox> {
	mut System system;

	read method Bool save() {
			this.system.saveFile("foo.txt", this.b.textArea);
	}
	MyTextEditor() { super(new MyTextEditorBox()); }

	read method Bool validate() {
		foreach (var b in this.box.children){
			if (!this.area.contains(b.area)) return false;
		}
		return true;
	}
    read method read B getB(){this.b;}
	@override
	mut method Bool dispatch(E e) {
		base.dispatch(e);
		if this.box.toSave {
			this.save();
			this.mutate(b => b.toSave = false);

            this.#box.toSave = false;
            //this.#box.blah = this;
		}
        if this.b().toSave() (
           this.save()
           this.#b().tosave(false))
	}
}

---------------------------
main(mut System s)
	mut MyTextEditor g=new MyTextEditor(..)
	s.run(g)

s.display(w)
	while(true){
		imm E e=s.getEvent()
		w.dispatch(e)
		}

Button:{
	mut method Bool dispatch(E e){ if e.id==this.id (this.act(e) return true) return false}
}

-------------------------------------------
GUI Lib:
Box:{
	mut ListMutW children=new List();
	mut method Bool dispatch(Event e) {
		for c in this.children {if c.dispatch(e) return true;}
		return false;
	}
}
------
User:
MyBox extends Box {
    mut System s;
	mut WTA textArea = new WTA();
	mut Button b = new Button();
	mut Button bSave = new Button();
	MyBox(mut System s) {
	    this.s=s;
		this.children.addAll(Arrays.asList(textArea,b,bSave));
		this.b.addAction(e -> this.textArea.setText("Hi"));
		this.bSave.addAction(e -> s.writeFile("vv",this.textArea.getText()));
		...
	}
}
MyTextEditor extends W {
	MyTextEditor(mut System s){
	  capsule System ss=s.clone();
	  this.b=new MyBox(ss);
	  }
	capsule MyBox b;
	mut method Bool dispatch(E e) { return this.b.dispatch(e); }

	read method Bool validate() {
		for (all b in this.b.content){
			if (!this.area.contains(b.area())) return false;
		}
		return true;
	}
	read method Void paint(){
	  forall W w in this.b.elements()
	    w.paint()
	  }
}


Button()

---------------------------------------



mut System s

1.	You need a 'mut' capability reference to use the capability
2.	You need a 'mut' capability to make new capabilities


class System {
	mut method capsule Random makeRandom() /* magic */
}


	/...\.../.../...\

Main:{
  s=System()//
  lkjklj
  }

	// capability function
	// is a function that is non-deterministic

	// deterministic:
	// given same rog's as arguments
	//		always mutate those rogs same the way
	//		and give you same result

mut Log l=Log()
imm LogK key= l.getKey()

key.log(S"ggg")

l.read(s)



42 typesystem

-expression use need to be in a
 lent/mut/capsule method
DEF: any class that has a use using method
 must is a capability class
-all factories of capability classes must take a mut capability class as a parameter

Path:{
	/*@plg comment*/

	class method plg#fac()
}


{

	/*@plugin*/
	Bar: {/*@plugin*/ class method mut This new(); mut method IO() use ... }
	Foo: {
		read method #validate() {
			Bar.new().IO()
		}
	}
}

//Isaac
a plugin is a class/interface with a plg comment
'use' Only allowed in a mut/class-method of a plugin class
To call a class-method on a plugin class,
* you must be in mut or class method of a plugin class that:
	* does not refine a class-method of a non-plugin interface
* or in a meta-expression

Foo: { interface
	class method Void x();
	mut method Void y();
}
Bar: {/*@plg*/
	implements Foo

/*
	use	// do IO
	construct plgn
*/
	class method Void b() ....can IO..
	class method Void m(mut Bar b) ...

	refine class method Void x() This.b() //ERROR
	refine mut method Void y()

			This.b() // OK
}
/**********************************/
{
/*
a plugin class is a class with /*plg url*/ annotation and url is not safe
plugin-classes can not have public state

A unsafe operation can only appear within:
	* a mut method of a plugin-class
	* a meta-expression
	* a class method of a plugin-class
		that does not refine a method of a non-plugin-interface

An unsafe-operation is:
	* 'use Path' (where Path denotes plugin class)
	* an invocation of non-refined class method of a plugin-class
	* an invocation of a refined class-method refining a method of a plugin-interface

Problems:
	1. call harmless class methods

Foo: {/* @plugin */
	implements IFoo
  IFoo:{
  		class method Int num2()
		class method Int num() }

	refine class method Int num2() = with x = This on IFoo x.num() + 1
	refine class method Int num() = 1

    refine class method Void bar()
		=  with x = This on IFoo
			x.num()
}

a={implements IFoo
  refine class method Void foo() This.bar()
  class method Void bar() void
  }
b={/* @plugin */}

/*
	+
plugin
	refine
		abstract		only with 'abstract' or a plugin-refine
		non-abstract	only with 'abstract' (current rule)
	non-refine
		abstract		anything
		implemented		plugin-refine or non-refined

/*if {@plugin refine class method foo} + {@plugin? refine class method foo e}
or {@plugin  class method foo e}     + {@plugin? refine class method foo}
		@plugin? != empty
		comptabile(@plugin, @plugin?)
*/

error if {@plugin refine class method foo} + {refine class method foo e}
	  or {@plugin  class method foo e}     + {refine class method foo}

	  	 {@plugin  class method foo }     +  {class method foo e}

	 @plugin  class method Void a()void refine class method foo This.a()}

*/


{implements IFoo
	refine class method Void foo()}+

	{/*@PLUGIN*/

	class method Void x() ..use..

	class method Void foo() This.x() }=


//a method can only contain a 'use' or invokaction of plugin-class-method,
//	if the method is a plugin-mut-method
-------------------------------------

Foo: {
	/*@plugin*/
	class method mut This new(Int a)
	class method mut This new0() = new(Int0)

	read method Bool #validate()
}

*/

	System: { /*@plugin*/
		class method mut System()
		// lots of methods that could make new instances of 'plugin' class
	}
	....
	MainF: { class method Void(mut ISystem s) = .... }//(read s).class().newFS()
	Main: MainF(System())
}

ISystem: {
	interface

	read method class This class()
}

System: {
	/*@plugin*/
	implements ISystem
	class method mut System new()
	mut method Void doIO() use...

	refine read method class This class() This
}

read method foo(read ISystem s) {
	return s.class()
	catch (class System s) s.new().doIO()
}

G |- e : class X
  |- X not  plugin
  ...
----------------
G |- e.m(es)




//Marco
a plugin is a class/interface with a plg comment
only plg classes can refer to paths of other plg classes
plg classes can only implement non plg interfaces where all
	methods are lent/mut/capsule

//meta expressions has no restriction


minimal change
metaprograming friendly //+ redirect rename
sound for validation
allowing capability patterns/restrisction

{

	/*@plugin*/
	Bar: {/*@plugin*/ class method mut This new(); mut method IO() use ... }
	Foo: Bar.new().IO()
}











Java
3 gui librat

1-SWING/AWT
2-ECLIPSE
3-JavaFX
   browser WebView

42 <->Gui

plugin open JavaFX frame with a full size webView with standard html with some
  js functions already there

plugin rfc over js functions
rfc window.setHTML(...)
event42("sssss")

plugin nextEvent()

S.#from(binRepr:{/*@string feafe\u13*/})

U:Alphanumeric<><{
  S inner
  method S () S.#from(binRepr:Refactor.AddComment(this.inner())<><{/*@string*/})
  }

U"\xf00"

U"fooo" -->S.#from(binRepr:{/*fooo*/})

Exp:{interface}
Sum:Data<><{implements Exp Exp left, Exp right}

s.idEq(a,b)



drawRect(id,x0,y0,x1,y1)
writeText(id,string)


