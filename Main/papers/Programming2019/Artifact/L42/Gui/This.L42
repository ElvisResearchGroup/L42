reuse L42.is/AdamTowel02
CacheAdamTowel02:Load.cacheTowel()

Gui:Load<><{reuse L42.is/WidgetGuiLib}

Box:Data<><{
  S id
  mut Gui.Widget.List children
  var Size left
  var Size top
  }

MoveAction:Data<><{implements Gui.Action
  mut Box outer
  Size leftDelta
  Size topDelta
  method (event) (
    Debug(S"Button pressed on :"++this.outer().id())
    this.#outer().left(this.outer().left()+this.leftDelta())
    this.#outer().top(this.outer().top()+this.topDelta())
    )
  }
//Here use DData or EiffelData instead of Data to test their protocols
SafeMovable:Data<><{implements Gui.Widget
  capsule Box box
  class method mut Gui.Button left(mut Box outer,Size scale) Gui.Button(
    id:outer.id()++S"_Left"
    left:0Size
    top:13Size*scale
    width:6Size*scale
    height:6Size*scale
    action:MoveAction(outer:outer,leftDelta:Size"-5",topDelta:0Size)
    imgName:S"L42/Gui/left.png"
    )
  class method mut Gui.Button right(mut Box outer,Size scale) Gui.Button(
    id:outer.id()++S"_Right"
    left:26Size*scale
    top:13Size*scale
    width:6Size*scale
    height:6Size*scale
    action:MoveAction(outer:outer,leftDelta:5Size,topDelta:0Size)
    imgName:S"L42/Gui/right.png"
    )
  class method mut Gui.Button up(mut Box outer,Size scale) Gui.Button(
    id:outer.id()++S"_Up"
    left:13Size*scale
    top:0Size
    width:6Size*scale
    height:6Size*scale
    action:MoveAction(outer:outer,leftDelta:0Size,topDelta:Size"-5")
    imgName:S"L42/Gui/up.png"
    )
  class method mut Gui.Button down(mut Box outer,Size scale) Gui.Button(
    id:outer.id()++S"_Down"
    left:13Size*scale
    top:26Size*scale
    width:6Size*scale
    height:6Size*scale
    action:MoveAction(outer:outer,leftDelta:0Size,topDelta:5Size)
    imgName:S"L42/Gui/down.png"
    )

  class method mut This(S id,Size left,Size top,Size width,Size height,S color,capsule Gui.Widget.List children) (
    capsule Box cbox=(
      box=Box(id:id,children:children,left:left,top:top)
      box.#children().add(right:This.left(outer:box,scale:height/32Size))
      box.#children().add(right:This.right(outer:box,scale:height/32Size))
      box.#children().add(right:This.up(outer:box,scale:height/32Size))
      box.#children().add(right:This.down(outer:box,scale:height/32Size))
      box
      )
    This(width:width,height:height,color:color,box:cbox)
    )

  method id() this.box().id()

  method children() this.box().children()

  method left() this.box().left()

  method top() this.box().top()

  method dispatch(that) this.#box().#children().dispatch(that)

  read method Bool #invariant(){
    Debug.incrementCounter(S"Invariant")
    with w1 in this.box().children().vals() (
      if !this.inside(w1) (return Bool.false())
      with w2 in this.box().children().vals() (
        if w1.id()!=w2.id() (
          if This.overlap(w1:w1,w2:w2) (return Bool.false())
          )
        )
      )
    return Bool.true()
    }

  class method Bool overlap(read Gui.Widget w1,read Gui.Widget w2){
    if w1.left() > w2.left() + w2.width() | w2.left() > w1.left() + w1.width()
      (return Bool.false())
    if w1.top() > w2.top() + w2.height() | w2.top() > w1.top() + w1.height()
      (return Bool.false())
    return Bool.true()
     }

  read method Bool inside(read Gui.Widget that){
    //Debug(S"inside "[this.id()]" "[that.id()]"")
    if that.left()<0Size (return Bool.false())
    if that.left()+that.width()>this.width() (return Bool.false())
    if that.top()<0Size (return Bool.false())
    if that.top()+that.height()>this.height() (return Bool.false())
    return Bool.true()
    }
  }

Main: {
  wA=SafeMovable(width:700Size,height:700Size,color:S"green",box:Box(id:S"Green",
    children:Gui.Widget.List[
      SafeMovable(
        id:S"A"
        left:20Size
        top:40Size
        width:640Size
        height:640Size
        color:S"red"
        children:Gui.Widget.List[
          SafeMovable(
            id:S"D"
            left:280Size
            top:280Size
            width:64Size
            height:64Size
            color:S"blue"
            children:Gui.Widget.List[]);
          SafeMovable(
            id:S"B"
            left:50Size
            top:50Size
            width:128Size
            height:128Size
            color:S"blue"
            children:Gui.Widget.List[
              SafeMovable(
                id:S"C"
                left:6Size
                top:6Size
                width:32Size
                height:32Size
                color:S"black"
                children:Gui.Widget.List[]
                )
              ]
            )]
          )]
        left:2Size,top:2Size
      ))
  Strings events=Strings[
    S"A_Left::Pressed::_";
    S"A_Right::Pressed::_";
    S"A_Up::Pressed::_";
    S"A_Down::Pressed::_";

    S"B_Left::Pressed::_";
    S"B_Right::Pressed::_";
    S"B_Up::Pressed::_";
    S"B_Down::Pressed::_";

    S"C_Left::Pressed::_";
    S"C_Right::Pressed::_";
    S"C_Up::Pressed::_";
    S"C_Down::Pressed::_";

    S"D_Left::Pressed::_";
    S"D_Right::Pressed::_";
    S"D_Up::Pressed::_";
    S"D_Down::Pressed::_";
    //S"EXIT";
    ]
  Gui.#$(id:S"a1").display(title:S"Moving",x:800Size,y:800Size,body:wA,events:events)

  Debug.printCounter(S"Invariant")
  Debug(S"#@Success@#")
  return ExitCode.normal()
  }