Todo in order:

e[expr] insert expr
e[with x=bla (use[..])]
is pattern or antipattern?
alternative is
var res=e[]
x=bla
res+=..

indeed e[with...] is ambiguis, we may want to add just the void result of the with
what about
e[[block stuff]]?
e[' block stuff]?
e[: block stuff]?
e[; block stuff]?
e[use block stuff]?

Consider instead
    V[by: with e in l.vals() ( \use(e) )]
    V.from(builder:( b=V.builder()
     b.use(by:body)
     b
      ))
Where the \ will be bound to the builder and not to V.
the "square with" simply disappears.

what if
x[[block]]=
(b=x.buldier()
 catch exception void x.onBuilderFailure() ' this let us encode disable assertions
 block[use[ps1..psn]=b.#use(ps1)... b.#use(psn)
 b
 )


todo:
+coherence stuff in language


from(ss:)

tree format:
tree::=leaf|node
leaf::= id`str //can repr numbers too
node::=id treess

stringRepr
token: id| `str` | sep | opening |closing
str::= alpha digit symbols, but \n \t ` \ all in \uNum form
id::= str without opening ( and \n\t spaces and , at the start are ignored)
opening::= ( [ { <      (indent may be another one but is hard)
closing::=  ) ] } >
sep::=  ; //boh, should be trees lists of lists?

Tree:{interface}
Leaf:Data<<{implements Tree (Id id, S str)}
Node:Data<<{implements Tree (Id id,Treess treess)}
Trees:Collections.vector(of:Tree)
Treess:Collections.vector(ofMut:Trees)

Tokens:Use[Collections.vector(of:S)]<<{ ..}
on tokenList
parse () {
 id=this.parseId()
 if this.currentIsStr() (
  return Leaf(id,this.parseStr())
  )
  return node(id,parseMany())
 )
parseMany()
  par=this.parseOpening()
  res=Trees.empty() //Trees[] should be imm?
  var curr=Trees.Elem.empty()
  while !x.currentIsClosing(matching:par) (
    curr.pushBottom(x.parse())
    if x.currentIsSemicolon() (
      res.pushBottom(curr)
      curr:=Trees.Elem.empty()
      )
    )
  Assert.Bug[x.currentIsClosing(matching:par)]
  if !curr.isEmpty() (res.pushBottom(curr))
  res

long str format:
repr::= lines
line::=num id`E\n | num id opening\n |num id\n //most likely id is a sep
E::= num|str
str::= alpha digit symbols, but \n \t ` \ all in \uNum form
id::= str without opening ( and \n\t spaces and , at the start are ignored)
opening::= ( [ { <      (indent may be another one but is hard)
sep::= , ;//not needed
num::=digits 0-9
we write #line to extract the number of the line
#(line lines)=#line
#empty=0
well formedness:
in line0...linen, #linei+1>=#line(i+1)
if linei=num id opening\n, #linei+1>=#line(i+1)
if linei=num id\n, #linei=#line(i+1)
if linei=num id`E\n, #linei>=#line(i+1)

lines=line0...linei \num\ line(i+1)...linen
if #line(i+1)<=num, #(line0...linei)>num

information is not lost by the follwong sugaring *
num:id opening lines0 \num\ lines1 = id opening lines0* opening* lines1*
num:id lines =id lines*
num:id` E lines = id`E`

from(ss:ss) This.from(s:ss.singleData())
  if This is stringable or numberable
from(ss:ss)
  checkHead(ss.top())//opt?
  This(field1(fromSs:ss.subTree(1N)),..,fieldn(fromSs:ss.subTree(nN)))

if fieldi is class field,
  fieldi(fromSs:ss) FieldType.from(fromSs:ss)

if fieldi is interface type,
  fieldi(fromSs:ss) {
    with s=ss.top() (
      if S"Bla"<s return Bla.from(fromSs:ss)
      if S".."<s return Boh.from(fromSs:ss)
      )
    error parse
    }
    or
  fieldi(fromSs:ss) InterfType.$.from(ss:ss)

  desugaring:
just generate antlr parser?