Challenges:
Generated Java should be 
-incremental
-fast to compile
-fast to execute//the less important now
-executable in parallel
-the generated class files should be cachable on remote server
-have a decent definition for correct plug in behaviour/checking in case, for example, of the
 redirect, where the class Any could be norm but not well typable yet

key ideas:
-every L has a unique generated name added during normalization
-plugin application will generate new names for resulting libraries //james suggests: old names may be marked as orphans
-every 42 execution generate a Resource class that have
  -current program // current program do not appear in map, current.top() always not LC
  -map from generate names to program view in that point//programs in map,p.top() always LC
   (no need to be the most updated program view?)
 Thus, multiple 42 executions can run in parallel, but 
 multiple C:e in an execution needs to be sequential.
 
 
Starting point:
  L42N: L42 core, compiled, well typed and normalized, with some types annotated.

Intermediate; only for expressions in meth bodies:
  L42X: L42N with all subexpressions are xs, and L are replaced with their unique name CN

Destinaton1:
  L42F: a flattened version where every *executable*
  class/interface have a top level name 

Destination2:
  O42: a superset of L42F containing null, if, bool and so on..
   -design a process to optimize L42F into O42, should be so that
    optimize(optimize(program))=optimize(program)

Destination 3:
  Java, C++, Javascript,..
  -design process to convert O42 programs into stuff.

---------------------------------------------------------

L42N (should be identical to the one in NotationsAndGrammar
a::=x|void|P
e::=a|L|throw[T1,T2] e|loop e|(ds ks e[T])| e.m[T]((x:e)s)| use P check m((x:e)s) e
throw::= exception | error | return
k::=catch T x e
d::= T x=e

O42: 
CT::= CN->p,CD
CD::=kind CN implements CNs{ Mxs }
Mx::=refine? method T mxs((T x)s) body?//first is this
//note: no exceptions declared, body empty iff kind=interface
body::=ex | setter|getter|new|newPh| nativeIntSum|nativeIntMul|...|nativeVectorAdd
kind::=class |interface | nativeInt |nativeString| nativeFloat|nativeVector[CN] | ...
ax::=x|void|P|null
miniE::=ax| CN| throw[TX1,TX2] a |loop ex
  |CN.mxs(ys)| use P check mxs(ys) x
  |if ax then ex1 else ex2 |while ax then ex1 | x:=ax
ex::=miniE | (dxs kxs ex [TX])
kx::=catch throw TX x ex
dx::=TX x=ex
TX::=mdf CN

//note:TX x=(dxs ex) in Java can be
//TX x;{dxs  x=ex}
//note:TX x=(dxs kxs ex) in Java can be 
//TX x; labelFor_x:{dxs\e try{dxs\t}x=kxs  x=ex}
//  where x=catch TX y ex is catch (TX y ){x=ex break labelFor_x}
//dxs\e and dxs\t removes the e and the TX from dxs to separe declarations and initializations

//for compactness ignore use, treated the same as mcall
//also, assume all local variables alpharenamed to be different
//and all newly introduced variables are fresh

#### define PG[ e0]= e1 with e0 in L42N and e1 in L42X
PG::=p;(x:T)s //p;G
p;(x:T)s + (x:T)s'=p;(x:T)s (x:T)s' //Thus I can write PG+x:T
PG + T1 x1=e1..Tn xn=en=PG+x1:T1..xn:Tn

PG*P=PG.p(P).CN

PG*T =mdf PG*P
where
  mdf P=resolve(PG.p,T)


PG[a]= a //a atoms
PG[L]= (L.CN).LoadLib()
PG[loop e]=loop PG[e]

PG[throw[T1,T2] e]=throw[PG*T1,PG*T2] a   if PG[e]=a
otherwise 
PG[throw[T1,T2] e]= (imm Library x=CN throw[PG*T1,PG*T2] x)   if PG[e]=CN
otherwise 
PG[throw[T1,T2] e]= (imm Void x=loop ex throw[PG*T1,PG*T2] x)   if PG[e]=loop ex
otherwise 
PG[throw[T1,T2] e]= (P::m(xs) z=x.m[CN]((x:y)s) throw[T1,T2] z)   if PG[e]=x.m[CN]((x:y)s)
otherwise 
PG[throw[T1,T2] e]= (TX z=(dxs kxs ex [TX]) throw[PG*T1,PG*T2] z)   if PG[e]=(dxs kxs ex [TX])

PG[e.m[P]( (x:e)s)]= PG[( P::m(xs)::this x=e x.m[P]((x:e)s))]//where xs is the list of xs of the method call
PG[x.m[P]( (x:y)s x':e (x:e)s)]= PG[( P::m(xs)::x' x=e x.m[P]( (x:y)s x':x (x:e)s))]//where xs is the list of xs of the method call

PG[y0.m[P](x1:y1..xn:yn)]=PG*P.m(x1..xn)(y0..yn)
if PG.p(P)(m(x1..xn)) 
if p(P)(m(x1..xn))not candidate constructor 
  or some y1..yn in fwd of PG.G 
otherwise //we have optimized new
PG[y0.m[P](x1:y1..xn:yn)]=PG*P.New_m(x1..xn)(y0..yn)



PG[(ds ks e[T])]=(phFix(PG+ds[ds]) PG[ks] PG+ds[e] [PG*T])
  PG[T x=e]=PG*T x=PG[e]
  PG[catch throw T x e]=catch throw PG*T x PG+x:T[e]
  
  phFix(dxs)=dxs if dom(dxs) not in FV(dxs)
  otherwise //a block actually using placeholders
  phFix(mdf1 CN1 x1=ex1..mdfn CNn xn=exn)=
    mdf1 Fwd x1'=Fwd.New()..mdfn Fwd xn'=Fwd.New() //Fwd is a predefined class in all L42F programs
    mdf1 CN1 x1=ex1[x1..xn=x1'..xn'] imm Void z1=Fwd.Fix(x1',x1)
    ..
    mdfn CNn xn=exn[x1..xn=x1'..xn'] imm Void zn=Fwd.Fix(xn',xn)




########### CT.growWith(p,paths)
//take an existing CT, create a bigger one where paths from p are added

CT.growWith(p,Cs1..Csn paths)=
  CT+p.navigate(Cs1)+..+p.navigate(Csn)+CT'
  CT' =CT.growWith(p.pop(),paths) if p.pop() defined,
  otherwise CT'=empty and paths=empty

CT+p=CT if CT(p.top().CN) is defined
otherwise
CT+p=CT,p.top().CN->p.top(),CD',J
  where CD=libToCD(p), CD'=optimize(CD), J=toJava(CD')


libToCD(p)=class/interface? CN implements p[Ps]{ p[Ms]}
  where p.top()={interface? implements Ps Ms CN}

p[refine? mdf method T m(T1 x1..Tn xn)exception Ps e? =
  refine? method p[T] mxs(mdf (p.top().CN) this,p[T1] x1..p[Tn] xn) p[ex?]
  where ex?= (mdf This0 this,T1 x1..Tn xn)[e?]
  and if e?=empty, p.top() is interface
p[mdf method T m((T x)?)=
  method p[T] mxs(mdf (p.top().CN) this,p[(T x)?]) body
  where mdf not class and body =setter if (T x)? not empty, otherwise body=getter
p[class method T m(T1 x1..Tn xn)=
  method method p[T] mxs(class (p.top().CN) this,p[T1] x1..p[Tn] xn) newPh
  method method p[T] New_mxs(class (p.top().CN) this,p[T1] x1..p[Tn] xn) new
  

CT.execute(p,eC)=loadAndRun(J)
  ex=p[empty[eC]]
  eJ=toJava(ex)
  J=class CN{ public static Object execute(){J}}//CN fresh



-------
Optimizations:
CT-->CT[CN=nativeOfThatPattern(CT(CN))]
if CT(CN)= aSpecificPattern
something like this should work for int,float,arrays and a couple more stuff
for Opts would work in combination with wrapper class optimization

WrapperClasses:
class is wrapper if
- exactly one field,
- no implements
- never casted to Any??
- either no setter(opt has no setter) or
  never used in constructors and setters
  
  then
  replace all CN with the field type except for CN.mxs
  CN constructors are simplified away
  CN.f(x,z) setters are x:=z
  CN.f(x) getter are y=x 
  all throw where mdf CN x, use new
  all catch throw mdf CN x, unwrap if not just rethrow
  //check this does not break {..return..} optimization
  
  //note for marco: I believe/ed that this means redirect need to refuse to work on private P
  //note for marco: if we rename all private nested classes to the top level, we can avoid most privacy coupuled; it would only stay for private methods.

If/While insertion:
If insertion:
(T y=CN.#checkTrue(x)  catch exception Void ex1 ex2)
  replaced with
if x ex2 else ex1
  if CT(CN).kind=nativeInt //just to avoid native bools too?
   

------------------------------------------------+


  exercise:
  e::= x| let x=e0 in e1 | e0 e1
  into:
  ax::= x| x y
  ex::= ax| let x=ax ex
  
  [x]=x

  [let x=e0 in e1]= let x=ax in [e1]
   where [e0]=ax
  [let x=e0 in e1]=
     let x1=ax1 in .. let xn=axn let y=ax in
     let x=ax in [e1]
   where [e0]=let x1=ax1 in .. let xn=axn in ax
   //note, the dots can be empty

  [x y]= x y
  otherwise
  [x e1]=
    let x1=ax1 in .. let xn=axn in
    let y=ax in x y
  where [e1]=let x1=ax1 in .. let xn=axn in ax
  otherwise
  [e0 e1]=
    let x1=ax1 in .. let xn=axn in
    let x=ax in [x e1]
  where [e0]=let x1=ax1 in .. let xn=axn in ax
  





####### G.typeOf(e) //is it used now?
G.typeOf(P)=class P if G.p(P) not interface
otherwise
G.typeOf(P)=class Any
(_, x:T,_).typeOf(x)=T
G.typeOf(void)=imm Void
G.typeOf(L)=imm Library
G.typeOf(loop e)=imm Void
G.typeOf(throw[T1,T2] e)=T1
G.typeOf( (_[T]) )=T
G.typeOf( e.m[mdf P](x1:e1..xn:en) )=P::m(x1..xn)//resolved?

//Note for marco: Guess type in formal
//case use: use the plugin information, not the e! 

  