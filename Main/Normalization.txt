
-----------------------------------------------------------
Part 2: reduction rules and notations
-----------------------------------------------------------
depend on:
 Phase|p|empty|empty|empty|-e ~> e' : T //TODO: should TS declare a Phase |p |-e~>e':T as a shortcut to avoid exposing G Cage and Tr?
 Phase |-p ~> L
 e -->p+ r //we discussued with James: should we use ~> or a kind of big step arrow for type judgment that do annotation?
 
-----------------------------------------------------------
### reduction rules
ReductionTop:
precondition: at top level we have a L not of form LC

r::=LC| exception v | error v
 
          eC' -->p'+ r              p.top()={_ implements Ps0, MCs  C:eC Ms}
(top)------------------------       eC not of form LC
     p ==> p'.update(p'.top()[C=r]) <paths; paths'>=usedPathsE(p,eC) //tuple notation
                                    p0=multiNorm(p,paths U paths')//norm the part of p required by eC
                                    paths' ||-p0 ~> p' //the part of p' referred to by paths' is well typed
                                    Norm | p'| empty| empty| empty |-toAny(paths,eC) ~> _ : imm Library //replace paths with Any //eC is well typed
                                    Norm | p'| empty| empty| empty |-eC ~> eC' : imm Library //duplicated typing, so we can have eC non with Anys
                                    


        p.push(ctxL, L)==>+ p'      p.top()={interface? implements Ps, MCs  M Ms}
(enter)-------------------------    M not of form MC
          p ==> p'.pop()            M.e=ctxC[L], L not of form LC
                                    ctxL={interface? implements Ps, MCs  M[with e=ctxC] Ms}
                                    p'.top() of form LC

------------------------------------------
###define methods(p,P)=Ms

subdefinitions:
-collect(p,empty)=empty 
  //an implementation could keep a list of visited P instead of diverging, mathematically is the same.
-collect(p,P0 Ps)=(P0,Ps')\collect(p,Ps), collect(p,Ps) //that is,crucially: dept first but we avoid duplicates by keeping the rightmost occurence.  
  p(P0)={_ implements Ps0 _}
  Ps'=collect(p,Ps0[from P0])
  //this check absence of circularity by looping
  //Note for marco: we remove circularity; update operator sum; plus add privatly implemented concept/error
  //may be a good strategy could be that 
  //"sum can not add abstract implemented methods", this enforces adding either equal hierarchies with different operators, or different hierarchies with equal operators.
  //Or we can make this kind of check happens as extra at the end of multiple sums?

maindefinition:
-methods(p,P0)=M1'..Mk'
  p(P0)={interface? implements Ps Ms Phase}
  if Phase!=None, M1'..Mk' are extracted from Ms[from P0]//TODO
  P1..Pn=collect(p,Ps[from P0]), error unless forall i in 1..n, p(Pi) is an interface
  ms1..msk={ms|forall i in 0..n : p(Pi)(ms) is defined}//TODO: double check in code is i in 0..n
  forall ms in ms1..msk, there is exactly 1 j in 0..n //TODO: this is problematic: In case multiple P are either exactly the same or points to the same interface!! for now the problem is just hacked away in the code
    such that p(Pj)(ms)=mh e? //no refine
  //cases like A:  {interface refine method A()}  B: { implements A method A()} are ok wrt B but fails for A  
  forall i in 1..k //i comes from k in ms1..msk
    Mi= p(P0)(msi)[from P0] if it is of form  refine? mh e?,
    otherwise
    Mi=addRefine(methods(p,Pj)(msi)) //ok if it stay the same since already refine
      for the smallest j in 1..k such that methods(p,Pj)(msi) of form refine? mh
  
    Mi'=Mi[with e=p(P0)(msi).e[from P0]] if defined,
    otherwise
    Mi'=Mi

------------------------------------------
###define norm(p,e)=e
subdefinitions:
-resolve(p,mdf P)=mdf P
-resolve(p,P::ms)=resolve(p,T)//and avoid circularity
  methods(p,P)(ms)=refine? _ method T ms e?
-resolve(p,P::ms::x)=resolve(p,T)//and avoid circularity
  methods(p,P)(ms)=refine? _ method _ _( _ T x _) e? 
-resolve(p,P::msx::msxs)=resolve(p,P'::msxs) //here be carefull for possible infinite recursion 
  resolve(p,P::msx)= _ P'              
  
maindefinition:

-norm(p,L)=norm(p.push(L))//can be evilPush
-norm(p)=p.top()
  if p.top().phase!=None
  otherwise
-norm(p)={interface? implements Ps' norm(p,Ms') Norm}
 p.top()={interface? implements Ps Ms} //Ms is free var and is ok
 Ps'=collect(p,Ps)
 Ms'=methods(p,This0), {C:e in Ms} //norm now put all the nested classes in the back.
  
//norm(p,ms e) should never be call 

-norm(p,refine? mh e?)= refine? resolve(p,mh) e? 
    
-norm(p, C:L) =C:norm(p,L)//we could do a norm(p.push(C)) to avoid an evil push

//-norm(p,empty)=empty

------------------------------------------
### define multiNorm(p,paths)

- multiNorm(p,empty) = p

- multiNorm(p, Cs1..Csn)/*a single Css*/= p.update(L)
  pi = p.navigate(Csi) 
  Li = norm(pi)//norming the top
  L = p.top()[Cs1=L1..Csk=Lk] //replace the nested classes in paths Csi with libraries Li.

- multiNorm(p, Css,paths) =multiNorm(p',Css) 
  p'=p.growFellow(multiNorm(p.pop(), paths))
   
------------------------------------------     
###define usedPathsE
//note we could have redundant paths, like This1.C and This2.B.C and is ok
//and this is also ok for path,path' for toAny
- usedPathsE(p,eC)= <path\paths';paths'>//assert that the result includes paths in usedPathsFix(p,paths, empty)  
  Ps,Ps'={P|P inside eC}//arbitrary split of the set; heuristic will apply in the implementation.
  paths=usedPathsFix(p,reorganize(Ps), empty)
  paths'=usedPathsFix(p,reorganize(Ps'), empty)//TODO: fix code around here (plus, do we have setminus on Paths?)
 
- usedPathsFix(p,paths,Css)= usedPathsFix(p, paths U paths0,Css') // U on paths does minimize() internally
   paths.top()\Css!=empty
   paths0=usedPathsL(p.top(),paths.top()\Css)
   Css'=minimize(paths.top() U Css)//@James, was path0 before... was wrong?
     
- usedPathsFix(p,paths,Css)=paths0
   paths.top()\Css==empty
   if paths.pop() not empty
     paths0=usedPathsFix(p.pop(),paths.pop(),empty).push(Css)
   otherwise //this if is to avoid p.pop() undefined
     paths0=empty.push(Css)//@James, new lines here
- usedPathsFix(p,empty,empty) =empty   
    
- usedPathsL(L, Cs1..Csn)=usedInnerL(L(Cs1),Cs1) U ... U usedInnerL(L(Csn),Csn)

- usedInnerL(LC,Cs)=paths.prefix(Cs)
  LC={_ implements Ps, M1..Mn Phase}//in implementation, error if not compiled
  paths=reorganize(Ps) U usedInnerM(M1) U... U usedInnerM(Mn))
  Phase in{None,Norm}
  
- usedInnerL(LC,Cs)=empty //TODO: Possible huge performance boost when implemented. Not implemented at 1/10/2016
  LC.Phase not in{None,Norm}

- usedInnerM(M)= reorganize({P| P inside M}) U (usedInnerL(L1,empty) U...U usedInnerL(Ln,empty)).pop() //leverage on empty.pop()=empty
  //on former line, if we pop the individual results we could save some work while miminizing
  L1..Ln={L| L inside M}


  non determinism heuristic:
  **if P.m(_) inside e, P not Any
  **if ( _ T x=P _ _) inside e and T!=class Any, P not Any.
  **if p(Pi).Phase=Typed, Pi is not Any
  **if ( _ T x=_  _ _) inside e, T.P not Any //TODO: just use liftT in code
  **if catch throw T x _ inside e, T.P not Any  
  **if using P _ _ inside e, P not Any
  **if catch T inside e, T.P not Any
  otherwise, P is considered of type class Any.
  // note that user can always force a not any by writing (x=P x)
  // note, if p(P) not defined, the path will be consider an any, and error will be rised somewhere else.

------------------------------------------     
###define toAny
- toAny(Css0..Cssn,eC)=eC iff forall i in 0..n, Cs in Cssi, not Thisi.Cs inside eC
  otherwise toAny(Css0..Cssn, ctxC[Thisi.Cs])=toAny(Css1..Cssn,ctxC[Any]) 
  where Cs in Cssi

------------------------------------------     
###define paths ||-p ~> p    //James may like notation path ||- p~>p' to underline is an addition layer

  paths ||-p ~> p'
  
        paths ||- p.pop() ~> p0
        Css ||-p1 ~> L
(pPop)----------------------------------  p1=p.growFellow(p0)
        Css paths ||- p  ~>  p1.update(L)
  

         Css ||-p ~> L
(pNoPop)--------------------------------  p.pop() undefined
         Css  ||- p  ~> L,empty


(pEmpty)--------------------------------
         empty ||- p ~> p
  

     forall Csi : Coherent |-pi ~> Li // the type system can be optimized to just assert  tests for libraries that are annotated as already checked TODO: check in implementation the responsibility to check/not is of the TS and not of the current implementation of Normalization
(pL) ---------------------------------------   pi=p.navigate(Csi)
     Cs1..Csn ||-p ~> p.top()[Cs1=L1,.. Csn=Ln]     //Li will have Phase=Typed also inside all somehow contained Ls

 