ASCII rendering of horizontal bar notation:
Letters i,j,k,m,n are integers;
usually indices into sequences or length of sequences
U is the set union,
\ is the set subtraction
we use "and" "or" "disjoint" and "intersection" as words.
"empty" is the emptyset/sequence etc.

using s instead of overbar, so Cs::=C1..Cn
-->p is p under the arrow
a^i is a apex i, ai is a pedex i
[] is the hole/square

in latex we use two different fonts for "(" of the grammar and for
"(" used for disambiguation. here we just hope is clear :/

General Notations:

When a term of the grammar can be accessed with functional notation,
as in a(b), then dom(a) is {b | a(b) is defined}

a^b extract the element of form a from b, for example e^(C:e1)=e1.
More precise: a term of a grammar is a tree of nodes and terminals.
The root-most node of "b" that can be represented with the metavariable "a"
is produced.  

a[with b=b1] replace the element of form b in a with a new b,
so that b^(a[with b=b1]) = b1

a[b=c2] when b in dom(a), a(b)=c1 modify a so that a(b)=c2
 

----------------------------
Core language grammar
e::=.... |L //pg1 start of https://github.com/ElvisResearchGroup/L42Docs/blob/master/Formal/Formal.pdf
L::={interface? implements Ps M1..Mn}
M::=ms e |refine mh e?| mh e? | C:e
Ldom::=ms|C
P::= This^n.Cs //is pronounced "Path"
T::= mdf P | P::mss| P::mss::x

LC::={implements Ps MC1..MCn}  //library compiled
MC::=refine mh eC?| mh eC? | C:LC
eC::=.... |LC
TC::=mdf P// used in eC, MC and LC, and all P normalized w.r.t. a program
r::=LC| exception v | error v

ctxC::=[] | eC.m( (x=eC)s x=ctxC, (x=e)s)| .... // compilation context, e=ctxC[L] selects an L where all the former Ls are LC. The context do not enter in libraries
ctxL::= {interface? MCs ctxM Ms}
ctxM::= C: ctxC |ms ctxC | refine? mh ctxC

//notice how every LC is a special kind of L (barnotation has structural subtyping)



-----------
type environment:
VarEnv::=(x:T)s

program grammar

p::=L0;ctxLs //representing This0,...,Thisn

program operations:
-pop
 (L,ctxL,ctxLs).pop()=ctxL[L],ctxLs

-push
 (ctxL[L],ctxLs).push(ctxL,L)=L,ctxL,ctxLs

-top
 p.top()=p.get(0)
 
-update top
 (L,ctxLs).top(L')=L',ctxLs

-get(n)
 (L,_).get(0)=L
 p.get(n+1)=p.pop().get(n)

-push(C)
 (L,ctxLs).push(C)=L',ctxL,ctxLs
   with ctxL[L']=L and ctxL(C)=[]
-navigate(P)
 p.navigate(Outer^n.C1..Ck)=p.pop()...pop().push(C1)...push(Ck) //with n pops
    
//Note for marco: equivalence between p and (Ln,fullP), that is all the other L0..L(n-1) are cached?
//going this way would require/allow to write better CloneWthPath/Locator
//to enforce the equivalence all the time we may have an updateTop operation, that do the hard work level by level.
//p.update(L), p.pop(), p.push(fullP)/p.push(Ldom,ctxC) //currently push(L) is supported and should be removed


---------
We define functional notation for
L and LC (over Ldom domain),
p (indexes)
VarEnv (var names)


----------------------
ReductionTop:
at top level we have a L not of form LC
 
          eC -->p+ r             p'.top()={_ implements Ps, MCs  C:e Ms}
(top)------------------------    e not of form LC
     p' ==> p.top(p.top()[C=r])  eC=norm(p',e)
                                 Ps=usedPaths(p',eC)
                                 p=p' # Ps
                                 p;exception Any; empty|-eC: imm Library
                                 |-p:Ps

                                  ctxL={_ implements Ps, MCs  M[with e=ctxC] Ms}
      p.push(ctxL, L)==> p'       p.top()={_ implements Ps, MCs  M Ms}
(met)-------------------------    M not of form MC
        p ==> p'.pop()            e^M=ctxC[L], L not of form LC


                                 
                                 p.top()=L={_ implements Ps, MCs  M Ms}
(nrm)-------------------------   M not of form MC
     p ==> p.update(L[ms^M=MC])  all L in e^M are of form LC
                                 MC=norm(p,M)
              
//Fixed new program notation up to here
------------------------------------------

- eC inside eC' if eC'=ctxC[eC]      

usedPaths(p,eC)//recursive in p
- usedPaths(p,eC)=Ps U 
  Ps={P|P inside eC}
  Csss= reorganized Ps 
  usedPaths(p,Csss)
  ???
  
define # and norm

define #
- p#Ps = p#Csss, where Csss is  Ps organized as list of list of Cs, such that for every Csi,Csj in a Css in Csss, Csi prefix of Csj iff i=j
- p#empty = p
- p # Css, Csss = L',(p.pop() # Csss).push(L')
 Css = Cs1..Csn
 pi = p.navigateIn(Csi)
 Li = norm(pi,pi(0))
 L' = p(0)[Cs1=L1..Csn=Ln] //replace the nested classes in paths Csi with libraries Li.

-p.navigateIn(empty)=p
-p.navigateIn(C.CS)=????//how to do it in your repr? 
 
 define norm(p,e)=e
 
 -norm(p,*localBindingDecl*)= use resolve(p,T)=T' on scheletal types.
 -norm(p,L)=  L={interface? implements Ps M1'...Mn'}
  L={interface? implements Ps M1..Mn}
  L'={interface? implements collect(p,Ps) M1...Mn}
  Mi'=norm(p L', Mi)
  -collect(p,empty)=empty
  -collect(p,P Ps)=Ps' if collect(p,Ps)=Ps' and P in Ps'
  else collect(p,P Ps)=Ps' U Ps''[from P] if collect(p,Ps)=Ps' and p(P)={_ implements Ps'' _}
  //should be just collecting or should also check for multiple declaration points for methods? how?
  //how to interpret the result as a set if we do not know the nesting?
  //should norm also normalize the paths?
  //should we let the type system check that?
  
 -norm(p,ms e)=norm(p,refine mh e) 
    p= {_ implements Ps _},_
    mh= MhOf(p,Ps,ms)//here is recovering type info
    
 -norm(p,refine mh e?)= refine resolve(p,mh) norm(p,e?)
    p= {_ implements Ps _}, _
    mh=~= MhOf(p,Ps,ms^mh)//here check is refined well, that is all equal except return type,
    // no subtyping check on return type 
    
 -norm(p,mh e?)= resolve(p,mh) norm(p,e?)
    p={_ implements Ps _}, _
    undefined MhOf(p,Ps,ms^mh)//check is not an implemented method
 
 -norm(p, C:e) =C:norm(p,e)//assume we can cache if e is already normalized and avoiding repeating
 
 -MhOf(p,Ps,ms)=mh[from P]
   exists unique P in Ps such that
     p(P)=L, L(ms)=mh//not sure is matematically ok...