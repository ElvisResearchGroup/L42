-----------------------------
Structure of this document:

1 Type Grammar

2 Type manipulation

3 ExpressionTypeJudgement

4 Subtyping p|- T<=T' and shortcut D |- e ~> e':T | Tr<=T'

5 LibraryAndMemberTyping

-----------------------------
1 Grammar
-----------------------------
//In this file, all the L are LC   //LC == in all C:e, e of form L

G::=x1:T1..xn:Tn  //G reads Gamma
D::= Phase `|` p `|` G   //D reads Delta
//Cage::= xss; xs
Tr::=Ts; Ps //Tr reads Throws
MethT::=Ts->T;Ps

//we believe that at any moment, in a D:
//Cage.xss contains only bindings that are mut in G
//Cage.xs contains only bindings that are mut, fwd%Mut, fwdMut, lent, read in G 

--------------------------------------------
2 Type manipulation
--------------------------------------------

complete(G)={x:T | G(x) not fwd/fwd%}

fwd T
  fwd imm P=fwd fwd%imm P=fwdImm P
  fwd mut P=fwd fwd%mut P=fwdMut P
  otherwise fwd T=T

fwd% T
  fwd% imm P=fwd%Imm P
  fwd% mut P=fwd%Mut P
  otherwise fwd% T=T
 
noFwd
  noFwd imm P=noFwd fwd%imm P=Imm P
  noFwd mut P=noFwd fwd%mut P=Mut P
  otherwise noFwd T=T

toImm(T)        
  toImm(class P)=class P
  otherwise, toImm(mdf P)=imm P

toLent(T)
  toLent(mut P)=lent P,
  toLent(mutFwd P) and toLent(mutFwd% P) undefined;
  otherwise toLent(T)=T 

capsuleToLent(T)  
  capsuleToLent(capsule P)=lent P
  otherwise capsuleToLent(mdf P)=mdf P
   
toRead(T)
  toRead(imm P)=imm P
  toRead(fwdImm P)=fwdImm P
  toRead(fwd%Imm P)=fwd%Imm P
  toRead(fwdMut P)=toRead(fwd%Mut P)=undefined
  toRead(class P)=class P
  otherwise toRead(mdf P)=read P //mdf in read,lent,mut,capsule

toRead(G)
  toRead(G)(x)=toRead(G(x)) //thus undefined where toRead undefined 

toLent(G)
  toLent(G)(x)=toLent(G(x)) //thus undefined where toLent undefined

// unused now? toLent(T1..Tn;Ps)=toLent(T1)..toLent(Tn);Ps

toImmOrCapsule(T)
  toImmOrCapsule(mdf C)=capsule C with mdf in {lent,mut,fwdMut,fwd%Mut,capsule}
  toImmOrCapsule(read C)=imm C
  otherwise toImmOrCapsule(T)=T//mdf in {class,imm,fwdImm,fwd%Imm}

lentToMut(T)
  lentToMut(lent C)=mut C
  otherwise lentToMut(T)=T  

mutToCapsule(T)
  mutToCapsule(mut C)=capsule C
  otherwise mutToCapsule(T)=T

G[G']
  G[G'](x)=G'(x) if x in dom(G'); otherwise G[G'](x)=G(x)

G[ks]
  G[catch error mdf P x e ks]=toRead(G) with P not Any
  otherwise G[ks]=G 

mostGeneral(p,error,Tr)=imm Any
mostGeneral(p,return,empty;Ps) undefined??
mostGeneral(p,exception,_;empty) undefined?? TODO:Need discussion
mostGeneral(p,return,T1..Tn;Ps)=mostGeneral({T1.mdf .. Tn.mdf}) mostGeneral(p,T1.P .. Tn.P)
otherwise 
mostGeneral(p,exception,_;Ps)=imm mostGeneral(p,Ps)

mostGeneral(p,P)=P
otherwise
mostGeneral(p,Ps1 P Ps2)=mostGeneral(p,Ps1 Ps2)
  if exists P' in Ps1,Ps2 such that p|-P<=P'
otherwise
mostGeneral(p,Ps)=Any 

catchRethrow(k) iff k=catch throw T x ((imm Void y=e catch error Any z void void) throw x)

mostGeneral(mdfs)=mdf //assert fwd and fwd% not in mdfs
  if mdfs=mdf', then mdf=mdf' //that is the only way mdf=class
  otherwise if class in mdfs, then undefined
  otherwise if read in mdfs, mdf=read
  otherwise if capsule in mdfs, then mdf=mostGeneral(mdfs\capsule)
  //from now on, we have at least two of those:lent, mut, imm //Note: fwd and fwd% are cutted out in the throw rule
  otherwise if imm in mdfs, mdf=read
  otherwise mdf=lent
  //set oriented definition from james: mostGeneral(mdfs) = mdf0 such that 
  //forall mdf1 in mdfs, mdf1 <= mdf0
  //forall mdf2
  //  either mdf0 <= mdf2
  //  or exists mdf3 in mdfs  not mdf3 <= mdf2

Tr1 U Tr2
  Ts1;Ps1 U Ts2;Ps2 =  Ts1,Ts2; Ps1,Ps2  

Tr.capture(p,k1..kn)= Tr.capture(p,k1)...capture(p,kn)

Tr.capture(p,catch error P x e)=Tr
(Ts;Ps).capture(p,catch exception P x e)=Ts;{P'| P' in Ps, not p|-P'<=P}
(Ts;Ps).capture(p,catch return P x e)={T| T in Ts, not p|-T.P<=P};Ps


methTypes(p,P,ms)
  methTypes(p,P,ms)={MethT,MethT0,..,MethTn,MethT',MethT''}
    p(P).ms.mh[from P]=mdf0 method T m(T1 x1,..Tn xn) exception Ps
    MethT=(mdf0 P0 T1..Tn->T;Ps)  =  T0..Tn->T;Ps
    MethT'=toImmOrCapsule(T0..Tn->T);Ps
    MethTi=Tsi->toLent(T);Ps where Tsi=toLent(T0..Ti-1) lentToMut(Ti) toLent(Ti+1..Tn)
    MethT''=mutToCapsule(T0..Tn->T);Ps
    //MethTi is not produced if any parameter has mdf fwdMut
--------------------------------------------
3 ExpressionTypeJudgement
--------------------------------------------
  D |- e ~> e':T   and D |- k ~> k':T 
  where e' is an annotated version of expression e and is of type T
  where k' is an annotated version of catch k and k.e is of type T
  D.p points to where the e is located, //D.p.top()=ctxL[e]
  so if P inside e, D.p(P) is a reasonable operation


(void)
_ |- void~> void:imm Void | emptyTr

(Path)
_ |- P~>P:class P | emptyTr

(library prop)
Phase |p |_ |_ |_ |- L ~> L' : imm Library | emptyTr
  where
  Phase  |- p.evilPush(L) ~> L'

(x)
Phase| p| G| xss; xs| Tr |-x:T | emptyTr
  where
  x notin xs
  if x in xss T=(G(x))
  otherwise T=G(x)

(loop)
D |- loop e ~> loop e' : imm Void | Tr
  where
  D|- e ~> e' : imm Void | Tr

(throw)
D|-throw[T?,_] e~> throw[T,mdf P] e' :  T | Tr
  where
  resolve(D.p,guessType(D.G,e))=mdf' P //TODO: is it needed somehow or should just be asserted?
  D|- e~>  e' :  mdf P |Ts;Ps <=mdf' P //Allows to use alternative method typing
  either T?=empty or T?=T
  if throw=exception, mdf=imm and Tr=Ts;Ps,P
  if throw=return, mdf=mdf',Tr=Ts,mdf P;Ps and mdf not fwd or fwd% 
  if throw=error, mdf=imm and Tr=Ts;Ps

(mcall)
D|- e0.m[_](x1:e1..Xn:en) ~> e'0.m[P0](x1:e'1..xn:e'n)  : T' | Tr0 U..U Trn U (empty;Ps) //e0 will be of form mr
  where
  resolve(D.p,guessType(D.G,e0))= _ P0
  T0..Tn->T;Ps in methTypes(p,P0,m(x1..xn))
  D.p(P0).m(x1..xn).mh[from P0]=mdf0 method T m(T1 x1,..Tn xn) exception Ps
  forall P in Ps exists P' in D.Tr.Ps such that p|- P <= P'
  forall i 0..n D|- ei ~> e'i : T'i <=Ti | Tri//T'0 is correctly a free variable
  if no fwd or fwd% in T'1..T'n
    T'=T
  otherwise 
    T'=fwd% T
     
(using)
 D|-use P check m(x1:e1.. xn:en) e0 ~>use P check m(x1:e'1.. xn:e'n) e'0 :T0 | Tr0 U..U Trn
 where
   plugin(D.p,P,m(x1..xn))=plg, T0..Tn //plg is a free variable, in the small step reduction would be the function representing the behaviour
   forall i 0..n D|- ei ~> e'i : T'i <=Ti |Tri
//TODO: what happen if a parameter take mut and the plugin throw error w.r.t. strong error safety? can we catch it soon?

(block divide scope)
//This rule is not materialized in the sugar since it would duplicate the catches (potentially exponentially) //also a desugaring tring to assign the inner block to a variable and then do the catches only one would capture also errors in the "e"
//type system need not to repeat the test for ks in the two contexts,
//since if ks typed in the outer block, it would also type in the same way
//in the richer context in the inner block.
D|- (ds1 ds2 ks e)~>(ds'1 ds'2 ks' e'):T
  where
  D|- (ds1 ks (ds2 ks e) )~>(ds'1 ks'(ds'2 ks' e')):T
  dom(ds2) not in FV(ds1)
  //we do not need to state FV(ks) not in dom(ds1,ds2) since rule block do G/x1..xn
  //to optimize, we could use a empty shell ks (with all es replaced with error void), but then we will need to explicitly test for FV(ks) not in dom(ds1,ds2)

(block)
Phase| p| G|-(T1 x1=e1..Tn xn=en ks e0[_]) ~>(T'1 x1=e'1..T'n xn=e'n ks' e'0 [T]) : T | (Tr1 U..U Trn).capture(p,ks') Tr U Tr0
  where
  for i in 1..n T'i=resolve(p,Ti)
  G'=x1:T'1..xn:T'n
  G1=G[ks][fwd(complete(G'))]
  for i in 1..n Phase| p| G1|-ei~>e'i: _ <=fwd% T'i | Tri
  Phase| p| G/x1..xn | Tr1 U .. U Trn |-ks~> ks' : T | Tr
  if exists x in FV(e1..en) such that G(x)=fwd _ or G(x)=fwd% _
    G0=G[fwd%(G')]
  otherwise
    G0=G[G']
  Phase| p| G0 |-e0~>e'0:_ <=T | Tr0
//Note, need to add cching info for mdf in catch return since now is inferred at typing
    

//Note: the new idea is that catch throw Any will catch all that can be thrown,
// if not of form catchRethrow(k); in that case *only* the catchRethrow rule will apply
(catchMany)
D| Tr |-k1..kn ~> k'1..k'n:T | Tr1 U .. U Trn
  where
  forall i in 1..n D| Tr|-ki ~> k'i:T|Tri
  either forall i 1..(n-1) Any notEq k'i.P //That is, only the last one can 
  
(catch)
Phase| p| G| _ |-catch throw T0 x e ~> catch throw resolve(p,T0) x e' :T1| Tr
  where
  Phase| p| G[x:T0]|- e ~> e':_<=T1| Tr
  either throw=return or resolve(p,T0)=imm _
  resolve(p,T0) not in {_ Any, fwdImm _,fwdMut _, fwd%Imm _,fwd%Mut _}//This cause strong limitation in factories using conditionals (as in if-return)

(catch and rethrow any)// could be sugared as "on throw mdf x doAndPropagate e"  
Phase |p |G |Tr|-catch throw T x (e0 throw x) ~> catch throw mdf Any x (e0' throw x): _ | Tr
  where
  resolve(p,T)=mdf Any //mdf is ignored
  e0=(imm Void y=e catch error Any z void void)
  e0'=(imm Void y=e' catch error Any z void void)
  Phase |p |G\x |- e ~> e':_ <=imm Void | empty

(catch precise any)//TODO: can it be broken by metaprogramming? forcing to jump to Any while there was a result before?  
Phase |p |G  |Tr|-catch throw T0 x e ~> catch throw Any x e': T | Tr'
  where
  not catchRethrow(catch throw Any x e)
  resolve(p,T0)=mdf Any
  //more expressive rule would say e type for any T in Tr.Ts
  T1=mostGeneral(throw,Tr)//may be Any, or even undefined for return class+read
  Phase |p |G+x:T1|- e ~> e':_<=T| Tr'


(capsule promotion)
Phase |p |G |-(ds ks e)~>(ds' ks' e'):capsule P | Tr
  where
  Phase |p |toLent(G) |-(ds ks e)~>(ds' ks' e'):mut P   | Tr

------------------------------------------------------
4 Subtyping p|- T<=T' and shortcut D |- e ~> e':T<=T'|Tr
------------------------------------------------------
  
(subtype)
p|-mdf0 P0<=mdf1 P1
  where
  mdf0<=mdf1
  P in P0 U (p(P0).Ps[from P0])
  p.equiv(P,P1)
  
(shortcut)
D |- e ~> e':T<=T' | Tr
  where
  D |- e ~> e':T | Tr
  D.p |-T<=T'
  
mdf<=mdf
mdf1<=mdf3 if mdf1<=mdf2 and mdf2<=mdf3
capsule<=mut,imm
imm<=read
mut<=lent
lent<=read
mut<=fwd%Mut
fwd%Mut<=fwdMut
imm<=fwd%imm
fwd%Imm<=fwdImm
-----------------------------------------------
5 LibraryAndMemberTyping
-----------------------------------------------
 Phase |- p ~> L   and   p | Ps |- M ~> M'
 L is the typed/annotated version of p.top()
 M' is the annotated version of M
 and p.top() is the literal containing M

  
(library shallow norm)
Norm  |- p ~> norm(p)  //remember: norm ignores meth bodies
//assert forall P in norm(p).Ps p(P).Phase>=Norm

(library well typed)
Phase |- p ~> L' //In implementation, if p.top().Phase>=Phase, L'=p.Top()
   where
   Phase in {Typed,Coherent}
   L0={interface? implements Ps M1..Mn Phase'}=norm(p)
   L'={interface? implements Ps M1'..Mn' max(Phase',Phase)}
   //assert forall P in Ps p(P).Phase>=Norm
   forall i in 1..n
     Phase| p| Ps |- Mi ~> Mi'
   if Phase=Coherent then coherent(p)

Phase| p| Ps |-C:L ~>  C:L'
   where
   Phase |-p.push(C) ~> L'

Phase| p| Ps |-M ~> M'
  where
  M =refine? mdf method T m(T1 x1 .. Tn xn)exceptions Ps0 e?
  M'=refine? mdf method T m(T1 x1 .. Tn xn)exceptions Ps0 e?'
  G=this:mdf This0,x1:T1,..,xn:Tn
  if e?=e then
    Typed| p| G| |- e ~>  e?':_ <=fwd% T | empty;Ps1
    forall P1 in Ps1 exists P0 in Ps0 such that p|-P1<=P0
  else
    e?=e?'
  refine? != empty <=> 
    forall P in Ps such that p(P)(m(x1..xn))=M0 //that is, is defined
      M0=mdf method T' m(T1 x1..Tn xn)exceptions Ps' and p|-T<=T'


coherent(p) //interfaces are always coherent
  where
  p.top()={interface implements _ mwts ncs}
    
coherent(p)  //classes are coherent if they have a coherent set of abstract methods
  where
  p.top()={implements _ mwts' ncs} //note, no interface
  mwts={mwt in mwts'| mwt.e undefined } //collect the abstract methods
  either mwts is empty or
    at least 1 mwt in mwts is class method 
    and
    exists some (T x)s such that //angelic non determinism to figure out at least one set of types for the fields 
      all T in (T x)s are mut, imm, class or capsule //thus, no fwd
      forall mwt in mwts coherent(p,(T x)s, mwt) //all abstract methods are coherent according to those fields
      
      
coherent(p,T1 x1..Tn xn,
      refine? class method T m(T1' x1..Tn' xn) exception _)
  where
  either
    p|-mut This0 <=T and p|-Ti'<=fwd Ti
  or   
    p|-imm This0 <=T and p|-Ti'<=fwd toImm(Ti)
  or
    p|-read This0 <=T and p|-Ti'<=fwd toRead(Ti) //how with capsule?


coherent(p,T1 x1..Tn xn,
    refine? mdf method T m() exception _)
  where
  m=#?xi
  either
    mdf=mut and p|-capsuleToLent(Ti)<=T //exposer
  or 
    mdf=read and p|-toRead(Ti)<=T //getter
  
coherent(p,T1 x1..Tn xn,
    refine? mut method Void m(T that) exception _)
  where
  m=#?xi
  p|-T<=Ti//setter
 
----------------
Dispatch for the simplified TS:

use rule for the specific form,
if block, first do the maximal split if needed. (mark pre splitted blocks?)
if splitted block, and required capsule, try type normally, on fail, try capsule promotion

if method:
  check if return type is ok with primary meth return.
  if not, you have 1 or 0 possible alternative types (read->imm or mut->capsule/imm)
  if return ok and could even be toLent and still be ok,
  expect toLent for all parameters.
  If all ends up with the needed type, no lentviewpoint
  if exactly one needed the allowed lent, re type the other mut as capsule
  
So, retype happens only for block if obtained mut but needed capsule
and for method parameter where mut obtained but needed capsule.
As special case, if meth parameter is block, and is normally typed mut, we can
skip (double) double typing and go on with block promotion directly



---------------
OLD STUFF FROM NOW ON  
------------------
Dispatch //HARD
-------------------

1- e:imm Library do we always know the expected (super) type?
  D,e,expectedT-->e'
  D|-e~>e' :_<=expectedT



Calling type system on e:

BlockDivideScope block->block:
  compute all the splitting points of a block, by using an algorithm like the following:
    for each d in ds, see FV(ds), ...
  then construct a resulting block where all inner ks are empty shells.
  you can mark a divided block by using the Type annotation putting some special value, or a boolean flag.
  

SimpleTS D, expectedT,e-> computedT,Tr,annotatedE or errorInfo
apply rule for (block) (void) (Path) (library prop)(x) (loop) (throw) (mcall) (using)
  inside (block) we will apply (catchMany),(catch),(catch and rethrow any)

CompleteTs D,e->computedT,Tr,annotatedE or error info ://the one called recursivelly every time we do a "D|-e~>e' :_<=expectedT"
  as much as possible, apply (lent to singleton)
  if e is a block b, then e=BlockDivideScope(b)
  if possible and, apply unlock optimistically
  //do not attempt the former line if the direct function over in the stack trace is imm-promotion
  //do not attemp the former line if FV(e) do not contain locked variables
  //may be just do it on demaind?
  if e is a methodCall and the predicted result is not subtype of expected: AttemptPromotion  
  else if e is a throw error/exception and the predicted result is not immutable: AttemptPromotion
  else try UnlockTS
  on result subtype of expected: all ok
  on result not subtype of expected: AttemptPromotion

AttemptPromotion:
  if result is different w.r.t. the expected, fixable modulo capsule promotion:
    apply (capsule promotion), then UnlockTS
    if fail and expression is block in shape, apply (propagate promotions to catches):
    apply to change to mut, apply (capsule promotion), apply UnlockTS; assert: the result is subtype of the expected.
  if result is different w.r.t. the expected, fixable modulo imm promotion:
    apply (imm promotion), then UnlockTS
    if fail and expression is block in shape, apply (propagate promotions to catches):
    apply to change to mut, apply (capsule promotion), apply UnlockTS; assert: the result is subtype of the expected.
    if fail
    apply change to read, apply (imm promotion), apply UnlockTS; assert: the result is subtype of the expected.

SwapTS: //return computed type or error
  try SimpleTS
  on result subtype of expected: all ok
  on fail:
    if "lent should be mut", apply swap, then SimpleTS
    propagate other failures

UnlockTS: //return computed type or error
  try SwapTS
  on result subtype of expected: all ok
  on fail:
    if "required variable is strongly locked", apply unlock, then SwapTS
    //do not attempt the former line if the direct function over in the stack trace is imm-promotion
    //do not attemp the former line if FV(e) do not contain locked variables
    propagate other failures

//Note adding native support for local variables + casts would not make
//returns less needed/problematic

//Note: the current system never try to promote the e of return e
----------------
Coherent and union types:
to easy translation in Java/etc, we can not accept the following
A,B interface
C,D implements A,B

I implements C,D
class method This f(I x   )
mut method Void x ( C that)
mut method Void #x ( D that)
read method A x()
read method B #x()
as coherent, since the field would be an union type of C and D


--------------------------------------------------
Removed rules

(unlock)
Phase |p |G |xss;xs|-e~>e':mdf P | Tr
  where
  Phase |p |G |xss,domMut(G)\xss ; empty |-e~>e':mdf P | Tr
  mdf in {imm,fwd%Imm,fwdImm,capsule,class}
  forall T in Tr.Ts, T.mdf in {imm,capsule,class} 

(swap)
Phase |p |G |xs0,xss;xs|-e~>e':toLent(mdf P) | toLent(Tr)
  where
  Phase |p |G |xss,domMut(G)\xss ; xs |Tr|-e~>e':mdf P | Tr

(imm promotion)
Phase |p |G |Cage|-e~>e':imm P | Tr
  where
  Phase |p |G |Cage' |-e~>e':mdf P | Tr
  mdf in {read,lent} //TODO: what about fwd/fwd%  
  Cage=xss;xs
  Cage'=xss,domMut(G)\xss;domMutLentRead(G)//fwd%Mut, fwdMut in xs too

(lent to singleton)
Phase| p| G, x:lent C, G'|  xss;xs |-e~>e':T  | Tr
  where 
  Phase| p| G, x:mut C, G'|  xss,{x};xs |-e~>e':T | Tr

(capsule promotion)
Phase |p |G |Cage |-e~>e':capsule P | Tr //TODO: should we promote a mut P inside Tr to capsule? same for imm-promotion?
  where
  Phase |p |G |Cage'|-e~>e':mut P   | Tr
  Cage=xss;xs
  Cage'=xss,domMut(G)\xss;xs
