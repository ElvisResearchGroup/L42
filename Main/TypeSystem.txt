-----------------------------
Structure of this document:

1 Type Grammar

2 ExpressionTypeJudgement

3 Subtyping p|- T<=T' and shortcut D |- e : e':T<=T'

4 LibraryAndMemberTyping

-----------------------------
1 Grammar
-----------------------------
//In this file, all the L are LC   //LC == in all C:e, e of form L

G::=x1:T1..xn:Tn  //G reads Gamma
D::= Phase `|` p `|` G `|` Cage `|` Tr  //D reads Delta
Cage::= xss; xs
Tr::=Ts; Ps //Tr reads Throws



--------------------------------------------
2 ExpressionTypeJudgement
--------------------------------------------
  D |- e : e':T   and D |- k : k':T 
  where e' is an annotated version of expression e and is of type T
  where k' is an annotated version of catch k and k.e is of type T
  D.p points to where the e is located, //D.p.top()=ctxL[e]
  so if P inside e, D.p(P) is a reasonable operation

complete(G)={x:T | G(x) not fwd/fwd%}

fwd T and fwd% T return the fwd/fwd% version of T, or the same T if T not imm/mut/fwdImm/fwdMut/fwd%Imm/fwd%Mut 

noFwd T return the version of T without the fwd/fwd% or the same T if not fwd/fwd% is present

 lentOf(mut P)=lent P,
 lentOf(mutFwd P) and lentOf(mutFwd% P) undefined;
 otherwise lentOf(T)=T 

(void)
_ |- void: void:imm Void

(Path)
_ |- P:P:class P

(library prop)
Phase |p |_ |_ |_ |- L : L' : imm Library
  where
  Phase  |- p.evilPush(L) : L' //s it clashing on the notation in the end of Normalization.txt?

(x)
Phase| p| G| xss; xs| Tr |-x:T
  where
  x notin xs
  if x in xss T=lentOf(G(x))
  otherwise T=G(x)

(loop)
D |- loop e:loop e':imm Void
  where
  D|- e:e':imm Void

(throw)
D|-throw[_,_] e: throw[T,mdf P] e' :  T
  where
  D|- e:  e' :  mdf P
  if throw=exception, p|-mdf P<=imm P' and P' in D.Ps
  if throw=return, p|-mdf P<=T' and T' in D.Ts
  if throw=error, p|-mdf P<=imm Any  

(mcall)
D|- e0.m[_](x1:e1..Xn:en) : e'0.m[P0](x1:e'1..xn:e'n)  : T
  where
  D|-e0: e'0:mdf0 P0<=mdf'0 P0
  not D|-e0: _:imm Void //makes (error x).m(...) not well typed
  D.p(P0).m(x1..xn).mh[from P0]=mdf'0 method T' m(T'1 x1,..T'n xn) exception Ps
  forall P in Ps exists P' D.Tr.Ps: p|- P <= P'
  forall i 1..n D|- ei : e'i : Ti <=T'i
  if no fwd in T1..Tn
    T=T'
  otherwise 
    T=fwd% T'
     
(using)
 D|-use P check m(x1:e1.. xn:en) e0 :use P check m(x1:e'1.. xn:e'n) e'0 :T'0
 where
   plugin(D.p,P,m(x1..xn))=plg, T'0..T'n
   forall i 0..n D|- ei : e'i : Ti <=T'i


(block)
Phase p G Cage Tr|-(T1 x1=e1..Tn xn=en ks e0[_]) :(resolve(p,T1) x1=e1..resolve(p,Tn) xn=en ks e0[T]) : T
  where
  Phase p G Cage Tr|-ks: ks' :T
  for i in 1..n Phase p G1 Cage Tr[ks]|-ei:e'i:T'i<=fwd% Ti
  G'=x1:T1..xn:Tn
  G1=G[ks],fwd(complete(G'))
  Phase p G0 Cage Tr|-e0:e'0:T
  if exists x in FV(e1..en) such that G1(x)=fwd _
    G0=G,fwd%(G')
  otherwise
    G0=G,G'
  
(block divide scope)
D|- (ds1 ds2 K e):(ds'1 ds'2 K' e'):T
  where
  D|- (ds1 K (ds2 K e) ):(ds'1 K'(ds'2 K' e')):T
  

(propagate promotions to catches)
//dec-k-prom-t seams broken but is actually ok since use x as the catch e
//basically is a late fix for the poor sintactic sugar...
//should it be encoded in the sugar??
//No, the application of this rule needs to be dynamic and failure driven
//note, the sugar just use a single k...
D|- (ds ks1 catch return mdf Path x x ks2 e):(ds' ks'1 catch return mdf' Path x x ks'2 e') :T
  where
  D|-(ds ks1 catch return mdf' Path x x ks2 e):(ds' ks'1 catch return mdf' Path x x ks'2 e') :T
  either
    mdf=capsule, mdf'=mut
  or
    mdf=imm, mdf' in {mut,read}
  
(catch)
Phase p G Cage Tr|-catch throw T x e : catch throw resolve(p,T) x e' :T'
  where
  Phase p G,x:T Cage Tr |- e : e':T'

(cath and rethrow any)  
Phase p G Cage Tr|-k0 : catch throw resolve(p,T0) x e0 :T0
  where
  k0=catch throw mdf0 Any x e
  k1=catch throw T1 x e
  k2=catch throw T2 x e
  for i in 0,1,2 Phase p G Cage Tr[ki]|-ki : catch throw resolve(p,Ti) x ei :Ti
  either
    throw=exception, mdf=imm, T0=imm Library, T1=imm Void
  or
    throw=return, T0=class Library, T1=read Void

(lent viewpoint adaptation)
Phase p G Cage Tr|-e:e':mdf P
  where
  Phase p G Cage' Tr|-e:e':mutToLent(mdf P)
  Cage=xs0,xss;xs
  Cage'=xss,domMut(G)\xss ; xs'
  if mdf in {read,lent,mut} then xs'=xs
  otherwise xs'=empty
  

(capsule promotion)
Phase p G Cage Tr|-e:e':capsule P
  where
  Phase p G Cage' Tr|-e:e':mut P  
  Cage=xss;xs
  Cage'=xss,domMut(G)\xss;xs

(imm promotion)
Phase p G Cage Tr|-e:e':imm P
  where
  Phase p G Cage' Tr|-e:e':mdf P
  mdf in {read,lent}  
  Cage=xss;xs
  Cage'=xss,domMut(G)\xss;domMutLentRead(G)

(lent to singleton)
Phase| p| G x:lent C G'|  xss;xs | Tr |-e:e':T
  where 
  Phase| p| G x:mut C G'|  xss,{x};xs| Tr |-e:e':T


------------------------------------------------------
3 Subtyping p|- T<=T' and shortcut D |- e : e':T<=T'
------------------------------------------------------
  
(subtype)
p|-mdf0 P0<=mdf1 P1
  where
  mdf0<=mdf1
  P in P0 U (p(P0).Ps[from P0])
  p.equiv(P,P1)
  
(shortcut)
D |- e : e':T<=T'
  where
  D |- e : e':T
  D.p |-T<=T'
  
mdf<=mdf
mdf1<=mdf3 if mdf1<=mdf2 and mdf2<=mdf3
capsule<=mut,imm
imm<=read
mut<=lent
lent<=read
mut<=fwd%Mut
fwd%Mut<=fwdMut
imm<=fwd%imm
fwd%Imm<=fwdImm
-----------------------------------------------
4 LibraryAndMemberTyping
-----------------------------------------------
 Phase |- p:L   and   p |- M:M'
 L is the typed/annotated version of p.top()
 M' is the annotated version of M
 and p.top() is the literal containing M

  
(library shallow norm)
Norm  |- p : norm(p)  //light norm: ignore meth bodies

(library well typed)
Typed |- p : L'
   where
   L0={interface? implements Ps M1..Mn Phase}=norm(p)
   L'={interface? implements Ps M1'..Mn' max(Phase,Typed)}
   p| Ps |- Mi : Mi'
   forall ms in dom(p(P1))U..U dom(p(Pm))
     where Ps=P1..Pm
     ms in dom(L0)


(library coherent)
Coherent |- p : L'
   where
   Typed |- p : L'
   coherent(p)
    


p| Ps |-C:L :  C:L'
   where
   Typed |-p.push(C) : L'

p| Ps |-M : M'
  where
  M =refine? mdf method T m(T1 x1 .. Tn xn)exceptions Ps' e?
  M'=refine? mdf method T m(T1 x1 .. Tn xn)exceptions Ps' e?'
  if e?=e then
    Typed p| G|empty;empty|empty;Ps' |- e:  e?':_ <=T
  else
    e?=e?'
  existsExactly 1 P in Ps,This0
    such that p(P)(m(x1..xn)).refine? = empty
  refine? != empty <=> 
    forall P in Ps such that p(P)(m(x1..xn))=M //that is, is defined
      M=mdf method T' m(T1 x1..Tn xn)exceptions Ps' and p|-T<=T'

coherent(p,C1:L1..Cn:Ln)=coherent(p.push(C1),L1)..coherent(p.push(Cn),Ln)

coherent(p)
  where
  p.top()={interface implements _ mwts ncs}
  coherent(p,ncs)
    
coherent(p)    
  where
  p.top()={implements _ mwts' ncs} //note, no interface
  coherent(p,ncs)
  mwts={mwt in mwts'| mwt.e undefined }
  either mwts is empty or
    at least 1 mwt in mwts is class method 
    and
    exists (T x)s such that
      all T in (T x)s are mut, imm, class or capsule //thus, no fwd
      forall mwt in mwts coherent(p,(T x)s, mwt)
      
      
coherent(p,T1 x1..Tn xn,
      refine? class method T m(T1' x1..Tn' xn) exception _)
  where
  either
    p|-mut This0 <=T and p|-Ti'<=fwd Ti
  or   
    p|-imm This0 <=T and p|-Ti'<=fwd toImm(Ti)
  or
    p|-read This0 <=T and p|-Ti'<=fwd toRead(Ti) //how with capsule?


coherent(p,T1 x1..Tn xn,
    refine? mdf method T m() exception _)
  where
  m=#?xi
  either
    mdf=mut and p|-capsuleToLent(Ti)<=T //exposer
  or 
    mdf=read and p|-toRead(Ti)<=T //getter
  

coherent(p,T1 x1..Tn xn,
    refine? mut method Void m(T that) exception _)
  where
  m=#?xi
  p|-T<=Ti//setter
        
    class P=toImm(class P)
    otherwise, imm P=toImm(mdf P)
    
    read P=toRead(mut P)=toRead(capsule P)
    imm P=toRead(imm P)
    class P=toRead(class P)
    
    lent P=capsuleToLent(capsule P)
    otherwise mdf P=capsuleToLent(mdf P)
  
------------------
Dispatch //HARD