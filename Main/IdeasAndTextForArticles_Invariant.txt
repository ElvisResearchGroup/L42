
Intro
We discuss invariants, their meaning and how to
 verify them by sound run-time checks
in the context of an imperative statically nominally typed object oriented languages,
where every value is an object and there is no (need of) primitive types. 
We include in our discussion Exceptions (as normal objects)

One of the main interpretations of objects
is that they are records satisfing with invariant.
For example, a Person object needs to have a positive Int age 
and a non empty String name.
The programmer of the person
class can assume that 'age' and 'name' are instance of Int and String.
Is then their responsability to code Person in such a way so that
 'age>=0' && !name.isEmpty()' (the invariant) always hold.
We call 'corrupted' an object that does not satisfy the invariant of its class.


Naivelly one may hope that just checking the invariant
 in the end of the constructor is good enough.

This is false in the general case:
-the constructor may leak 'this' before enstablihing the invariant 
-field update may break the invariant later on
-part of the object graph reachable from a field may be mutated
outside of control
-a corrupt object may escape control by being throw in the reachable
 object graph of a exception.

This great difficulty of checking the invariant means that a cautios programmer
may not trust other object to respect their invariant. For example, 
the String age may be corrupted, and thus the result of ".isEmpty()" meaningless.


In an ideal language, the programmer should just add an
'invariant' method/clause containing the invariant code,
 wrote in the language itself: following the normal mechanisms
 of the language the invariant may reach and query any object in the
ROG of the Person object.
In our example, in a java like language the Person class should look like
class Person{
  Int age, String name,
  method Bool invariant(){
    return this.age()>=0 && !this.name().isEmpty()
    }
  }
(Since in our setting everything is an object, !, >= and && are just methods with operator overlading as in C#/python)

Then, the language should check that the invariant "holds".

We will discuss in the following:
-in this setting, what it means for an invariant to hold
-cathegories of objects where is possible to check for invariants
-language features enabeling sound invariant checking


--The meaning of Invariants
The whole idea of run time verification (RV) is to
inject operations checking that
some property holds; this means that
in a moment of time before the check the property
may have been violated. Thus, in a **correct/sound**
(RV) system, the invariants are not expected to always hold.
For example directly before an injected check 'this.invariant()',
the invariant for object x may not hold, and that is the reason
we are checking it in the first place.

Formally,
a language soundly enforce invariants if 
an object can be broken only when the current call stack
is inside of a method checking invariant on such
object.

For example, inside the method 'Person.invariant()' 
the name field may have zero size,
this fact also propagate inside of
the call of the method 'isEmpty'.

Invariant methods should be pure 
as in the functional sense: no mutation, no I/O, deterministic.
Ideally, checking that the invariant is pure should be responsabilty 
of the language and not of the programmer.

###############################################################
--Cathegories of objects
Immutable objects, as for UML DataTypes,
are the simplest cathegory to handle:
all the fields are final and refer to immutable objects.
One may even think that sound RV of invariants for immutable
objects is trivial: it suffice to check in the end of the constructor.

However, there are a set of impedements:
  1-miscoded immutable objects may actually be mutable
  2-miscoded invarants may not be pure
  3-a corruped 'this' may be leaked during object construction/invariant checking
   by an exception.
   
 We show here a set of language features that can soundly
 protect us from those 3 points, then we show how to expand invariant checking to other cathegories
 of objects.
 
Solving 1: Type modifiers
 Type modifiers are a well known language mechanism allowing
 to statically verify properties of mutability/aliasing of objects.
 For example
 mut Point mp=new Point(1,2)
 mp.setX(3)//ok
 imm Point ip=new Point(1,2)
 //ip.setX(3)//type error
 read Point rp=mp//ok read common supertype of imm/mut
 //rp.setX(3)//type error
 mp.setX(5)//ok, and now we can observe rp.x()==5 
 We can not use a read reference to induce mutation,
  but we have no guarancee for absence of mutation; in our example
we observe a change in rp caused by a mutation in mp.
 
 There are may interpretations for the semantic of type modifiers.
 Here we assume the strong/deep meaning:
 all the ROG from an immutable object is immutable
 all the ROG accessed from a read reference is accessed as read. 
 no casting is allowed between different type modifiers.
 
For example:
 mut Point mCenter=new Point(1,2)
 mut Circle mc=new Circle(mCenter,/*radius*/7)
 mc.setRadius(3)//ok
 imm Circle ic=new Circle(new Point(0,0),7)
 imm Point ip=ic.center()//ok, ROG immutable
 read Circle rc=mc
 read Point rp=rc.center()//ok, read Circle show read Point 
 //mut Point rp=rc.center()//type error 
  
With this kind of type system,
we can ensure immutable classes by just declaring all their fields
final and immutable.

Solving 2: Object capabilities
The general idea of object capabilities is that 
you need an object with "special" powers to do "special" actions.
We call those objects "capability objects".
In a language with capability,
we would not have "System.out.println" but the 'main' method
will take a System object as a parameter,
and that object need to be used to perform I/O,
as in 'mySystem.println("hello")'

Moreover, there is no visible constructor for the system object
and all the I/O methods require a mutable (mut) object.

Many other operations, like random numbers and File managing may
just take a mut System object as a parameter.

In this setting, now the invariant method may be defined as following:

read method invariant(){...}

The method is 'read': thus the method body will see the 'this' object as a read 
reference, and has no other parameters.
By starting from a read reference and nothing else, we are guaranteed
that the method is pure:
-the ROG from this is only accessed in read, thus it can not be mutated
-nothing else is accessible
-if a System object is in the ROG of this, then we will
only access it as read, preventing I/O.

Solving 3: Exceptions

However, the invariant can still throw exceptions.
We think this is a good thing: the invariant may want to
generate a user friendly error message explaining the reason
why the invariant is broken.
However, if such exception was to refer to "this" in its ROG,
then we will make such corrupt object escape.

A simple solution solving just this issue is to require all thrown exceptions
to be immutable: 'this' is 'read', thus it can not be embedded in an immutable object.
Fear not, exceptions are going to trouble our life again later in this paper.


Concluding
By type modifiers (imm, mut and read), object capabilies and
immutable exceptions we obtain sound RV for immutable classes/uml datatypes.

Formally, this means that if anywhere in the code x.invariant() does not hold,
then such code is called by a method that verify the invariant for x.

###############################################################
--Cathegories of objects
Simple objects
A simple object is an object that has only immutable fields.
The difference with respect to the uml datatype is that such fields
are not required to be final, and thus the object can change state 
during its life time.
The Person object in our example at the start, is a Simple object.
Of course now we introduced type modifiers, so we should write
the person class as: 

class Person{
  imm Int age, imm String name,
  read method Bool invariant(){
    return this.age()>=0 && !this.name().isEmpty()
    }
  }

The way RV works for simple objects or immutable objects is the same:
*fields are assumed to be private/invisible/renamed-to-unguessable-ids
fields are also not accessible by reflection or other fancy techniques
*getters are generated
*a constructor taking the fields and initializing them is generated.
Such constructor check the invariant.
*for each non final field, a setter is generated; again, the invariant is checked.

Thus the complete code (generated by the language during compilation) would be the following:

class Person{
  private imm Int age, private imm String name,
  read method Bool invariant(){
    return this.age()>=0 && !this.name().isEmpty()
    }
  public Person(imm Int age, imm String name){
    this.age=age;this.name=name;
    if(!this.invariant()){throw new Error(...);}
    }
  public imm Int age(){return age;}
  public imm Int name(){return name;}
  public void setAge(imm Int age){
    this.age=age;
    if(!this.invariant()){throw new Error(...);}
    }
  public void setName(imm String name){
    this.name=name;
    if(!this.invariant()){throw new Error(...);}
    }
  }

Note how such code is sound only because we can rely on immutability
of Int, String and on puritiy of all their methods.


Is this code ok for exceptions?
Well... not without some more safety mechanisms;
 look to the following example:

Person p=new Person(7,"Bob");
try{p.setAge(-1);}
catch(Throwable t){/*cache and ignore invariant failure*/}
p.age()==-1//now we have a corrupted object around!

Wops, if we can capture invariant failures as normal exceptions (very desirable feature)
then we may end up with broken objects around.
Note how this does not happens for immutable objects since the invariant
is checked in the constructor only.

A solution is to enforce the concept of strong exception safety:
if an operation throw an exception, then
mutation in the try is visible outside of the try.
Following the general idea of [], from a type perspective, we can leverage on modifiers
and type the body of a try
where all free variables of type mut will be seen as read. 
This de facto means that we need to capture exceptions either very close
to a non-mutating operation that can throw them, or
very far in the stack, where all the potentially corruped objects are guaranteed to be
garbage collected if the 'try' do not succede.

###############################################################
--Cathegories of objects
Encapsulated objects

An encapsulated object is an object that have control 
of its ROG: for example
we may have a person with a list of (String) allergies.
To avoid discussing generics, we assume a mutable list of imm Strings
ListS class.


class Person{
  imm Int age, imm String name,
  ListS allergies,//which modifier can we put here?
  mut method void addAllergy(String x){
    this.allergies().add(x);
    }
  read method Bool invariant(){
    return this.age()>=0 
      && !this.name().isEmpty()
      && this.allergies().size()<300
    }

In a language without any special support for invariants,
this code is broken:

Person p=new Person(36,"Marco",new ListS("DustMites"))
//p is ok now
ListS evilAlias=p.allergies()
//p still ok
for(int i=0;i<1000;i++){
  evilAlias.add("..");//this is corrupting p.
  //how can we discover it and give error?
  }
evilAlias.clear()//now p is ok again,
// but was broken before. How to capture that error?


The general idea is that we would like to mutate the
list object while keeping
the control of its aliasing:
To this aim we introduce 2 new modifiers:
'lent' and 'capsule'
The modifier 'lent' is used for 'highenic aliasing':
-all the ROG accessed from a lent reference is accessed as lent. 
-there are no read/lent fields, so a lent object can not be saved
inside of a mut object.
for example:
lent ListS myAllergies=..;
mut Evil evilCode=..;
evilCode.doIt(myAllergies);//can add/remove allergies
//but can not save the list object itself inside of 'evilCode'
//thus after the call, 'evilCode' have no access to 'myAllergies' 

The new modifier 'capsule' represent an 'baloon'
in the object graph:
Everything in the ROG of a capsule object is reachable only though
that field, however Immutable objects can be freely shared across capsule boundaries,
since they are referentially transparent.

Capsule references leverage on linear types to be passed around and manipulated, but former work []
do not include handling of capsule fields.

Here we allow capsule fields as a sugar; that is, capsule T f is expanded by the language into:

A capsule parameter for the generate constructor,

A normal (private) mutable field
private mut T f,

A read getter producing a read reference of that field
read method read T f(){return this.f;}

A lent getter (called an exposer) producing a lent reference of that field.
lent method lent T #f(){return this.f;}

Moreover:
-those specially named methods are only called with exactly "this" as a receiver.
-a method using "this.#" can not return a lent result
-invariant is checked at the end of any method using "this.#".

In this way, everything in the ROG of a capsule field
 is reachable only though 'read' and 'lent' local variables,
 and those types can be used to temporarly gain access of
those regions of memory from the stack.

In this setting, an ecapsulated object is 
**an object that only
has capsule and immutable fields.**

That is, here is the correct Person with allergies and how
it expands for supporting sound RV of the invariant.


class Person{
  imm Int age, imm String name,
  capsule ListS allergies,// new modifier 'capsule' here
  mut method void addAllergy(String x){
    this.#allergies().add(x);
    }
  read method Bool invariant(){
    return this.age()>=0 
      && !this.name().isEmpty()
      && this.allergies().size()<300
    }
-----------------
class Person{
  private imm Int age, private imm String name,
  private mut ListS allergies,// mut private here
  read method Bool invariant(){/*as before*/}
  public Person(imm Int age, imm String name, capsule ListS allergies){
    this.age=age;this.name=name;this.allergies=allergies;
    if(!this.invariant()){throw new Error(...);}
    }
  ..//getters and setters for age/name as before
  public read method read ListS allergies(){return this.allergies;}
  public lent method lent ListS #allergies(){return this.allergies;}
  public mut method void setAllergies(capsule ListS allergies){
    this.allergies=allergies;
    if(!this.invariant()){throw new Error(...);}    
    }
  mut method void addAllergy(String x){
    this.#allergies().add(x);
    if(!this.invariant()){throw new Error(...);}
    }
  }  
 

###############################################################
--Cathegories of objects
Encapsulated objects

no hope. Explain why
Should we do proxys for everything?