R::= Cs(.s)? -> Cs'(.s)?' |Cs(.s)? -> trash | //move, toAbstract
     Cs(.s)? => Cs'(.s)?' |Cs(.s)? => trash | //rename, hide
     Cs(.s)? => P(.s)?'                   //redirect
_______
#define rename(p,Rs,L)=L'
Rs ordering: 
first all the nested renames,
then all the method renames? or just allow only one of the two kinds?
at minumum: if Cs in Rs, then no Cs.s in Rs

-In all the cases is an error if Cs(.s)? do not exists or is private

Methods: 
- if an abstract state method is hidden, then the class if first
  automatically closed.
OR - no hide abstract user will close manually


rename(p,Cs.s->Cs'.s',L)=
L(Cs), L(Cs') not interface, L(Cs.s) class and not refine
size(s.xs)=size(s'.xs)

Class method
The simplest case is when the target is a class method:
  Conditions:  L(Cs), L(Cs') not interface, L(Cs.s) class and not refine
  -> leave the abstract signature in place;
     sum to L(Cs') the method, where all the occurences
     of 'This' and 'this' are replaced with Thisn.Cs 
     (with Cs=C1..Cn)
  => as for ->, but also rename all the references to Cs.s.
     Remove the abstract signature in Cs.s

Instance method
  Conditions:  Cs=Cs', L(Cs), not interface, 
               L(Cs.s)not class and not refine
  -> leave the abstract signature in place;
     sum to L(Cs') the method
  => as for -> but also rename all the references to Cs.s
     Remove the abstract signature in Cs.s
--
 *a refine method can not be renamed '=>'
  but can be moved '->' normally.
 *If an instance method is specified, but Cs!=Cs', then
 automatic lifting is applied:
 the method body is tweeked so that is turned in a class method that takes 'this' as first argument. The class method is then handled as before.
 *if an interface source is specified, some issues may arise and are solved as follow:
 -> does not makes sense. If it was allowed it would add an abstract
    method to the interface, thus making private nested classes
    implementing it non coherent, thus ill formed.
 => propagate the rename to all the classes and interfaces implementing it.
  Ok only if interface is not privately implemented.
  in the propagation, when non interface classes are reached, they are threated
  differently: the old method (implemented or abstract) stays in place, and a new method
  is added (always implemented), soft delegating to the old one//thus if the method was
  already present in the destination, it keeps the former body
 => empty == make private:
  This is ok even if interface is privately implemented.
  again for  non interface classes the orphan method survives in place.
  If a class have another implemented method in place of the destination,
   such method is first hidden.
When embeddng a static method onto an interface method,
  an abstract method is added in the interfaces, and the implementing classes
  soft delegate to the static method
  
  NOPE: If another interface method is in place of the destination,
   implementations of such method are discarded 
   (a reasoning on contracts may justify this controversial design)
 *NOPE: If an interface method need to be lifted at the class level,
  a body can be syntetised by collecting in a switch all the bodies
  of the classes implementing it. Then a last method work as a default. For example
  {
  I:{interface method Void foo()}
  A:{implements I method foo()Debug(S"A")} 
  B:{implements I method foo()Debug(S"B")}
  C:{implements I }//foo()  abstract
  D_$_1:{implements I method foo()Debug(S"D")}
  }[I.foo()=>K.bar(that)]
  =
  {
  I:{interface}
  A:{implements I method Void foo()Debug(S"A")} 
  B:{implements I method Void foo()Debug(S"B")}
  C:{implements I method Void foo()}//foo()  abstract
  D_$_1:{implements I method foo()Debug(S"D")}//private D
  K:{class method bar(I that)={
      if A that return that.foo()
      if B that return that.foo()
      if C that return that.foo()
      if D_$_1 that return that.foo()
      return This.foo(that)}
    class method Void foo(I that)//abstract
  }
  ------
  If the specified s' have the same name of s, then the body is not built and the result is just the abstract method Void foo(I that)

  All the references to myI.foo() are now replaced with K.foo(myI),
  however, what should we do with myA.foo() ? it is relevant for
  the next step of metaprogramming.
  
----
  Nested classes: 
  Cs => Cs' works as rename now, I think is also ok for interfaces.
  Cs => _ need to check that Cs is consistent
  Cs =>P wors like redirect now, thus can expand the mapping.

  Cs -> _ works as toAbstract now, thus can raise privacy coupuled.
    It would be nice if we had a 'type' for Cs so that is can be
    seen as privacy coupuled or not without trying to abstract it.
  Cs ->Cs'
    In addition of all the privacy coupuled issues, we also need
    to considered refined methods and uses of 'this' as discussed
    last time. Also here we may have a 'type' for Cs, like
    'this free' to give the information that the code do not use
    this/This in ways that prevent moving the implementation away.
    This could be much easier to support than privacy coupuled.

Operators:
-----------
1
close Cs:
  add to a coherent Cs a private version of all the
  state methods, and implement all abstract methods by
  delegating to the corresponding private abstract state method.
  As an option, can take a name of an invariant method, and
  in that case it properly add the invariant checks and do 
  all the needed checks to see if the invariant is valid.
Errors:
  -Cs does not exists or is private
  -Cs is not coherent
  -provided selector for invariant does not exists or is private
  -some invariant restrictions are violated.


{
I:{foo()}
B:{implements I refine foo()a}
}[I.foo()=>I.bar()]
={
I:{bar()}
B:{implements I refine bar()a}
}

{
I:{foo()}
B:{implements I refine foo()a    bar()b}
}[I.foo()=>I.bar()]
=
{
I:{bar()}
B:{implements I refine bar()a    bar_$_1()b}
}


{
I1:{interface foo() bar()}
B_$_1:{implements I1 refine foo()a    refine bar()b}
}[I1.foo()=>I1.bar()]
=
{
I1:{interface bar()}
B_$_1:{implements I1 refine bar()a }
}

//controversial case below. Simpler to say that all members of a private nested are private.
//then, renaming foo in bar if foo is interface is ok if:
//  foo do not conflicts with bar for any visible case
//  no interface having bar is privately implemented 'together' with I1
{
I1:{interface foo()}
I2_$_2:{interface bar()}
B_$_1:{implements I1,I2_$_2 refine foo()a    refine bar()b}
C:{implements I2_$_2 refine bar() c}
}[I1.foo()=>I1.bar()]
//ok, bar in C is refined. Thus we know is a bar from interface
and it need renaming.
Thus: when reneming an interface method, all interface method with the same name need to be renamed. If the user do not specify, a numeric pedex is generated.
user need to give a new name to all the bars, those are consistently renamed.
-lifting if s have 1 extra arg, embedding if s have 1 less arg (and the first arg type match This0)

-how to embed in an interface? body get trashed, interface is not privatly implemented


Cs can be
  interface
  proper
  proper close
  interface privately implemented
proper classes
  rename them is ok,
  moving them is ok.
interfaces
  rename them is ok,
  moving them is ok,
    while summing them: subtile subtype violation

  {
  A:{interface method a()} B:{interface method b()}
  C_$_1:{implements A refine method a()}
  }[B=>A] //or also for [B->A]
  =
  {
  A:{interface method a() method b()}
  C_$_1:{implemens A  refine method a()}//refine method b()
  }=SubtypeClash
//A is privatly implemented and operation add method b()

refine methods:
  nope, never a good target for =>, can we handle ->?
interface methods://HERE
  local rename them is ok,
    //NObut the target name need to be globally renamed
    on default is renamed in the implemented classes, and is error
    to hide a refine method.
    Can be tuned by [rename I.foo()=>I.bar(), B.bar()=>B.foo()]
    to insert delegation methods B.foo()=this.bar().
  L[Cs.s=>Cs.s'] //ok if refine s' never appear public
  moving them makes no sense.
  lifting them is ok, behaviour is syntetised with switch.
  class methods can be lifted as well.
  L[Cs.m(xs)=>Cs'.m'(_this,xs)]
    ok if Cs' proper class,
    class method T m(Cs _this, Ts xs)={if T1 _this return...}
    class method T m'(Cs _this, Ts xs)

  embedding a method in an interface method makes no sense.
  non-local rename or move makes no sense.
class methods of proper classes
  all renames and move works.
  lifting them makes no sense.
  can be embedded in a proper class.

given an extend map m:
close Csz; Rs
1 apply all the closes
2 forall the Cs.s=>Cs'.s' and Cs=>Cs'rename the references
3 forall Cs =>.. mapping remove the Cs,
  forall Cs ->.. mapping remove the Cs body,
  forall Cs.s=>.. remove the method declaration
  forall Cs.s->.. remove the method body
4 forall  ..->Cs or ..=>Cs mapping sum the moved class bodies
  forall method mapping move the methods declarations 


principles:
  all visible names should be renamable


private interfaces have all methods private
private class need to have closed state
well formedness a class with private abstract methods need to have those coherent on their own
private abstract refine are not well formed


{
  I: {interface method T foo() }
  B: {implements I
    class method factory(T foo)
    refine method T foo()
    method bar()
  }
[rename I.foo => I.bar]
[close B(???)]
[E.eq=>_; C.eq->C.eq]

{
  I: {interface method T foo() }
  B: {implements I
    class method factory(T foo) factory_1(foo)
    class method factory_1(T foo) 
    refine method T foo() foo_1()
    method T foo_1()
    method bar() // try to close bar, fail as not part of constructor
  }

//ok since B would public open state not coherent
[rename I.foo => _]
//B public with coherent close state, unexpected?
May be:
  if one is hiding a set of abstract methods, it check that the hidden one is coherent on its own.

what Close should do since multiple constructors exists

/*
1. Implement interface somewhere else (not inside class decl)
2. Implement interface multiple times (have a different 'default', or allow manual selecting at each point (I1)A)  (I)(I1)myA != (I)(I2)myA
3. Only 'see' some methods of implemented interfaces, in different contexts...(((I)A).foo !=> A.foo)
4. Conflicting name support (implementing interfaces with methods of the same name, having non refine methods with the same name, etc..)
5. One implementation, for multiple classes at the same time.../automatic implementation
6. Self type
-----------
Guarantees:
1. One way casting ( (I)(A)a !=> (A)(I)a )
2. Final methods (we know what (I)a.foo will do.., but maybye not (I)a.bar)
3. more control on who can and can't implement....
*/


subtype
semantic indepentent from types
a.foo() ===(  T x=a, x.foo())

interface I { foo }
class A: I { foo = e1 } // option 1, myA.foo == ((I)myA).foo == e1
class B: I { foo = e1; I.foo = e2 } // option 2 myA.foo == e1, ((I)myA).foo == e2
class B: I { I.foo = e2 } // ! myA.foo , ((I)myA).foo = e2

class C: { 
  void foo() { return e1; } }
class B: C {
  /*new*/ void foo() { return e2; } }
// myB.foo() == e2, ((C)myC).foo() == e1


myC = { bar() this.foo()  foo() 1 }
myB = myC + { foo() 2 }

myB.foo() == 2, myC.bar() = 1


without 4
{
I1:{foo()}
I2:{bar()}
B:{A_1:{implements I1 I2
  foo()=e1
  bar()=e2
  }}
}[rename I2.bar => I2.foo]
with 4
{
I1:{foo()}
I2:{foo()}
B:{A_1:{implements I1 I2
  I1.foo()=e1
  I2.foo()=e2
  }}
}[rename I1=>I2]

{
  I1:{foo()}
  I2:{bar()}
  B:{A_1:{implements I2 bar()=e1}}
}[rename I1=>I2]
since B privatly implements I2
  I2 can not get more methods

B privatly implements I1,I2
B friend of A

{I:{inteface Foo foo()}
B:{implements I
  refine Foo foo()
  class method This (Foo foo)
  }
}[hide I.foo()]
=
{I:{inteface Foo foo_1()}
B:{implements I
  refine Foo foo_1()
  class method This (Foo foo)
  }
}
===
{I:{inteface Foo foo_1()}
B:{implements I
  Foo foo()this.foo_1()
  refine foo_1() //this.foo()
  class method This (Foo foo)
  }
}[hide I.foo()]

-------------------------
{I:{inteface Foo foo()}
B:{implements I
  refine Foo foo() e
  }
}//[hide I.foo()]
[rename I.foo()=>I.bar()]//[rename I.foo()=>I.bar(), B.bar()=>B.foo()]
=
{I:{inteface Foo bar()}
B:{implements I
  refine Foo bar() this.foo() //refine Foo bar() e
  Foo foo()e //
  }
}

B: {
  Foo foo() e
}[foo ~> bar] // forward body to bar (insert sig if neccesary)
-------
B: {
  Foo foo() this.bar()
  Foo bar() e
}
[foo => bar, bar ~> foo]


{I:{inteface Foo bar()}
 B:{implements I refine Foo bar() e}
}[rename I.foo()=>I.bar()]


{I:{inteface Foo foo_1()}//case1 //consistent with rename
B:{implements I  refine Foo foo_1() e } } //bad because no request to mod B
{I:{inteface Foo foo_1()}//case2 //worst
B:{implements I  Foo foo() this.foo_1()  refine Foo foo_1() e } }
{I:{inteface Foo foo_1()}//case3 //good for state/abstract foo()
B:{implements I  Foo foo() e  refine Foo foo_1() this.foo() } }

{I:{inteface Foo bar()}
B:{implements I  refine Foo bar() e } } //bad because no request to mod B


today
each Lib has ns
if Lib declare non-refined member with n, n in owned ns
if L1,L2 in project, L1 has n, L2 has n implies L1==L2


project has ns mentioned
reuse URL refresh ns with non mentioned ones
A+B refresh private numbers
rule top
B=....
A=EvilLib.makePrivateCall(B, "m")

X:{
  B={class method foo_1() }
  A=Evil(B) --> {class method bar() B.foo_1()}
}

A=Trait({B={ foo()}
 bar()B.foo()
 })
A[hide B.foo()]
={B={ foo_1()}
 bar()B.foo_1()
 }

X:{
  B={ foo() }
  A={ bar() B.foo()}
}[unhide B.foo]

{A: {TAF foo, TAB bar} B: {TBF foo TBB bar}}
[A=>B, A.foo=>A.bar, B.bar=>B.foo]

A=>B, B.C => A
B.C => A, A=>B
==
A=>B'; B.C => A; B' => B

A=>B, A.C => D
==
A => B'; B'.C => D; B' => B

L[Cs1=>Cs1', Cs2=>Cs2']

L[Cs1' = L[Cs1] + L[Cs1'],
  Cs2' = L[Cs2] + L[Cs2']]






{A:{C:{}} B:{C:{foo}}}
A=>B, B.C=>D
{B:{} D:{foo}}

{A:{C:{}} B:{C:{foo}}}
A.C=>D A=>B
{D:{} B:{C:{foo}}}


Option1:
{A: {TAF+TAB bar} B: {TBF+TBB foo}}
{B: {TAF+TAB bar      TBF+TBB foo}}

Option2:

{B: {TAF+TBF foo      TAB+TBB bar}}
{B: {TAF+TBF bar      TAB+TBB foo}}


Option1:
{A: {TAF bar, TAB foo} B: {TBF bar, TBB foo}}
{B: {TAF+TBF bar, TAB+TBB foo}}

Option2: 
{B: {TAF+TBF bar, TAB+TBB foo}}






--------------
//rename on privatly implemented (nesteds) may be ok, since all other methods have private names
Trait({
  I={interface method Void foo()}
  B::1={[I] method Void foo()=void  method Void bar::1()=void}
  method Library a()={[I] method Void foo()=void  method Library bar()}
  })['I.foo()=>'I.bar()]
=
{
  I={interface method Void bar()}
  B={[I]
    method Void bar()=void
    }
  }
'stuff == \"stuff"