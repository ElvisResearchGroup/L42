Introduction
The formalism for 42 is divided in files, 
The first file, FullGrammar, contains all abstract grammars,
the concrete grammar for the full language and the well formedness criteria.

It is important to familiarize with the CORE grammar,
while the other grammatical forms can be understood when needed while reading
the rest of the formalism.
The most important difference between CORE, FULL and CMP grammars
is how they handle nested classes and library literals, as explained below:

CORE is a minimal grammar, a CORE.L is a library literal with
cached informations about typing and dependencies.
Library literals contained in CORE expressions are of form CORE.L
Nested classes inside a CORE.L are directly defined by a CORE.L

CMP is a richer grammar for expressions, but there is not a library literal
of form CMP.L, or library members of form CMP.M.
Library literals contained in CMP expressions are of form CORE.L

FULL is very similar to CMP, but allows for library literals of form FULL.L
Method bodies in a FULL.L are expressions of CMP.
Nested classes inside a FULL.L are defined using a FULL expression;
Library literals contained in FULL expressions are of form FULL.L or CORE.L

That is, "Foo.bar(Beer.foo())" is a valid CORE.e.
Reduction and type systems are able to work directly on those kinds of expressions.
Since CORE.e is a subset of CMP.e and FULL.e, they can appear everywhere an
expression of any kind is expected.
Instead, "if a>b return Foo[a;b]" is a valid CMP.e. 
Expressions of form CMP.e can appear everywhere, except inside of a CORE.L.
In particular, method bodies of FULL.L are of form CMP.e 
Finally,  "Data: Trait:{T x} + Trait:{...}"
is an expression of form FULL.e; it is not a CMP.e since it contains
library literals of form FULL.L: "{T x}" and "{...}".

In order to reduce expressions of form FULL.e, the top level reduction first
reduces all the library literal of form FULL.L into a normalized form CORE.L;
the expression is now of form CMP.e and can be normalized to a CORE.e and executed.

The FULL.e expression seen above 'Data: Trait:{T x} + Trait:{...}', one normlalized
to CORE.e would look like
(class Data Data).#colon#1(that:
  (class Trait Trait).#colon#1({read method This3.T x() #norm={depends=This3.T}})
  .#plus#1((class Trait Trait).#colon#1({/*??*/ #info={/*??*/}})))

-------------------------------
Summary of the content:

The first file, FullGrammar, contains all grammars and well formedness.

The file Common contains the definition for operations over the program p, subtyping
and few other notations that every other part of this formalism could use.

The file Top(122) define the top level reduction p==>p',
proceeding left to right, top to bottom to transform FULL expressions into
core one, and executing code as needed.
Top depends on 3 other components:
  normalization (defined in file norm), transform a CMP.e into a CORE.e,
  and a FULL.L where all the nested classes are defined with CORE.L into
  a CORE.L.
  
  typing (defined in file Typing), checks if a CORE.e or a CORE.L are
  well typed with respect to a program
  
  expression execution (defined in file reductionAndNative), implements
  small step reduction for CORE.e with respect to a program.
  
Of those components, the most complex is normalization; relying on components
toCore (in file toCore) and PAcc (in file ConstraintAccumulation).
Normalization is fundamental to understand the connection between the rich
FULL language and the minimal CORE language.
However, all correctness properties of 42 are stated on the CORE language
and are unrelated to the FULL language; thus they can be understood
without a deep understanding of normalization.
  

All notations:
____________________
1FullGrammar
  all grammars
  concrete grammar
  well formedness
_____________________
2Common
[from P;p]
p operations
function notations
inside
MH/MWT notations
cX/FV
p|-T0<=T1, p|-P0<=P1, p|-T<=Tz  //TODO: still to add
trustedClass(CORE.L)
methodName(OP) and other syntax mangling
noFwd
toRead(T)
toRead(G)
__________________
3Top
p ==> p'
  adapt(CORE.e,P)
  followUrls
  readFolder
  refreshUniqueNames(CORE.L)
  |- p -> LL
    typable(p)=Csz
    LL[Csz=Flag]=LL'
  coherentClasses(p,CORE.e)
    coherent(p)
    coherentGetMdf(mdf0,mdf1,mdfs0,mdfs1)
      fieldTypes(MHs,x, mdf)
      fieldAccessMdf(MHs,x, mdf)    
uses
  p|-CORE.e :CORE.T<=CORE.T' and |- p
  norm(p,e) and norm(p,C.L)
  A|e --> A'|e'    
_______________
7reductionAndNative
 A|e --> A'|e' 
   A operations:
     A.rog(v)
     A.free()
     A.pathOf(v)
     A[mdf v0..vn]=A'
     A[mdf x=v]=A'
     A~as = A'
   accessibleAddresses(A;Ts;vs)=as
   mutLibs(A;Ts;vs) = A'
__________________
8typing
D|-CORE.e :CORE.T<=CORE.T'  /  |-p
  D |- ds | G0 
  D |-k1..kn : T1..Tn <= T | Ts;Ps
  D |-k : T' <= T |Ts;Ps
  p |-M
  mostGeneralMdf(mdfs)=mdf
    generalEnough(mdfs)=mdfs'
  methTypes(p,P,s) = MethT
  fwd_or_fwd%_in
  fwd% T
  mutToCapsule
  toImmOrCapsule
  toLent(T)
  toLent(G)
  mutToCapsuleAndFwdMutToFwdImm
  mutToCapsuleAndFwdRead
__________________
4norm
norm(p,C.L)
  collectDeps(CORE.L)
    collectDepsE(CORE.e)
  expandFields(Ms)
  collect(p,Ts)
  methods(p,P0)
  alive(p,P)
  infer(p,C.Ms)=CORE.Ms /infer(p,C.e)=CORE.e
    I(HALF.M)=CORE.M
      I(HALF.e) = CORE.e
        I(HALF.D) = CORE.D
        I(HALF.K) = CORE.K
        I[DS]
        iType(I,C.T)
    solve(p, CCz)
      commonSuperT(p,Tz)=Tz'
      chooseT(CCz;Tz)=T
        mostSpecific(Tz) = T
use Pacc operations and Y♥C.e/p♥C.M
_________________________
6ConstraintsAccumulation (PAcc operations)
  .fixInfer(HALF.Ms) =CCz
  .collect()=PAcc'
  .add(C.Ms)=PAcc'
  .add(C.M)=PAcc'
  PAcc[CCz]=PAcc'
  PAcc[GX]
  PAcc[D1..Dn]
  PT,s,i = PAcc.selectedOption(OP, PTs, xPs)
    PT,s,i in PAcc.opOptions(OP, PTs, xPs)
      PAcc.paramaterPaths(PT, s) 
      PAcc.unsatisfiable()
        origin(p;s;P) 
_________________________
5toCore
Y♥C.e=HALF.e / p♥C.M=HALF.M
  Y♥FULL.par = (x=HALF.e)s
  Y♥FULL.DE = HALF.D
  toBinOp(x,Op=)= 'a part of an expression'
  Y(xP)
  
Main concepts:

-most important grammatical forms:
CMP/FULL.e: the expressive syntax for expressions used by the programmer; FULL is like CMP but allows for FULL.L as expressions
CORE.e: the minimal syntax used as internal representation and convenient for metaprogramming.
FULL.L: library literal with expressive syntax.
CORE.L: library literal with minimal syntax and cached informations.
LL: either a FULL.L or a CORE.L
p: a program; similar to a stack of LL to represent nested scopes.
P: a path
CORE.T/FULL.T: types
ctxC: forall ctxC, all LL top-left of the hole are of form CORE.L
  The compilation context, e=ctxC[LL] selects an LL where
  all of the former LLs are CORE.L
  The context does not enter into libraries

-most important operations:
p(P):
  extract a library from a program
p==>p'
  top level reduction
e-->p e'
  expression reduction. It can uses native code to call functionalities
  outside of L42. Some of those are 'trusted and internally implemented'.
  All other ones are properly sandboxed.
norm(p,LL)
  reduces some libraries in the top of the program to core. 
Q|-e:T
  expression well typed.
|-p
  p(This0) is well typed
normAndFlag(p)=p'
  type some libraries in the top of the program and annotate them as 'typed'.

PAcc, I, Y: record contexts for normalization

execution flow:
  'L42 name' works as follow:
    -reads a file called either name.L42 or name/This0.L42.
      The file is parsed according to grammar LL, but omitting the outermost curly brakets
    -read an parse all the files referred by ..., as LL as above
    -syntactic well formedness of all source is checked
    -rules p==>p' are applied until the result is a well typed CORE.L
      Such rules may require to read code from urls;
        such code must be typed CORE.L. It could be cached locally.
-------------------------------
DISCUSSIONS of individual parts
-------------------------------
Why we read URL later but '...' early:
This is related to security:
  -an URL is fully executed, so just importing it have no side effects
  -a ... is just raw syntax, so importing it will trigger the execution
   of all the mains inside of it. Thus, a former main with permissions to
   write files may generate a malitious ... able to do everything.
  -moreover, we get syntax errors earlier, that is always a plus.
Ideally, we would also need to 'protect' 42 source folders so that they can
be edited only with some special system permissions.
        
Program p discussion:
Program-specific grammar is needed to represent the position
in the project (top level Library) that we are reducing.
For example, if our 42 project is
{ A=... B=This0.A.second({ method Library m(){C=This2.A.first({})} }) }
we first need to reduce "A.first({})"
In order to explicitly denote the meaning of "Thisn", we split the project
into the 3 part program
p={C=This2.A.first({})};{ method Library m()[]};{ A=... B=This0.A.second([]) }
Note that the first component is an L, while the others have a hole, [],
so they are of form ctxL.
Note how the first component uses This2.A in order to skip two levels
and refer to A in the outer most layer of our project.

It is possible to see the program as a stack, with a top() and a pop() operation.
Given a program is always possible to reconstruct the project
by doing a series of pop operations.
Since the top of the stack is of a different kind with respect to the other elements,
pop replaces the [] with the stack top to forge an L
push, the opposite of pop, extracts a piece of the top to forge a new top.
To do so, it takes in input the split form of the old head.
Finally, notice how in this model updating the top  can not be emulated with pop() + push()

Methods and collect discussion
methods(p,P0)=MWTs //methods returns a set: the order of the methods is not relevant
//methods(), applied to a CORE.L will just return the MWTs;
//applied to a FULL.L, will return a merge of the methods retrieved directly from the L and methods types declared
//in its implemented interfaces. It chooses a type in case of different refines in interface diamond implementations
//In this model cases like
//    A=  interface {refine method A m()}
//    B= [A]{ method A m()}
//are ok wrt B but fail for A

Collect performs a depth first but we avoid duplicates by keeping the rightmost occurrence.
We check absence of circularity by diverging
an implementation could keep a list of visited P instead of diverging; mathematically it is the same

        
--------------------------------------------
3 Multiple method types   T0..Tn-> T';Ps in methTypes(p,P,s)
--------------------------------------------
The main idea giving flexibility to the 42 type system is that
methods have many types, where only the modifiers change.
It can be seen as a form of polymorphism of the method types.
We here express the methodTypes set with metarules,
but a finite/predictable sequence of applications is always sufficient,
as shown later

----------------
Note, it would seams like either the plugin url is 
trusted or one of the parameter is a cap object. NOT TRUE, NOT NEEDED.
SEE the fraction of the type system below 
  
Adapting the current type system://TODO: should be already integrated in Typing, check if is true
   
-typing a method p,MWT:
  if MWT.native=native[uURL]
  then either
    MWT.s of form #$_(_)
    or MWT.mdf in  {lent,mut,capsule}
-coherent LL:
  if !trusted(LL) then the candidate constructors selectors are of form #$_(_)
    
-while typing the method call: if s of form #$(_)
 then either
    original MWT.s of form #$_(_)
    or original MWT.mdf in {lent,mut,capsule} and !trusted(p(This0))

-note: before we could declare a class untrusted explicitly, now you can just add
  "native[untrusted] class method Void untrusted::1()=void"
  to the class 

------------------
TODO: metaprogramming plg restrictions:
 -plg url+plg url=plg url
 -plg +plg url?=plg url?
 -can not rename a $method into a non $ method or vice versa
 -redirect non plugin to plg is ok
 -redirect abstract plg to plg and plg url to plg url

examples:
the plg input no mut/lent/read, execute the expression as usual and return.
  the expression could have run on another machine, we can not know

the plg input no mut/lent/read, execute the expression as usual and return a capsule lib with an a
that is the result of such expression.
  the result could be in a 'future' and trying to read the a with another plugin would block until res is ready
  

//the plg input no mut/lent/read, execute the expression but is first transformed somehow in other well typed one.
  
  
the plg takes no input and produce a mut L (promotable to capsule) that correspond to a java arrayList

the plg takes a mut L representing an arrayList, a imm L representing an int and a mut/imm Any
 and put it into the corresponding position of the arrayList.
the plg takes a mut L representing an arrayList, a imm L representing an int 
 and return a mut/imm Any that is located in the corresponding position of the arrayList.  
 
 take two lib arrayList and add all the elements of the second to the first
mut a-> L1 a1..an, mut b-> L2 b1..bn| plg(a,b) -> 
mut a-> L1 a1..an, mut b-> L2 b1..bn, mut c->L3| plg(a,b) 

native typing:
  typed as a normal MWT, plus:
  -take in input or return either imm/mut/capsule/class P (no read/lent/fwd*)
  -the URL support such s with such type:urlSupport(URL,p,MWT)
  -no generic urls, but no need to go down to Any, since urlSupport takes type in input
   can compute over it, so if it return a parameter, it can use user defined types
     
  -a plugin can return a mut L^as,
  -the annotated 'a' on the L can be all the mut a parameters of the plugin call,
   or other 'a' annotated on other Ls parameter of the same plugin call
  -a plugin can not mutate the ROG of any 'a' took in input,
  
  
-mut libraries created by plugins
ensure a field is controlled by plugins by:
  use is well typed if this.x_n() is the argument and
  This.k_n(use..)
is the only form for ever calling a k of a class with a certain plg annotation.
Such class is coherent only when the state is private.
While privatizing the state, it is easy to check such form is the
only form for k.

Then, mut/mdf libraries has an associated set of mut/mdf objects, and
certain plugin operation allows to add and remove from such set.

In this way, we can implement a vector of mut and imm at the same time.
Now we need to be sure that the desugaring can infer enough types to
work well with such vector, expectially for iteration.


coherent?
 {
  class method This0 native[mutLibK] k_1()
  mut method mut Library native[mutLibGet] f_1()
 }

starting point: Integer, String and other can be seen as imm Library
 this is needed for the plg with part
 
 plugins only take in input imm/class stuff
 
 plugins takes mut stuff only: 
 
 
 {
  class method This0 native[mutK] k_1()
  mut method mut T native[mutGet] f_1(K that)
  
 }
 
 TYPE SYSTEM
 
-----------------------------------------
It is possible to obtain all the variations with the following table:
  mBase
  mNoFwd(mBase)
  mImmFwd(mBase)
  mRead(mBase)
  mC(mBase)
  mC(mNoFwd(mBase))
  mI(mBase)
  mI(mRead(mBase))
  mNoFwd(mImmFwd(mBase))
  mVp(mBase) //1 mType for each mut parameter
  mVp(mNoFwd(base))//1 mType for each mut parameter
 
    
//TODO: check that this kind of things work {Bar:{}   method m (foo catch exception Bar x e1 e0)  } redirect Bar->Any
//also check the following:
//Elem e=(return that catch return Elem x x catch return Any y error error)[redirect Elem in Any]


  rule path:
//Note: we need p(P) not interface and with some class methods to prevent a bug in sum/redirect
//when a class 'A' may become an interface, and annotations 'class A' would be invalid.
//since classes without class methods may become interfaces, we accept the type class A only
//when class methods are present.
//Example
{T:{} //well typed
method class T ()=T
method Void doStuff(class T x)
}[redirect T=Base]
+
{method Void doStuff(class Base x)=x.class()}//well typed
//result would not work
  