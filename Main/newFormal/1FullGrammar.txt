Notations: metavariables ending with s are sequences, metaviariables ending with z are sets.
_______
#define Abstract syntax for CORE and FULL
  mdf::= imm | mut | lent | read | capsule | fwd mut | fwd imm | class | fwd%imm | fwd%mut 
  throw ::= error | exception | return 
  s ::= m(xs) //mOp is normalized when reified by FULL.MH.s
  C ::= IdUp IdChars (::n)? //well formedness: C not Thisn/Any/Void/Library/This
  P  ::= Thisn.Cs | Any | Void | Library
  CORE.T ::= mdf Docs P
  CsP ::=Cs | P
  FULL.T ::= mdf? Docs CsP
  FULL/CORE.PL ::= [Ts] // In concrete syntax an [empty] is represented as empty and imm is omitted; Well formedness: all mdf in Ts are imm
  FULL.MH ::= (mdf Docs)? method T mOp (T1 x1..Tn xn) PL //the Docs are on the type of 'This'
  CORE.MH ::= mdf Docs method T m (T1 x1..Tn xn) PL
  FULL/CORE.H ::= interface? PL
  FULL.TLocal ::= T | mdf?
  FULL/CORE/HALF.xe ::= x = e
  FULL/CORE/HALF.xv ::= x = v
  CORE.e ::= xP | void | L | xP.m(xes) | loop e | throw e | x:=e | (Ds Ks e)
  CORE.xP ::= x | P<:T | a //a=address, only at runtime
  CORE.D ::= var? T x=e
  CORE.K ::= catch throw T x e
  CORE.L ::= {H MWTs NCs Info Docs} //sadly, Docs at the end to avoid ambiguity
  CORE.MWT::= Docs MH (= native{BalCurly}? e)?
  CORE.NC::= Docs C = L
  Info::= #Flag{typeDep=Ps,coherentDep=Ps,watched=Ps,usedMethods=(P.s)s,hiddenSupertypes=Ps, refined=ss,
    declaresClassMethods?,close?,nativeKind=URL,nativePar=Ps,uniqueId=n?}
    //in concrete syntax, labels for empty fields must be omitted
    //watched//Paths whose unique numbers are used either directly,
    //    or in a private nested class or in an L in a method
    //usedMethods//methods used either directly or in a private nested class or in an L in a method
    //hiddenSupertypes//interfaces implemented by a private nested class or in an L in a method
    //declaresClassMethods (since it can be cast to class P)
    //closed: a class or interface with private abstract methods, or an interface implementing a private interface.
    //may add 'free this': 'this' only used as receiver
    //Note: typeDep and coherentDep list also private Ps, but the "public interface" of a class only shows info on public stuff.
    //may be typeDep and coherentDep are not part of the "public interface" at all?
  Flag ::= norm | typed
  FULL.L ::= {(H | reuse[URL] | ...) Ms Docs}
  FULL.M ::= F | MI | MWT | NC
  FULL.F ::= Docs var? T x
  FULL.MI ::= Docs method mOp(xs) = e // well formedness: all LL inside e are CORE.L
  FULL.MWT ::=Docs MH (= native{BalCurly}? e)? // well formedness: all LL inside e are CORE.L
  FULL.NC ::= Docs C = e //FULL.L can be inside e
  LL::= FULL.L | CORE.L
  FULL.e ::= x | CsP | void | LL | \ | \x | e string | 'PathSel | UOp e | number e
    | e0 OP .. OP en | e<:T | e (.m)?( par ) | e (.m?)[ par1;..;parn ]
    | ( Ds Ks WHOOPS? Ds' e? ) | { Ds Ks WHOOPS? Ds' }
    | loop e | while e0 e1 | for DX0 in e0 .. DXn in en e
    | throw e | x opUpdate e | if e0 e1 (else e2)? | if match+ e 
  FULL.par ::= e? xe*
  FULL.D ::= (DX =)? e
  FULL.DX ::= var? TLocal x | TLocal '_' | TLocal ( var?0 TLocal0 x0 ..var?n TLocaln xn )
  FULL.K ::= catch throw? T x e | catch throw? T '_' e
  FULL.WHOOPS ::= whoops T+
  FULL.match ::= T x | T x = e | T?0(T?1 x0..T?n xn) = e //where at least one T?i is not empty //correctly not TLocal
  FULL.xP ::= x | CsP | CsP<:T | \ | \<:T
  Ldom::=s | Cs
_______
#define auxiliary grammars
  ST ::= CORE.T | OP STzs | ST.s | ST.s.i //i=0 for receiver type
  HALF.xP ::= x | P<:STz | %STz%<:STz'
  HALF.e ::= xP | void | LL | xP.m(xes) | xP0 OP..OP xPn | throw e | loop e | x := e | (Ds Ks e)
  HALF.D ::= var? mdf? STz x = e
  HALF.K ::= catch throw STz x e
  pTail::= LL | C:LL
  p::= LL;pTails //representing This0,...,Thisn: This0.C refers to a class bound in LL,
  // and (This1..ThisN).C to bindings in elements of pTail1.. pTailn respectively
  CT ::= ST<=STz
  PR ::= CTz;CORE.L;pTails | Err
  ER ::= CTz;CORE.e? | Err
  DsR ::= CTz;CORE.Ds | Err
  KR ::= CTz;CORE.K | Err
  Err ::= limit(p) | illTyped(p) | incoherent(p) | headerErr(p)| headerErr(p) | inferenceFailure(I,STz) | throw(p,A,v)
  R ::= PR | ER | DsR | KR
  G ::= var?1 x1:CORE.T1 .. var?n xn:CORE.Tn
  GX ::= x1:STz1 .. xn:STzn
  I ::= I[C?;p;G;CTz; frommed=CTz]//inference application environment
  Y ::= Y[p;GX;onSlash=STz;onSlashX=HALF.xP?;expectedT=STz?;CTz] //desugaring & constraints accumulation
  v ::= CORE.xP | void | CORE.L
  r ::= CORE.L | exception v | error v
  Obj ::= P(xvs) empty;empty| P() as1;as2 // memory objects
  A ::= empty | imm? a->Obj, A | imm? x->v, A  //order is irrelevant
  Q ::= Q[Flag;p;G;Ts;Ps]//Ts is returns, Ps is exceptions //typing environment
  MethT ::= mdfs->mdf  
  CORE.ctxV ::= xP.m(xvs x=ctxV xes) | loop ctxV | throw ctxV  | x := ctxV //blocks manually handled in reduction
  CORE.ctx ::= [] | throw ctx | loop ctx | x := ctx | xP.m(xes x=ctx xes')
    | ( Ds Ks ctx ) | (Ds T x=ctx Ds' Ks e) | (Ds Ks catch throw T x ctx Ks' e)
  BalCurly::= /*any text with balanced curly brakets*/
_______
#define functional notation, dom, update and '\' (set minus) for CORE.L (over the domain Ldom), but only domNC and functional notation on Cs for LL. Those are undefined 
if LL has dots or reuseUrl.
//note, LL(Cs) may return an e not of form LL
_______
#define FULL.L[M]=FULL.L', CORE.L[MWT]=CORE.L', CORE.L[NC]=CORE.L'
  /*...*/ replace the member with the same key, or add a new one if novel
_______
#define Lexical Syntax
  newline ::= <0x0A> //linefeed only, normalizing away <0x0D>
  CHAR   ::=  <0x20-0x7E> | newline//Any printable ASCII character, or a newline
  CHARS0 ::= CHAR* -- "
//StringInterpolation: single character% for single line strings
// "   %foo bar %(a+b) ccc  %ff.baz() "
// after a % symbol, any ePostfix can be parsed as an interpolation expression.
// Not needed spaces terminates the ePostix:
// "G%a.b(),,h" =="G"++a.b()++",,h"
// "G%a .b(),,h" =="G"++a++" .b(),,h"
// and "G%a.b(foo .x()),,h" =="G"++a.b(foo .x())++",,h"
// multiline strings can start with a sequence of %s to identify the escape sequence
//(thus no interpolation if zero %s
// TODO: discuss about multiline strings and allowing S".." inside interpolated expressions
  string ::= " stringElement* "
  stringElement ::= (CHAR* -- '%') | % ePostfix // abstract view, concrete details may differ?

  number ::= <0-9> ('.'|'_'|'-'|<0-9>)*
  commentBody ::= CHAR* -- '/*' -- '*/' | commentBody comment commentBody
  comment ::= '//' (CHAR* -- newline) newline | '/*' commentBody '*/'
  Whitespace ::= (' ' | newline | ',')+
  IdUp ::= _* (<A-Z> | $) 
  IdLow ::= _* <a-z>
  IdChar ::= <a-z> |<A-Z> | $ | _ | <0-9>
  n ::= 0 | <1-9> <0-9>*
  x ::=IdLow IdChars
  m ::= (#$ |#+)? x(#x)* (::n)?
  UOp ::= ! | ~ // prefix
  OP0 ::= ^ | : | <- | << | ++ | -- | **   // right associative//TODO: swap OP0 and OP1 precedence? so that Class:a+b works?
  OP1 ::= + | - | * | / | >> | -> // left associative   
  OP2 ::= == | < | > | >= | <= | in | !=  // unassiociative
  OP3 ::= => | && | '||' // right associative, will be short circuting
  OP  ::= OP0 | OP1 | OP2 | OP3 
  opUpdate ::=  ':=' | (OP0 -- ':')= | OP1= //allowing OP3 could be done as an extension, it might interact with short circuit
  FULL/CORE.Doc ::= @PathSel | @PathSel?{docText}
  FULL.PathSel::= CsP | (CsP.)? s(.x)?
  CORE.PathSel::= P | P.s | P.s.x
  FULL/CORE.docText ::= empty | CHAR -- '{' -- '}' -- '@' docText | Doc docText | '{' docText '}' docText
  mOp ::= empty | m | OP | OP_n | UOp
_______
#define FULL Expressions priority disambiguation and other details
  FULL.eAtomic ::= x | CsP | 'void' | LL | B | \  | 'PathSel | \x
  FULL.ePrefix ::= (UOp | number)* eAtomic
  FULL.ePostfix ::= ePrefix ((.m)?(par)|(.m)?[(par;)* par?]|string|<:T)* //no space in ePostfix(par) and \x
  FULL.eBinary0 ::= ePostFix (OP0 ePostFix)* //right associative, all ops must be the same
  FULL.eBinary1 ::= (eBinary0 OP1)* eBinary0 //left associative, all op the same
  FULL.eBinary2 ::= (eBinary1 OP2)* eBinary1 //unassociative, all op the same, thus a<b<c could be resolved as a.#left#1(center:b,right:c)
  FULL.eBinary3 ::= (eBinary2 OP3)* eBinary2 //left associative, all op the same
  FULL.B ::= (Ds e Ks WHOOPS?) | (D+ Ks WHOOPS? Ds e) | { D+ Ks WHOOPS? Ds }
  FULL.sIf ::= if e e' (else e)? | if match+ e
  FULL.sWhile::= while e e'
  FULL.sFor ::= for (DX in e)+ e
  FULL.e ::= sIf | sWhile | sFor | loop e | throw e | x opUpdate e | eBinary3
_______
#define grammar well formedness
* FULL.DX: var TLocal x or _(_ var TLocal x _) is valid only if TLocal.mdf not capsule or fwd.
* CORE.D: var T x=e is valid only if T not capsule or fwd.
* s: 'this' notin xs and all x in xs are unique
* FULL.par: 'this' notin xs and all x in xs are unique, if e!=empty, 'that' notin xs
* mdf: fwd%Imm, fwd%mut not present in any term, will be used internally by the type system
* C not This, Thisn, Any, Void or Library
* Any OP FULL.e, Void OP FULL.e, Library OP FULL.e are not well formed 
* FULL.B:
    no repetition in bindings(B.Ds.DXs)//B.Ds contains all of the Ds, even if divided in 2 groups in the syntax
    this notin bindings(B.Ds.DXs)
    if B={ Ds1 Ks WHOOPS? Ds2} then returningBlock({ Ds1 Ks WHOOPS? Ds2})
    if B=(Ds1 Ks WHOOPS? Ds2 e) then forall D in Ds1,Ds2: not returning(D)
    if B=(Ds1 e Ks WHOOPS?) then forall D in Ds1: not returning(D)
    if B=(_ D e _) and D.e either for,if,loop,while; then noBlockNeeded(D.e)
    if B=(_ K e _) then noBlockNeeded(K.e) (only in code, allowed with no block if K.e in void, x, LL, P, ... all the cases of the degenerate DX empty)
* (CORE.Ds CORE.Ks CORE.e): //less then full, to avoid issues with inlining and such
    no repetition in Ds.xs
* throw FULL.e: not returning(FULL.e)
* FULL.F: F.t.mdf not fwd
* FULL.MI:MI.e.FULL.L undefined //e does not contains any FULL.L
* FULL.MWT: if MWT.e?=e, then e.FULL.L undefined //e does not contains any FULL.L 
* FULL/CORE.MH: MH =mdf method T _(T1 x1.. Tn xn)PL
    mdf notin {fwd imm, fwd mut}
    T0 = mdf This0
    if exists i: Ti.mdf=fwd imm then T.mdf undefined or T.mdf in {mut, fwd mut, imm, fwd imm}
    if exists i: Ti.mdf=fwd mut then T.mdf undefined or T.mdf in {mut, fwd mut}
    if T.mdf in {fwd imm,fwd mut} then exists i: Ti.mdf in {fwd imm, fwd mut}
//In the Type system, something used to break if I allow read/lent return type with fwd imm. Where that it was?
* FULL.match of form T?0(T?1 x0..T?n xn) = e; at least one T?i is not empty
* FULL.e: \x only appear in a method parameter expression
* FULL.sFor: forall TLocal(var?1 TLocal1 x1.. var?n TLocaln xn) in FULL.sFor.DXs: var1?..varn?=empty 
* CORE.PL: forall mdf in PL.Ts.mdfs, mdf= imm //empty in the concrete syntax
* FULL.PL: forall mdf? in PL.Ts.mdfs, mdf?= imm //empty in the concrete syntax
* FULL.L: if reuse[URL] or ..., then no Docs, F and MI in FULL.L
* C::n n!=0//TODO: in code
* e.m::0(_) and e::0.m[_]: e=='this' or e=='This0'//TODO: in code 
* LL: //TODO: check the well formedness for LL and Core.L is implemented.
//When is checked for core?
    no repetition in LL.Ms.LDom
    no repetition in LL.H.Ts
    Any notin LL.H.Ts
    if LL.interface? = empty, then exists at most one n such that exists m::n(xs) where LL(m::n(xs))=MWT, and MWT.e? is empty
    if LL.interface? = interface, then forall s in dom(LL.Ms), LL(s).e?=empty
    if LL(C::n)=LL' then LL' of form CORE.L
    if LL(C::n)=CORE.L and C' in dom(CORE.L) then C' of form _::n' //all nesteds of private nesteds are private
    if LL(C::n)=CORE.L and m(xs) in dom(CORE.L) then m of form _::n' or P.m(xs) in CORE.L.Info.refined
    if _.#$_(_) inside LL.MI.e then LL.MI.s of form #$_
    if bridge({MWT| MWT in LL})!=empty then LL of form CORE.L//works for both CORE.L and FULL.L
    if _ native{trusted:cachable} _ in L.MWT then LL of form CORE.L//TODO: in code
* Core.L: (in addition to all the LL)
    if !hasOpenState(L)
      or L.interface?=interface, _.C._ in L.Ts and C of form _::n
      or L.interface?=interface and m::n(xs) in dom(L)
      then L.Info.close?=close
    forall MWT in bridge(L.MWT), MWT.mds in {mut, lent, capsule}
    MHs={MWT.MH | MWT in L.MWTs where MWT.mdf=class, MWT.e?=empty and MWT.m of form _::n}
    forall MWT in bridge(L.MWT), forall MH in MHs:
      if MH.T.mdf canAlsoBe MWT.mdf then MH.m of form #$_
    if MHs!=empty then {xz} = {xz | MH in MHs xz={x | x in MH.s.xs}}
    L.Info.coherentDep subseteq L.Info.typeDep
    ...
    L.Info.nativePar subseteq L.Info.typeDep//same for all the fields of Info containing Ps
    either L.Info.declaresClassMethods?!=empty or class notin L.MWTs.mdfs
    L.Info.nativeKind recognized
    expectedNumber(L.Info.nativeKind,L.Info.nativePar)
    //the number of nativePar is the expected number for the kind of nativeKind
    forall MWT in L.MWTs where MWT.nativeUrl in {"trusted:cachable","trusted:eagerCachable"}://TODO: add in code
      L.Info.close defined
      if MWT.nativeUrl="trusted:eagerCachable" then MWT.pars=empty
      all MHs.s of form _::0(_)
      MWT.pars.mdfs subseteq {imm,class}
      MWT.s not of form #$_(_)//is sufficient since bridges must be mut/lent
      MWT.mdf in {imm,class}
      or MWT.mdf=read and
        fields(L) are only imm/capsule//TODO: define formally
        forall MWT in L.MWT where this.m() inside MWT.e and m is capsule exposer: 
          MWT.e use 'this' only one time
          MWT.nativeUrl ="trusted:clearCache"
          MWT.exceptions=empty
          MWT.T.mdf in {imm,read,class,capsule}//TODO: could be mut if capsule exposer return a lent?
        field updates are used only one time in L, in a delegation pattern
          with a method annotated with native{trusted:clearCache}      
    
* G: var x capsule _ or var x fwd _ or var x fwd% _ not in G
* CTz: forall CT1,CT2 in CTz, if CT1.ST=CT2.ST then CT1=CT2
* CT: ST<=STz, ST not of form Core.T
* when CTz and p are used together, forall ST anywhere in CTz, p.solve(ST)=ST
//no binding hiding, no used binding undeclared, all x updateOp _ refers to a var binding
* CORE/FULL.e:
    -all used variables are in scope
    -all variable update (:= and updateOp) are applied on var bindings
    -no binding hiding
* "this" can never be explicitly declared as a binding
* FULL/CORE block: FV(Ks.es) disjoint bindings(Ds.DXs)
  // in the catches, they are no usable but also in scope thus not redeclarable
* FULL/CORE block where error in Ks.throws and x updateOp _ inside Ds.es
    then x in bindings(Ds)
//if there is a catch error, all the variable updates shouldnot update externally declared varabiels
* CORE/FULL D1..Dn: if Dj.x updateOp _ inside Di.e then j<i
* CORE.MWT: if MWT.e?=e, then //this partially duplicate the test of "all used variables are in scope"
    x0..xn=this,MWT.s.xs
    FV(e)\x0..xn = empty    
    for i in 0..n if MWT.pari.mdf=capsule, FV(e) not of form _,xi,_,xi,_
    //FV(e) contains xi 0 or 1 times

//CODE ONLY WELL FORMEDNESS:
//* x, P and others not valid DX=e
//* CsP well formed, without Any or other reserved names as a C
//* nested class name C is not a CsP with dots and not Any or other reserved names
//* all operators are the same in an binary op sequence
_______
#define noBlockNeeded(FULL.e):
* noBlockNeeded(B)
* noBlockNeeded(throw e)
* noBlockNeeded(loop e)= 
    noBlockNeeded(if match+ e)=noBlockNeeded(if e0 e)=
    noBlockNeeded(if e0 e1 else e)= 
    noBlockNeeded(while e0 e)=noBlockNeeded(for (DX in e)s e)=
    noBlockNeeded(e)
_______
#define bindings(FULL.DX) = xs    bindings(FULL.match) = xs    bindings(FULL/CORE.e) = xs
* bindings(var? TLocal x) = x
* bindings(var? TLocal _) = empty  
* bindings(TLocal ( var?0 TLocal0 x0 ..var?n TLocaln xn )) = x0..xn
//'T x' and the two other cases below are kinds of match (for the if)
* bindings(T x) = empty //x must be already in scope 
* bindings(T x=e) = x U bindings(e)
* bindings(T?(T?0 x0..T?n xn)=e) = x0..xn U bindings(e)

* bindings(LL)=empty
* bindings(catch throw? T x e)=x U bindings(e)
* propagates inductively in all the other cases (including blocks)
_______
#define FV(CORE.e) //FV defined as sequence instead of set, and counts occurrences of xs
* FV(x)=x
* FV(void)=FV(P)=FV(LL)=empty
* FV(throw e)=FV(e)
* FV(loop e)=FV(e),FV(e)  //representing each variable twice is enough to make capsule tests work
* FV(e0.m(x1:e1..xn:en) )=FV(e0),..,FV(en)
* FV( (T1 x1=e1.. Tn xn=en k1..km e0) )=ys,max(xs0;xs1;..;xsm)
    ys=FV(e1),..,FV(en)\x1..xn
    xsi=FV(ki)
    xs0=FV(e0)\x1...xn
    if Ti=capsule _ then
      FV(e0)..FV(en) not of form _,xi,_,xi,_ //xi 0 or 1 times in ys,FV(e0)..FV(en)
* FV(k)=FV(e0)\k.x
    if k.T.mdf=capsule then  FV(e0) not of form _,k.x,_,k.x,_
_______
#define max(xs1;..;xsn)= zs // as many repetition of each x as in the most repetitive of xs1..xsn
* max(ys)=max(empty,ys)=ys
* max(x,xs;ys)=x, max(xs;ys) if x not in ys
* max(x,xs;ys0,x,ys1)=x, max(xs;ys0,ys1)
* max(xs; xs0;..;xsn) = max(max(xs;xs0);xs1;..;xsn)
_______
#define returningBlock({Ds1 Ks WHOOPS? Ds2})    returning(FULL.e)    hasReturn(es)
* returningBlock({Ds1 Ks WHOOPS? Ds2}) iff
    Ds,D=Ds1,Ds2
    returning(D.e)
    forall D' in Ds: not returning(D'.e) // would be dead code after
    forall K in Ks: returning(K.e)
    hasReturn(Ds1.es,Ds2.es,Ks.es)

* returning(throw e)
* returning(loop e)
* returning(if _ e1 else e2) iff 
    returning(e1) and returning(e2)
* returning( (Ds1 Ks WHOOPS? Ds2 e) ) iff //TODO: do we handle the case for (Ds e Ks WHOOPS?) ??
    returning(e)
    forall K in Ks: returning(K.e)
//* undefined in all the other cases

* hasReturn(_,e,_)
    return e' is contained inside e without traversing LL or a block with curly or another throw e'
_______
#define hasOpenState(Core.L)    hasOpenState(interface?, mwts)    bridge(MWTs) = MWTs'
* hasOpenState({interface? MWTs NCs Info})=hasOpenState(interface?,MWTs)
* hasOpenState(interface, _)
* hasOpenState(empty, MWTs)
    forall MWT in MWTs where MWT.e?=empty: MWT.m not of form _::n
    bridge(MWTs) = empty

* bridge(MWTs) = {MWT| MWT in MWTs,  MWT.m not of form #$_,
    and  _.#$_(_) inside MWT.e? or untrusted(MWT.native?)}
    
//TODO:29/11/2019-
--add the privateRefresh in updateInfo(p,NC) and in importing reuse
