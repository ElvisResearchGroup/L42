_______
#define Abstract syntax for CORE and FULL
  mdf::= imm | mut | lent | read | capsule | fwd mut | fwd imm | class | fwd%imm | fwd%mut 
  throw ::= error | exception | return 
  s ::= m(xs) //mOp is normalized when reified by FULL.MH.s
  C ::= IdUp IdChars (::n)? //well formedness: C not Thisn/Any/Void/Library/This
  P  ::= Thisn.Cs | Any | Void | Library
  CORE.T ::= mdf Docs P
  CsP ::=Cs | P
  FULL.T ::= mdf? Docs CsP
  FULL/CORE.PL ::= [Ts] // In concrete syntax an [empty] is represented as empty and imm is omitted; Well formedness: all mdf in Ts are imm
  FULL.MH ::= (mdf Docs)? method T mOp (T1 x1..Tn xn) PL //the Docs are on the type of 'This'
  CORE.MH ::= mdf Docs method T m (T1 x1..Tn xn) PL
  FULL/CORE.H ::= interface? PL
  FULL.TLocal ::= T | mdf?
  FULL/CORE/HALF.xe ::= x = e
  FULL/CORE/HALF.xv ::= x = v
  CORE.e ::= xP | void | L | xP.m(xes) | loop e | throw e | x:=e | (Ds Ks e)
  CORE.xP ::= x | P<:T | a //a=address, only at runtime
  CORE.D ::= var? T x=e
  CORE/HALF.K ::= catch throw T x e
  CORE.L ::= {H MWTs NCs Info Docs} //sadly, Docs at the end to avoid ambiguity
  CORE.MWT::= Docs MH (= native[URL]? e)?  
  CORE.NC::= Docs C = L
  Info::= #Flag{typeDep=Ps,coherentDep=Ps,friends=Ps,usedMethods=(P.s)s,privateSubtypes=Ps, refined=ss, canBeClassAny?}
    //in concrete syntax, labels for emptys are omitted
    //friendsDep are spyed by This:
    //Paths whose unique Numbers are used either directly,
    //or in a private nested class or in an L in a method
    //usedMethDep//methods used either directly or in a private nested class or in an L in a method
    //privateImpl: interfaces implemented by a private nested class or in an L in a method
    //havePrivateStaticMethods (since it can be casted to class P)
    //may add closed/open class (since private abstract methods may be removed if unused)
    //may add 'free this': 'this' only used as receiver
  Flag ::= norm | typed
  FULL.L ::= {(H | reuse[URL] | ...) Ms Docs}
  FULL.M ::= F | MI | MWT | NC
  FULL.F ::= Docs var? T x
  FULL.MI ::= Docs method s = e
  FULL.MWT ::=Docs MH (= native[URL]? e)?// well formdness: no FULL.L inside e
  FULL.NC ::= Docs C = e //FULL.L can be inside e
  LL::= FULL.L | CORE.L
  FULL.e ::= x | CsP | void | LL | \ | \x | e string | 'PathSel | UOp e
    | e0 OP .. OP en | e<:T | e (.m)?( par ) | e (.m?)[ pars ]
    | ( Ds Ks WHOOPS? Ds' e? ) | { Ds Ks WHOOPS? Ds' }
    | loop e | while e0 e1 | for DX0 in e0 .. DXn in en e
    | throw e | x opUpdate e | if e0 e1 (else e2)? | if match+ e 
  FULL.D ::= (DX =)? e
  FULL.WHOOPS ::= whoops T+
  FULL.match ::= T x | T x = e | T?(T?0 x0..T?n xn) = e //where at least one Ti? is not empty //correctly not TLocal
  FULL.DX ::= var? TLocal x | TLocal '_' | TLocal ( var?0 TLocal0 x0 ..var?n TLocaln xn )
  FULL.K ::= catch throw? T x e | catch throw? T '_' e
  FULL.xP ::= x | CsP | CsP<:T | \ | \<:T
  Ldom::=s | Cs
_______
#define auxiliary grammars
  ST::=CORE.T | ST.s | ST.s.i | op STzs //i=0 for receiver type?
  HALF.xP ::= x | P<:STz | %STz%
  HALF.e ::= xP | void | LL | xP.m(xes) | xP0 OP..OP xPn | throw e | loop e | x := e | (Ds Ks e)
  HALF.D ::= var? HALF.T x = e
  HALF.T::= mdf? STz
  CC ::= ST<=HALF.T
  PR ::= CCz;CORE.L;pTails | Err
  ER ::= CCz;CORE.e? | Err
  DsR ::= CCz;CORE.Ds | Err
  KR ::= CCz;CORE.K | Err
  Err ::= limit(p) | illTyped(p) | incoherent(p) | headerErr(p)| implementsErr(p) | inferenceFailure(I,STz) | throw(p,A,v)
  R ::= PR | ER | DsR | KR
  G ::= var?1 x1:CORE.T1 .. var?n xn:CORE.Tn
  GX ::= x1:STz1 .. xn:STzn
  I ::= I[C?;p;G;CCz]//inference application environment
  Y ::= Y[p;GX;onSlash=STz;onSlashX=HALF.xP?;expectedT=HALF.T?;onPath=class?]
  v ::= CORE.xP | void | CORE.L
  r ::= CORE.L | exception v | error v
  Obj ::= P(xvs) empty;empty| P() as1;as2 // memory objects
  A ::= empty | imm? a->Obj, A | imm? x->v, A  //order is irrelevant
  Q ::= Q[Flag;p;G;Ts;Ps]//Ts is returns, Ps is exceptions
  MethT ::= CORE.Ts->CORE.T;Ps  
  CORE.ctxV ::= xP.m(xvs x=ctxV xes) | loop ctxV | throw ctxV  | x := ctxV //blocks manually handled in reduction
  CORE.ctx ::= [] | throw ctx | loop ctx | x := ctx | xP.m(xes x=ctx xes')
    | ( Ds Ks ctx ) | (Ds T x=ctx Ds' Ks e) | (Ds Ks catch throw T x ctx Ks' e)
  pTail::= CORE.L | C:LL
  p::= LL;pTails //representing This0,...,Thisn: This0.C refers to a class bound in LL,
  // and (This1..ThisN).C to bindings in elements of pTail1.. pTailn respectively
_______
#define functional notation, update and '\' (set minus) for LL (over the domain Ldom)
  /*...*/ //note, LL(Cs) may return an e not of form LL
_______
#define FULL.L[M]=FULL.L', CORE.L[MWT]=CORE.L', CORE.L[NC]=CORE.L'
  /*...*/ replace the member with the same key, or add a new one if novel
_______
#define Lexical Syntax
  newline ::= <0x0A> //linefeed only, normalizing away <0x0D>
  CHAR   ::=  <0x20-0x7E> | newline//An Any printable ASCII character, or a newline
  CHARS0 ::= CHAR* -- "
//StringInterpolation: single character% for single line strings
// "   %foo bar %(a+b) ccc  %ff.baz() "
// after a % symbol, any ePostfix can be parsed as an interpolation expression.
// the first space/comma after ePostix is discarded. Not needed spaces terminates the ePostix:
// "G%a.b(),,h" =="G"++a.b()++",h"
// "G%a .b(),,h" =="G"++a++".b(),,h" 
// and "G%a.b(foo .x()),,h" =="G"++a.b(foo .x())++",h"
// multiline strings can start with a sequence of %s to identify the escape sequence
//(thus no interpolation if zero %s
  string ::= ctxString[es] //abstract view of string literals
  Number ::= <0-9> ('.'|'_'|'-'|<0-9>)*
  commentBody ::= CHAR* -- '/*' -- '*/' | commentBody comment commentBody
  comment ::= '//' (CHAR* -- newline) newline | '/*' commentBody '*/'
  Whitespace ::= (' ' | newline | ',')+
  tURL::= /*a trusted url*//*too boring*/
  uURL::= /*an untrusted url*//*too boring*/
  URL::=tURL|uURL
  IdUp ::= _* (<A-Z> | $) 
  IdLow ::= _* <a-z>
  IdChar ::= <a-z> |<A-Z> | $ | _ | <0-9>
  n ::= 0 | <1-9> <0-9>*
  x ::=IdLow IdChars
  m ::= (#$ |#+)? x(#x)* (::n)?
  UOp ::= ! | ~ | Number  // prefix
  OP0 ::= ^ | : | <- | << | ++ | -- | **   // right associative
  OP1 ::= + | - | * | / | >> | -> // left associative   
  OP2 ::= == | < | > | >= | <= | in | !=  // unassiociative
  OP3 ::= => | && | '||' // right associative, will be short circuting
  OP  ::= OP0 | OP1 | OP2 | OP3 
  opUpdate ::=  ':=' | (OP0 -- ':')= | OP1= //allowing OP3 could be done as an extension, it might interact with short circuit
  FULL/CORE.Doc ::= @PathSel | @PathSel?{docText}
  FULL.PathSel::= CsP | (CsP.)? s(.x)?
  CORE.PathSel::= P | P.s | P.s.x
  FULL/CORE.docText ::= empty | CHAR -- '{' -- '}' -- '@' docText 
    | Doc docText | '{' docText '}' docText
  mOp ::= empty | m | OP_n | ~_n | !_n
_______
#define FULL Expressions priority disambiguation and other details
  FULL.eAtomic ::= x | CsP | 'void' | LL | B | \  | 'PathSel | \x
  FULL.ePostfix ::= UOp* eAtomic ((.m)?(par)|(.m)?[(par;)* par?]|string|<:T)* //no space in ePostfix(par) and \x
  FULL.par ::= e? xe*
  FULL.eBinary0 ::= ePostFix (OP0 ePostFix)* //right associative, all ops must be the same
  FULL.eBinary1 ::= (eBinary0 OP1)* eBinary0 //left associative, all op the same
  FULL.eBinary2 ::= (eBinary1 OP2)* eBinary1 //unassociative, all op the same, thus a<b<c could be resolved as a.#left#1(center:b,right:c)
  FULL.eBinary3 ::= (eBinary2 OP3)* eBinary2 //left associative, all op the same
  FULL.B ::= (Ds e Ks WHOOPS?) | (D+ Ks WHOOPS? Ds e) | { D+ Ks WHOOPS? Ds }
  FULL.sIf ::= if e e (else e)? | if match+ e
  FULL.sWhile::= while e e'
  FULL.sFor ::= for (DX in e)+ e
  FULL.e ::= sIf | sWhile | sFor | loop e | throw e | x opUpdate e | eBinary3
_______
#define grammar well formedness
* FULL.DX: var TLocal x or _(_ var TLocal x _) is valid only if TLocal.mdf not capsule or fwd.
* CORE.D: var T x=e is valid only if T not capsule or fwd.
* s: 'this' notin xs and all x in xs are unique
* FULL.par: 'this' notin xs and all x in xs are unique, if 'that' omitted, that notin xs
* mdf: fwd%Imm, fwd%mut not present in any term, will be used internally by the type system
* C not This, Thisn, Any, Void or Library
* FULL.B:
    no repetition in B.Ds.xs//all of the Ds, even if divided in 2 groups
    this notin dom(B.Ds.xs)
    FV(Ks) disjoint dom(B.Ds)
    dom(B.Ds) disjoint bindings(B.Ds.es,B.Ks.es,B.e) U Ks.xs
    if B={ Ds1 Ks WHOOPS? Ds2} then returningBlock({ Ds1 Ks WHOOPS? Ds2})
    if B=(Ds1 Ks WHOOPS? Ds2 e) then forall D in Ds1,Ds2: not returning(D)
    if B=(Ds1 e Ks WHOOPS?) then forall D in Ds1: not returning(D) 
    if B=(_ D e _) and D.e either for,if,loop,while; then noBlockNeeded(D.e)
    if B=(_ K e _) then noBlockNeeded(K.e)
* CORE.B: //less then full, to avoid issues with inlining and such
    no repetition in B.Ds.xs//all of the Ds, even if divided in 2 groups
    this notin dom(B.Ds.xs)
    FV(Ks) disjoint dom(B.Ds) U Ks.xs
    dom(B.Ds) disjoint bindings(B.Ds.es,B.Ks.es,B.e)
* FULL/CORE.K: K.x not in bindings(K.e); K.x!=this
* FULL.MI:MI.e.FULL.L undefined //e does not contains any FULL.L
* FULL.MWT: if MWT.e?=e, then e.FULL.L undefined //e does not contains any FULL.L
* FULL/CORE.MH: MH =mdf method T _(T1 x1.. Tn xn)PL
    mdf notin {fwd imm, fwd mut}
    T0 = mdf This0
    if exists i: Ti.mdf=fwd imm then T.mdf undefined or T.mdf in {mut, fwd mut, imm, fwd imm}
    if exists i: Ti.mdf=fwd mut then T.mdf undefined or T.mdf in {mut, fwd mut}
    if T.mdf in {fwd imm,fwd mut} then exists i: Ti.mdf in {fwd imm, fwd mut}
* CORE.MWT: if MWT.e?=e, then
    FV(e)\this,x1..xn = empty    
    for i in 0..n if Ti.mdf=capsule, xi in FV(e) 0 or 1 times
* FULL.match of form T?(T?0 x0..T?n xn) = e; at least one Ti? is not empty
* FULL.e: all used variables are in scope //to implement in MI,MWT and NC
* FULL.e: \x only appear in a method parameter expression
* CORE/FULL.e: all variable update are applied on var bindings
* FULL.sFor: forall TLocal(var?1 TLocal1 x1.. var?n TLocaln xn) in FULL.sFor.DXs: var1?..varn?=empty
* LL:
    no repetition in LL.Ms.LDom
    Any notin LL.H.Ts
    exists at most one n such that exists m::n(xs) where LL(m::n(xs))=MWT, and MWT.e? is empty
    if LL.H.interface? = interface, then forall s in dom(LL), LL(s).e?=empty
    if LL(C::n)=LL' then LL' of form CORE.L
    if LL(C::n)=CORE.L and C' in dom(CORE.L) then C' of form _::n' //all nesteds of private nesteds are private
    if LL(C::n)=CORE.L and m(xs) in dom(CORE.L) then m of form _::n' or P.m(xs) in CORE.L.Info.refined
* The top level project LL:
    forall LL0, LL1 anywhere inside different places in LL: ns0 disjoint ns1
    where nsi={n| C::n in dom(LLi) or m::n(xs) in dom(LLi)} //care when '...' is expanded; while 'reuse URL' will rename the private names
* program p:
  -if p.pop(1) is defined, then p.pop(1) is well formed 
  -CORE.L;pTail is well formed iff
    FULL.L={CORE.L.H CORE.L.Ms}
    flagTyped(norm(FULL.L;pTail);pTail)=CORE.L';pTail //defined in file top
    and CORE.L'.Info<=CORE.L.Info (that is, all the dependencies are a subset, and so on)//TODO: define formally
//Note, when we import a url we should check if the corresponding CORE.L;empty is well formed
* G: var x capsule _ or var x fwd _ or var x fwd% _ not in G
* CORE.PL: forall mdf in PL.Ts.mdfs, mdf= imm //empty in the concrete syntax
* FULL.PL: forall mdf? in PL.Ts.mdfs, mdf?= imm //empty in the concrete syntax
//CODE ONLY WELL FORMEDNESS:
//* x, P not valid DX=e
//* CsP well formed, not Any in the middle and so on..
//* nested class C is not a CsP with dots and not Any and..
//* all operators are the same in an binary op sequence
_______
#define noBlockNeeded(FULL.e):
* noBlockNeeded(B)
* noBlockNeeded(throw e)
* noBlockNeeded(loop e)= 
    noBlockNeeded(if match+ e)=noBlockNeeded(if e0 e)=
    noBlockNeeded(if e0 e1 'else' e)= 
    noBlockNeeded(while e0 e)=noBlockNeeded(for (DX in e)* e)=
    noBlockNeeded(e)
_______
#define bindings(FULL.DX) = xs    bindings(FULL.match) = xs    bindings(FULL/CORE.e) = xs
* bindings(var? TLocal x) = x
* bindings(var? TLocal _) = empty  
* bindings(TLocal ( var?0 TLocal0 x0 ..var?n TLocaln xn )) = x0..xn

* bindings(T x) = x
* bindings(T x=e) = x U bindings(e)
* bindings(T?(T?0 x0..T?n xn)=e) = x0..xn U bindings(e)

* bindings(LL)=empty
* bindings(catch throw? T x e)=x U bindings(e)
* propagates inductively in all the other cases
_______
#define FV(CORE.e) //FV defined as sequence instead of set, and counts occurrences of xs
* FV(x)=x
* FV(void)=FV(P)=FV(LL)=empty
* FV(throw e)=FV(e)
* FV(loop e)=FV(e),FV(e)  //representing each variable twice is enough to make capsule tests work
* FV(e0.m(x1:e1..xn:en) )=FV(e0),..,FV(en)
* FV( (T1 x1=e1.. Tn xn=en k1..km e0) )=ys,max(xs0;xs1;..;xsm)
    ys=FV(e1),..,FV(en)\x1..xn
    xsi=FV(ki)
    xs0=FV(e0)\x1...xn
    if Ti=capsule _ then
      ys,FV(e0) not of form _,xi,_,xi,_//xi 0 or 1 times in ys,FV(e0)
_______
#define max(xs1;..;xsn)= zs // as many repetition of each x as in the most repetitive of xs1..xsn
* max(ys)=max(empty,ys)=ys
* max(x,xs;ys)=x, max(xs;ys) if x not in ys
* max(x,xs;ys0,x,ys1)=x, max(xs;ys0,ys1)
* max(xs; xs0;..;xsn) = max(max(xs;xs0);xs1;..;xsn)
_______
#define returningBlock({Ds1 Ks WHOOPS? Ds2})    returning(FULL.e)    hasReturn(es)

* returningBlock({Ds1 Ks WHOOPS? Ds2}) iff
    Ds,D=Ds1,Ds2
    returning(D.e)
    forall D' in Ds: not returning(D'.e) // would be dead code after
    forall K in Ks: returning(K.e)
    hasReturn(Ds1.es,Ds2.es,Ks.es)
* returning(loop e)
* returning(throw e)
* returning(if _ e1 else e2) iff 
    returning(e1) and returning(e2)
* returning( (Ds1 Ks WHOOPS? Ds2 e) ) iff
    returning(e)
    forall K in Ks: returning(K.e)
//* undefined in all the other cases
* hasReturn(_,e,_)
    return e' is contained inside e without traversing LL or a block with curly or another throw e'
