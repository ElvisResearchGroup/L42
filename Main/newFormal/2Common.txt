_______
#define p(P) = LL //functional notation
* (LL;pTails)(This0.Cs) = LL(Cs)
* p(Thisn+1.Cs) = p.pop(n+1)(This0.Cs)
* p(Any) = {interface}
* p(Void) = p(Library) = {}
_______
#define p.pop(n) = p'
* p.pop(0) = p
* (LL;C:LL';pTails).pop(n+1) = (LL'[C=LL];pTails).pop(n)
* (LL;CORE.L;pTails).pop(n+1) = (CORE.L;pTails).pop(n)
_______
#define p.push(C,LL') = p'    p.push(LL') = p'    p.push(C)
* (LL;pTails).push(C,LL') = LL';C:LL,pTails

* (CORE.L;pTails).push(LL) = LL;CORE.L,pTails

* (LL;pTails).push(C) = (LL;pTails).push(C,LL')
    LL(C) = LL'
_______
#define p.update(LL) = p'
* (_;pTails).update(LL) = LL;pTails
_______
#define p.navigate(P) = p' 
* p.navigate(Thisn.C1..Ck) = p.pop(n).push(C1)...push(Ck)
_______
#define P0[from P1;p] = P2 e[from P;p] = e' e[from P;p;n] = e'  CTz[from P;p] = CTz'
* Thisn.Cs[from Thism.C1..Ck;p] = Thism.C1..C(k-n).Cs if n<k
* Thisn.Cs[from Thism.C1..Ck;p] = p.minimize(This(m+n-k).Cs) if n>=k

* Any[from _] = Any,    Library[from _] = Library,    Void[from _] = Void

* e[from P;p] propagate on the structure, 
    and L[from P;p] = L[from P;p;0] //assert p.push(L[from P;p;0]).checkAllMinimized(L[from P;p;0])) TODO: in code
    and P'[from P;p] as defined above

* {H Ms}[from P;p;j] = {H[Ts=H.Ts[from P;p;j+1] Ms[from P;p;j+1]}
* This(j+n).Cs0[from P;p;j] = This(j+k).Cs1
    Thisn.Cs0[from P;p] = Thisk.Cs1
* Thisn.Cs[from P;p;j] = Thisn.Cs with n<j
* All cases for other expressions/terms propagate to submembers, including docs  

* CTz[from P;p]={ST[from P; p] <= T[from P; p] | ST <= T in CTz, ST <= T not of form CORE.T<=CORE.T'}  // ISAAC: why are you removing CORE.T ?
* (mdf[STz])[from P;p]=CORE.T[mdf=mdf]
    STz[from P;p]=CORE.T
* (mdf[STz])[from P;p]=STz'
    STz[from P;p]=STz' // ISAAC: why are we deleting the mdf?
* ST1..STn[from P;p] = ST1[from P';p]..STn[from P';p] //handles also empty mdf HALF.T // ISAAC: P' is a free variable?
* ST.s[from P;p] = p.minimize(ST[from P;p].s)
* ST.s.i[from P;p] = p.minimize(ST[from P;p].s.i)
* (OP STz1..STzn)[from P;p] = p.minimize(OP STz1[from P;p]..STzn[from P;p])
_______
#define collect(p,Core.Ts)=Core.Ts'    collect(p,P)=Core.Ts //collects transitively implemented interfaces
* collect(p,empty)=empty
* collect(p,T0 Ts)=((T0, Ts') \ collect(p,Ts)) collect(p,Ts)
    p(T0.P)={interface_}=FULL.L//assert ... and reuse are unreachable
    Ts'=collect(p,♥FULL.L.Ts[from T0.P;p])
* collect(p,T0 Ts)=((T0, CORE.L.Ts[from T0.P;p]) \ collect(p,Ts)) collect(p,Ts)
    p(T0.P)={interface _}=CORE.L

* collect(p,P)=CORE.L.Ts[from P;p] //does not collect P itself
    p(P)=CORE.L//no need to be interface
* collect(p,P)=collect(p,♥FULL.L.Ts[from P;p]) //does not collect P itself
    p(P)=FULL.L
_______
#define p|-T <= Tz    p|-T0 <= T1    p|-P0 <= P1    mdf0<=mdf1
* p|-T <= T0..Tn  iff  p|-T <= T0,..,p|-T <= Tn

 *p |- mdf0 P0 <= mdf1 P1
    mdf0 <= mdf1
    p |- P0 <= P1

* p |- P0 <= P1  
    P1 in {P0} U (collect(p,P0)) U {Any} //assert p.minimize(Pi)=Pi

* mdf <= mdf
* capsule <= mdf, if mdf in {mut,imm,lent,read,fwd%Mut,fwdMut,fwd%Imm, fwdImm}
* imm <= mdf, if mdf in {read,fwd%Imm,fwdImm}
* mut <= mdf, if mdf in {lent,fwd%Mut,read,fwdMut}
* lent <= read
* fwd%Mut <= fwdMut
* fwd%Imm <= fwdImm
_______
#define origin(p;s;P) = P'   refine(p;s;P)
* origin(p;s; P) = P'
    {P'} = {P'| P' in P U collect(p,P) and s in dom(p(P).Ms) and !refine(p;s;P')}
    
* refine(p;s;P) iff exists T in collect(p,P) such that s in dom(methods(p,T.P))
_______
#define ♥FULL.MH = CORE.MH    ♥FULL.TLocal = CORE.T   ♥CsP = P,  ♥FULL.Docs = CORE.Docs
* ♥((mdf Docs)? method T mOp (T1 x1..Tn xn)[Ts])
    =(mdf ♥Docs)? method ♥T methName(mOp)(♥T1 x1..♥Tn xn)[♥Ts]

* ♥(Docs CsP) = imm ♥Docs ♥CsP
* ♥(mdf Docs CsP) = mdf ♥Docs ♥CsP

* ♥P = P // ♥C.Cs undefined
* ♥FULL.Docs = CORE.Docs
    all P are replaced with ♥P; all (CsP.)? s(.x)? with empty (CsP.)? are This0.s(.x)?
_______
#define methods(p,P0)=CORE.MHs    methods(p,P0,FULL.L)=CORE.MHs //methods res has relevant order
* methods(p,P0)=CORE.L.MWTs.MHs[from P0;p]
    p(P0)=CORE.L
* methods(p,P0)=MH1..MHn//assert ... and reuse are unreachable
    p(P0)={interface? Ts Ms }=FULL.L
    MHs=extractMHs(p.navigate(P0);Ms)[from P0;p]
    Ps=collect(p,♥Ts[from P0;p]).Ps
    s1..sn=[dom(methods(p,P)) | P in Ps].flatten().distinct()//an ordered version of {s | P in Ps, s in extractMHs(p.navigate(P),p(P).Ms).ss}
    origin(p;s1,P0)..origin(p;sn,P0) all defined
    [MHi,_]=[MH[from P0,p]| MH in MHs and MH.s=si],[MH| P in Ps such that methods(p,P)(si)=MH] for i in 1..n
_______
#define extractMHs(p;Full.Ms)=CORE.MHs //need to keep the order
* extractMHs(p;empty)=empty
* extractMHs(p;NC,Ms)=extractMHs(Ms) 
* extractMHs(p;MI,Ms)=extractMHs(Ms) 
* extractMHs(p;MWT,Ms)=♥MWT.MH,extractMHs(Ms) 
* extractMHs(p;T x,Ms)=read method ♥T x(), expandFields(Ms)
    ♥T = toRead(♥T)
* extractMHs(p;T x,Ms)=mut method capsuleToLent(♥T) #x(), extractMHs(toRead(♥T) x,Ms)
    ♥T != toRead(♥T) // TODO: should we use capsuleToMut(T) instead? I'm really on the fence
* extractMHs(var T x,Ms)=mut method Void x(♥T that), extractMHs(T x,Ms)    
_______
#define p.minimize(P) = P'
* p.minimize(P) = P
    P in {Any,Void,Library,This0.Cs}
* p.minimize(This(n+1).Cs) = P
    p.pop(1).minimize(Thisn.Cs) = Thisk.Cs'
    P=p.minimize(This1.Cs')  if k=0
    P=This(k+1).Cs'  otherwise   
* (CORE.L;C:LL;_).minimize(This1.C.Cs)=This0.Cs
* (CORE.L;LL;_).minimize(This1.Cs)=This1.Cs
* (CORE.L;C:LL;_).minimize(This1.C'.Cs)=This1.C.Cs
    C!=C'
_______
#define MH notations, MWT notations just inherit them,
with MH=mdf method T mOp(T1 x1..Tn xn)[Ts] 
* MH.pars = T1..Tn
* MH.exceptions = Ts
* G^MH = this:mdf This0, x1:T1..xn:Tn
* MH.pari = Ti
* MH.s=methName(mOp)(x1..xn)//LL(s) and well formedness for no repetition in dom uses MH.s
_______
#define name manglings methName(mOP) = m, methNameTrim(m) = m, methName(x, mdf?) = m
* methName(m) = m
* methName(UOp) = m // m is from a table
* methName(OP) = methname(OP_0)
* methName(Op_i) = mi //m is from a table, for example methName(++_3)=#plusplus3
* #m'OP' = methName(OP)#m
* methNameTrim(mn) = methNameTrim(m) //removes any numeric suffix, for example methNameTrim(foo1b34)=foo1b
* methNameTrim(m) = m, where m not of form m'n
* methName(x,mdf) = x#mdf
* methName(x,empty) = x#'default' // for example methName(#bar,empty)=#bar#default
* charName(char) = m // m is from a table // ISAAC: should charName(~) == methName(~) ?
// (charName is used for string literal desugaring, methName is for operator desugaring)
_______
#define CORE.e inside CORE.e'
  e inside CORE.ctx[e]
_______
#define toRead(T)   toRead(G) capsuleToLent(T) //toRead of fwd, fwd% is undefined
* toRead(lent P) = toRead(mut P) = toRead(capsule P) = read P
* toRead(mdf P) = mdf P if mdf in {imm,read,class}

* toRead(G)(x) = toRead(G(x))[with var?=empty] //thus single entry undefined where toRead undefined

* capsuleToLent(capsule P) = lent P
* capsuleToLent(mdf P) = mdf P, if mdf != capsule
