_______
#define p(P) = LL //functional notation
* (LL;pTails)(This0.Cs) = LL(Cs)
* p(Thisn+1.Cs) = p.pop(n+1)(This0.Cs)
* p(Any) = {interface}
* p(Void) = p(Library) = {}
_______
#define p.pop(n) = p'
* p.pop(0) = p
* (LL;C:LL';pTails).pop(n+1) = (LL'[C=LL];pTails).pop(n)
    if C in dom(LL'.ms)
* (LL;C:LL';pTails).pop(n+1) = (LL';pTails).pop(n)
    if C notin dom(LL'.ms) 
* (LL;CORE.L;pTails).pop(n+1) = (CORE.L;pTails).pop(n)
_______
#define p.push(C,LL') = p'    p.push(LL') = p'    p.push(C)
* (LL;pTails).push(C,LL') = LL';C:LL,pTails

* (LL;pTails).push(LL') = LL';LL,pTails

* (LL;pTails).push(C) = (LL;pTails).push(C,LL')
    LL(C) = LL'
_______
#define p.update(LL) = p'
* (_;pTails).update(LL) = LL;pTails
    //cleanPushed(pTails) holds "often"; but not in sortHeader, for example.  
//where cleanPushed(empty) and cleanPushed(C:LL pTails) iff C in dom(LL)    
_______
#define p.navigate(P) = p' 
* p.navigate(Thisn.C1..Ck) = p.pop(n).push(C1)...push(Ck)
_______
#define P0[from P1;p] = P2 e[from P;p] = e' e[from P;p;n] = e'  CTz[from P;p] = CTz'
* Thisn.Cs[from Thism.C1..Ck;p] = Thism.C1..C(k-n).Cs if n<k
* Thisn.Cs[from Thism.C1..Ck;p] = p.minimize(This(m+n-k).Cs) if n>=k

* Any[from _] = Any,    Library[from _] = Library,    Void[from _] = Void

* e[from P;p] propagate on the structure, 
    where L[from P;p] = L[from P;p;0]
    //assert p.push(L[from P;p;0]).checkAllMinimized(L[from P;p;0])) TODO: in code
    where P'[from P;p] as defined above

* {H Ms}[from P;p;j] = {H[Ts=H.Ts[from P;p;j+1] Ms[from P;p;j+1]}
* This(j+n).Cs0[from P;p;j] = This(j+k).Cs1
    Thisn.Cs0[from P;p] = Thisk.Cs1
* Thisn.Cs[from P;p;j] = Thisn.Cs with n<j
* All cases for other expressions/terms propagate to submembers, including docs  
_______
#define p|-T <= Tz    p|-T0 <= T1    p|-P0 <= P1    mdf0<=mdf1
* p|-T <= T0..Tn  iff  p|-T <= T0,..,p|-T <= Tn

 *p |- mdf0 P0 <= mdf1 P1
    mdf0 <= mdf1
    p |- P0 <= P1

* p |- P0 <= P1  
    P1 in {P0} U p(P0).Ts[from P0;p] U {Any} //assert p.minimize(Pi)=Pi

* mdf <= mdf
* capsule <= mdf, if mdf in {mut,imm,lent,read,fwd%Mut,fwdMut,fwd%Imm, fwdImm}
* imm <= mdf, if mdf in {read,fwd%Imm,fwdImm}
* mut <= mdf, if mdf in {lent,fwd%Mut,read,fwdMut}
* lent <= read
* fwd%Mut <= fwdMut
* fwd%Imm <= fwdImm
_______
#define ♥FULL.MH = CORE.MH    ♥FULL.TLocal = CORE.T    ♥FULL.Docs = CORE.Docs
* ♥((mdf Docs)? method T mOp (T1 x1..Tn xn)[Ts])
    =(mdf ♥Docs)? method ♥T methName(mOp)(♥T1 x1..♥Tn xn)[♥Ts]

* ♥(mdf Docs CsP) = mdf ♥Docs ♥CsP
* ♥(Docs P) = imm ♥Docs P //undefined for CsP of form C.Cs

* ♥FULL.Docs = CORE.Docs where all all (CsP.)? s(.x)? with empty (CsP.)? are replaced with This0.s(.x)?
_______
#define p.minimize(P) = P'
* p.minimize(P) = P
    P in {Any,Void,Library,This0.Cs}
* p.minimize(This(n+1).Cs) = P
    p.pop(1).minimize(Thisn.Cs) = Thisk.Cs'
    P=p.minimize(This1.Cs')  if k=0
    P=This(k+1).Cs'  otherwise   
* (CORE.L;C:LL;_).minimize(This1.C.Cs)=This0.Cs
* (CORE.L;LL;_).minimize(This1.Cs)=This1.Cs
* (CORE.L;C:LL;_).minimize(This1.C'.Cs)=This1.C.Cs
    C!=C'
_______
#define p.solve(ST) = ST' 
* p.solve(T) = T
* p.solve(T.s) = p(T.P).mwts(s).T[from T.P;p] //TODO: in code they may not be the from
* p.solve(T.s.i) = p(T.P).mwts(s).parsi[from T.P;p] //TODO: in code they may not be the from
* p.solve(ST.s.i?) = p.solve(T.s.i?)
    T = p.solve(ST)
* p.solve(ST.s.i?) = ST'.s.i?
    ST' = p.solve(ST)
    ST' not of form T
* p.solve(ST.s.i?) = T.s.i?
    T = p.solve(ST)
    p(T.P).mwts(s) undefined
* p.solve(OP STz1..STzn) = p(P).mwts(s).T[from P;p] 
    Tzi = {T| ST in STzi, T=p.solve(ST)}
    {p.opOptions(OP T1..Tn)| Ti in TZi}
* p.solve(OP STz1..STzn) = OP p.solve(STz1)..p.solve(STzn)
    otherwise    
NOTE: ST may contains Ps that are not in the domain of p,
      in those cases solve is the identity.
TODO: should also p.minimize(P) and from(P;p) be resilient and do a best effort?
//there are cases where p(P) is undefined and p.minimize(P) is not an identity.  EG we are in A.B. C is one of our NCs, but C.D is undefined.
// So p(This2.A.B.C.D) is undefined and p.minimise(This2.A.B.C.D) is sensibly This0.C.D.
_______
#define MH notations, MWT notations just inherit them,
with MH=mdf method T mOp(T1 x1..Tn xn)[Ts] 
* MH.pars = T1..Tn
* MH.exceptions = Ts
* MH.G = this:mdf This0, x1:T1..xn:Tn
* MH.pari = Ti
* MH.s=methName(mOp)(x1..xn) //well formedness for no repetition in dom(L) and dom(Ms) uses MH.s
_______
#define name manglings methName(mOP) = m, methNameTrim(m) = m, methName(x, mdf?) = m
* methName(m) = m
* methName(UOp) = m // m is from a table
* methName(OP) = methname(OP_0)
* methName(Op_i) = mi //m is from a table, for example methName(++_3)=#plusplus3
* #m'OP' = methName(OP)#m
* methNameTrim(mn) = methNameTrim(m) //removes any trailing digits, for example methNameTrim(foo1b34)=foo1b
* methNameTrim(m) = m, where m not of form m'n
* methName(x,mdf) = #x#mdf
* methName(x,empty) = #x#'default' // for example methName(#bar,empty)=#bar#default
* charName(char) = m // m is from a table
_______
#define CORE.e inside CORE.e'
  e inside CORE.ctx[e]
_______
#define toRead(T)   toRead(G)    capsuleToLent(T) //toRead of fwd, fwd% is undefined
* toRead(lent P) = toRead(mut P) = toRead(capsule P) = read P
* toRead(mdf P) = mdf P if mdf in {imm,read,class, fwd mut, fwd imm, fwd%Mut, fwd%Imm}

* toRead(G)(x) = toRead(G(x))[with var?=empty] //thus single entry undefined where toRead undefined

* capsuleToLent(capsule P) = lent P
* capsuleToLent(mdf P) = mdf P, if mdf != capsule
_______
#define onlyMutOrImm(G)=G' 
* onlyMutOrImm(G)={x:G(x) | G(x).mdf in {mut,imm}}//note: we correctly remove all fwd variables
_______
#define fwd T
* fwd imm P = fwd fwd%imm P=fwdImm P
* fwd mut P = fwd fwd%mut P=fwdMut P
* fwd T = T otherwise