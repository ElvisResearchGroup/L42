_______
#define GX^FULL/HALF.Ds = GX, GX^FULL/HALF.D = GX
* GX^(var? mdf? STz x=e) = x : STz
* GX^(var? FULL.T x) = x : ♥FULL.T
* GX^(var? mdf? x=e) = empty // No T for the x
* GX^(TLocal(var?0 TLocal0 x0,..,var? n TLocaln xn )=e)
    = GX^(TLocal0 x0=e,..,TLocaln xn=e) // The = e part is ignored by GX^
* GX^(TLocal '_'=e) = empty
* GX^D1..Dn = GX^D1,..,GX^Dn
* GX+GX' = GX\dom(GX'),GX'
_______
#define Y!FULL.e = Half.e; STz; STz'; CTz //e, result type, returns type, constraints
* Y!LL = LL;imm Library;empty;Y.CTz
* Y!x = x;Y.GX(x);empty;Y.CTz
* Y!x = x;empty;empty;Y.CTz
    x notin dom(Y.GX)
    // will apply if we are typecheking the RHS of a "mdf? x = e", and x is free in e

* Y!void = void;imm Void;empty;Y.CTz
* Y!\ = %Y.onSlash%<:Y.onSlash; Y.onSlash; empty; Y.CTz //onSlash!=expectedT, consider foo.bar(\.x())
* Y!\x = Y!((Y.onSlashX).x())
* Y!CsP = Y!(CsP <:class CsP)// assert CsP of form P
    class Any not in Y.p.solve(Y.expectedT)
* Y!CsP = Y!(CsP <:class Any)
    class Any in Y.p.solve(Y.expectedT)
* Y!P<:T = P<:♥T; ♥T; empty; Y.CTz  //undefined for CsP<:T if CsP not of form P
* Y!\<:T = %Y.onSlash%<:♥T; ♥T; empty; Y.CTz
* Y!e<:T = Y!(T x=e x)
    e not of form CsP or \
* Y!'PathSel = Y!\"PathSel"
* Y!NumLit e = Y!e"NumLit"
* Y!throw e = throw e'; empty; STz2; CTz
    Y[expectedT=empty]!e = e'; STz0; STz1; CTz
    STz2=STz0,STz1 if throw = return
    STz2=STz1, otherwise
* Y!loop e = loop e'; imm Void; STz'; CTz <+Y.p (STz <= imm Void)
    Y[expectedT=imm Void]!e = e'; STz; STz'; CTz
* Y! UOp e = Y!e.methName(UOp)()//Ok, the only e is the receiver, semantic of '\' is preserved 
* Y! x opUpdate e = Y!(doUpdate(x, opUpdate, e))
    opUpdate != ':='
* Y! (x := e) = (x := e'); imm Void; STz'; CTz <+Y.p (STz <= Y.GX(x))
    Y[expectedT=Y.GX(x)]!e = e'; STz; STz'; CTz
* Y!e(par) = Y!e.#apply(par)
* Y!e.m(e,xes) = Y!e.m(that=e, xes)
* Y!e.m(xes) = Y!(x=e x.m(xes))
    e not of form xP //xP on the argument is FULL.xP, HALF.xP in the result
    x fresh
* Y!xP.m(x1=e1,..xn=en) = xP'.m(x1=e'1,..,xn=e'n); STz'; STz"; CTz'n
    Y[expectedT=empty]!xP = xP'; ST1..STk; STz"0; CTz'0//Y!FULL.xP is always a HALF.xP
    s=m(x1..xn)
    STz' = ST1.s..STk.s //injects .s on all the elements of STz
    STz'i = ST1.s.i..STk.s.i //here and below, i in 1..n
    Y[onSlash=STz'i;onSlashX=xP';expectedT=STz'i; CTz=CTz'(i-1)]!ei = e'i; STzi; STz"i; CTzi
    CTz'i = CTzi <+Y.p (STzi <= STz'i)
    STz" = STz"0 U..U STz"n
* Y!en OP..OP e1 OP e0 OP e = Y! en OP..OP e1 OP (e0 OP e) 
    OP of form OP0 or OP3 //right associative
* Y!e0 OP1 e OP1 e1..OP1 en = Y! (e0 OP1 e) OP1 e1..OP1 en //left associative 
* Y!e1 OP3 e2 = Y!(x=e1 x OP3 e2)
    e1 not of form xP //&&,||,=> are not static-dispatch to have short circuit 
* Y!xP OP3 e = Y!(
      x = xP.#shortCircut'OP3'()  //see name mangling
      if x x.#shortResult'OP3'()
      else xP.#shortProcess'OP3'(x,other=e)
      )
    x fresh  
//    T && X= if !T F else X//shortResult&& is false, shortCircut&& is !this
//    T || X= if T T else X//shortResult|| is true, shortCircut|| is this
//    T => X= if !T T else X//shortResult=> is true, shortCircut=> is !this
//    Opt||Val=if Opt.present() Opt.get() else Val
//Path=>classAny = if false err else X//shortResult=> is error, shortCircut=> false
* Y!CsP OP e = CsP.ClassOperators() OP e
* Y! e0 OP..OP en = Y!(Ds e0' OP..OP en')
    Ds = [xi=ei | ei not of form xP]
    Ds != empty // or else the next case will apply
    ei' = ei if ei of form xP
    ei' = xi otherwise
    x1..xn fresh
    e0 OP..OP en not of forms (CsP OP en) or (e0 OP3 en)//former cases not applicable
    n=1 or OP of form OP2 //unassociative
* Y! xP0 OP..OP xPn = xP'0 OP..OP xP'n; OP STz0,..,STzn; empty; Y.CTz
    Y[expectedT = empty]!xPi = xP'i; STzi; empty; Y.CTz // Y!xP shouldn't introduce any new constraints
    xP1 OP..OP xPn not of forms (CsP OP en) or (e0 OP3 en)//former cases not applicable
* Y!( Ds e Ks WHOOPS?) = Y!(Ds e Ks WHOOPS? void)
    !returning(e)
* Y!( Ds e Ks WHOOPS?) = Y!(Ds e Ks WHOOPS? error void)
    returning(e)
* Y!( Ds Ks WHOOPS? D Ds' e)) = Y!( Ds Ks WHOOPS? (D Ds' e))
* Y!( Ds Ks whoops T1..Tn e) = Y!( Ds Ks K1..Kn e )
    Ki = catch exception Ti xi error xi.#whoopsed(atPos={#norm{}}) //so that we can recover the position
    x1..xn fresh
* Y!( D1..Dn K1..Km e0) = (Ds1..Dsn K'1..K'm e'); STz; STz'; CTz'm  //Dsi are HALF.Ds
    GX = GX^(D1..Dn)
    GXi = Y.GX + GX + GX^Ds1 +..+ GX^Ds(i-1)
    CTz0 = Y.CTz
    Y[GX=GX1,CTz=CTz0]!D1 = Ds1; STz"1; CTz1
    ...
    Y[GX=GXn,CTz=CTz(n-1)]!Dn = Dsn; STz"n; CTzn
    CTz'0 = CTzn
    Y[GX=GXn,CTz=CTz'0]!K1 = K'1; STz1; STz'1; CTz'1 
    ...//catch return do not need special treatment
    Y[GX=GXn,CTz=CTz'(m-1)]!Km = K'm; STzm; STz'm; CTz'm
    Y[GX=GXn,CTz=CTz'm]!e  = e'; STz0;  STz'0; CTz'0
    STz = STz0 U..U STzm
    STz' = STz'0 U..U STz'm U STz"1 U..U STz"n
* Y!{Ds Ks WHOOPS? Ds2} = (Void x=e K error void); STz; empty; CTz
    // Note: well formedness for {...} will ensure that the above "error void" is unreachable
    Y[expectedT=imm Void]!(Ds Ks WHOOPS? Ds2 void) = e; _; STz; CTz
    K = catch return Y.expectedT,STz x' x'
    x, x' fresh
* Y!e[pars] = Y!e.#apply[pars]
* Y!e.m[pars]= Y!(e.m(squareBuilder=(
      x=\.#m#squareBuilder()
      if \.#shortCircutSquare() (
        e1..en void//so \ and \x are about the builder
        )
      x))
    x fresh
    ei = x.#yield(e'i) if pari=e'i and e'i is an sIf, sWhile, sFor, loop _ or B
    ei = x.#squareAdd(pari) otherwise

* Y!e "stringElement" = 
    Y!e.#from(stringLiteral=strLitPar(stringElement))
* Y!e "stringElement1 e1..stringElementn en stringElement(n+1)" = 
    Y!e.#from(stringLiteral=(
      x=\.#stringLiteralBuilder()
      e'1 e"1.. e'n e"n e'(n+1)
      x))
    e'i = x.#stringAddAll(strLitPar(stringElementi)),
    e"i = x.#stringAddExpr(ei)
    x fresh
    
* Y!if e0 e1 = Y!(if e0 e1 else void)
* Y!if e0 e1 else e2 = Y!(x = e0 if x e1 else e2 )
    e0 not of form xP
* Y!if xP e1 else e2 = Y!(
      xP.#if().#checkTrue()
      catch exception Void _ e2
      e1)
* Y!if match match+ e = Y!(if match if match+ e)
* Y!(if T x e) = Y!(if T x'=x e[x=x'])
    x' fresh
* Y!(if T x=e e') = Y!(x'=e, if T x=x' e')
    e not of form xP
* Y!(if T x=xP e) = Y!(
      T x=(return xP catch return T x' x')
      catch return T.mdf Any x' void
      e)
    x' is fresh

* Y!(if T(T?1 x1 ..T?n xn) = e e') = Y!(if T x = e ((x1,..,xn)=x e"))
    x fresh, Txs=[T?i xi | T?i != empty]
    e" = e'   if Txs = empty
    e" = if Txs e',  otherwise
* Y!if (T?1 x1 .. T?2 xn)=e e0) = Y!( (x1 .. xn)=e if Txs e0)
    Txs = [Ti xi | T?i != empty]
    // By well formedness, Txs won't be empty

* Y!while e0 e1 = Y!( loop (e0.#checkTrue() e1) catch exception Void _ void)//TODO: should it be e0.#if().#checkTrue()?

* Y!for (DX in xP)s DX in e (DX in e)s e' = Y!(x=e for (DX in xP)s DX in x (DX in e)s e')
* Y!for DX1 in xP1..DXn in xPn e = Y!(
      x1 = xP1.#iterator() .. xn = xPn.#iterator()//use .#varIterator if DXi.var?=var 
      var x'1 = xP1.#startIndex() .. var x'n = xPn.#startIndex()
      (
        loop if x1.#hasElem(x'1) && .. && xn.#hasElem(x'n) && ( x1.#incomplete(x'1) || .. || xn.#incomplete(x'n)) (
          DX1 = x1.methName('elem',mdf?1)(x'1) .. DXn = xn.methName('elem',mdf?n)(x'n)
          e[replaceOnUpdate mdf?1; DX1.x?; x1; x'1]..[replaceOnUpdate mdf?n; DXn.x?; xn; x'n]
          // Note: DXi.x? = empty if DXi is not of form var? TLocal x
          x'1 := x'1.#succ() .. xn := x'n.#succ()
          void)
        else ( x1.#close(x'1) .. xn.#close(x'n) exception void)
        catch exception Void _ void
        )
      )    
    mdf?i = DXi.TLocal.mdf?, or mdf?i = DXi.TLocal.T.mdf?//only one of the two is defined
    x1..xn, x'1..x'n fresh
_______
#define strLitPar(stringElement) = Full.E
* strLitPar(CHAR1 .. CHARn)=(
    x=\.#stringLiteralBuilder()
    x.charName(CHAR1)
    ..
    x.charName(CHARm)
    x)
  x fresh
_______
#define Y!FULL.D = HALF.Ds; STz; CTz
* Y!(empty e) = Y!(imm Void _=e)
* Y!(TLocal _=e) = Y!(TLocal x=e)
    x fresh
* Y!(var? T x=e) = var? ♥T x=e'; STz'; CTz <+Y.p (STz<=♥T)
    Y[expectedT=♥T]!e = e'; STz; STz'; CTz
* Y!(var? mdf? x=e) = var? mdf? STz x=e'; STz'; CTz
      Y[expectedT = empty]!e = e'; STz; STz'; CTz
* Y!(TLocal(var1? TLocal1 x1..varn? TLocaln xn) = e) = D0..Dn; STz0 U..U STzn; CTzn
    Y!(TLocal x = e) = D0; STz0; CTz0
    Y[GX+=x:D0.STz CTz=CTz0]!(var1? TLocal1 x1 = x.methNameTrim(x1)()) = D1; STz1; CTz1
    ..
    Y[GX+=x:D0.STz CTz=CTz(n-1)]!(varn? TLocaln xn = x.methNameTrim(xn)()) = Dn; STzn; CTzn
    x fresh

_______
# define Y!FULL.K= HALF.K; STz; STz';CTz
* Y!catch throw? T '_' e = Y!catch throw? T x e
    x fresh
* Y!catch T x e = Y!catch exception T x e
* Y!catch throw T x e = catch throw ♥T x e'; STz; STz'; CTz
    Y[GX=Y.GX+x:♥T]!e = e'; STz; STz'; CTz
_______
#define doUpdate(x, opUdate, e) // convenience method to desugar opUpdates
* doUpdate(x, :=, e) = x := e
* doUpdate(x, OP=, e) = x := x OP e
    OP != ':'
_______
#define FULL.e[replaceOnUpdate mdf?; x?"; x; x']
// Make all updates to x?" (which has modifier mdf?) also tell the iterator (x) the new value, which has index (x')
* e[replaceOnUpdate mdf?; empty; x; x'] = e,
* (x" opUpdate e)[replaceOnUpdate mdf?; x"; x; x'] = doUpdate(x", opUpdate, e")
    e' = e[replaceOnUpdate mdf?; x"; x; x']
    e" = x.methName('update',mdf?)(x',val=e')

* e[replaceOnUpdate mdf?; x"; x; x'] propagates inductively in all the other cases
