_______
#define GX^FULL/HALF.Ds = GX, GX^FULL/HALF.D = GX
* GX^(var? mdf? STz x=e) = x : STz
* GX^(var? FULL.T x) = x : ♥FULL.T
* GX^(var? mdf? x=e) = empty // No T for the x
* GX^(TLocal(var?0 TLocal0 x0,..,var? n TLocaln xn )=e)
    = GX^(TLocal0 x0=e,..,TLocaln xn=e) // The = e part is ignored by GX^
* GX^(TLocal '_'=e) = empty
* GX^D1..Dn = GX^D1,..,GX^Dn
* GX+GX' = GX\dom(GX'),GX'
_______
#define Y!FULL.e = Half.e; STz; STs'; CTz //e, result type, returns type, constraints
* Y!LL = LL;imm Library;empty;Y.CTz
* Y!x = x;Y.GX(x);empty;Y.CTz
* Y!x = x;empty;empty;Y.CTz
    x notin dom(Y.GX)
    // will apply if we are typecheking the RHS of a "mdf? x = e", and x is free in e

* Y!void = void;imm Void;empty;Y.CTz
* Y!\ = %Y.onSlash%<:Y.onSlash; Y.onSlash; empty; Y.CTz //onSlash!=expectedT, consider foo.bar(\.x())
* Y!\x = Y!((Y.onSlashX).x())
* Y!CsP = Y!(CsP <:class CsP)
    Y.expectedT != class Any
* Y!CsP = Y!(CsP <:class Any)
    Y.expectedT = class Any
* Y!CsP<:T = ♥CsP<:♥T; ♥T; empty; Y.CTz
* Y!\<:T = %Y.onSlash%<:♥T; ♥T; empty; Y.CTz
* Y!e<:T = Y!(T x=e x)
    e not of form CsP or \
* Y!'PathSel = Y!\"PathSel"
* Y!NumLit e = Y!e"NumLit"
* Y!throw e = throw e'; empty; STz2; CTz
    Y[expectedT=empty]!e = e'; STz0; STz1; CTz
    STz2=STz0,STz1 if throw = return
    STz2=STz1, otherwise
* Y!loop e = loop e'; imm Void; STz'; CTz +Y.p (STz <= imm Void)
    Y[expectedT=imm Void]!e = e'; STz; STz'; CTz
* Y! UOp e = Y!e.methName(UOp)()//Ok, the only e is the receiver, semantic of '\' is preserved 
* Y! x opUpdate e = Y!(doUpdate(x, opUpdate, e))
    opUpdate != ':='
* Y! (x := e) = (x := e'); imm Void; STz'; CTz +Y.p (STz <= Y.GX(x))
    Y[expectedT=Y.GX(x)]!e = e'; STz; STz'; CTz
* Y!e(par) = Y!e.#apply(par)
* Y!e.m(x,xes) = Y!e.m(that=x, xes)
* Y!e.m(xes) = Y!(x=e x.m(xes))
    e not of form xP //xP on the argument is FULL.xP, HALF.xP in the result
    x fresh
* Y!xP.m(x1=e1,..xn=en) = xP'.m(x1=e'1,..,xn=e'n); STz'; STz"; CTz'n
    Y[expectedT=empty]!xP = xP'; ST1 ... STk; STz"0; CTz'0 // Y!FULL.xP is always a HALF.xP
    STz' = Y.p.minimize(CTz'0; STk.m(x1..xn), ..., STk.m(x1..xn)) //injects .s on all the elements of STz
    for i in 1 .. n:
        STz'i = Y.p.minimize(CTz'0; CTz'0; STk.m(x1..xn).i, ..., STk.m(x1..xn).i)
        Y[onSlash=STz'i;onSlashX=xP;expectedT=STz'i; CTz=CTz'(i-1)]!ei = e'i; STzi; STz"i; CTzi
        CTz'i = CTz +Y.p (STzi <= STz'i)
    STz" = STz"0 U..U STz"n

* Y!e1 OP3 e2 = Y!(x=e1 x OP3 e2)
    e1 not of form xP //&&,||,=> are not static-dispatch to have short circuit 
* Y!xP OP3 e = Y!(
      x = xP.#shortCircut'OP3'()  //see name mangling
      if x x.#shortResult'OP3'()
      else xP.#shortProcess'OP3'(x,other=e)
      )
    x fresh  
//    T && X= if !T F else X//shortResult&& is false, shortCircut&& is !this
//    T || X= if T T else X//shortResult|| is true, shortCircut|| is this
//    T => X= if !T T else X//shortResult=> is true, shortCircut=> is !this
//    Opt||Val=if Opt.present() Opt.get() else Val
//Path=>classAny = if false err else X//shortResult=> is error, shortCircut=> false
* Y!CsP OP e = CsP'.#apply(that=e'); STz0; STz; CTz +Y.p (STz2 <= STz1)
    CsP' = CsP.$methName(OP)
    STz0  = Y.p.minimize(CTz; CsP'.#apply(that))
    STz1 = Y.p.minimize(CTz; CsP'.#apply(that).1)
    Y[expectedT=STz1] ! e = e'; STz2; STz; CTz
    // not just doing Y!(CsP.$methName(OP)(that=e)) since that will cause \'s to be re-interpreted.

* Y!(e0 OP..OP en) = Y!(Ds e0' OP..OP en')
    n != 0
    Ds = [xi=ei | ei not of form xP]
    Ds != empty // or else the next case will apply
    ei' = ei if ei of form xP
    ei' = xi otherwise
    x1..xn fresh
    e0 OP..OP en not of forms (CsP OP en) or (e0 OP3 en)//former cases not applicable
* Y! xP0 OP..OP xPn = xP'0 OP..OP xP'i; Y.p.minimize(OP STz0,..,STzn); empty; Y.CTz
    n != 0
    Y[expectedT = empty]!xPi = xP'i; STzi; empty; Y.CTz // Y!xP shouldn't introduce any new constraints
    xP1 OP..OP xPn not of forms (CsP OP en) or (e0 OP3 en)//former cases not applicable
* Y!( Ds Ks WHOOPS? Ds') = Y!(Ds Ks WHOOPS? Ds' void)
* Y!( Ds Ks WHOOPS? D Ds' e)) = Y!( Ds Ks WHOOPS? (D Ds' e))
* Y!( Ds Ks whoops T1..Tn e) = Y!( Ds Ks K1..Kn e )
    Ki = catch exception Ti xi error xi.#intoErrorAt(that={#norm{}}) //so that we can recover the position
* Y!( D1..Dn K1..Km e0) = (Ds1..Dsn K'1..K'm e'); STz; STz'; CTz'm  //Ds is HALF.Ds
    GX = GX^(D1...Dn)
    GXi = Y.GX + GX + GX^Ds1 + .. + GX^Ds(i-1)
    CTz0 = Y.CTz
    for i in 1 .. n:
        Y[GX=GXi,CTz=CTz(i-1)]!Di = Dsi; STz"i; CTzi
    CTz'0 = CTzn
    for i in 1 .. m:
        Y[GX=GXn,CTz=CTz'(i-1)]!Ki = K'i; STzi; STz'i; CTz'i //catch return do not need special treatment

    Y[GX=GXn,CTz=CTz'm]!e  = e'; STz0;  STz'0; CTz'0

    STz = p.miminimize(CTz'm; STz0 U..U STzm)
    STz' = STz'0 U..U STz'm U STz"1 U..U STz"n
* Y!{Ds Ks WHOOPS? Ds2} = (Void x=e K error void); STz; empty; CTz
    // Note: well formedness for {...} wil ensure that the above "error void" is unreachable
    Y[expectedT=imm Void]!(Ds Ks WHOOPS? Ds2 void) = e; _; STz; CTz
    K = catch return p.minimize(CTz; Y.expectedT,STz) x' x'
    x, x' fresh
* Y!e[pars] = Y!e.#apply[pars]
* Y!e.m[pars]= Y!(e.m(squareBuilder=(
      x=\.#squareBuilder()
      if \.#shortCircutSquare() (
        e1..en //so \ and \x are about the builder
        )
      x))
    x fresh
    ei = x.#yield(e'i) if pari=e'i and e'i is an sIf, sWhile, sFor, loop _ or B
    ei = x.#add(pari) otherwise
* Y!e string = Y!(e.#from(stringLiteral=(
      x=\.#stringLiteralBuilder()
      e1..en
      x)))
    string = "stringElement1..stringElementn"

    if stringElementi = CHAR1 .. CHARm
        ei = x.addAll((x' = \.#stringLiteralBuilder() x'.charName(CHAR1) ... x'.charName(CHARm) x')),
    if stringElementi = %e'
        ei = x.#splice(e')
    x, x' are fresh

* Y!if e0 e1 = Y!(if e0 e1 else void)
* Y!if e0 e1 else e2 = Y!(x = e0 if x e1 else e2 )
    e0 not of form xP
* Y!if xP e1 else e2 = Y!(
      Void x=xP.#if().#checkTrue()
      catch exception Void x' e2
      e1)
    x, x' fresh
* Y!if match match+ e = Y!(if match if match+ e)
* Y!(if T x e) = Y!(if T x'=x e[x=x'])
    x' fresh
* Y!(if T x=e e') = Y!(x'=e, if T x=x' e')
    e not of form xP
* Y!(if T x=xP e) = Y!(
      T x=(return xP catch return T x' x' error void)
      catch return T.mdf Any x' void
      e)
    x' is fresh

* Y!(if T(T?1 x1 ..T?n xn) = e e') = Y!(if T x = e ((x1,..,xn)=x e"))
    x fresh, Txs=[T?i xi | T?i != empty]
    e" = e'   if Txs = empty
    e" = if Txs e',  otherwise
* Y!if (T?1 x1 .. T?2 xn)=e e0) = Y!( (x1 .. xn)=e if Txs e0)
    Txs = [Ti xi | T?i != empty]
    // By well formedness, Txs won't be empty

* Y!while e0 e1 = Y!(
      loop (e0.#checkTrue() e1)
      catch exception Void _ void)

* Y!for (DX in xP)s DX in e (DX in e)s e' = Y!(x=e for (DX in xP)s DX in x (DX in e)s e')
* Y!for DX1 in xP1..DXn in xPn e = Y!(
      x1 = xP1.iterator() .. xn = xPn.iterator()
      var x'1 = xP1.startIndex() .. var x'n = xPn.startIndex()
      while x1.hasElem(x'1) && .. && xn.hasElem(x'n) && ( x1.incomplete(x'1) || .. || xn.incomplete(x'n)) (
        x.methName('elem',mdf?1)(x') .. x.methName('elem',mdf?n)(x')
        e[replaceOnUpdate mdf?1; DX1.x?; x1; x'1]..[replaceOnUpdate mdf?n; DXn.x?; xn; x'n]
        // Note: DXi.x? = empty if DXi is not of form var? TLocal x
        x'1 := x'1.succ() .. xn := x'n.succ())
      x1.close(x'1) .. xn.close(x'n))

    mdf?i = DXi.TLocal.mdf?, or mdf?i = DXi.TLocal.T.mdf?//only one of the two is defined
    x1..xn, x'1..x'n fresh
_______
#define Y!FULL.D = HALF.Ds; STz; CTz
* Y!(empty e) = Y!(imm Void _=e)
* Y!(TLocal _=e) = Y!(TLocal x=e)
    x fresh
* Y!(var? T x=e) = var? ♥T x=e'; STz'; CTz +Y.p (STz<=♥T)
    Y[expectedT=♥T]!e = e'; STz; STz'; CTz
* Y!(var? mdf? x=e) = var? mdf? STz x=e'; STz'; CTz
      Y[expectedT = empty]!e = e'; STz; STz'; CTz
* Y!(TLocal(var1? TLocal1 x1..varn? TLocaln xn) = e) = D0..Dn; STz0 U..U STzn; CTzn
    Y!(TLocal x = e) = D0; STz0; CTz0
    Y[CTz=CTz0]!(var1? TLocal1 x1 = x.methNameTrim(x1)()) = D1; STz1; CTz1
    ..
    Y[CTz=CTz(n-1)]!(varn? TLocaln xn = x.methNameTrim(xn)()) = Dn; STzn; CTzn
    x fresh

_______
# define Y!FULL.K= HALF.K; STz; STz';CTz
* Y!catch throw? T '_' e = Y!catch throw? T x e
    x fresh
* Y!catch T x e = Y!catch exception T x e
* Y!catch throw T x e = catch throw ♥T x e'; STz; STz'; CTz
    Y[GX=Y.GX+x:♥T]!e = e'; STz; STz'; CTz
_______
#define doUpdate(x, opUdate, e) // convenience method to desugar opUpdates
* doUpdate(x, :=, e) = x := e
* doUpdate(x, OP=, e) = x := x OP e
    OP != ':'
_______
#define FULL.e[replaceOnUpdate mdf?; x?"; x; x']
// Make all updates to x?" (which has modifier mdf?) also tell the iterator (x) the new value, which has index (x')
* e[replaceOnUpdate mdf?; empty; x; x'] = e,
* (x" opUpdate e)[replaceOnUpdate mdf?; x"; x; x'] = (doUpdate(x", opUpdate, e') e")
    e' = e[replaceOnUpdate mdf?; x"; x; x']
    e" = x.methName('update',mdf?)(x',val=x")

* e[replaceOnUpdate mdf?; x"; x; x'] propagates inductively in all the other cases
