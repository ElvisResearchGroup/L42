_______
#define metanotation ~OR~
predicate0 ~OR~ predicate1 predicates == (predicate0 and predicates) or ((not predicate0) and predicate1)
//note: the simpler interpretation (predicate0 and predicates) or predicate1
//would technically allow free variables in predicate0 to be chosen to falsify it
_______
#define firstErr(Rs,Err,_)=Err
* firstErr(Rs,Err,_)=Err
    Err not in Rs
_______
#define STz notations:
* (ST1 .. STn).s = ST1.s .. STn.s
* (ST1 .. STn).s.i = ST1.s.i .. STn.s.i
* (ST1 .. STn)<=HALF.T = ST1<=HALF.T .. STn<=HALF.T
_______
#define top(CCz,p) => PR    topNC(CCz;p;Cs) => PR    sortHeader(p)=p'    sortM(p)=p'    addInfo(p)=p'   
* top(CCz0,p0) => PR
    p1=sortHeader(p0) ~OR~ PR=headerErr(p0)
    MWT1..MWTn, NCs=sortMs(p1) ~OR~ PR=implementsErr(p1) //also to hearth all mwts/docs and ncs docs
    p=p1.update(p1(This0)[Ms=MWTs, NCs])
    topNC(CCz0,p,NCs.Cs) =>PR1
    PR1=CCz1; p' ~OR~ PR=PR1
    CCz1.add(p; MWT1; e?1).. .add(p; MWTn: e?n)=CCz
    I[C=empty;p;G=empty;CCz]!e?i => ERi
    ER1=CCz;e?'1..ERn=CCz;e?'n ~OR~ PR=firstErr(ER1..ERn)
    p'=p.update(p(This0)[MWT1[e?=e?'1]..MWTn[e?=e?'n]])
    PR=CCz; flagTyped(addInfo(p'))  ~OR~ PR=illTyped(p')

* topNC(CCz;p;empty) =>CCz;p
* topNC(CCz;p;C,Cs) => PR
    p(This0)(C)=e
    Y=Y[p;GX=empty;onSlash=imm Library;onSlashX=empty;onReturn=imm Library;onPath=class]
    Y!e = Half.e; _; _; _
    I[C?=C;p;CCz]!Half.e => ER
    ER=CCz1;CORE.e ~OR~ PR=ER
    wellTyped(p,CORE.e)=T ~OR~ PR=illTyped(p)
    coherent(p,CORE.e) ~OR~ PR=incoherent(p)
    reduce(p,empty,adapt(CORE.e,T.P)) => ER'
    ER'=empty;CORE.L ~OR~ PR=ER'
    p'=p.update(p(This0)[C=refreshUniqueNames(CORE.L)])
    flagTyped(p')=p" ~OR~ PR=illTyped(p')    
    topNC(CCz1;p";Cs) => PR
    
* sortHeader({reuse[URL] Ms};pTail) = sortHeader({followURL(URL),Ms};pTail) //note, the result must be well formed
* sortHeader({... Ms};pTail) = sortHeader({readFolder(pTail),Ms};pTail) //note, the result must be well formed
* sortHeader({interface? [Ts] Ms};pTail) = {interface? [Ts'],Ms};pTail
    Ts0=p.minimize(p♥Ts)
    Ts'=Ts0,(collect(p,Ts0)\Ts0)//gets the transitively implemented interfaces -Any
    forall imm P in Ts'\Ts0, P not of form Thisk._.C::n._//private interfaces not added

* sortMs({interface? [Ts] Ms};pTail) = MWTs\ss,[MWTs(s)| s in ss],[NC[Docs=p♥NC.Docs]| NC in Ms]
    MWTs=methods(p,This0) //all methods
    ss=expandFields(Ms).ss //present methods

* addInfo(p)={interface? Ts MWTs NCs Info};pTail
    p={interface? Ts MWTs NCs};pTail
    Ps;Ps'=collectDeps(p;Ts) U collectDeps(p;MWTs) U collectDeps(NCs.Docss)
    Info=#norm{typeDep=Ps,coherentDep=Ps',friendsDep= ??Ps,usedMethDep=??(P.s)s,privateImpl=??Ps}
_______
#define I!HALF.e?=> ER    I!HALF.D=> DR    I!HALF.K=> KR    I(HALF.T) = CORE.T
* I!empty => empty;empty
* I!x => empty;x
* I!P<:STz => empty;P<:I(STz)
* I!P<:STz => inferenceFailure(I,PTz)
    I(STz) undefined
* I!void => empty;void
* I!FULL.L => ER 
    p=I.p.push(I.C?,FULL.L)
    top(0,I.CCz[from This1;p],p) => PR
    PR = CCz;p ~OR~ ER =PR
    ER = CCz[from I.C?;p];p(This0)//undefined if I.C?=empty 
* I!CORE.L => CORE.L 
* I!%STz% => I(STz).P
* I!%STz% => inferenceFailure(I,PTz)
    I(STz) undefined
* I!e0.m(x1=e1..xn=en) => ER
    I|ei=ERi //e0 is of form xP
    ER0..ERn = CCz0;e'0..CCzn;e'n ~OR~ ER=firstErr(ER0..ERn)
    ER=CCz0 U..U CCzn;e'0.m(x1=e'1..xn=e'n)
* I!xP0 OP..OP xPn => ER
    I!xPi=>ERi
    ER0..ERn = CCz0;xP0..CCzn;xPn ~OR~ ER0..ERn = ER=firstErr(ER0..ERn)
    ER=CCz0 U..U CCzn;I.selectedOption(OP,xP0..xPn)
* I!e0 =>ER
    e0 in {throw e, loop e, x:=e}
    I!e => ER'
    ER' = CCz;e' ~OR~ ER=ER'
    ER = CCz;e0[e=e']
* I!(Ds K1..Km e) => ER
    xs=FV((K1..Km e))//formally, FV is defined only on CORE.e. Not sure how to handle this
    I!xs;Ds =>DsR
    I!Ki =>KRi
    DsR=CCz0;D1..Dn ~OR~ ER=DsR
    I[G=I.G,D1.x:D1.T,..,Dn.x:Dn.T]!e => ER'
    KR1..KRn,ER' = CCz1;K'1..CCzm;K'm, CCzm+1;e' ~OR~ ER=firstErr(KR1..KRn,ER)
    ER=CCz0 U..U CCzm+1;(Ds Ks e')
* I!empty => empty;empty
* I!xs;var? HALF.T x=e Ds=> DsR
    I(HALF.T)=CORE.T ~OR~ DsR=inferenceFailure(I,HALF.T)
    I!e => ER 
    ER=CCz';e' ~OR~ DR=ER
    CORE.T=CORE.T0[mdf=imm] if HALF.T=STz, CORE.T.mdf=read and 
      not exists x in FV(e') such that x in dom(G) and G(x).mdf in {read,lent,mut}
    CORE.T'=CORE.T[mdf=mut] if HALF.T=STz, CORE.T.mdf=capsule and xs=_,x,_,x,_ //2+ usages
    CORE.T'=CORE.T otherwise
    I[G=I.G,x:CORE.T']!Ds=> DsR'
    DsR'=CCz;Ds ~OR~ DsR=DsR'
    DsR=CCz' U CCz;var? CORE.T' x=e',Ds

* I!catch throw HALF.T x e => KR
    I(HALF.T)=CORE.T ~OR~ inferenceFailure(I,HALF.T)
    I!e => ER
    ER=CCz';e' ~OR~ KR=ER
    KR=CCz';catch throw CORE.T x e' //assert CORE.T =mdf or throw=return
_______
#define adapt(CORE.e,P)
* adapt(e, Library) = e
* adapt(e, Void) = (Void x=e {}); where x fresh
* adapt(e, _) = (T x=e x.#toLibrary()); otherwise, where x fresh
_______
#define P,s,i in p.opOptions(OP, CORE.Ts) //note: now the special case for Path is 
* P,s,i in p.opOptions(OP, T0..Tn)//handled with a 'non op dispatch' desugar
    i in 0..n,
    s = methName(OP)_i(x1..xn)
    P1 ... Pn = (G^p(Ti.P)(s)).Ts.Ps[from Ti.P;p]
    P'1 ... P'n = (T0..Tn\i).Ps
    P=Ti.P
    p|-P'1<=P1 .. p|-P'1<=P1  
_______
#define CCz.add(FULL.MWT : CORE.MH HAlf.e?) = CCz'    I(HALF.T) = CORE.T    I.coreTof(T)=Tz
* CCz.add(p; MWT; empty) = CCz
    MWT.e?=empty
* CCz0.add(p; MWT; Half.e) = CCz0 U CCz U STs<=MWT.T
    Y=Y[p=I.p;GX=G^MWT;onSlash=MWT.T;onSlashX=empty;onReturn=MWT.T;onPath=class?]
    Y!MWT.e = Half.e; STs; empty; CCz

* I(mdf STz)=T[mdf=mdf]
    I(STz)=T
* I(ST1..STn)=mostGeneralMdf(Tz.mdfz) P
    Tz=I.coreTof(ST1) U..U I.coreTof(STn)
    {P}={T.P| T in Tz and p|-Tz.Pz<=T.P}

* T in I.coreTof(T)
* T in I.coreTof(ST)
    ST<=ST' in I.CCz
    T in I.coreTof(ST')
_______
#define I.selectedOption(OP, xPs)= xP.s(x1=xP'1..xn=xP'n)
* I.p.selectedOption(OP,xPs) = P,m(x1..xn),i
    {P,s,i}=I.p.opOptions(OP, I.typesOf(xPs))
    xP'1..xP'n=xPs\i
    xP=xPs\xP'1..xP'n
_______
#define collectDeps(p;CORE.MWT)=Ps;Ps'    collectDeps(p;T)=Ps;Ps'    collectDeps(p;Doc)=Ps;Ps'
//collectDeps(sequence)=union of the results of elements of the sequence
* collectDeps(Docs mdf method T0 m(T1 x1..Tn xn)[Ts] e?)=
    collectDeps(Docs) U collectDeps(T0..Tn,Ts) U collectDepsE(e?)
* collectDeps(T)=T.P;empty U collectDeps(T.Docs)
* collectDeps(Doc)={P| @P._ inside Doc};empty     
_______
#define collectDepsE(p;CORE.e?)  //collectDepsE(p;L) adds NCs dependencies and relies on cached Info
* collectDepsE(p;empty)=collectDepsE(p;x)=collectDepsE(p;void)=empty;empty
* collectDepsE(p;CORE.L)=Ps0..Psn;Ps'0..Ps'n
    Ps0=CORE.L.Info.typeDep
    Ps'0=CORE.L.Info.coherent
    Ps1..Psn={CORE.L(Cs).Info.typeDep[from This.Cs;p]| Cs in dom(CORE.L)}
    Ps'1..Ps'n={CORE.L(Cs).Info.coherent[from This.Cs;p]| Cs in dom(CORE.L)}
* collectDepsE(p; e0.m( x1=e1 .. xn=en ) )= collectDepsE(p;e0) U..U collectDepsE(p;en) 
* collectDepsE(p;loop e)=collectDepsE(p;throw e)=collectDepsE(p;x :=e)=collectDepsE(p;e)
* collectDepsE(p;P<:class Any)= P;empty
* collectDepsE(p;P<:class P')= P',P;P
    P'!=Any
* collectDepsE(p; (Ds Ks e) ) =collectDepsE(p;Ds) U collectDepsE(p;Ks) U collectDepsE(p;e)
* collectDepsE(p;var? T x=e)=collectDepsE(p;catch throw T x e)= collectDeps(T) U collectDepsE(p;e)
_______
#define expandFields(Ms)=Ms' //need to keep the order
* expandFields(empty)=empty
* expandFields(M,Ms)=M,expandFields(Ms) 
    M not of form F
* expandFields(T x,Ms)=method toRead(T) x(), expandFields(Ms)
    T.mdf not in {lent, mut, capsule}
* expandFields(T x,Ms)=method capsuleToLent(T) #x(), expandFields(toRead(T) x,Ms)
    T.mdf in {lent, mut, capsule}
* expandFields(var T x,Ms)=Void x(T that), expandFields(T x,Ms)    
_______
#define collect(p,Ts)=Ts' //collects transitively implemented interfaces
* collect(p,empty)=empty
* collect(p,T0 Ts)=((p♥T0 Ts') \ collect(p,Ts)) collect(p,Ts)
    p(T0.P)={interface [Ts0] _}=FULL.L
    Ts'=collect(p,Ts0[from T0.P;p])
* collect(p,T0 Ts)=((p♥T0 Ts0[from T0.P;p]) \ collect(p,Ts)) collect(p,Ts)
    p(T0.P)={interface Ts0 _}=CORE.L
_______
#define methods(p,P0)=MWTs //methods returns a set: the order of the methods is not relevant
* methods(p,P0)=CORE.L.MWTs[from P0;p]
    p(P0)=CORE.L
* methods(p,P0)=MWT1..MWTn //method headers are minimized, not the body
    p(P0)=interface? Ts{ Ms0 }=FULL.L
    Ms=expandFields(Ms0)
    Ps=collect(p,Ts[from P0;p]).Ps
    s1..sn=[ss | P in Ps, ss in p(T.P).Ms.ss].flatten().distinct()//an ordered version of {s | P in Ps, s in dom(p(P))}
    origin(p;s1,P0)..origin(p;sn,P0) all defined
    [Mi,_]=[MWT| P in P0,Ps such that methods(p,P)(si)=MWT]
    MWTi=p♥Mi[with e=e[from P0;p]] if si in p(P0) and P(P0)(s).e?=e
    MWTi=p♥Mi otherwise //this p♥ must also handle method Docs

//OLD COLLECT. Isaac, can you show me that we still need something like this? now is unused
_______
#define PAcc.collect()=PAcc'
* CC in PAcc.collect()
    CC in PAcc.collect().collect())//is it needed since we have the fixpoint anyway?
* CC in PAcc.collect()
    CC in PAcc.CCz
* PT <= PT" in PAcc.collect()
    PT <= PT', PT' <= PT" in PAcc
* PT <= PT in PAcc.collect()
    PT in PAcc.CCz
* mdf P <= mdf' P' in PAcc.collect() //TODO: explosive, can we make it more computational? can we mix it with solve? 
    p |- mdf P <= mdf' P' // I.e. every subtype relation we know about
    P' != _ Any // Just for consistency with everything else, not important!
* mdf P <= PT in PAcc.collect()// since all classes are final
	PT <= mdf P in PAcc
	p(P).interface = empty 
* T.s <= CORE.T in PAcc.collect()//since they are alias of each other 
    CORE.T <= T.s in PAcc.collect().CCz //why noy simply in PAcc.CCz?
    CORE.T=PAcc.p(T.P)(s).MH.T[from T.P;PAcc.p]//TODO: no, CORE.L(s) works but FULL.L(s) misses on FULL.F and on methods from interfaces. Should we use methods(..)?
* T.s.i <= PT in PAcc.collect()//since method parameter types can not be refined (or since they are aliases?)
    PT <= T.s.i in PAcc.collect().CCz
    PT=PAcc.p(T.P)(s).MH.pari[from T.P;PAcc.p]
* PT.s <= PT'.s in PAcc.collect()
    PT <= PT' in PAcc.CCz
    PT'.s in PAcc.CCz
* PT'.s.i <= PT.s.i in PAcc.collect()
    PT <= PT' in PAcc.CCz
    PT'.s.i in PAcc.CCz
* PT.s.i <= PT'.s.i in PAcc.collect()//since method parameter types can not be refined 
    PT <= PT' in PAcc.CCz
    PT'.s.i in PAcc.CCz
* PT1' <= Origin(s, P2') in PAcc.collect()
    PT1 <= P2', PT1 <= PT1' in PAcc.CCz
    P2'.s in PAcc.CCz
    PT1'.s in PAcc.CCz
