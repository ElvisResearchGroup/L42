TOP LEVEL PROCESS:
parsing top level LL, resolve ... and Cs into Thisn.Cs, check well formedness, apply top(empty,(LL;empty)) => PR
_______
#define init(FULL.L) = FULL.L' //with no Cs and no '...'
  it propagates on the structure;
    on all the FULL.L and CORE.L it grows a local program p,
    on all the Cs applies p.minimize(p.resolve(C.Cs)).
    on all the P applies p.minimize(P).
    all the ... are expanded with the code retrived from the file system.
_______
#define p.resolve(Cs) = P
p.resolve(C.Cs) = Thisn.C.Cs
  where n is the smallest number such that either
  C in domNC(p(Thisn))
  or p(Thisn) = {reuse[URL]...}
//error is reported if: we try to explore an undefined p(Thisn) or URL has no #$ and C notin dom(followURL(URL)) 
_______
#define metanotation IfNotE, IfErr, IfUndefined 
//note: the simpler interpretation (predicate0 and predicates) or predicate1
//would technically allow free variables in predicate0 to be chosen to falsify it
// Note: the "predicates" include those on subsequent (similarlly indented) lines!
* predicate0 IfNotE(Xs) predicate1 predicates == (predicate0 and predicates) or ((not exists Xs such that predicate0) and predicate1)
* predicate0 IfErr(Xs) predicate1 predicates == (predicate0 and predicates) or (Err in Xs  and predicate1)
* predicate0 IfUndefined predicate1 predicates == (predicate0 and predicates) or (predicate0 undefined and predicate1)
_______
#define firstErr(Rs) = Err
* firstErr(Rs,Err,_) = Err
    Err not in Rs
_______
#define top(CTz,p) => PR    topNC(CTz;p;Cs) => PR    sortHeader(p) = p'    addInfo(p) = p'   
* top(CTz,p) => PR
    CORE.L;sDe;NCs = sortHeader(p) IfNotE(NCs) PR = headerErr(p)
    p0 = p.update(CORE.L)
    MH1..MHn = CORE.L.MWTs.MHs
    CTz.add(p0; MH1 sDe(MH1.s).e?; e?1).. .add(p0; MHn sDe(MHn.s).e?; e?n) = CTz0
    topNC(CTz0,p0,NCs) => PR1
    PR1 = CTz1; p1 IfErr(PR1) PR = PR1 //top of p1 is a CORE.L with all NCs and ok info
    I[C=empty;p1;G^MHi;p1.minimize(CTz1)]!e?i => ERi  for i in 1..n
    ER1 = _;e?'1 .. ERn = _;e?'n IfErr(ER1..ERn) PR = firstErr(ER1..ERn) //novel cczs are not captured since no Full.L in e?s
    MWTi = ♥sDe(MHi.s).Doc MHi ♥sDe(MHi.s).nativeURL e?'i
    L = updateInfo(p1, MWT1..MWTn)
    p2 = flagTyped(p1.update(L)) IfNotE(p2) PR = illTyped(p1.update(L))
    PR = CTz1; p2

* topNC(CTz;p;empty) =>CTz;p
* topNC(CTz;p;FULL.Docs C=FULL.e, NCs) => PR
    Y = Y[p;GX=empty;onSlash=imm Library;onSlashX=empty;expectedT=imm Library; onPath=class]
    Y!FULL.e = Half.e; _; _; CTz0
    I[C?=C;p;G=empty;p.minimize(CTz0)]!Half.e => ER
    ER = CTz1;CORE.e IfErr(ER) PR = ER
    wellTyped(p,CORE.e) = T IfNotE(T) PR = illTyped(p)
    coherent(p,adapt(CORE.e,T)) IfUndefined PR = incoherent(p)
    reduce(p,empty,adapt(CORE.e,T)) => ER'
    ER' = empty;CORE.L IfErr(ER') PR = ER'
    p' = p.update(updateInfo(p,♥FULL.Docs C=CORE.L))//refreshUniqueNames
    flagTyped(p') = p" IfNotE(p") PR = illTyped(p')    
    topNC(CTz1;p";NCs) => PR
    
* sortHeader({reuse[URL] Ms};pTail) = CORE.L;{s->M.Docs,M.e?| M in Ms, s=M.s}; NCs0
    CORE.L = {interface? Ts MWTs,CORE.MWTs NCs Info+Info0 Docs}
    followURL(URL) = {interface? Ts MWTs NCs Info Docs} //with info
    dom(MWTs NCs) disjoint dom(Ms)
    NCs0 = [NC | NC in Ms]
    CORE.MWTs = [♥MWT.Docs ♥MWT.MH |MWT in Ms]

* sortHeader(p) = CORE.L; {s->M.Docs,M.e?| M in Ms, s=M.s}; NCs
    NCs = [NC | NC in Ms]
    p(This0) = {interface? [Ts] Ms Docs}
    p0 = p.update({interface? [Ts] Ms\NCs Docs})//to prevent looking to non core
    Ts' = ♥Ts,(collect(p0,♥Ts)\♥Ts)//gets the transitively implemented interfaces -Any    
    forall imm P in Ts'\♥Ts, P not of form Thisk._.C::n._//private interfaces not added
    MH1..MHn = methods(p0,This0)
    MWTs = [♥Docs MH | MH in MH1..MHn and either Docs=Ms(MH.s).Docs or Docs=empty otherwise]
    Ps;empty = collectDeps(p0;MWTs)
    Info = #norm{typeDep=Ts'.Ps U Ps U collectDeps(♥Docs)\{Any,Void,Library},??, declaresClassMethods?}
    declaresClassMethods?=empty iff class notin MHs.mdfs
    CORE.L = {interface? [Ts'] MWTs Info ♥Docs}

* updateInfo(p,MWTs) = {interface? Ts MWTs0 MWTs NCs Info0+Info}
    p(This0) = {interface? Ts MWTs0 MWTs1 NCs Info0 Docs}
    MWTs[e?=empty] = MWTs1
    Ps;Ps' = collectDeps(p;MWTs.es)
    Info = #norm{typeDep=Ps\{Any,Void,Library},coherentDep=Ps'\{Any,Void,Library},??}
    //TODO: either here we make all P.#from(stringLiteral=..) and P.m(squareBuilder=..)
    //with no free variables into class methods or in the execution we optimize as 
    //class methods all subexpressions with no free var (and not calling #$s)
* updateInfo(p,Docs C=L) = L0[♥Docs C=refreshUniqueNames(L)][info=L0.info+info
    info = #norm{typeDep=collectDeps(p♥Docs)}
    P(This0) = L0
_______
#define I!HALF.e? => ER
* I!empty => I.CTz;empty
* I!x => I.CTz;x
* I!P<:T => I.CTz;P<:I(T)
* I!P<:T => inferenceFailure(I,T)
    I(T) undefined
* I!void => I.CTz;void
* I!FULL.L => ER //undefined if I.C?=empty 
    p=I.p.push(I.C?,FULL.L) 
    top(I.CTz[from This1;p],p) => PR
    PR = CTz';p' IfErr(PR) ER = PR
    ER = CTz'[from This0.(I.C?);p'];p'(This0)//could be optimized since similar to I.CTz
* I!CORE.L => I.CTz;CORE.L //no useful ccz could be here (assuming no CORE.L in the source)
* I!%T%<: T' => I.CTz;I(T).P <:I(T')
* I!%T%<: T' => inferenceFailure(I,T)
    either I(T) undefined
* I!%T%<: T' => inferenceFailure(I,T')
    I(T) is defined, but I(T') undefined
* I!e0.m(x1=e1..xn=en) => ER
    I!ei=ERi //e0 is of form xP
    ER0..ERn = CTz0;e'0..CTzn;e'n IfErr(ER0..ERn) ER = firstErr(ER0..ERn)
    ER = CTz0 U..U CTzn;e'0.m(x1=e'1..xn=e'n)
* I!xP0 OP..OP xPn => ER
    I!xPi => ERi
    ER0..ERn = CTz0;xP'0..CTzn;xP'n IfErr(ER0..ERn) ER = firstErr(ER0..ERn)
    Ti = T'i if xP'i = Pi < T'i
    Ti = I.G(x'i) if xP'i = x'i
    {P.m(x1..xn).i} = I.p.opOptions(OP, T0..Tn)//in code this can throw thanks to methods; ok but error will need some wrapping to ease explanation
    xP"1..xP"n = xP'0..xP'n\i
    ER = CTz0 U..U CTzn;xP'i.m(x1=xP"1..xn=xP"n)
* I!e0 => ER
    e0 in {throw e, loop e, x:=e}
    I!e => ER'
    ER' = CTz;e' IfErr(ER') ER = ER'
    ER = CTz;e0[e=e']
* I!(Ds K1..Km e) => ER
    xs = FV((Ds K1..Km e))//formally, FV is defined only on CORE.e. Not sure how to handle this
    I!xs;Ds => DsR
    I!Ki => KRi
    DsR = CTz0;D1..Dn IfErr(DsR) ER = DsR
    I[G=I.G,D1.x:D1.T,..,Dn.x:Dn.T]!e => ER'
    KR1..KRn,ER' = CTz1;K'1..CTzm;K'm, CTzm+1;e' IfErr(KR1..KRn,ER) ER = firstErr(KR1..KRn,ER)
    ER = CTz0 U..U CTzm+1;(D1...Dn K'1...K'm e')
_______
#define I!xs;HALF.e? => ER    I!HALF.D => DR    I!HALF.K => KR
* I!xs;empty => I.CTz;empty
* I!xs;var? mdf? HALF.T x=e Ds => DsR
    I(mdf? HALF.T) = CORE.T IfNotE(CORE.T) DsR = inferenceFailure(I,HALF.T)
    I!e => ER 
    ER = CTz';e' IfErr(ER) DR = ER
    CORE.T' = CORE.T[mdf=imm] if mdf?=empty, CORE.T.mdf=read and 
      not exists x in FV(e') such that x in dom(I.G) and I.G(x).mdf in {read,lent,mut}
    CORE.T' = CORE.T[mdf=mut] if mdf?=empty, CORE.T.mdf=capsule and xs=_,x,_,x,_ //2+ usages
    CORE.T' = CORE.T otherwise
    I[G=I.G,x:CORE.T'; CTz=CTz']!Ds => DsR'
    DsR' = CTz;Ds IfErr(DsR') DsR = DsR'
    DsR = CTz;var? CORE.T' x=e',Ds

* I!catch throw HALF.T x e => KR
    I(HALF.T) = CORE.T IfNotE(CORE.T) inferenceFailure(I,HALF.T)
    I!e => ER
    ER = CTz';e' IfErr(ER) KR = ER
    KR = CTz';catch throw CORE.T x e' //assert CORE.T.mdf=imm or throw=return
_______
#define adapt(p,CORE.e,T)
* adapt(p,e,imm Library) = e
* adapt(p,e,imm Void) = (Void x=e {}) where x fresh
* adapt(p,e,T) = (T x=e x.#toLibrary()) otherwise, where x fresh    
_______
#define CTz.add(p; CORE.MH FULL.e?; HAlf.e?) = CTz' // both CTz' and HALf.e? are computed by this notation
* CTz.add(p; MH empty; empty) = CTz
* CTz.add(p; MH e; Half.e) = CTz U CTz' U T<=MH.T
    Y = Y[p=I.p;GX=G^MH;onSlash=MH.T;onSlashX=empty;expectedT=MH.T;onPath=class] // ISAAC: onPath is never used!
    Y!e = Half.e; T; empty; CTz' // empty because it's an error for a method body to leak any "returns"
_______
#define I(mdf? HALF.T) = CORE.T    I.coreTof(ST)=CORE.Tz
* I(mdf T) = I(T)[mdf=mdf]
* I(ST1..STn) = chooseT(I.coreTof(ST1) U..U I.coreTof(STn))

* CORE.T in I.coreTof(CORE.T)
* T' in I.coreTof(ST)
    T<=(ST1...STn) in I.CTz
    T' in I.coreTof(ST1) U ... U I.coreTof(STn)
_______
#define collectDeps(p;CORE.MWT) = Ps;Ps'    collectDeps(p;T) = Ps;Ps'    collectDeps(p;Doc) = Ps;Ps'
//collectDeps(sequence)=union of the results of elements of the sequence
* collectDeps(p; Docs mdf method T0 m(T1 x1..Tn xn)[Ts] e?) =
    collectDeps(p; Docs) U collectDeps(p; T0..Tn,Ts) U collectDepsE(p; e?)
* collectDeps(p; T) = T.P;empty U collectDeps(p; T.Docs)
* collectDeps(p; Doc) = {P| @P._ inside Doc};empty     
_______
#define collectDepsE(p;CORE.e?)= Ps1;Ps2    Ps[skipThis0] = Ps'
//collectDepsE(p;L) adds NCs dependencies and relies on cached Info
* collectDepsE(p;empty) = collectDepsE(p;x) = collectDepsE(p;void) = empty;empty
* collectDepsE(p;CORE.L) = Ps0..Psn[skipThis0];Ps'0..Ps'n[skipThis0]
    Ps0 = CORE.L.Info.typeDep
    Ps'0 = CORE.L.Info.coherent
    Ps1..Psn = {CORE.L(Cs).Info.typeDep[from This.Cs;p]| Cs in dom(CORE.L)}
    Ps'1..Ps'n = {CORE.L(Cs).Info.coherentDep[from This.Cs;p]| Cs in dom(CORE.L)}
* collectDepsE(p; e0.m( x1=e1 .. xn=en ) )= collectDepsE(p;e0) U..U collectDepsE(p;en) 
* collectDepsE(p;loop e)=collectDepsE(p;throw e)=collectDepsE(p;x :=e)=collectDepsE(p;e)
* collectDepsE(p;P<:class Any)= P;empty
* collectDepsE(p;P<:class P')= P',P;P
    P' != Any
* collectDepsE(p; (Ds Ks e) ) = collectDepsE(p;Ds) U collectDepsE(p;Ks) U collectDepsE(p;e)
* collectDepsE(p;var? T x=e) = collectDepsE(p;catch throw T x e) = collectDeps(T) U collectDepsE(p;e)

* empty[skipThis0]=empty;
* This0.Cs,Ps[skipThis0]=Ps[skipThis0]
* Thisn+1.Cs,Ps[skipThis0]=Thisn.Cs,Ps[skipThis0]

_______
#define p.minimize(HALF.T) = HALF.T', p.minimize(CTz) = CTz'

* p.minimize(ST1..STn) = T'
    T = p.minimize(ST1)..p.minimize(STn)
    Tz = {CORE.T | CORE.T in T} //CORE.T
    T' = T if chooseT(Tz) undefined
    T' = chooseT(Tz) otherwise // TODO: Check this?
* p.minimize(T.s(.i)?) = T'.s(.i)?
    p.minimize(T) = T'
    if T' = CORE.T then methods(p,CORE.T.P)(s) undefined
* p.minimize(T.s) = MH.T //methods already minimize
    p.minimize(T) = CORE.T
    methods(p,CORE.T.P)(s) = MH
* p.minimize(T.s.i) = MH.pari
    p.minimize(T) = CORE.T
    methods(p,CORE.T.P)(s) = MH
* p.minimize(OP T1..Tn) = methods(p,P)(s).T[from P;p]
    p.minimize(T1) = T1', ..., p.minimize(Tn) = Tn'
    {P.s.i} = p.opOptions(OP, T1' ... Tn')
* p.minimize((ST1 ... STn) <= T, CTz) = p.minimize(ST1 <= T), ..., p.minimize(STn <= T), p.iminimize(CTz)
* p.minimize(ST <= ST') = empty
    p.minimize(ST) = CORE.T
* p.minimize(ST <= ST') = p.minimize(ST) <= p.minimize(ST')
* p.minimize(empty) = empty
// p.minimize((STz <= HALF.T)s) is of form (ST <= HALF.T)s, where each STs is not a CORE.T
_______
#define chooseT(CORE.Tz) = CORE.T    mostGeneralMdf(mdfz) = mdf     generalEnough(mdfz) = mdfs'
*chooseT(Tz) = mostGeneralMdf(Tz.mdfz) P
  {P} = {T.P| T in Tz and p|-Tz.Pz<=T.P}

* mostGeneralMdf(mdfz) = mdf //the most specific generalEnough.
    mdf in generalEnough(mdfz)
    forall mdf1 in generalEnough(mdfz): mdf <= mdf1

* generalEnough(mdfz) = {mdf | forall mdf1 in mdfz, mdf1<=mdf}
_______
#define P.s.i in p.opOptions(OP, CORE.Ts) //note: now the special case for Path is 
* P.s.i in p.opOptions(OP, T0..Tn)//handled with a 'non op dispatch' desugar
    i in 0..n,
    s = methName(OP_i)(x1..xn)
    P1 ... Pn = methods(p,Ti.P)(s).pars.Ps[from Ti.P;p]
    P'1 ... P'n = (T0..Tn\i).Ps
    P = Ti.P
    p|-P'1<=P1 .. p|-P'1<=P1

_______
#define Info0+Info1 = Info
//#Flag+#norm = #norm; #Flag+#Flag = #Flag
//union of all the sets; preserve all boolean flags

//OLD COLLECT. Isaac, can you show me that we still need something like this? now is unused
_______
#define PAcc.collect() = PAcc'
* CT in PAcc.collect()
    CT in PAcc.collect().collect())//is it needed since we have the fixpoint anyway?
* CT in PAcc.collect()
    CT in PAcc.CTz
* PT <= PT" in PAcc.collect()
    PT <= PT', PT' <= PT" in PAcc
* PT <= PT in PAcc.collect()
    PT in PAcc.CTz
* mdf P <= mdf' P' in PAcc.collect() //TODO: explosive, can we make it more computational? can we mix it with solve? 
    p |- mdf P <= mdf' P' // I.e. every subtype relation we know about
    P' != _ Any // Just for consistency with everything else, not important!
* mdf P <= PT in PAcc.collect()// since all classes are final
	PT <= mdf P in PAcc
	p(P).interface = empty 
* T.s <= CORE.T in PAcc.collect()//since they are alias of each other 
    CORE.T <= T.s in PAcc.collect().CTz //why noy simply in PAcc.CTz?
    CORE.T = PAcc.p(T.P)(s).MH.T[from T.P;PAcc.p]//TODO: no, CORE.L(s) works but FULL.L(s) misses on FULL.F and on methods from interfaces. Should we use methods(..)?
* T.s.i <= PT in PAcc.
t()//since method parameter types can not be refined (or since they are aliases?)
    PT <= T.s.i in PAcc.collect().CTz
    PT = PAcc.p(T.P)(s).MH.pari[from T.P;PAcc.p]
* PT.s <= PT'.s in PAcc.collect()
    PT <= PT' in PAcc.CTz
    PT'.s in PAcc.CTz
* PT'.s.i <= PT.s.i in PAcc.collect()
    PT <= PT' in PAcc.CTz
    PT'.s.i in PAcc.CTz
* PT.s.i <= PT'.s.i in PAcc.collect()//since method parameter types can not be refined 
    PT <= PT' in PAcc.CTz
    PT'.s.i in PAcc.CTz
* PT1' <= Origin(s, P2') in PAcc.collect()
    PT1 <= P2', PT1 <= PT1' in PAcc.CTz
    P2'.s in PAcc.CTz
    PT1'.s in PAcc.CTz
