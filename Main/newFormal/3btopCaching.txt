File structure
  Folder/This.L42
  Cache.L42Bytes  List<CacheEntry>cache;
AssumedGlobals
  ClassLoader{ Map<CN->Byte[]>  } currentClassLoader
  List<CacheEntry>cache;
  Int num;
  Boolean validCache;

class CacheEntry{//where FULL.NC can be null for the reuse case?
  FULL.NC->(CTz,p,mbytecode,cbytecode)
  }
mbytecode,cbytecode or form Map<CN->Byte[]>

Pseudocode for topNC1// this is implementing topNC in 3top +recursive call
//topReuse is called before the topNCs if p.top have reuseUrl
void topReuse(p,has#$){
  num+=1;
  if(num<cache.size()){c=cache.get(num);}
  else{validCache=false;}
  boolean hopeToUseCache=!has#$ || p.NCs!=c.val().p.NCs;
  if(hopeToUseCache){MyClassLoader.load(c.val().cbytecode);return;}
  validCache=false;
  flushBadCache();
  cbytecode=loadBytecode(p(This0).NCs);
  AddCache(null->(CTz1,p,null,cbytecode));
  }
CTz,p topNC1(p,FULL.NC){
  num+=1;
  if(num<cache.size()){c=cache.get(num);}
  else{validCache=false;}
  L=null;
  boolean hopeToUseCache=validCache && c.p.top.uniqueId==p.top.uniqueId && c.key().equals(FULL.NC);
  if(hopeToUseCache){
    if(no#$(FULL.NC)){
      MyClassLoader.load(c.val().cbytecode);
      return c.val();
      }
    MyClassLoader.load(c.val().mbytecode)
    L=c.val().mbytecode.execute()
    if L==c.val().p(nc.C).L {
      MyClassLoader.load(c.val().cbytecode);
      return c.val();
      }
    }//end hope of use cache 'if'
  validCache=false;
  mbytecode=c.val().mbytecode;
  flushBadCache();
  if(L==null){
    CTz1,core.e=conventional full->half->core
    L,mbytecode=reduce()
    //if error, save current cache on disk
    }
  p1,cbytecode=flagtype(p,L);
  //if error, save current cache on disk
  AddCache(FULL.NC->(CTz1,p1,mbytecode,cbytecode));
  return CTz1,p1
  }
--------------------------
a.b={}
{
C=Deploy("a.b",{A={}})
Task2={reuse #$a.b
 C={ method This1.A foo()  }
 }
}
//...
{ DoSafe=JustWriteFiles.#$().doIt()
  More={...}
  //More={reuse #$bla}
  //Act=More().#$().doIt()
}

{C=LON.#$().format()}




{

C={reuse aaa //Foo
  Unused=SPECIALTOKEN
  B=Foo().bar()
  }
 
}

{expanded reuse aaa
 Unused={}
  }
