File structure
  Folder/This.L42
  Cache.L42Bytes  List<CacheEntry>cache;
AssumedGlobals
  ClassLoader{ Map<CN->Byte[]>  } currentClassLoader
  List<CacheEntry>cache;
  Int num;
  Boolean validCache;

class CacheEntry{//where FULL.NC can be null for the reuse case?
  FULL.NC->(CTz,p,mbytecode,cbytecode)
  }
mbytecode,cbytecode or form Map<CN->Byte[]>

//Around the top level, in a finally:save current cache on disk

Pseudocode for topNC1// this is implementing topNC in 3top +recursive call
//topStart is called before the topNCs
CacheEntry topStart(p,has#$){
  num+=1;
  if(num<cache.size()){c=cache.get(num);}
  else{validCache=false;}
  boolean hopeToUseCache=!has#$ || p.NCs!=c.val().p.NCs;
  if(hopeToUseCache){return oldCache(c);}
  cbytecode=loadBytecode(p(This0).NCs);
  return newCache(null->(CTz1,p,null,cbytecode));
  }
CacheEntry newCache(c){flushBadCache();validCache=false;AddCache(c);return c;}
CacheEntry oldCache(c){MyClassLoader.load(c.val().cbytecode);return c;}
CacheEntry topNC1(p,FULL.NC){
  steps=number of nested classes+Full.L in NC.e
  c=null;
  if validCache && there is no #$, at any dept, both in selectors and reuse url{
    if(num+steps<cache.size()){
      c=cache.get(num+steps);
      if(c.key()==NC){//all good! skip steps
        forall c' in cache(num..num+steps){oldCache(c');}
        num+=steps+1
        return c;//since c contains p,CTz and frommedCTz
        }
      }
    }
  CTz0=cache.get(num)
  CTz1,e=using CTz0 full->half->core normally
  //This will trigger all the top for all the FULL.L in FULL.NC.e and sync the cache.
  if(!validCache || num+steps>=cache.size()){
    L,mbytecode=reduce(e)
    p1,cbytecode=flagtype(p,L);
    num+=steps+1;
    return newCache(FULL.NC->(CTz1,p1,mbytecode,cbytecode));
    }
  num+=steps+1;
  c=cache.get(num);
  if(no#$(FULL.NC)){return oldCache(c);}
  MyClassLoader.load(c.val().mbytecode)
  L=c.val().mbytecode.execute()
  if L==c.val().p(nc.C).L {return oldCache(c);}
  p1,cbytecode=flagtype(p,L);
  return newCache(FULL.NC->(CTz1,p1,c.val().mbytecode,cbytecode));
  }
//-------------------------
  Load best CTz/frommedCTz from cache.
  _,core.e=full->half->core //there should be no new CTz discovered.
  num+=1;
  if(num<cache.size()){c=cache.get(num);}
  else{validCache=false;}
  L=null;
  boolean hopeToUseCache=validCache && c.p.top.uniqueId==p.top.uniqueId && c.key().equals(FULL.NC);
  if(hopeToUseCache){
    if(no#$(FULL.NC)){
      MyClassLoader.load(c.val().cbytecode);
      return c.val();
      }
    MyClassLoader.load(c.val().mbytecode)
    L=c.val().mbytecode.execute()
    if L==c.val().p(nc.C).L {
      MyClassLoader.load(c.val().cbytecode);
      return c.val();
      }
    }//end hope of use cache 'if'
  validCache=false;
  mbytecode=c.val().mbytecode;
  flushBadCache();
  if(L==null){
    CTz1,core.e=conventional full->half->core
    L,mbytecode=reduce()
    //if error, save current cache on disk
    }
  p1,cbytecode=flagtype(p,L);
  //if error, save current cache on disk
  AddCache(FULL.NC->(CTz1,p1,mbytecode,cbytecode));
  return CTz1,p1
  }
--------------------------
a.b={}
{
C=Deploy("a.b",{A={}})
Task2={reuse #$a.b
 C={ method This1.A foo()  }
 }
}
//...
{ DoSafe=JustWriteFiles.#$().doIt()
  More={...}
  //More={reuse #$bla}
  //Act=More().#$().doIt()
}

{C=LON.#$().format()}




{

C={reuse aaa //Foo
  Unused=SPECIALTOKEN
  B=Foo().bar()
  }
 
}

{expanded reuse aaa
 Unused={}
  }



-------------
Res={}//CORE.L
Res={}//Full, no nested to solve
Res=e
Res={
  A1=e #$ {#$  } //example Foo.#$({reuse[#$bar] methods})
  B1=e  {#$  }
  C1=e #$ {  }
  D1=e {   }
  A2=e #$ {#$ N=e }
  B2=e  {#$   N=e }
  C2=e #$ {   N=e }
  D2=e {    N=e }
  }
Res=e {all above}
Res=e #$ {all above}
Res=e #$ {#$ all above}
Res=e {#$ all above}


p(This0.Cs)={}
p(This1.Cs)={}



Top{
  loadedBytecode
  p
  }


classLoader, globalCtz, globalLibs, coherent
  top(p)->libs,bt,cohe,p,ctz
  topNC1(p,nc)->libs,bt,cohe,p,ctz
classLoader:
top(bt,p,ctx,libs,coherent)->bt,p,ctx,libs,coherent

TopOut=bt,p,ctx,libs,coherent,sortHeadedP
TopIn=bt,p,ctx,libs,coherent
NCIn=bt,p,ctx,libs,coherent,nc
NCOut=bt,p,ctx,libs,coherent,nc
CTopE:TopIn->Res
CTopNC1E: NCIn->Res

CTop{
  CTopE
  List<CTopNC1> ncs
  }
CTopNC1{
  List<CTop> tops
  CTopNC1E
  }

TopOut top(topIn,ctop)=
  if(no#$anywhere){
    if ctop.ctope.key()==topIn (return ctop.ctope.val())
    }
  p1=sortHeader
  acc CTz from methods
  if p1!=ctop.val().sortHeaderP(validCache=false)
  //indepdendently of possible #$ in reuse
  for ncs topNC1(... using ctop.ncs.get(i))
  if validCache (
    assertion ctop.ctope.val()== what I would return otherwise
    return ctop.ctope.val()
    )
  return ...
  }
TopNCOut topNC1(ncIn,cnc1)=
  if(no#$anywhere){
    if ctop.ctope.key()==topIn (return ctop.ctope.val())
    }
  full->half
  coree=half->full (pass cnc1.tops)
  if(cacheValid && no#$ in coree){return ctop.ctope.val()}
  if(cacheValid && some#$ in coree){
    l=reduce coree
    if(l==cached expected l){return ctop.ctope.val()}
    cacheValid=false;
    p=p.update(nc.withl(l))
    p=flagTyped(p)
    return...
    }
  assert !cacheValid;
  l=reduce coree
  p=p.update(nc.withl(l))
  p=flagTyped(p)
  return... 
  }
