_______
#define flagTyped(p)=p'    LL[Csz=Flag]=LL'    LL[InfoFlag=Flag]=LL'
* flagTyped(p) = p.update( p(This0)[typable(p)=typed])
    forall Cs in typable(p):  |-p.navigate(This0.Cs)

* LL[Cs Csz = Flag]=LL[Cs=LL(Cs)[InfoFlag=Flag]][Csz=Flag]
* LL[empty=Flag]=LL

* {H MWTs NC1..NCn Info}[InfoFlag=Flag]={H MWTs' NCs' Info[Flag=Flag]}
    MWTs'=MWTs but any CORE.L inside MWTi.e? are replaced with CORE.L[InfoFlag=Flag]
    NCs'=NC1[CORE.L=NC1.CORE.L[InfoFlag=Flag]] .. NCn[CORE.L=NCn.CORE.L[InfoFlag=Flag]]
_______
#define typable(p)=Csz    untypable(p)=CTz
* typable(p) = Cs1..Csn // asserts p(This0) is CORE.L
    dom(p(This0))/untypable(p)
    
* empty in untypable(p) if p(This0).interface=empty
* Cs in untypable(p) if p(This0.Cs).Info.Flag=typed
* Cs in untypable(p) if 
    P in p(This0.Cs).Info.depTyped[from This0.Cs;p]
    P notin dom(p)
* Cs in untypable(p) if 
    Thisn.C1..Ck in p(This0.Cs).Info.depTyped[from This0.Cs;p]
    p(Thisn.C1..Ck).Info.Flag!=typed
    n>=k
* Cs in untypable(p) if 
    Cs' in untypable(p)
    not p(Cs').Info.Flag=typed //could be norm but also p(Cs') undefined
    This0.Cs' in p(This0.Csi).Info.depTyped[from This0.Cs;p]    
_______
#define wellTyped(p, CORE.e)=CORE.T
* wellTyped(p,e)=T
    Q=Q[Flag=norm;p;G=empty;Ts=empty;Ps=Any]
    FV(e)=empty//TODO:move out to top? where we do the rest of well formedness?
    p;empty;empty|= CORE.e : _ <= imm
    either Q|- CORE.e : Library
    or Q|- CORE.e : imm Void
    or Q|- CORE.e : P and imm method Library #toLibrary() _ in p(P).MWT
_______
#define |- p    p|-CORE.MWT
* |- p      //(library well typed)
   //assert L.Info.Flag=norm // does it holds? 
   //assert forall P in p(This0).Ts.Ps:  p(P).interface?=interface should be from wf 
   forall MWT in p(This0).MWTs:  p |- MWT
   forall C=L in p(This0).NCs:
     |-p.push(C,L)
     if C of form _::n then coherent(p.push(C,L)) //an incoherent private class would be bad
* p|-MWT //(member method)
    Q = Q[typed; p; MWT.G; empty; MWT.exceptions.Ps]
    if MWT.e?=e then 
      Q |- e : MWT.T.P
      p;empty;empty |= e :_ <=fwd% MWT.T.mdf
    MHs={MH[from P;p] | P in p(This0).Ts.Ps and p(P)(MWT.s)=MH}//assert all abstract
    forall MH in MHs:
      p|-MWT.T<= MH.T //method returns a type which is not a sybtype of its ancestor "name"
      MWT.G=MH.G //invalid type w.r.t. implemented paramerer xi
      forall Pi in MWT.exceptions.Ps exists Pj in MH.exceptions.Ps such that p |- Pi <= Pj
      //or error: leaked exception P is not the subtype of a declared exception
      //or  method declares an exception (P) which is not a subtype of implemented exceptions
_______
#define Q |-e: P 
* Q |- void : P //(void)
    P in {Void,Any}
* Q |- P<:class P' : P" //(Path) //assert Q.p(P) and Q.p(P') of form CORE.L
    Q.p|-P' <= P"
    either P'=Any
    or Q.p(P).interface?=empty and Q.p(P').Info.declaresClassMethods    
* Q |- L : P //(library propagation)
    P in {Library,Any}
    if Q.Flag==typed |- Q.p.push(L)
* Q |-x : P  //(x)
    Q.p|- Q.G(x).T.P <= P
* Q |- loop e : P //(loop)
    P in {Void,Any}
    Q|- e : Void
* Q |- return e : P0 //(throw-return)
    Q|- e : P
    P in Q.Ts.Ps
* Q |- throw e : P0 //(throw)
    Q|- e : P
    either throw=error
    or P in Q.Ps
* Q |- e0.m(x1:e1..xn:en) : T'.P //(mcall)
    P0=guess(Q,e0)//simple since e0 of form xP
    mdf method T m(T1 x1..Tn xn)[Ps] _ in Q.p(P0)[from P0;p]
    Q.p |- T.P <= T'.P
    Q|- e0 : P0 
    Q|- e1 : T1.P .. Q|- en : _ <= Tn.P
* Q |- x:=e : P //(xUpdate)   //is var is checked by the mdfs type system
    P in {Void,Any}
    Q|- e : Q.G(x).T.P 
    not fwd_or_fwd%_in(Q.G(x).T)//TODO: should this be well formedness?
* Flag; p; G; Ts; Ps |- (T1 x1=e1..Tn xn=en  Ks  e0) :  P //(block)       //assert dom(G) disjoint dom(Ds) by well formedness
    Flag; p; G; Ts; Ps |- Ks : P |Ts';Ps'
    G'=G,x1:T1..xn:Tn   
    Flag; p; G' Ts U Ts'; Ps U Ps' |- ei:Ti.P  for i in 1..n 
    Flag; p; G' Ts; Ps |- e0 : P
TODO: I'm assuming that there was no need to remove the fwdMut!
//    G'=toRead(G) if error in Ks.throws
//    G'=G otherwise     //toRead removes fwdMut; if they stayed would it still be sound? //if fwdMut still removed, check for error if FV(Ds) uses them
_______
#define Q |-ks : P | Ts;Ps    Q |-k : P |Ts;Ps
* Q |-k1..kn : P | Ts1 U..U Tsn;Ps1 U..U Psn //(catchMany)
    forall i in 1..n Q |-ki : P |Tsi;Psi
* Q |- catch return T0 x e : P |T0;empty //(catch)
    Q[G=Q.G,x:T0] |- e : P
    if T0.mdf=class then Q|- P <: T0 : P
* Q |- catch throw imm P0 x e : P |empty;P0 //(catch)
    throw !=return
    Q[G=Q.G,x:imm P0] |- e : P
_______
#define p;G;Ts |= e : mdf<=mdf' 
* p;G;mdfs |= void : imm <= mdf //(void)
    mdf in {imm,read,fwd imm}
* p;G;mdfs |= P<:class P' : class <= class //(Path)
* p;G;mdfs |= L : imm  <= mdf //(library propagation)
    mdf in {imm,read,fwd imm}
* p;G;mdfs |=x : G(x).T.mdf <= mdf  //(x)
    G(x).T.mdf <= mdf
* p;G;mdfs |= loop e : imm <= mdf //(loop)
    mdf in {imm,read,fwd imm}
    p;G;mdfs |= e : _ <= imm
* p;G;mdfs |= return e : mdf <= mdf //(throw-return)
    p;G;mdfs |= e : _ <= fwdOf(mostGeneralMdf(mdfs))//TODO: check if that is the right call
* p;G;mdfs |= throw e : mdf <= mdf //(throw)
    p;G;mdfs |= e : _ <=imm
* p;G;mdfs |= e0.m(x1:e1..xn:en) : mdf <= mdf' //(mcall)
    mdf<=mdf'
    P0=guess(Q,e0)//simple since e0 of form xP
    mdf0..mdfn->mdf in methMdfs(p,P0,m(x1..xn)) //a mdf version only of multiple methTypes
    p;G;mdfs |= e0 : _ <= mdf0 .. Q|- en : _ <= mdfn
* p;G;mdfs |= x:=e : imm <=mdf //(xUpdate)
    mdf in {imm,read,fwd imm}
    //assert G(x).var?=var //the promotion should be just not attempted if the var is needed?
    p;G;mdfs |= e : _ <= G(x).T.mdf 
* p;G;mdfs |= (Ds Ks e) : capsule <= mdf  //(capsule promotion)
    mdf in {capsule, imm, fwdImm, fwd%Imm}
    Ds!=empty //note: e<:mut P does desugar in a way that allows this rule to work
    p;toLent(G);mdfs |-(Ds Ks e) : mut <= mut
    forall x=_ inside (Ds Ks e), toLent(G)(x).var?=var
    if x inside (Ds Ks e) then x in dom(toLent(Q.G)) //some may be removed by toLent
//this rule is now "deterministic" in the sense that if typing the block give us a capsule directly,
//this rule can not be applied, since we require mut P <=mut P in the premise.
//this is another point where a variable 'x' can become undefined thanks to toLent(G)

* p;G;mdfs' |= (Ds  Ks  e0) : mostGeneralMdf(mdf,mdfs) <= mdf' //(block)       //assert dom(G) disjoint dom(Ds) by well formedness
    p;G;mdfs' |= Ks : mdfs <= mdf' |mdfs"
    G'=toRead(G) if error in Ks.throws
    G'=G otherwise
    p;G';mdfs' U mdfs" |= Ds | G0
    p;G,(G0\dom(G));mdfs' |= e0 : mdf <=mdf'
_______
#define p;G;mdfs |= Ds | G // The resulting G is the enriched G containing info about Ds too.
* p;G0;mdfs |= var?0 T0 x0=e0 ..var?n Tn xn=en,  Ds | G3  //(Ds)
    dom(Ds) disjoint FV(e0..en)
    //selecting the smallest set of D in Ds so that Ds=D1..Dn,Ds' and FV(D1.e,..Dn.e) disjoint dom(Ds')
    //here taking a Ds in input, we keep the order. Is this needed/can it be more expressive
    G1 = G0[ fwd( onlyMutOrImm(x0:T0..xn:Tn)) ]// G0 is clipped for error safety; G1 is clipped and complete
    for i in 0..n: p;G1;mdfs |= ei : mdfi <= fwd% Ti.mdf
    if fwd_or_fwd%_in Ts
      then x0..xn disjoint FV(e0..en)//returning unresolved items from cycles is prohibited
    if fwd_or_fwd%_in { G0(x) | x in FV(e0..en) } // x0..xn already excluded
      then G2=G0[fwd%(x0:T0..xn:Tn)]
      otherwise G2=G0[x0:var?0 T0 ..xn:var?n Tn]
    p;G2;mdfs |= Ds | G3
* p;G;mdfs |= empty | G //(DsEmpty)
_______
#define p;G;mdfs' |=ks : mdfs <= mdf | mdfs    p;G;mdfs' |=k : mdf <= mdf' |mdfs
* Q |-k1..kn : mdf1..mdfn <= mdf |Ts1 U..U Tsn//(catchMany)
    forall i in 1..n Q |=ki : mdfi <= mdf |Tsi
* Q |= catch throw T0 x e : mdf <= mdf' |T0? //(catch)
    T0?=T0 if throw=return
    T0?=empty otherwise
    Q[G=Q.G,x:T0] |= e : mdf <= mdf'
_______
#define guess(Q,xP) = P
* guess(Q,x)=Q.G(x)
* guess(Q,P<:T)=T
_______
#define methTypes(p,P,s) = MethTs
* mdf0..mdfn-> mdf';Ts.Ps in methTypes(p,P,s)  //(mBase)
    mdf0 method mdf P m(mdf1 P1 x1,..mdfn Pn xn)_ in p(P).MWTs
    mdf'=fwd% mdf if fwd_or_fwd%_in(mdf1..mdfn)
    otherwise mdf'=mdf
* noFwd mdfs-> noFwd mdf in methTypes(p,P,s)  //(mNoFwd)
    mdfs->mdf in methTypes(p,P,s)
* mutToCapsule(mdfs)->capsule in methTypes(p,P,s)  //(mC)
    mdfs->mut in methTypes(p,P,s)
* toImmOrCapsule(mdfs)->imm in methTypes(p,P,s)  //(mI)
    mdfs->mdf in methTypes(p,P,s), mdf in {read,lent}
//the behaviour of toImmOrCapsule on fwd is not relevant since the method
// returns a read and will be not well formed if it had fwd parameters
//by well formedness if return type is read, not fwd_or_fwd%_in Ts
* mdfs'->toLent(mdf);Ps in methTypes(p,P,s) //(mVp)
    mdfs0 mut mdfs2->mdf in methTypes(p,P,s)
    mdfs'=mutToCapsule(mdfs0) lent mutToCapsule(mdfs2) //this implies not fwd_or_fwd%_in mdfs0,mdfs2
* mutToCapsuleAndFwdMutToFwdImm(mdfs)->fwd%Imm in methTypes(p,P,s)  //(mImmFwd)
    mdfs->fwd%Mut in methTypes(p,P,s)
    fwd_or_fwd%_in(mdfs)
* mutToCapsuleAndFwdRead(mdfs)->read in methTypes(p,P,s) //(mRead)
    mdfs->fwd%Mut in methTypes(p,P,s)
    fwd_or_fwd%_in(mdfs)
* mutToCapsuleAndFwdMutToFwdImm(mdfs)->fwd imm in methTypes(p,P,s)  //(mImmFwdExtended)
    mdfs->fwd mut in methTypes(p,P,s)
    fwd_or_fwd%_in(mdfs)
* mutToCapsuleAndFwdRead(mdfs)->read in methTypes(p,P,s) //(mReadExtended)
    mdfs->fwd mut in methTypes(p,P,s)
    fwd_or_fwd%_in(mdfs)
_______
#define toLent(G)=G'    toLent(T)=T'
* toLent(G)(x)=G(x) if G(x).T.mdf=immutable
* toLent(G)(x)=toLent(G(x))[with var?=empty] otherwise //thus undefined where toLent undefined

* toLent(mut P)=lent P //toLent(fwd mut P) and toLent(fwd%Mut P) undefined
* toLent(T)=T  if T.mdf notin {mut, fwd mut, fwd%Mut}
_______
#define fwd% T = T'    fwd_or_fwd%_in Ts    noFwd T = T'    noFwd Ts=Ts'
* fwd% imm P=fwd%Imm P
* fwd% mut P=fwd%Mut P
* fwd% T=T otherwise

* fwd_or_fwd%_in Ts
    not {fwd imm, fwd mut, fwd%Imm, fwd%Mut} disjoint Ts.mdfs

* noFwd fwdImm P = noFwd fwd%Imm P = imm P
* noFwd fwdMut P = noFwd fwd%Mut P = mut P
* noFwd T = T otherwise 

* noFwd T1..Tn= noFwd T1 .. noFwd Tn
_______
#define mutToCapsule(T)=T'    mutToCapsuleAndFwdRead(T)=T'    mutToCapsuleAndFwdMutToFwdImm(T)=T'   toImmOrCapsule(T)=T'
* mutToCapsule(mut P)=capsule P //undefined for fwd mut, fwd%Mut //TODO: can this be relaxed? 
* mutToCapsule(T)=T if T.mdf notin {mut, fwd mut, fwd%Mut} //would it be useful to relax it?

* mutToCapsuleAndFwdRead(mut P)=capsule P   //mutToCapsuleAndFwdRead(fwd%Mut P) undefined
* mutToCapsuleAndFwdRead(fwdMut P)= read P
* mutToCapsuleAndFwdRead(fwdImm P)= imm P //Note: read here would be unsound
* mutToCapsuleAndFwdRead(T)=T otherwise

* mutToCapsuleAndFwdMutToFwdImm(mut P)=capsule P  //mutToCapsuleAndFwdMutToFwdImm(fwd%Mut P) undefined
* mutToCapsuleAndFwdMutToFwdImm(fwdMut P)= fwdImm P
* mutToCapsuleAndFwdMutToFwdImm(T)=T otherwise

* toImmOrCapsule(mdf P)=capsule P with mdf in {lent,mut,fwdMut,fwd%Mut}
* toImmOrCapsule(read P)=imm P
* toImmOrCapsule(T)=T otherwise//mdf in {class,imm,fwdImm,fwd%Imm,capsule}
_______
#define coherent(p,CORE.e)    coherent(p)     coherent(p;MHs;MH;xz;n?)
* coherent(p,e)
    forall P<:class P' inside e: //assert p(P) and p(P') are of form CORE.L
      either P'=Any or coherent(p.navigate(P))

* coherent(p)
    CORE.L = p(This0)
    MHs = {MH | Docs MH in CORE.L.MWTs} //thus no e, thus abstract
    either CORE.L.interface?=interface
    or class not in MHs.mdfs//no abstract class method
    or exists xz  and n? such that:
      forall MH in MHs, coherent(p;MHs;MH;xz;n?)
    MWTs = {MWT | MWT in CORE.L.MWTs, MWT.m not of form #$_ and
      either _.#$_(_) inside MWT.e or untrusted(MWT.native?)} //untrusted(BalCurly) if not on a trusted whitelist
    MWTs.mdfs subsetof {mut, lent, capsule} //TODO: should it be well formedness instead
    forall MH in MHs where MH.mdf=class: forall MWT in MWTs:
      if MH.T.mdf canAlsoBe MWT.mdf then MH.m of form #$_

* coherent(p;_;class method T m::n?(T1 x1..Tn xn)_;xz;n?)
    x1..xn = xz
    p |- This0 <= T.P
    mdfs = (T1..Tn).mdfs
    T.mdf not in {class, fwd mut, fwd imm}
    if T.mdf in {imm, capsule} then mdfs subseteq {imm, fwd imm, capsule, class}
    if read or lent in mdfs then T.mdf in {read, lent}
* coherent(p;MHs;mdf' method T m::n?(_)_;_;n?) //by well formedness if n is present is the same, but it may be absent.
    forall class method mdf _(_)_ in MHs:  !(mdf canAlsoBe mdf') //allowed abstract
* coherent(p;_;mdf method T #sx::n?(mdf' P' that)_;_,x;n?) //Note: #sx::n? match any number of # and an x with an optional n
    p |- imm Void <= T
    mdf' in {imm, mut, capsule, class}//that is not in {read, lent, fwd mut, fwd imm}
    mdf in {lent, mut}
    if mdf = lent then mdf' != mut
* coherent(p;MHs;mdf method mdf' P' #sx::n?()_;_,x;n?)
    mdf != class
    forall P in fieldTs(MHs, x, mdf).Ps:  p |- P <= P'
    coherentGetMdf(mdf',mdf, fieldTs(MHs,x, mdf).mdfs, fieldAccessMdf(MHs,x, mdf))
_______
#define mdf canAlsoBe mdf'    fieldTs(MHs, x, mdf)=Ts    fieldsAccessMdf(MHs, x, mdf) = mdfs    coherentGetMdf(/*value*/mdf0,/*getter*/mdf1,/*in*/mdfs0,/*out*/mdfs1)
* capsule canAlsoBe mdf, with mdf != class
* mut canAlsoBe mdf, with mdf != class
* lent canAlsoBe mdf, with mdf in {mut,lent, read, fwd mut}
* read canAlsoBe mdf, with mdf in {read,imm, fwd imm}
* imm canAlsoBe mdf, with mdf in {read,imm, fwd imm}
//object creaded with mdf1 canAlsoBe seen as mdf2 //undefind if mdf1 is class or fwd
// Note that coherentGetMdf(mdf', _, {mdf, _}, _) implies mdf canAlsoBe mdf', but the converse does not hold (for example, lent canAlsoBe mut, but a lent field can never be read out as a mut.

* T in fieldTs(MHs, x, mdf)
    either class method mdf' _(_ T x _)_ in MHs
    or mdf' method _ #sx::n?(T that)_ in MHs
    mdf' != capsule //capsule setters are dead code
    mdf' canAlsoBe mdf

* mdf" in fieldAccessMdf(MHs, x, mdf)
    mdf' method mdf" P #sx::n?() in MHs
    mdf' != capsule or mdf" = class // TODO: is the check 'or mdf" = class' needed or not? 
    mdf' canAlsoBe mdf // capsule getters ok on anything but class: another getter can never be called
    
// Note: coherentGetMdf(getterReturnMdf, receiverMdf, fieldTypeMdfs, fieldAccessMdfs)//valueMdf, getterMdf, inMdfs, outMdfs
// Means that the value of a field accessed on a receiverMdf reference can safely be used as a getterReturnMdf, iff its value came from a fieldTypeMdfs reference (through either a factory or setter), and since then, its value may have previously been accessed as a fieldAccessMdfs reference.
* coherentGetMdf(class,_,{class},_)
* coherentGetMdf(read, _, mdfs0,_)
    class not in mdfs0
* coherentGetMdf(imm,imm, mdfs0,_)
    class not in mdfs0
* coherentGetMdf(imm,mdf,mdfs0,mdfs1)
    mdf != imm
    mdfs0 subseteq {imm, fwd imm,capsule}
    {mut, lent} disjoint mdfs1
* coherentGetMdf(capsule,capsule,mdfs0,mdfs1)
    mdfs0 subseteq {mut, fwd mut, capsule}
    imm not in mdfs1
* coherentGetMdf(lent,mdf,mdfs0,mdfs1)
    mdfs0 subseteq {mut, fwd mut, capsule, lent}
    mdf in {lent, mut, capsule}
    imm not in mdfs1
* coherentGetMdf(mut,mdf,mdfs0,mdfs1)
    mdfs0 subseteq {mut, fwd mut, capsule}
    mdf in {mut, capsule}
    imm notin mdfs1
--------------------------END, examples only after this line
/*
class method lent This foo(lent X x, lent X y)
mut method lent X x() // ok?
mut method lent X y() // ok?
*/


lent X method evil(lent X x) = 
    foo(x).x()

    if we can have a lent collection of read objects
or anyway update a read field, we have -capsule visible as read
  lent list=.. //lent method add(read r)
  capsule a=..
  capsule a2=(mut b=a
   list.add(b)
   b)
  a2 and list usable
  
  {
  class method mut This (S x)
  class method imm This (N x)
  mut method S #x()
  read method Any x()
  //mut method x(N that) //enabling this method makes #x not valid for coherence
  }

-------------------------------------------
Old all in one TS
_______
#define Q |-e: T<=T 
* Q |- void : imm Void <= T //(void)
    Q.p|-imm Void <= T
* Q |- P<:class P' : class P' <= T //(Path) //assert Q.p(P) and Q.p(P') of form CORE.L
    Q.p|-class P' <= T
    P'=Any if Q.p(P).interface?=interface or not Q.p(P).Info.declaresClassMethods
* Q |- L : imm Library <= T //(library propagation)
    Q.p |- imm Library <= T
    if Q.Flag==typed |- Q.p.push(L)
* Q |-x : Q.G(x).T <= T  //(x)
    Q.p|- Q.G(x).T <= T
* Q |- loop e : imm Void <= T //(loop)
    Q.p|-imm Void <= T
    Q|- e : _ <= imm Void
* Q |- return e : T0 <= T0 //(throw-return)
    Q|- e : _ <= fwd T
    T in Q.Ts
* Q |- throw e : T0 <= T0 //(throw)
    Q|- e : _ <=imm P
    either throw=error
    or P in Q.Ps
* Q |- e0.m(x1:e1..xn:en) : T <= T' //(mcall)
    P0=guess(Q,e0)//simple since e0 of form xP
    T0..Tn->T;Ps in methTypes(p,P0,m(x1..xn))
    Q.p |- T <= T'
    Q|- e0 : _ <= T0 .. Q|- en : _ <= Tn
* Q |- x:=e : imm Void <= T //(xUpdate)
    Q.G(x).var?=var
    Q.p|- imm Void <= T
    Q|- e : _ <= Q.G(x).T 
    not fwd_or_fwd%_in(Q.G(x).T)
* Flag;p;G;Ts;Ps |- (Ds Ks e):capsule P <= mdf P  //(capsule promotion)
    Ds!=empty //note: e<:mut P does desugar in a way that allows this rule to work
    mdf in {capsule, imm, fwdImm, fwd%Imm}
    Flag; p; toLent(G);Ts;Ps |-(Ds Ks e) : mut P <= mut P
//this rule is now "deterministic" in the sense that if typing the block give us a capsule directly,
//this rule can not be applied, since we require mut P <=mut P in the premise.
//this is another point where a variable 'x' can become undefined thanks to toLent(G)

* Flag; p; G; Ts; Ps |- (Ds  Ks  e0) : T <= T' //(block)       //assert dom(G) disjoint dom(Ds) by well formedness
    Flag; p; G; Ts; Ps |- Ks : Ts'' <= T' |Ts';Ps'
    G'=toRead(G) if error in Ks.throws
    G'=G otherwise     //toRead removes fwdMut; if they stayed would it still be sound?
    Flag; p; G'; Ts U Ts'; Ps U Ps' |- Ds | G0
    Flag; p; G,(G0\dom(G)); Ts; Ps |- e0 : T0 <=T'
    T= mostGeneralMdf({T0.mdf,Ts''.mdfs}) T'.P //error if set of Mdfs admits no single most general mdf
    // assert Q.p|-T <= T'
_______
#define Q |- Ds | G // The resulting G is the enriched G containing info about Ds too.
* Flag; p; G0; Ts; Ps |- var?0 T0 x0=e0 ..var?n Tn xn=en,  Ds | G3  //(Ds)
    dom(Ds) disjoint FV(e0..en)
    //selecting the smallest set of D in Ds so that Ds=D1..Dn,Ds' and FV(D1.e,..Dn.e) disjoint dom(Ds')
    //here taking a Ds in input, we keep the order. Is this needed/can it be more expressive
    G1= G0[ fwd( onlyMutOrImm(x0:T0..xn:Tn)) ]// G0 is clipped for error safety; G1 is clipped and complete
    for i in 0..n: Flag; p; G1; Ts; Ps|-ei : T'i <= fwd% Ti //if error x undefined, it must have been hidden by error safety
    if fwd_or_fwd%_in Ts
      then x0..xn disjoint FV(e0..en)//returning unresolved items from cycles is prohibited
    if fwd_or_fwd%_in { G0(x) | x in FV(e0..en) } // x0..xn already excluded
      then G2=G0[fwd%(x0:T0..xn:Tn)]
      otherwise G2=G0[x0:var?0 T0 ..xn:var?n Tn]
    Flag; p; G2; Ts; Ps|- Ds | G3
* Q |- empty | Q.G //(DsEmpty)
_______
#define Q |-k1..kn : T1..Tn <= T | Ts;Ps   Q |-k : T' <= T |Ts;Ps
* Q |-k1..kn : T1..Tn <= T |Ts1 U..U Tsn;Ps1 U..U Psn //(catchMany)
    forall i in 1..n Q |-ki : Ti <= T |Tsi;Psi
* Q |- catch return T0 x e : T <= T' |T0;empty //(catch)
    Q[G=Q.G,x:T0] |- e : T <= T' //not well formed if x in dom(Q.G)
    if T0.mdf=class then Q|- T0.P <: T0 : T0
* Q |- catch throw imm P x e : T <= T' |empty;P //(catch)
    throw !=return
    Q[G=Q.G,x:T0] |- e : T <= T' //not well formed if x in dom(Q.G)