Notations and grammar

0 Notations
1 Grammar
2 well formedness
3 paths
4 program

-----------------------------------------------------------
Part 0: notations 
-----------------------------------------------------------
ASCII rendering of horizontal bar notation:
Letters i,j,k,m,n are integers;
usually indices into sequences or length of sequences
U is the set union,
\ is the set subtraction
we use "and" "or" "disjoint" and "intersection" as words.
"empty" is the emptyset/sequence etc.

using s instead of overbar, so Cs::=C1..Cn
-->p is p under the arrow
a^i is a apex i, ai is a pedex i
[] is the hole/square
//add tuple notation <;>
in latex we use two different fonts for "(" of the grammar and for
"(" used for disambiguation and function call. here we just hope is clear :/

Generally, we use ,: and | to disambiguate grouping, thus
a b, c;d |e == ((((a b), c);d) |e)

General Notations:

When a term of the grammar can be accessed with functional notation,
as in a(b), then dom(a) is {b | a(b) is defined}

DOT NOTATION b.a extract the element of form a from b, for example (C:e1).e=e1
More precise: a term of a grammar is a tree of nodes and terminals.
The root-most node of "b" that can be represented with the metavariable "a"
is produced.  That is, if there are two "a"s at the same dept level, the "." operator is undefined.

a[with b=b1] replace the element of form b in a with a new b,
so that (a[with b=b1]).b = b1

a[b=c2] when b in dom(a), a(b)=c1 modify a so that a(b)=c2
 
-----------------------------------------------------------
Part 1: grammar and contexts operations 
-----------------------------------------------------------
### Core language grammar
# non recursive terms:
throw::= exception | error | return //James suggests ball as a possible replacement for throw
mdf::= imm|mut|lent|read|capsule|class | fwdImm | fwdMut | fwd%Imm | fwd%Mut
Phase::=None|Norm|Typed|Coherent //TODO: add (fresh library)names that are put after norms//May be None should be renamed into Desugared
ms::=m(xs) //method selector
mh::= mdf method T m(T1 x1..Tn xn) exception Ps //mh.ms generates the corresponding ms  
Ldom::=ms|C
P::= Thisn.Cs | Any | Library | Void  //is pronounced "Path"
T::= mdf P | P::msxs
msx::=ms(::x)?

#core expressions
L::={interface? implements Ps M1..Mn Phase}
M::=refine? mh e?| ms e | C:e
e::=void|L|chain| throw[T1,T2] chain|loop e|(ds ks e[T]) | use P check m((x:e)s) e
chain::= x| P | chain.m[P]((x:e)s)
//annotations [T1,T2], [P] and [T] are implicitly "?", as in [T]?
k::=catch T x e
d::= T x=e
//note: chain have always a guessable type, 
//TODO: update sugared language to require chain as meth receiver and thrown expressions

#Compiled terms
LC::={interface? implements Ps MC1..MCn Phase}  //library compiled
MC::= mwt | ms eC |nc
mwt::= refine? mh eC? //may still contains skeletal types
nc::= C:LC
eC::= x|void|P|L|throw[T1,T2] eC|loop eC|(dCs kCs eC[T])
 | eC.m[P]((x:eC)s)| use P check m((x:eC)s) eC
kC::=catch T x eC
dC::= T x=eC

// Note: compiled types are T, normalized types are only mdf P
// but normalization is a different step

# Contexts
ctxC::=[] | eC.m( (x=eC)s x=ctxC, (x=e)s)| .... // compilation context, e=ctxC[L] selects an L where all the former Ls are LC. The context do not enter in libraries
ctxM::= C: ctxC |ms ctxC | refine? mh ctxC
ctxL::= {interface? implements Ps Ms ctxM Ms' Phase}

//notice how every LC is a special kind of L (barnotation has structural subtyping)

-----------------------------------------------------------
###operations on contexts (for implementation too)
 -define ctxC sim ctxC
  * [] sim []
  assuming ctxC sim ctxC', then
  * ctxC.m((x:e)s) sim ctxC'.m'((x:e)s')
  * e.m(x1:e1..xn:en x:ctxC (x:e)s) sim e'.m'(x1':e1'..xn':en' x':ctxC' (x:e)s')
  * (T1 x1=e1..Tn xn=en T x=ctxC (T x=e)s e) sim (T1' x1'=e1'..Tn' xn'=en' T' x'=ctxC' (T x=e)s' e')
  * and so on        
 
 -define L/ctxL'=<ctxL; e>   intuition: if L=ctxL[e], ctxL sim ctxL'
  * {interface? implements Ps MC1..MCn C:e Ms}/{interface? implements Ps MC1'..MCn' C':ctxC' Ms'}
   = {interface? implements Ps MC1..MCn C:ctxC Ms}, e0
   e=ctcC[e0] and ctxC sim ctxC'

---------
We define functional notation for
L, ctxL and LC (over Ldom domain and Cs)
Moreover, for convenience we define inside in the following way:

- eC' inside eC if eC=ctxC[eC']
- P inside M holds iff P inside M.e 
 or M.mh= refine? T0 m(T1 x1..Tn xn) exception Ps
 and Ti= _ P or Ti= P::_ or P in Ps
 


-----------------------------------------------------------
Part 2: well formedness
-----------------------------------------------------------

ms: unique x in xs

mh: mh.ms is well defined, Any notin Ps //Ps is thrown exceptions

mdf: "%" not present in any term, will be used internally by the type system

C:e :  C not Any, Library, Void, This, Thisn

T: for skeletal types now is allowed, but I may want to prevent Void::msxs or similar

msx: in ms::x, x in ms.xs or x is this

L: unique LDom in LDoms, Any notin Ps //Library and Void are not interfaces so you will get the normal error from implementing them
   and methods in interfaces have no body (and no @private)

throw/loop: I may want to disallows throw throw' e and similar

(ds ks e[T]): unique x in ds, FV(ks) disjoint dom(ds) and 
  forall k1,k2 in ks, k1.throw=k2.throw
  That is, all throw in a specific ks are the same (thus no "catch return T1 x1 e1 catch error T2 x2 e2")

e.m[P]((x:e)s): I may want to disallow throw and similar as es

use P check m((x:e)s) e: P not Any/Void/Library


//Note: error/exception only imm is checked as type error, not well formedness

//C:e :  FV(e)=empty subsumed by next check

C:e : capsuleWellFormed 
   cX(e)=empty
   //Note, this can be applied directly after desugaring
   
mwt: Ts=parameter types, 
  if exists fwdImm _ in Ts then (return type).mdf in {mut, fwdMut, imm, fwdImm}
  if exists fwdMut _ in Ts then (return type).mdf in {mut, fwdMut}

mwt:  capsuleWellFormed 
  mwt= refine? mdf method T m(T1 x1..Tn xn)e
  FV(e)\ this,x1..xn= empty
  if Ti=capsule _, xi in cX(e) 0 or 1 times
  //This can be applied after desugaring AND inside norm(p)
  //Note: this need to be repeated/reasoned when skeletal types in T1..Tn get normalized into capsules//TODO:
  //FUCK FUCK Similarly, if e is normed and skeletal types are replaced in local bindings...
  //no this happens slowly during TS// indeed ts can norm, then while the resulting mwt is created, cX can run (again or for the first time)
  //ACTION TODO in code: after typechecking a method body, run capsuleWellFormedness again on the result,
  //where the local binding with scheletal types (that might turned out to be capsules) has been replaced.
cX(x)=x         //FV can be defined from cX!!
cX(void)=cX(P)=cX(L)=empty
cX(throw[T1,T2] e)=cX(e)
cX(loop e)=cX(e),cX(e)  //two times, that is enough
cX(e0.m[T](x1:e1..xn:en) )=cX(e0),..,cX(en)
cX(use P check m(x1:e1..xn:en) e0)=cX(e0),..,cX(en)

cX( (T1 x1=e1..Tn xn=en k1..km e0[T]) )=ys/x1..xn ,max( (xs0/x1..xn), xs1,..,xsm)
  where
  ys=cX(e1),..,cX(en)
  xsi=cX(ki)
  xs0=cX(e0) 
  if Ti=capsule _ then
    xi at most 1 in ys,xs0

max(empty,ys)=ys
max (x xs,ys)=x max(xs,ys) if x not in ys
max (x xs,ys)=x max(xs,removeOne(x,ys)) 
max(xs, xs0..xsn) = max(max(xs,xs0),xs1..xsn)
max(xs)=xs


-----------------------------------------------------------
Part 3: paths
-----------------------------------------------------------
 paths::= Csss //list of set of list of C
 operations:
 -(Css paths).top()=Css
 
 -(Css paths).pop()=paths
 -empty.pop()=empty
 
 -paths.push(Css)=minimize(Css) paths
 
 -(Css paths) U (Css' paths')=(paths U paths').push(Css U Css')
 -paths U empty=empty U paths = paths
 
 -empty.prefix(_)=empty
 -paths.prefix(empty)= paths
 -(Cs1..Csn).prefix(Cs)=Cs.Cs1 .. Cs.Csn
 -(Css paths).prefix(Cs.C)= paths.prefix(Cs) U Css.prefix(Cs.C)
  //example of prefix:
  //((A)  (B)  (C)  (D)).prefix(W.E)
  // = ((W.E.A  W.B  C) (D))
  
### auxiliary paths operations:
 -reorganize(empty)=empty
 -reorganize(Ps)=Css0,...,Cssn
  Cssn!=empty
  Cs in Cssi' iff Thisi.Cs in Ps
  Cssi=minimize(Cssi')

 -minimize(Cs1..Csn)={Cs in Cs1..Csn | forall Csi, Csi._!=Cs}

 

-----------------------------------------------------------
Part 4: program
-----------------------------------------------------------


p::=L0;ctxLs //representing This0,...,Thisn // where This0.C refers to a class bound in L0, and (This1..ThisN).C to bindings in cxtL1..cxtLn respectively

program operations primitive:
-pop
 (L,ctxL,ctxLs).pop()=ctxL[L],ctxLs

-push
 (ctxL[L],ctxLs).push(ctxL,L)=L,ctxL,ctxLs

-top
 (L,_).top()=L
 
-update top //this is the only one that can detect evilPush
 (L,ctxLs).update(L')=L',ctxLs

-p.reducePath(This1.C.Cs)=This0.Cs
 if p=L,ctxL,_ and ctxL(C)=[] //ok also this one can be messed up by evilPush
-p.reducePath(This(n+2).Cs)=This(n+1).Cs'
   p.pop().reducePath(This(n+1).Cs)=Thisn.Cs'

- growFellow
  (L,ctxL,_).growFellow(p)==p.push(p.top()/ctxL)
     
program derived operations:

-get(n)
 p.get(0)=p.top()
 p.get(n+1)=p.pop().get(n)

 
-push(C)
 p.push(C)=p.push(ctxL,L)
 where ctxL[L]=p.top() and ctxL(C)=[]

-push(L)//non determinism is not relevant if update is not used
 p.push(L)=p.push(ctxL,L)//an evilPush can exist in implementation
 with ctxL[L]=p.top()
 //with p'=p.evilPush(L)   p'.top()==L, p'.pop()==p, p'.update(..) error! 


-navigate(Cs)
 p.navigate(C1..Ck)=p.push(C1)...push(Ck)

-navigate(P)
 p.navigate(Thisn.Cs)=p.pop()...pop().navigate(Cs) //with n pops
-p(P)
 p(P)=p.navigate(P).top()//but some implementation could be faster

- p.equiv(P,P')
  p.equiv(P,P) holds
  p.equiv(P,P')=p.equiv(P',P)
  p.equiv(P,P') if p.equiv(p.reducePath(P),P')
      
//Note for marco: equivalence between p and (Ln,fullP), that is all the other L0..L(n-1) are cached?
//going this way would require/allow to write better CloneWthPath/Locator
//to enforce the equivalence all the time we may have an updateTop operation, that do the hard work level by level.
//p.update(L), p.pop(), p.push(fullP)/p.push(Ldom,ctxC) //currently push(L) is supported and should be removed

------
James comments of program navigation failure:
First information file and position of unfound path.
Division in found part and unfound rest
Then location of the foundmost library literal



--------------------
Big General issue:
//NOTE:(first idea, revised after good sleep) TODO: if Size was still undefined, it should not compile
//ADD in normalization to collect as used path to normalize all @P in all comment in eC
//otherwise compilation may introduce compile errors in formerly ok classes
Revised Idea:
comments can contain any @Foo in C: e<<{/* @Foo */} exactly as 
any P is accepted, (even if is mispelled, since is not typed yet)
however, if @Foo (Or a part of a method type) does not exist/not exist yet
introspection will not return a type object for it..
now, what
A:Data<<{B f}
B:Data<<{A f}
should generated?
should we assume B to have == while we generate A?
we "can", since A is not typable, on this way we need an operator that do a redirect from a Doc /*@B*/ ?
looks very fishy, and not very 42ish since we would get the error after the generation
of B, too late to do an "if/catch" around Data<<{B f}.
For example Collections do such "if/catch" to see if == is there

currently available fix:
  Refactor.renamePath(\"A.B" to:\"B")<<{
  A:Data<<{B f  B:Data<<{}}
  B:Data<<{A f}
  ..
  //does not work if here there is something using A/B for metaprogramming, as in
  Foo:A<<{}
  }
Thus, mutually recursive Datas can not be used for metaprogramming
in their scope.. is that bad?
If we accept this pattern as not too bad,
do we still need 
Person:Foo<<{ Persons friends}//can not be Data anyway..
Persons:Collections.vector(of:Person)
 

//TODO:(this still stand) in typing, a class is well typed only if all @P exists

42: Attemping a to reconciliate 2 main trends in Metaprogramming

*Metaprogramming need to support (type) circular datatypes.
Those happens everywhere:
A very simple example, in the contex of a pure OO language,
a String should know his Int lenght(),
and a Int should be able to produce a String toS() representation
of itself.

*Metaprogramming in the functional setting is often seen as a way to
generate the behaviour of a function, knowing his type.
In OO setting, or in general when working with complex datatypes,
metaprogramming is very useful as a way to generate/complete/improve
the "shape" of such datatypes (see F# type providers).

On this line we consider a kind of metaprogramming were
C:e
is a class/datatype name and e is a metaprogramming (closed) expression
that, when executed will produce the datatype.
The shape of the generated datatype is decided by the expression behaviour,
not just by its type:
a type system on the line of MetaML would attempt to
type e as Class<Int m(); String foo()>
This approach requires the type of the result to be encoded in
the expression at the type level.
This disallow the very useful pattern
MyData: FromXML("xml data")//could be JSon or any other data format, including a DB
Where either the shape of the data is used to infer its type
or the data contains its schema (as in a database).

Problems tipical of circular initialization of values are lifted
as problems of circular generation of classes:
For example
A:{B toB() int size()}
B:{A toA() int size()}
is normal -relaxing- looking code with circularity of the type level
While
A:if hasMethodSize(B) then {B toB() int size()} else {B toB()} 
B:if hasMethodSize(A) then {A toA() int size()} else {A toA()}
seams broken code, at least as much as
a=b+1
b=a+1

To make a concrete example,
A:IfFieldsEqualsAddEquals({ Num num; B b;}) //two fields num and b
B:IfFieldsEqualsAddEquals({ Num num; A a;})
IfFieldsEqualsAddEquals should add an equals method that
propagate the check to its fields, but only if all the fields
have an equals method.
What should happens here? should we add equals to both A and B
or to none of the two?  


