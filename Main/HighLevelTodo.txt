todo:


remove () sugar and concrete header

discuss desugaring step by step:
  a sugared class can contain desugared nesteds. (reuse classes may have cached desugared/typed extra members)
  normalization -collect used paths will have a cache(idClassB->desugaredClassB)
    and the recursion will happen preferentially on the cache
  then normalizeAll will take desugared from cache and normalize them
  
  -desugaring a ClassB will desugar also its method bodies.
  -normalizing a ClassB will (call desugar by caching) and normalize up to the method headers.
  -we can sort of never observe that ClassB inside method bodies are desugared but not normalized since to extract
   that class we need to type that method first (and thus normalize such class)
    
if e return/error/exception/loop e 
should work without parenthesis around return/..

collections should have all methods,
remove become removeAll(elem:)
without become without(index:)
add contains as operator
collections for plugingwrappers

Unit:
  add mutiply(byUnitName) divide(byUnitName) dividing(byUnitName)
  units implements Unit.OfMeasure so that 
    Unit(Meter per:Kg) can check that==per by that.is(subtypeOf:per) and vice versa

is(subtype) should be is(subtypeOf)?

.equals(\) \ should make the constructor? this will allow
myDirection.equals(\north)

Refactor:
  go to a new notation where
  Refactor.operationName(...) create different Refactor.Name instances
  for example
  Refactor.rename(selector:\ of:\ to:\)
  in the guide, compare
  Refactor.rename(selector:\"..")
  to java versions
  Refactor.renameSelector("..")
  Refactor.rename(new Selector(".."))

use check vs use m(xes) with

add Reusable<><code == Use[code]<><Resource(\"reusableCode()")<><code


-use outer for outside with scope.
  discussing with James about what is the right semantic: just skipping the first
  Foo in Outer.Foo would reintroduce the Java bug Gilad bragged about?
  James suggests to skip the first "reuse". It is drastic but seams working
  Alternatives could be using skeletal types to introduce aliasings?

make @id == /*@id*/




a developed library can normalize its private names in the following way:
put in a list all the declared private numbers.
//assert the same number does not appear twice.
now for each number, its index is the new minimized number.
do a find/replace on the ast replacing the numbers with their index.
We can then find the max private number while reading the library, and we have
our starting freshPrivate number.

all operators except sum and addprivate do not need further attention?

'add a printableOutline() to nested class
' all public methods lv1,
' for all public nc lv*, if not annotated '@importanceX with x 1-*, with indented methods
' otherwise with all methods inline, nested after?

'Patch:{'no, remove metaguard entirelly, make methClash and co as
'nested in Refactor, and specific errors as nested in the operator?
'remove also the general DecorationUnfeasable?
'or on the opposite, have DecorationUnfeasable take a class, and print itself in a fancy way to look like a nested?
'  MetaGuard:{interface
'    DecorationUnfeasable:Message::$<<{<:MetaGuard}
'    }
'throws shortcuts: return { return }  exception errorOn/exceptionOn
    ' on Metaguard, Guard error e
    ' exceptionOn Metaguard InvalidAction"YEP"
' method Bool isConcrete() true iff all non state methods are implemented and
' all the interface methods are implemented.

'add a printableOutline() to nested class
' all public methods lv1,
' for all public nc lv*, if not annotated '@importanceX with x 1-*, with indented methods
' otherwise with all methods inline, nested after?

Obsolete(
  AddDocumentation for private state?
  -constructor must be first?
  -error if you was going to create a incoherent private state.
  -- no seams like addDocumentation must be called on the constructor, and make private all the potential state
  -to prevent capture of unwanted state methods, you can rename or implement them and then revert.
)

  -in deploy library, check that is closed code
  -test if from is applied when reading method types?
    -on literal, it should be frommed before passed to plugin
    -on external?
    -is it coherent that on external is frommed from the specific node, while from internal
    is frommed from the root?
  -we need to reorganize the errors, we need to add the ambigus redirect.
  -make opt have checktrue, ! & and | ?
  //complex: what should & second parameter be? boolable would prevent optimizations or not?
   -for collections, error S" still report stuff that should be done better.
  -opt and iterator: version generic, version to sum with outer0 and get a nested.
  -method from interfaces? just all interfaces - this will miss from?
Caching
   -desugaring import library, assume verified//done?
   -how it interact with trusted plugins?
    -is private normalized
    -get the set of used families


    -Sum and interfaces: sum can make interfaces circular. I think I will make this OK
    -sum must give error if sum class implementing interface with class directly defining an
    interface method of the first one. check this case

 Other plugins
    -db plugin
      design of resources: make connection string "is" resource handler?

 Language
  - method of interfaces can be refined, method refine T m(xs) eOpt
  -yeld? [with .... yeld(e) or yeld(v, separator:S", ")
  this would allow S"["[with n in names.vals() ( yeld(n,separator:S"; "))]"]"
 Syntax
    -concrete header have doc ('here fs)'and here  -- one of the two must be the place for @private?
    -all implemented interface names have docs, also simpler @ann syntax no new line

    - put << normalization in the sugar
    -use @as default? instead of #?
     so Map[   @[a;b;c];       @[a;b;c];       ]
    options[isVisible:@]   vs  options[isVisible:Bool.true()]
    Car(weels:@[....] doors:@[])
    RenamePath[@"Bar" to:@"Beer"]
    -operators <-  ->   \/ /\    <><  ><>  <=<  >=> ?? may be not?
    -usually ~ is give me internal, so rename all .binary repr?

Parsing errors:
  variable declare multiple times do not give any info, not even the file
 -'Add that a file can be also a commented class? but then this comment would be lost.
   on the other side, is ok that can not have comments at the start? -just do {' ?


Well formedness
  -well formedness, state must be all private or all public.
  -well formedness, no outer level bigger than max possible.
  -in Type system on T must check that T exists BEFORE checking the expr in the on
  - varName={if ... (return.. ) return ..} now give horrible error if type for varName is omitted.
    is ok to have error, but need a better one
well formedness: implemented or exceptions must be with no repetition, and with no Any.
Operators should preserve this
interfaces can be circular, check that no bug happens


------------------
   Check if what is under is done
    -private rename normalization
    collect privates:
     MethodLocator:{List<Member> mTail; List<Integer> mPos; Ms that, Ms newName}
     NestedLocator:{List<Member> mTail; List<Integer> mPos; String that, String newName}
     collectPrivates(cb)->set of MethodLocator,NestedLocator
     since no sum will be triggered, we can do all the rename together
     collectPrivates(cb) first collect the names, then compute the rename, keeping in account private state consistency
       that is, constructors get the same pedex appended to name AND fields, and field get the same pedex
     renamePrivates(collectPrivates(cb))
       clone with path:
         on nested, if collected rename
         on mwt if collected rename
         on mi nothing, never private
         on path, if collected rename, will need to explore only a "pure nested" part of the tail
         on meth call, same idea. Reuse guess receiver type from rename method.
    reuse of lower case, trust private normalized and desugared.
       replace all the name__N_0 in name__N'_redirectIndex
    normalizePrivates(newIndex) rename all the name__N_K in name__N'_index
    reuse on Uppercase, do desugar and do not do private renaming at all.// just for testing

