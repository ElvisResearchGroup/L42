todo:

discuss desugaring step by step:
  a sugared class can contain desugared nesteds. (reuse classes may have cached desugared/typed extra members)
  normalization -collect used paths will have a cache(idClassB->desugaredClassB)
    and the recursion will happen preferentially on the cache
  then normalizeAll will take desugared from cache and normalize them
  
  -desugaring a ClassB will desugar also its method bodies.
  -normalizing a ClassB will (call desugar by caching) and normalize up to the method headers.
  -we can sort of never observe that ClassB inside method bodies are desugared but not normalized since to extract
   that class we need to type that method first (and thus normalize such class)
    
new private with __ instead of @private (see later in this file)

if e return/error/exception/loop e 
should work without parenthesis around return/..

collections should have all methods,
remove become removeAll(elem:)
without become without(index:)
add contains as operator
collections for plugingwrappers

Unit:
  add mutiply(byUnitName) divide(byUnitName) dividing(byUnitName)
  units implements Unit.OfMeasure so that 
    Unit(Meter per:Kg) can check that==per by that.is(subtypeOf:per) and vice versa

is(subtype) should be is(subtypeOf)?

.equals(\) \ should make the constructor? this will allow
myDirection.equals(\north)

Refactor:
  go to a new notation where
  Refactor.operationName(...) create different Refactor.Name instances
  for example
  Refactor.rename(selector:\ of:\ to:\)
  in the guide, compare
  Refactor.rename(selector:\"..")
  to java versions
  Refactor.renameSelector("..")
  Refactor.rename(new Selector(".."))

use check vs use m(xes) with

add Reusable<><code == Use[code]<><Resource(\"reusableCode()")<><code


-use outer for outside with scope.
  discussing with James about what is the right semantic: just skipping the first
  Foo in Outer.Foo would reintroduce the Java bug Gilad bragged about?
  James suggests to skip the first "reuse". It is drastic but seams working
  Alternatives could be using skeletal types to introduce aliasings?

DONE:Many constructor is ok for a class?
solved with immk, mutk, readK. Surprisingly, lentk is unsund
in the sense that makes invariant checking impossible


se ho una classe che ha metodi astratti class non fwd, posso aggiungere i fwd e non rompo nulla?
potrebbe essere un passo nella normalizzazione? o nel tipaggio?
in ogni caso, non fwd dovrebbe generare non fwd costruttori?


//isFactory, isGetter, isSetter ensure invariants as seen later
Void checkCoherent(Library lib) (
  abss=lib.abstractMethods()
  if abss.isEmpty() (OK!!)
  ks=abss.clazz()[with m in abss.vals() (if m.isFactory() ( use[m]))]
  gs==abss.clazz()[with m in abss.vals() (if m.isGetter() ( use[m]))]
  ss==abss.clazz()[with m in abss.vals() (if m.isSetter() ( use[m]))]
  if ks.size()+gs.size()+ss.size()!=abss.size() (error _)
  if ks.isEmpty() (error _)
  with k1 in ks.vals() (// all ks need to define the same fields
    with k2 in ks.vals() ( sameParams(k1:k1,k2:k2))
    )
  //each field have  a set of all possible modifers.
 Mdf: Enum"type, capsule, imm, mut, lent, read"
 FMap:Map(from:S toMut:Mdf.Set)
 fmap=FMap[with f in ks.top().parameters().vals() ( use[from:f.name() to: Mdf.all())]

//for each constructor: type constr is wrong
 //imm+ constructor need imm+ or Type(all cheched before in isConstr)
 with k in ks (//need to assume all normalized types?
   with p in k.parameters().vals() (
     restrictK(
       acc:fMap.val(p.name()),
       oM:k.mdf(),  fM:p.type().mdf()
       )))
 with g in gs (restrictG(
   acc:this.extrat(fMap, ifPresent:g),
   oM:g.mdf(), fM:g.returnType().mdf()
   ))
 with s in ss (restrictS(
   acc:this.extrat(fMap, ifPresent:g),
   oM:s.mdf(), fM:s.parameters().top().type().mdf()
   ))

with p in fMap.pairs() (
  if p.val().isEmpty() (error _)
  )
  //otherwise, is coherent!
 )

class method
mut Introspection.Mdf.Set extract(mut FMap that,Introspection.Method ifPresent) {
  m=ifPresent
  s=m.nameAsField().toS()
  if !that.has(key:s) error _ //abs method m is not part of state
  return that.val(s)
  }

class method
Void restrictK(mut Introspection.Mdf.Set acc, Introspection.Mdf oM, Introspection.Mdf fM)
  acc.retain(all:{
    //oM never type,
    //oM==#mut implies fM !< #[#lent; #read]
    //oM<#[#imm;#capsule] implies fM<#[#imm;#capsule;#type]
    //  0type +3caps+ 3Imm + 4mut + 6lent+6read =22
    if fM==#type return #[#type]   //5
    if oM<#[#imm;#capsule] return #all-#type//4
    if fM==#imm return #[#imm;#read]//3
    Assert.Bug[ oM < #[#mut;#lent;#read] ]
    Assert.Bug[ fM < #[#capsule;#mut;#lent;#read] ] // 3*4= 12 left, but mut not with lent/read, thus 10 left
    if fM==#capsule  return #all-#type //3
    if fM==#mut  return #[#mut;#lent;#read]//3
    if fM==#lent return #[#lent ;#read]   //2
    return #[#read]//2
   })

method
Void restrictS(mut Introspection.Mdf.Set acc, Introspection.Mdf oM, Introspection.Mdf fM)
  acc.retain(all:{//oM only mut,lent;  oM==mut implies fM !< #[#lent; #read]  6+4=10
  if fM==#type return #[#type]   //2
  if fM==#imm return #[#imm;#read] //2
  if fM==#capsule return #all-#type //2
  if fM==#read return #[#read] //1
  if fM==#lent return #[#lent;#read] //1
  Assert.Bug[fM==#mut]
  if oM==#lent return #[#lent;#read] //1
  return #[#mut;#lent;#read]//1
 )}

 method
 Void restrictG(mut Introspection.Mdf.Set acc, Introspection.Mdf oM, Introspection.Mdf fM)
  acc.retain({
  //oM not type, fM ==capsule implies oM==capsule
  //oM< \[\read; \imm] implies  fM !< #[#mut; #lent]
  //oM== #lent implies  fM != #mut
 // 6caps+ 4lent+3read +3Imm+5mut   =21
    if fM==#type return #[#type]   //5     // 5caps+ 3lent+2read +2Imm+4mut
    if fM==#imm return #[#imm] //5      // 4caps+ 2lent+1read +1Imm+3mut
    Assert.Bug[oM==#read -> fM==#read]
    Assert.Bug[fM==#lent -> oM<#[#mut;#lent;#capsule]]
    if fM<#[#capsule;#lent] return #[#mut;#lent;#capsule] //1+3   // 2caps+ 1lent+1read +1Imm+2mut
    if fM==#read return #all-#type  //oM=imm,read,lent,mut,capsule 5   // 1caps+ 0lent+0read +0Imm+1mut
    Assert.Bug[fM==#mut]
    Assert.Bug[oM< #[#mut;#capsule]]
    return #[#mut;#capsule]//2  // 0caps+ 0lent+0read +0Imm+0mut
  )}

carefull in mdf+ includes capsule? yes, a "capsule" field is a capsule/mut/lent field.
Then a state is consistent if all fields have 1 or more candidate mdf.


for example
type method mut Outer0 k1(mut Foo n) ' with the actual type of the fields
type method Outer0 k2(Foo n) ' the imm constructor, can always take imm fields
 the imm constructor is ok even in case of lent fields.

 multiple constr must agree on the names of fields, and on their path, but the mdf may differ.
 fields getters,
 method Foo n() ' the imm getters can always return imm stuff

 go by cases:
 imm F x: can have
   read-imm-/lent-imm-/mut-imm-/imm-imm- getter,
   lent-imm+/mut-imm+ setter,
   mut-imm+/capsule-imm+/lent-imm+/read-imm+/imm-imm+ constr
 mut F x:
   read-read/lent-lent-/mut-mut-/imm-imm- getter
   lent-capsule/mut-mut setter
   mut-mut+/capsule-capsule/lent-mut/read-read+/imm-imm+ constr
   *note: lent-lent constr *may* be allowed in special cases: only if is a single field OR if no mut-mut getter provided for more than 1 field
lent F x:
   read-read/lent-lent-/imm-imm- getter
   lent-lent+/mut-lent+ setter
   mut-mut+/capsule-capsule/lent-lent+/read-read+/imm-imm+ constr
read F x:
   read-read/lent-read/imm-imm- getter
   lent-read+/mut-read+ setter
   mut-(mut+,Imm)/capsule-capsule/lent-lent+/read-read+/imm-imm+ constr
 capsule F x:
   read-read/lent-lent-/mut-lent-/imm-imm- getter
   lent-capsule/mut-capsule setter
   mut-capsule/capsule-capsule/lent-capsule/read-capsule/imm-imm+ constr
-----
wither on method  Outer0 with(imm T x)
clone on read method mut Outer0 clone(orignal T x)//all capsule fields are not defaulted? defaulted wih clone()?

what if (Ti xi) create both
#apply and #immK
and Ti xi create no constructors?

make @id == /*@id*/




prviati:
method selector contiene un long int. -1 per non privato
@private non ha semantica nel linguaggio,
una library compilata e' ben formata se tutti i nomi dichiarati con forma a__n sono dichiarati una volta sola al suo interno, e non ridichiara nomi dichiarati fuori. (quindi hiding is ok)
operatori che prendono cose ben formate (in un certo programa)producono cose ben formate (nello stesso programma).
su chiamata di metodo(small step) o su resource.get() on compiled i nomi sono rimpiazzati.

una classB e' normalizata (non solo ben formata) se
ha nomi privati consegutivi e ordinati nei sottoalberi,
e ogni classB cachia min e max (non solo le normalizzate).
Per efficiacia di implementazione, normalizziamo tutte le librerie del programma iniziale (reused).

all operators except sum and addprivate do not need further attention?
sum a,b if interval disoint, just sum and make union of interval
if not disjoint, normalize both starting from higer number ever committed (different from higher reached).
On commit, set up a new max committed
On add private, just extend the interval by 1 and use such index.

' make multiple normalization not insert multiple %$ stuff
' method Bool isConcrete() true iff all non state methods are implemented and
' all the interface methods are implemented.

'add a printableOutline() to nested class
' all public methods lv1,
' for all public nc lv*, if not annotated '@importanceX with x 1-*, with indented methods
' otherwise with all methods inline, nested after?

'Patch:{'no, remove metaguard entirelly, make methClash and co as
'nested in Refactor, and specific errors as nested in the operator?
'remove also the general DecorationUnfeasable?
'or on the opposite, have DecorationUnfeasable take a class, and print itself in a fancy way to look like a nested?
'  MetaGuard:{interface
'    DecorationUnfeasable:Message::$<<{<:MetaGuard}
'    }
'throws shortcuts: return { return }  exception errorOn/exceptionOn
    ' on Metaguard, Guard error e
    ' exceptionOn Metaguard InvalidAction"YEP"
' method Bool isConcrete() true iff all non state methods are implemented and
' all the interface methods are implemented.

'add a printableOutline() to nested class
' all public methods lv1,
' for all public nc lv*, if not annotated '@importanceX with x 1-*, with indented methods
' otherwise with all methods inline, nested after?

Obsolete(
  AddDocumentation for private state?
  -constructor must be first?
  -error if you was going to create a incoherent private state.
  -- no seams like addDocumentation must be called on the constructor, and make private all the potential state
  -to prevent capture of unwanted state methods, you can rename or implement them and then revert.
)

  -in deploy library, check that is closed code
  -test if from is applied when reading method types?
    -on literal, it should be frommed before passed to plugin
    -on external?
    -is it coherent that on external is frommed from the specific node, while from internal
    is frommed from the root?
  -we need to reorganize the errors, we need to add the ambigus redirect.
  -make opt have checktrue, ! & and | ?
  //complex: what should & second parameter be? boolable would prevent optimizations or not?
   -for collections, error S" still report stuff that should be done better.
  -opt and iterator: version generic, version to sum with outer0 and get a nested.
  -method from interfaces? just all interfaces - this will miss from?
Caching
   -desugaring import library, assume verified//done?
   -how it interact with trusted plugins?
    -is private normalized
    -get the set of used families


    -Sum and interfaces: sum can make interfaces circular. I think I will make this OK
    -sum must give error if sum class implementing interface with class directly defining an
    interface method of the first one. check this case

 Other plugins
    -db plugin
      design of resources: make connection string "is" resource handler?

 Language
  - method of interfaces can be refined, method refine T m(xs) eOpt
  -yeld? [with .... yeld(e) or yeld(v, separator:S", ")
  this would allow S"["[with n in names.vals() ( yeld(n,separator:S"; "))]"]"
 Syntax
    -concrete header have doc ('here fs)'and here  -- one of the two must be the place for @private?
    -all implemented interface names have docs, also simpler @ann syntax no new line

    - put << normalization in the sugar
    -use @as default? instead of #?
     so Map[   @[a;b;c];       @[a;b;c];       ]
    options[isVisible:@]   vs  options[isVisible:Bool.true()]
    Car(weels:@[....] doors:@[])
    RenamePath[@"Bar" to:@"Beer"]
    -operators <-  ->   \/ /\    <><  ><>  <=<  >=> ?? may be not?
    -usually ~ is give me internal, so rename all .binary repr?

Parsing errors:
  variable declare multiple times do not give any info, not even the file
 -'Add that a file can be also a commented class? but then this comment would be lost.
   on the other side, is ok that can not have comments at the start? -just do {' ?


Well formedness
  -well formedness, state must be all private or all public.
  -well formedness, no outer level bigger than max possible.
  -in Type system on T must check that T exists BEFORE checking the expr in the on
  - varName={if ... (return.. ) return ..} now give horrible error if type for varName is omitted.
    is ok to have error, but need a better one
well formedness: implemented or exceptions must be with no repetition, and with no Any.
Operators should preserve this
interfaces can be circular, check that no bug happens


------------------
   Check if what is under is done
    -private rename normalization
    collect privates:
     MethodLocator:{List<Member> mTail; List<Integer> mPos; Ms that, Ms newName}
     NestedLocator:{List<Member> mTail; List<Integer> mPos; String that, String newName}
     collectPrivates(cb)->set of MethodLocator,NestedLocator
     since no sum will be triggered, we can do all the rename together
     collectPrivates(cb) first collect the names, then compute the rename, keeping in account private state consistency
       that is, constructors get the same pedex appended to name AND fields, and field get the same pedex
     renamePrivates(collectPrivates(cb))
       clone with path:
         on nested, if collected rename
         on mwt if collected rename
         on mi nothing, never private
         on path, if collected rename, will need to explore only a "pure nested" part of the tail
         on meth call, same idea. Reuse guess receiver type from rename method.
    reuse of lower case, trust private normalized and desugared.
       replace all the name__N_0 in name__N'_redirectIndex
    normalizePrivates(newIndex) rename all the name__N_K in name__N'_index
    reuse on Uppercase, do desugar and do not do private renaming at all.// just for testing

