// Generated by delombok at Tue Nov 06 11:17:02 NZDT 2018
package ast;

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import ast.Ast.Mdf;
import ast.L42F.Cn;
import l42FVisitors.JVisitor;

public class MiniJ {

  public static final class CD {
    private final boolean isInterface;
    private final String cn;
    private final List<String> cns;
    private final List<M> ms;

    @java.lang.SuppressWarnings("all")
    public CD(final boolean isInterface, final String cn, final List<String> cns, final List<M> ms) {
      this.isInterface = isInterface;
      this.cn = cn;
      this.cns = cns;
      this.ms = ms;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isInterface() {
      return this.isInterface;
    }

    @java.lang.SuppressWarnings("all")
    public String getCn() {
      return this.cn;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getCns() {
      return this.cns;
    }

    @java.lang.SuppressWarnings("all")
    public List<M> getMs() {
      return this.ms;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.CD)) return false;
      final MiniJ.CD other = (MiniJ.CD) o;
      if (this.isInterface() != other.isInterface()) return false;
      final java.lang.Object this$cn = this.getCn();
      final java.lang.Object other$cn = other.getCn();
      if (this$cn == null ? other$cn != null : !this$cn.equals(other$cn)) return false;
      final java.lang.Object this$cns = this.getCns();
      final java.lang.Object other$cns = other.getCns();
      if (this$cns == null ? other$cns != null : !this$cns.equals(other$cns)) return false;
      final java.lang.Object this$ms = this.getMs();
      final java.lang.Object other$ms = other.getMs();
      if (this$ms == null ? other$ms != null : !this$ms.equals(other$ms)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = result * PRIME + (this.isInterface() ? 79 : 97);
      final java.lang.Object $cn = this.getCn();
      result = result * PRIME + ($cn == null ? 43 : $cn.hashCode());
      final java.lang.Object $cns = this.getCns();
      result = result * PRIME + ($cns == null ? 43 : $cns.hashCode());
      final java.lang.Object $ms = this.getMs();
      result = result * PRIME + ($ms == null ? 43 : $ms.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.CD(isInterface=" + this.isInterface() + ", cn=" + this.getCn() + ", cns=" + this.getCns() + ", ms=" + this.getMs() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public CD withInterface(final boolean isInterface) {
      return this.isInterface == isInterface ? this : new CD(isInterface, this.cn, this.cns, this.ms);
    }

    @java.lang.SuppressWarnings("all")
    public CD withCn(final String cn) {
      return this.cn == cn ? this : new CD(this.isInterface, cn, this.cns, this.ms);
    }

    @java.lang.SuppressWarnings("all")
    public CD withCns(final List<String> cns) {
      return this.cns == cns ? this : new CD(this.isInterface, this.cn, cns, this.ms);
    }

    @java.lang.SuppressWarnings("all")
    public CD withMs(final List<M> ms) {
      return this.ms == ms ? this : new CD(this.isInterface, this.cn, this.cns, ms);
    }
  }


  public static final class M {
    private final boolean isStatic;
    private final String retT;
    private final String name;
    private final List<String> ts;
    private final List<String> xs;
    private final S body;

    @java.lang.SuppressWarnings("all")
    public M(final boolean isStatic, final String retT, final String name, final List<String> ts, final List<String> xs, final S body) {
      this.isStatic = isStatic;
      this.retT = retT;
      this.name = name;
      this.ts = ts;
      this.xs = xs;
      this.body = body;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isStatic() {
      return this.isStatic;
    }

    @java.lang.SuppressWarnings("all")
    public String getRetT() {
      return this.retT;
    }

    @java.lang.SuppressWarnings("all")
    public String getName() {
      return this.name;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getTs() {
      return this.ts;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getXs() {
      return this.xs;
    }

    @java.lang.SuppressWarnings("all")
    public S getBody() {
      return this.body;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.M)) return false;
      final MiniJ.M other = (MiniJ.M) o;
      if (this.isStatic() != other.isStatic()) return false;
      final java.lang.Object this$retT = this.getRetT();
      final java.lang.Object other$retT = other.getRetT();
      if (this$retT == null ? other$retT != null : !this$retT.equals(other$retT)) return false;
      final java.lang.Object this$name = this.getName();
      final java.lang.Object other$name = other.getName();
      if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
      final java.lang.Object this$ts = this.getTs();
      final java.lang.Object other$ts = other.getTs();
      if (this$ts == null ? other$ts != null : !this$ts.equals(other$ts)) return false;
      final java.lang.Object this$xs = this.getXs();
      final java.lang.Object other$xs = other.getXs();
      if (this$xs == null ? other$xs != null : !this$xs.equals(other$xs)) return false;
      final java.lang.Object this$body = this.getBody();
      final java.lang.Object other$body = other.getBody();
      if (this$body == null ? other$body != null : !this$body.equals(other$body)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = result * PRIME + (this.isStatic() ? 79 : 97);
      final java.lang.Object $retT = this.getRetT();
      result = result * PRIME + ($retT == null ? 43 : $retT.hashCode());
      final java.lang.Object $name = this.getName();
      result = result * PRIME + ($name == null ? 43 : $name.hashCode());
      final java.lang.Object $ts = this.getTs();
      result = result * PRIME + ($ts == null ? 43 : $ts.hashCode());
      final java.lang.Object $xs = this.getXs();
      result = result * PRIME + ($xs == null ? 43 : $xs.hashCode());
      final java.lang.Object $body = this.getBody();
      result = result * PRIME + ($body == null ? 43 : $body.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.M(isStatic=" + this.isStatic() + ", retT=" + this.getRetT() + ", name=" + this.getName() + ", ts=" + this.getTs() + ", xs=" + this.getXs() + ", body=" + this.getBody() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public M withStatic(final boolean isStatic) {
      return this.isStatic == isStatic ? this : new M(isStatic, this.retT, this.name, this.ts, this.xs, this.body);
    }

    @java.lang.SuppressWarnings("all")
    public M withRetT(final String retT) {
      return this.retT == retT ? this : new M(this.isStatic, retT, this.name, this.ts, this.xs, this.body);
    }

    @java.lang.SuppressWarnings("all")
    public M withName(final String name) {
      return this.name == name ? this : new M(this.isStatic, this.retT, name, this.ts, this.xs, this.body);
    }

    @java.lang.SuppressWarnings("all")
    public M withTs(final List<String> ts) {
      return this.ts == ts ? this : new M(this.isStatic, this.retT, this.name, ts, this.xs, this.body);
    }

    @java.lang.SuppressWarnings("all")
    public M withXs(final List<String> xs) {
      return this.xs == xs ? this : new M(this.isStatic, this.retT, this.name, this.ts, xs, this.body);
    }

    @java.lang.SuppressWarnings("all")
    public M withBody(final S body) {
      return this.body == body ? this : new M(this.isStatic, this.retT, this.name, this.ts, this.xs, body);
    }
  }


  public static interface S {
    <V> V accept(JVisitor<V> v);
  }


  public static interface E extends S {
  }


  public static final class VarDec implements S {
    private final String cn;
    private final String x;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public VarDec(final String cn, final String x) {
      this.cn = cn;
      this.x = x;
    }

    @java.lang.SuppressWarnings("all")
    public String getCn() {
      return this.cn;
    }

    @java.lang.SuppressWarnings("all")
    public String getX() {
      return this.x;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.VarDec)) return false;
      final MiniJ.VarDec other = (MiniJ.VarDec) o;
      final java.lang.Object this$cn = this.getCn();
      final java.lang.Object other$cn = other.getCn();
      if (this$cn == null ? other$cn != null : !this$cn.equals(other$cn)) return false;
      final java.lang.Object this$x = this.getX();
      final java.lang.Object other$x = other.getX();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $cn = this.getCn();
      result = result * PRIME + ($cn == null ? 43 : $cn.hashCode());
      final java.lang.Object $x = this.getX();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.VarDec(cn=" + this.getCn() + ", x=" + this.getX() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public VarDec withCn(final String cn) {
      return this.cn == cn ? this : new VarDec(cn, this.x);
    }

    @java.lang.SuppressWarnings("all")
    public VarDec withX(final String x) {
      return this.x == x ? this : new VarDec(this.cn, x);
    }
  }


  public static final class VarAss implements S {
    private final String x;
    private final E e;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public VarAss(final String x, final E e) {
      this.x = x;
      this.e = e;
    }

    @java.lang.SuppressWarnings("all")
    public String getX() {
      return this.x;
    }

    @java.lang.SuppressWarnings("all")
    public E getE() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.VarAss)) return false;
      final MiniJ.VarAss other = (MiniJ.VarAss) o;
      final java.lang.Object this$x = this.getX();
      final java.lang.Object other$x = other.getX();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      final java.lang.Object this$e = this.getE();
      final java.lang.Object other$e = other.getE();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $x = this.getX();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      final java.lang.Object $e = this.getE();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.VarAss(x=" + this.getX() + ", e=" + this.getE() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public VarAss withX(final String x) {
      return this.x == x ? this : new VarAss(x, this.e);
    }

    @java.lang.SuppressWarnings("all")
    public VarAss withE(final E e) {
      return this.e == e ? this : new VarAss(this.x, e);
    }
  }


  public static final class If implements S {
    private final String cond;
    private final S then;
    private final S _else;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public If(final String cond, final S then, final S _else) {
      this.cond = cond;
      this.then = then;
      this._else = _else;
    }

    @java.lang.SuppressWarnings("all")
    public String getCond() {
      return this.cond;
    }

    @java.lang.SuppressWarnings("all")
    public S getThen() {
      return this.then;
    }

    @java.lang.SuppressWarnings("all")
    public S get_else() {
      return this._else;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.If)) return false;
      final MiniJ.If other = (MiniJ.If) o;
      final java.lang.Object this$cond = this.getCond();
      final java.lang.Object other$cond = other.getCond();
      if (this$cond == null ? other$cond != null : !this$cond.equals(other$cond)) return false;
      final java.lang.Object this$then = this.getThen();
      final java.lang.Object other$then = other.getThen();
      if (this$then == null ? other$then != null : !this$then.equals(other$then)) return false;
      final java.lang.Object this$_else = this.get_else();
      final java.lang.Object other$_else = other.get_else();
      if (this$_else == null ? other$_else != null : !this$_else.equals(other$_else)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $cond = this.getCond();
      result = result * PRIME + ($cond == null ? 43 : $cond.hashCode());
      final java.lang.Object $then = this.getThen();
      result = result * PRIME + ($then == null ? 43 : $then.hashCode());
      final java.lang.Object $_else = this.get_else();
      result = result * PRIME + ($_else == null ? 43 : $_else.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.If(cond=" + this.getCond() + ", then=" + this.getThen() + ", _else=" + this.get_else() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public If withCond(final String cond) {
      return this.cond == cond ? this : new If(cond, this.then, this._else);
    }

    @java.lang.SuppressWarnings("all")
    public If withThen(final S then) {
      return this.then == then ? this : new If(this.cond, then, this._else);
    }

    @java.lang.SuppressWarnings("all")
    public If with_else(final S _else) {
      return this._else == _else ? this : new If(this.cond, this.then, _else);
    }
  }


  public static final class IfTypeCase implements S {
    private final boolean positive;
    private final String x0;
    private final String x1;
    private final String cn;
    private final S then;
    private final S _else;

    //if(x0.inner() instanceof cn){cn x1=(cn)x0.inner(); [then]}
    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public IfTypeCase(final boolean positive, final String x0, final String x1, final String cn, final S then, final S _else) {
      this.positive = positive;
      this.x0 = x0;
      this.x1 = x1;
      this.cn = cn;
      this.then = then;
      this._else = _else;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isPositive() {
      return this.positive;
    }

    @java.lang.SuppressWarnings("all")
    public String getX0() {
      return this.x0;
    }

    @java.lang.SuppressWarnings("all")
    public String getX1() {
      return this.x1;
    }

    @java.lang.SuppressWarnings("all")
    public String getCn() {
      return this.cn;
    }

    @java.lang.SuppressWarnings("all")
    public S getThen() {
      return this.then;
    }

    @java.lang.SuppressWarnings("all")
    public S get_else() {
      return this._else;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.IfTypeCase)) return false;
      final MiniJ.IfTypeCase other = (MiniJ.IfTypeCase) o;
      if (this.isPositive() != other.isPositive()) return false;
      final java.lang.Object this$x0 = this.getX0();
      final java.lang.Object other$x0 = other.getX0();
      if (this$x0 == null ? other$x0 != null : !this$x0.equals(other$x0)) return false;
      final java.lang.Object this$x1 = this.getX1();
      final java.lang.Object other$x1 = other.getX1();
      if (this$x1 == null ? other$x1 != null : !this$x1.equals(other$x1)) return false;
      final java.lang.Object this$cn = this.getCn();
      final java.lang.Object other$cn = other.getCn();
      if (this$cn == null ? other$cn != null : !this$cn.equals(other$cn)) return false;
      final java.lang.Object this$then = this.getThen();
      final java.lang.Object other$then = other.getThen();
      if (this$then == null ? other$then != null : !this$then.equals(other$then)) return false;
      final java.lang.Object this$_else = this.get_else();
      final java.lang.Object other$_else = other.get_else();
      if (this$_else == null ? other$_else != null : !this$_else.equals(other$_else)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = result * PRIME + (this.isPositive() ? 79 : 97);
      final java.lang.Object $x0 = this.getX0();
      result = result * PRIME + ($x0 == null ? 43 : $x0.hashCode());
      final java.lang.Object $x1 = this.getX1();
      result = result * PRIME + ($x1 == null ? 43 : $x1.hashCode());
      final java.lang.Object $cn = this.getCn();
      result = result * PRIME + ($cn == null ? 43 : $cn.hashCode());
      final java.lang.Object $then = this.getThen();
      result = result * PRIME + ($then == null ? 43 : $then.hashCode());
      final java.lang.Object $_else = this.get_else();
      result = result * PRIME + ($_else == null ? 43 : $_else.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.IfTypeCase(positive=" + this.isPositive() + ", x0=" + this.getX0() + ", x1=" + this.getX1() + ", cn=" + this.getCn() + ", then=" + this.getThen() + ", _else=" + this.get_else() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public IfTypeCase withPositive(final boolean positive) {
      return this.positive == positive ? this : new IfTypeCase(positive, this.x0, this.x1, this.cn, this.then, this._else);
    }

    @java.lang.SuppressWarnings("all")
    public IfTypeCase withX0(final String x0) {
      return this.x0 == x0 ? this : new IfTypeCase(this.positive, x0, this.x1, this.cn, this.then, this._else);
    }

    @java.lang.SuppressWarnings("all")
    public IfTypeCase withX1(final String x1) {
      return this.x1 == x1 ? this : new IfTypeCase(this.positive, this.x0, x1, this.cn, this.then, this._else);
    }

    @java.lang.SuppressWarnings("all")
    public IfTypeCase withCn(final String cn) {
      return this.cn == cn ? this : new IfTypeCase(this.positive, this.x0, this.x1, cn, this.then, this._else);
    }

    @java.lang.SuppressWarnings("all")
    public IfTypeCase withThen(final S then) {
      return this.then == then ? this : new IfTypeCase(this.positive, this.x0, this.x1, this.cn, then, this._else);
    }

    @java.lang.SuppressWarnings("all")
    public IfTypeCase with_else(final S _else) {
      return this._else == _else ? this : new IfTypeCase(this.positive, this.x0, this.x1, this.cn, this.then, _else);
    }
  }


  public static final class WhileTrue implements S {
    private final String label;
    private final S s;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public WhileTrue(final String label, final S s) {
      this.label = label;
      this.s = s;
    }

    @java.lang.SuppressWarnings("all")
    public String getLabel() {
      return this.label;
    }

    @java.lang.SuppressWarnings("all")
    public S getS() {
      return this.s;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.WhileTrue)) return false;
      final MiniJ.WhileTrue other = (MiniJ.WhileTrue) o;
      final java.lang.Object this$label = this.getLabel();
      final java.lang.Object other$label = other.getLabel();
      if (this$label == null ? other$label != null : !this$label.equals(other$label)) return false;
      final java.lang.Object this$s = this.getS();
      final java.lang.Object other$s = other.getS();
      if (this$s == null ? other$s != null : !this$s.equals(other$s)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $label = this.getLabel();
      result = result * PRIME + ($label == null ? 43 : $label.hashCode());
      final java.lang.Object $s = this.getS();
      result = result * PRIME + ($s == null ? 43 : $s.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.WhileTrue(label=" + this.getLabel() + ", s=" + this.getS() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public WhileTrue withLabel(final String label) {
      return this.label == label ? this : new WhileTrue(label, this.s);
    }

    @java.lang.SuppressWarnings("all")
    public WhileTrue withS(final S s) {
      return this.s == s ? this : new WhileTrue(this.label, s);
    }
  }


  public static final class Break implements S {
    private final String label;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public Break(final String label) {
      this.label = label;
    }

    @java.lang.SuppressWarnings("all")
    public String getLabel() {
      return this.label;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.Break)) return false;
      final MiniJ.Break other = (MiniJ.Break) o;
      final java.lang.Object this$label = this.getLabel();
      final java.lang.Object other$label = other.getLabel();
      if (this$label == null ? other$label != null : !this$label.equals(other$label)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $label = this.getLabel();
      result = result * PRIME + ($label == null ? 43 : $label.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.Break(label=" + this.getLabel() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public Break withLabel(final String label) {
      return this.label == label ? this : new Break(label);
    }
  }


  public static final class Return implements S {
    private final E e;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public Return(final E e) {
      this.e = e;
    }

    @java.lang.SuppressWarnings("all")
    public E getE() {
      return this.e;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.Return)) return false;
      final MiniJ.Return other = (MiniJ.Return) o;
      final java.lang.Object this$e = this.getE();
      final java.lang.Object other$e = other.getE();
      if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $e = this.getE();
      result = result * PRIME + ($e == null ? 43 : $e.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.Return(e=" + this.getE() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public Return withE(final E e) {
      return this.e == e ? this : new Return(e);
    }
  }


  public static final class Throw implements S {
    //throw new cn(x) or throw x if cn==null;
    private final Ast.SignalKind k;
    private final String x;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public Throw(final Ast.SignalKind k, final String x) {
      this.k = k;
      this.x = x;
    }

    @java.lang.SuppressWarnings("all")
    public Ast.SignalKind getK() {
      return this.k;
    }

    @java.lang.SuppressWarnings("all")
    public String getX() {
      return this.x;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.Throw)) return false;
      final MiniJ.Throw other = (MiniJ.Throw) o;
      final java.lang.Object this$k = this.getK();
      final java.lang.Object other$k = other.getK();
      if (this$k == null ? other$k != null : !this$k.equals(other$k)) return false;
      final java.lang.Object this$x = this.getX();
      final java.lang.Object other$x = other.getX();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $k = this.getK();
      result = result * PRIME + ($k == null ? 43 : $k.hashCode());
      final java.lang.Object $x = this.getX();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.Throw(k=" + this.getK() + ", x=" + this.getX() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public Throw withK(final Ast.SignalKind k) {
      return this.k == k ? this : new Throw(k, this.x);
    }

    @java.lang.SuppressWarnings("all")
    public Throw withX(final String x) {
      return this.x == x ? this : new Throw(this.k, x);
    }
  }


  public static final class Try implements S {
    private final B b;
    private final List<K> ks;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public Try(final B b, final List<K> ks) {
      this.b = b;
      this.ks = ks;
    }

    @java.lang.SuppressWarnings("all")
    public B getB() {
      return this.b;
    }

    @java.lang.SuppressWarnings("all")
    public List<K> getKs() {
      return this.ks;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.Try)) return false;
      final MiniJ.Try other = (MiniJ.Try) o;
      final java.lang.Object this$b = this.getB();
      final java.lang.Object other$b = other.getB();
      if (this$b == null ? other$b != null : !this$b.equals(other$b)) return false;
      final java.lang.Object this$ks = this.getKs();
      final java.lang.Object other$ks = other.getKs();
      if (this$ks == null ? other$ks != null : !this$ks.equals(other$ks)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $b = this.getB();
      result = result * PRIME + ($b == null ? 43 : $b.hashCode());
      final java.lang.Object $ks = this.getKs();
      result = result * PRIME + ($ks == null ? 43 : $ks.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.Try(b=" + this.getB() + ", ks=" + this.getKs() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public Try withB(final B b) {
      return this.b == b ? this : new Try(b, this.ks);
    }

    @java.lang.SuppressWarnings("all")
    public Try withKs(final List<K> ks) {
      return this.ks == ks ? this : new Try(this.b, ks);
    }
  }


  public static final class K {
    private final ast.Ast.SignalKind t;
    private final String x;
    private final B b;

    @java.lang.SuppressWarnings("all")
    public K(final ast.Ast.SignalKind t, final String x, final B b) {
      this.t = t;
      this.x = x;
      this.b = b;
    }

    @java.lang.SuppressWarnings("all")
    public ast.Ast.SignalKind getT() {
      return this.t;
    }

    @java.lang.SuppressWarnings("all")
    public String getX() {
      return this.x;
    }

    @java.lang.SuppressWarnings("all")
    public B getB() {
      return this.b;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.K)) return false;
      final MiniJ.K other = (MiniJ.K) o;
      final java.lang.Object this$t = this.getT();
      final java.lang.Object other$t = other.getT();
      if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
      final java.lang.Object this$x = this.getX();
      final java.lang.Object other$x = other.getX();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      final java.lang.Object this$b = this.getB();
      final java.lang.Object other$b = other.getB();
      if (this$b == null ? other$b != null : !this$b.equals(other$b)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $t = this.getT();
      result = result * PRIME + ($t == null ? 43 : $t.hashCode());
      final java.lang.Object $x = this.getX();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      final java.lang.Object $b = this.getB();
      result = result * PRIME + ($b == null ? 43 : $b.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.K(t=" + this.getT() + ", x=" + this.getX() + ", b=" + this.getB() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public K withT(final ast.Ast.SignalKind t) {
      return this.t == t ? this : new K(t, this.x, this.b);
    }

    @java.lang.SuppressWarnings("all")
    public K withX(final String x) {
      return this.x == x ? this : new K(this.t, x, this.b);
    }

    @java.lang.SuppressWarnings("all")
    public K withB(final B b) {
      return this.b == b ? this : new K(this.t, this.x, b);
    }
  }


  public static final class MCall implements E {
    private final String cn;
    private final String mName;
    private final List<String> xs;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public MCall(final String cn, final String mName, final List<String> xs) {
      this.cn = cn;
      this.mName = mName;
      this.xs = xs;
    }

    @java.lang.SuppressWarnings("all")
    public String getCn() {
      return this.cn;
    }

    @java.lang.SuppressWarnings("all")
    public String getMName() {
      return this.mName;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getXs() {
      return this.xs;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.MCall)) return false;
      final MiniJ.MCall other = (MiniJ.MCall) o;
      final java.lang.Object this$cn = this.getCn();
      final java.lang.Object other$cn = other.getCn();
      if (this$cn == null ? other$cn != null : !this$cn.equals(other$cn)) return false;
      final java.lang.Object this$mName = this.getMName();
      final java.lang.Object other$mName = other.getMName();
      if (this$mName == null ? other$mName != null : !this$mName.equals(other$mName)) return false;
      final java.lang.Object this$xs = this.getXs();
      final java.lang.Object other$xs = other.getXs();
      if (this$xs == null ? other$xs != null : !this$xs.equals(other$xs)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $cn = this.getCn();
      result = result * PRIME + ($cn == null ? 43 : $cn.hashCode());
      final java.lang.Object $mName = this.getMName();
      result = result * PRIME + ($mName == null ? 43 : $mName.hashCode());
      final java.lang.Object $xs = this.getXs();
      result = result * PRIME + ($xs == null ? 43 : $xs.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.MCall(cn=" + this.getCn() + ", mName=" + this.getMName() + ", xs=" + this.getXs() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public MCall withCn(final String cn) {
      return this.cn == cn ? this : new MCall(cn, this.mName, this.xs);
    }

    @java.lang.SuppressWarnings("all")
    public MCall withMName(final String mName) {
      return this.mName == mName ? this : new MCall(this.cn, mName, this.xs);
    }

    @java.lang.SuppressWarnings("all")
    public MCall withXs(final List<String> xs) {
      return this.xs == xs ? this : new MCall(this.cn, this.mName, xs);
    }
  }


  public static final class UseCall implements E {
    private final Ast.Doc doc;
    private final platformSpecific.fakeInternet.PluginWithPart.UsingInfo ui;
    private final String mName;
    private final List<String> xs;
    private final S inner;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public UseCall(final Ast.Doc doc, final platformSpecific.fakeInternet.PluginWithPart.UsingInfo ui, final String mName, final List<String> xs, final S inner) {
      this.doc = doc;
      this.ui = ui;
      this.mName = mName;
      this.xs = xs;
      this.inner = inner;
    }

    @java.lang.SuppressWarnings("all")
    public Ast.Doc getDoc() {
      return this.doc;
    }

    @java.lang.SuppressWarnings("all")
    public platformSpecific.fakeInternet.PluginWithPart.UsingInfo getUi() {
      return this.ui;
    }

    @java.lang.SuppressWarnings("all")
    public String getMName() {
      return this.mName;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getXs() {
      return this.xs;
    }

    @java.lang.SuppressWarnings("all")
    public S getInner() {
      return this.inner;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.UseCall)) return false;
      final MiniJ.UseCall other = (MiniJ.UseCall) o;
      final java.lang.Object this$doc = this.getDoc();
      final java.lang.Object other$doc = other.getDoc();
      if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
      final java.lang.Object this$ui = this.getUi();
      final java.lang.Object other$ui = other.getUi();
      if (this$ui == null ? other$ui != null : !this$ui.equals(other$ui)) return false;
      final java.lang.Object this$mName = this.getMName();
      final java.lang.Object other$mName = other.getMName();
      if (this$mName == null ? other$mName != null : !this$mName.equals(other$mName)) return false;
      final java.lang.Object this$xs = this.getXs();
      final java.lang.Object other$xs = other.getXs();
      if (this$xs == null ? other$xs != null : !this$xs.equals(other$xs)) return false;
      final java.lang.Object this$inner = this.getInner();
      final java.lang.Object other$inner = other.getInner();
      if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $doc = this.getDoc();
      result = result * PRIME + ($doc == null ? 43 : $doc.hashCode());
      final java.lang.Object $ui = this.getUi();
      result = result * PRIME + ($ui == null ? 43 : $ui.hashCode());
      final java.lang.Object $mName = this.getMName();
      result = result * PRIME + ($mName == null ? 43 : $mName.hashCode());
      final java.lang.Object $xs = this.getXs();
      result = result * PRIME + ($xs == null ? 43 : $xs.hashCode());
      final java.lang.Object $inner = this.getInner();
      result = result * PRIME + ($inner == null ? 43 : $inner.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.UseCall(doc=" + this.getDoc() + ", ui=" + this.getUi() + ", mName=" + this.getMName() + ", xs=" + this.getXs() + ", inner=" + this.getInner() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public UseCall withDoc(final Ast.Doc doc) {
      return this.doc == doc ? this : new UseCall(doc, this.ui, this.mName, this.xs, this.inner);
    }

    @java.lang.SuppressWarnings("all")
    public UseCall withUi(final platformSpecific.fakeInternet.PluginWithPart.UsingInfo ui) {
      return this.ui == ui ? this : new UseCall(this.doc, ui, this.mName, this.xs, this.inner);
    }

    @java.lang.SuppressWarnings("all")
    public UseCall withMName(final String mName) {
      return this.mName == mName ? this : new UseCall(this.doc, this.ui, mName, this.xs, this.inner);
    }

    @java.lang.SuppressWarnings("all")
    public UseCall withXs(final List<String> xs) {
      return this.xs == xs ? this : new UseCall(this.doc, this.ui, this.mName, xs, this.inner);
    }

    @java.lang.SuppressWarnings("all")
    public UseCall withInner(final S inner) {
      return this.inner == inner ? this : new UseCall(this.doc, this.ui, this.mName, this.xs, inner);
    }
  }


  public static final class X implements E {
    private final String inner;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public X(final String inner) {
      this.inner = inner;
    }

    @java.lang.SuppressWarnings("all")
    public String getInner() {
      return this.inner;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.X)) return false;
      final MiniJ.X other = (MiniJ.X) o;
      final java.lang.Object this$inner = this.getInner();
      final java.lang.Object other$inner = other.getInner();
      if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $inner = this.getInner();
      result = result * PRIME + ($inner == null ? 43 : $inner.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.X(inner=" + this.getInner() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public X withInner(final String inner) {
      return this.inner == inner ? this : new X(inner);
    }
  }


  public static final class RawJ implements E {
    private final String inner;

    public RawJ(String inner) {
      assert coherent(inner);
      this.inner = inner;
    }

    static boolean coherent(String inner) {
      int pos = inner.indexOf("£M");
      if (pos == -1 || pos == 0) {
        return true;
      }
      inner = inner.substring(0, pos);
      return inner.endsWith(" ") || inner.endsWith(".") || inner.endsWith("\n");
    }

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public String getInner() {
      return this.inner;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.RawJ)) return false;
      final MiniJ.RawJ other = (MiniJ.RawJ) o;
      final java.lang.Object this$inner = this.getInner();
      final java.lang.Object other$inner = other.getInner();
      if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $inner = this.getInner();
      result = result * PRIME + ($inner == null ? 43 : $inner.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.RawJ(inner=" + this.getInner() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public RawJ withInner(final String inner) {
      return this.inner == inner ? this : new RawJ(inner);
    }
  }


  public static final class Cast implements E {
    private final String cn;
    private final String x;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public Cast(final String cn, final String x) {
      this.cn = cn;
      this.x = x;
    }

    @java.lang.SuppressWarnings("all")
    public String getCn() {
      return this.cn;
    }

    @java.lang.SuppressWarnings("all")
    public String getX() {
      return this.x;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.Cast)) return false;
      final MiniJ.Cast other = (MiniJ.Cast) o;
      final java.lang.Object this$cn = this.getCn();
      final java.lang.Object other$cn = other.getCn();
      if (this$cn == null ? other$cn != null : !this$cn.equals(other$cn)) return false;
      final java.lang.Object this$x = this.getX();
      final java.lang.Object other$x = other.getX();
      if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $cn = this.getCn();
      result = result * PRIME + ($cn == null ? 43 : $cn.hashCode());
      final java.lang.Object $x = this.getX();
      result = result * PRIME + ($x == null ? 43 : $x.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.Cast(cn=" + this.getCn() + ", x=" + this.getX() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public Cast withCn(final String cn) {
      return this.cn == cn ? this : new Cast(cn, this.x);
    }

    @java.lang.SuppressWarnings("all")
    public Cast withX(final String x) {
      return this.x == x ? this : new Cast(this.cn, x);
    }
  }


  public static final class Null implements E {
    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public Null() {
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.Null)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      int result = 1;
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.Null()";
    }
  }


  public static final class B implements S {
    private final String label;
    private final List<S> ss;

    public <V> V accept(JVisitor<V> v) {
      return v.visit(this);
    }

    @java.lang.SuppressWarnings("all")
    public B(final String label, final List<S> ss) {
      this.label = label;
      this.ss = ss;
    }

    @java.lang.SuppressWarnings("all")
    public String getLabel() {
      return this.label;
    }

    @java.lang.SuppressWarnings("all")
    public List<S> getSs() {
      return this.ss;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof MiniJ.B)) return false;
      final MiniJ.B other = (MiniJ.B) o;
      final java.lang.Object this$label = this.getLabel();
      final java.lang.Object other$label = other.getLabel();
      if (this$label == null ? other$label != null : !this$label.equals(other$label)) return false;
      final java.lang.Object this$ss = this.getSs();
      final java.lang.Object other$ss = other.getSs();
      if (this$ss == null ? other$ss != null : !this$ss.equals(other$ss)) return false;
      return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      final java.lang.Object $label = this.getLabel();
      result = result * PRIME + ($label == null ? 43 : $label.hashCode());
      final java.lang.Object $ss = this.getSs();
      result = result * PRIME + ($ss == null ? 43 : $ss.hashCode());
      return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "MiniJ.B(label=" + this.getLabel() + ", ss=" + this.getSs() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public B withLabel(final String label) {
      return this.label == label ? this : new B(label, this.ss);
    }

    @java.lang.SuppressWarnings("all")
    public B withSs(final List<S> ss) {
      return this.ss == ss ? this : new B(this.label, ss);
    }
  }
}
