// Generated by delombok at Mon Dec 14 15:03:00 CET 2015
package ast;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import sugarVisitors.Desugar;
import tools.Assertions;
import tools.StringBuilders;
//import ast.Ast.Doc;
//import ast.Ast.MethodSelector;
import platformSpecific.javaTranslation.Resources;

public interface Ast {

	interface Atom {
	}

	final class Parameters {
		private final Optional<Expression> e;
		private final List<String> xs;
		private final List<Expression> es;

		@java.beans.ConstructorProperties({"e", "xs", "es"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Parameters(final Optional<Expression> e, final List<String> xs, final List<Expression> es) {
			this.e = e;
			this.xs = xs;
			this.es = es;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Optional<Expression> getE() {
			return this.e;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<String> getXs() {
			return this.xs;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Expression> getEs() {
			return this.es;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.Parameters)) return false;
			final Parameters other = (Parameters)o;
			final java.lang.Object this$e = this.getE();
			final java.lang.Object other$e = other.getE();
			if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
			final java.lang.Object this$xs = this.getXs();
			final java.lang.Object other$xs = other.getXs();
			if (this$xs == null ? other$xs != null : !this$xs.equals(other$xs)) return false;
			final java.lang.Object this$es = this.getEs();
			final java.lang.Object other$es = other.getEs();
			if (this$es == null ? other$es != null : !this$es.equals(other$es)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $e = this.getE();
			result = result * PRIME + ($e == null ? 0 : $e.hashCode());
			final java.lang.Object $xs = this.getXs();
			result = result * PRIME + ($xs == null ? 0 : $xs.hashCode());
			final java.lang.Object $es = this.getEs();
			result = result * PRIME + ($es == null ? 0 : $es.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.Parameters(e=" + this.getE() + ", xs=" + this.getXs() + ", es=" + this.getEs() + ")";
		}
	}

	final class BlockContent {
		private final List<VarDec> decs;
		private final Optional<Catch> _catch;

		@java.beans.ConstructorProperties({"decs", "_catch"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public BlockContent(final List<VarDec> decs, final Optional<Catch> _catch) {
			this.decs = decs;
			this._catch = _catch;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<VarDec> getDecs() {
			return this.decs;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Optional<Catch> get_catch() {
			return this._catch;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.BlockContent)) return false;
			final BlockContent other = (BlockContent)o;
			final java.lang.Object this$decs = this.getDecs();
			final java.lang.Object other$decs = other.getDecs();
			if (this$decs == null ? other$decs != null : !this$decs.equals(other$decs)) return false;
			final java.lang.Object this$_catch = this.get_catch();
			final java.lang.Object other$_catch = other.get_catch();
			if (this$_catch == null ? other$_catch != null : !this$_catch.equals(other$_catch)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $decs = this.getDecs();
			result = result * PRIME + ($decs == null ? 0 : $decs.hashCode());
			final java.lang.Object $_catch = this.get_catch();
			result = result * PRIME + ($_catch == null ? 0 : $_catch.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.BlockContent(decs=" + this.getDecs() + ", _catch=" + this.get_catch() + ")";
		}
	}

	interface VarDec {

		<T> T match(Function<VarDecXE, T> xe, Function<VarDecE, T> e, Function<VarDecCE, T> ce);
	}

	final class VarDecXE implements VarDec {
		private final boolean isVar;
		private final Optional<Type> t;
		private final String x;
		private final Expression inner;

		public <T> T match(Function<VarDecXE, T> xe, Function<VarDecE, T> e, Function<VarDecCE, T> ce) {
			return xe.apply(this);
		}

		@java.beans.ConstructorProperties({"isVar", "t", "x", "inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public VarDecXE(final boolean isVar, final Optional<Type> t, final String x, final Expression inner) {
			this.isVar = isVar;
			this.t = t;
			this.x = x;
			this.inner = inner;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean isVar() {
			return this.isVar;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Optional<Type> getT() {
			return this.t;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getX() {
			return this.x;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Expression getInner() {
			return this.inner;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.VarDecXE)) return false;
			final VarDecXE other = (VarDecXE)o;
			if (this.isVar() != other.isVar()) return false;
			final java.lang.Object this$t = this.getT();
			final java.lang.Object other$t = other.getT();
			if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
			final java.lang.Object this$x = this.getX();
			final java.lang.Object other$x = other.getX();
			if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			result = result * PRIME + (this.isVar() ? 79 : 97);
			final java.lang.Object $t = this.getT();
			result = result * PRIME + ($t == null ? 0 : $t.hashCode());
			final java.lang.Object $x = this.getX();
			result = result * PRIME + ($x == null ? 0 : $x.hashCode());
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.VarDecXE(isVar=" + this.isVar() + ", t=" + this.getT() + ", x=" + this.getX() + ", inner=" + this.getInner() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public VarDecXE withVar(final boolean isVar) {
			return this.isVar == isVar ? this : new VarDecXE(isVar, this.t, this.x, this.inner);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public VarDecXE withT(final Optional<Type> t) {
			return this.t == t ? this : new VarDecXE(this.isVar, t, this.x, this.inner);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public VarDecXE withX(final String x) {
			return this.x == x ? this : new VarDecXE(this.isVar, this.t, x, this.inner);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public VarDecXE withInner(final Expression inner) {
			return this.inner == inner ? this : new VarDecXE(this.isVar, this.t, this.x, inner);
		}
	}

	final class VarDecE implements VarDec {
		private final Expression inner;

		public <T> T match(Function<VarDecXE, T> xe, Function<VarDecE, T> e, Function<VarDecCE, T> ce) {
			return e.apply(this);
		}

		@java.beans.ConstructorProperties({"inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public VarDecE(final Expression inner) {
			this.inner = inner;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Expression getInner() {
			return this.inner;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.VarDecE)) return false;
			final VarDecE other = (VarDecE)o;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.VarDecE(inner=" + this.getInner() + ")";
		}
	}

	final class VarDecCE implements VarDec {
		private final Expression.ClassB.NestedClass inner;

		public <T> T match(Function<VarDecXE, T> xe, Function<VarDecE, T> e, Function<VarDecCE, T> ce) {
			return ce.apply(this);
		}

		@java.beans.ConstructorProperties({"inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public VarDecCE(final Expression.ClassB.NestedClass inner) {
			this.inner = inner;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Expression.ClassB.NestedClass getInner() {
			return this.inner;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.VarDecCE)) return false;
			final VarDecCE other = (VarDecCE)o;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.VarDecCE(inner=" + this.getInner() + ")";
		}
	}

	final class Catch {
		private final SignalKind kind;
		private final String x;
		private final List<On> ons;
		private final Optional<Expression> _default;

		@java.beans.ConstructorProperties({"kind", "x", "ons", "_default"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Catch(final SignalKind kind, final String x, final List<On> ons, final Optional<Expression> _default) {
			this.kind = kind;
			this.x = x;
			this.ons = ons;
			this._default = _default;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public SignalKind getKind() {
			return this.kind;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getX() {
			return this.x;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<On> getOns() {
			return this.ons;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Optional<Expression> get_default() {
			return this._default;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.Catch)) return false;
			final Catch other = (Catch)o;
			final java.lang.Object this$kind = this.getKind();
			final java.lang.Object other$kind = other.getKind();
			if (this$kind == null ? other$kind != null : !this$kind.equals(other$kind)) return false;
			final java.lang.Object this$x = this.getX();
			final java.lang.Object other$x = other.getX();
			if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
			final java.lang.Object this$ons = this.getOns();
			final java.lang.Object other$ons = other.getOns();
			if (this$ons == null ? other$ons != null : !this$ons.equals(other$ons)) return false;
			final java.lang.Object this$_default = this.get_default();
			final java.lang.Object other$_default = other.get_default();
			if (this$_default == null ? other$_default != null : !this$_default.equals(other$_default)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $kind = this.getKind();
			result = result * PRIME + ($kind == null ? 0 : $kind.hashCode());
			final java.lang.Object $x = this.getX();
			result = result * PRIME + ($x == null ? 0 : $x.hashCode());
			final java.lang.Object $ons = this.getOns();
			result = result * PRIME + ($ons == null ? 0 : $ons.hashCode());
			final java.lang.Object $_default = this.get_default();
			result = result * PRIME + ($_default == null ? 0 : $_default.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.Catch(kind=" + this.getKind() + ", x=" + this.getX() + ", ons=" + this.getOns() + ", _default=" + this.get_default() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Catch withKind(final SignalKind kind) {
			return this.kind == kind ? this : new Catch(kind, this.x, this.ons, this._default);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Catch withX(final String x) {
			return this.x == x ? this : new Catch(this.kind, x, this.ons, this._default);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Catch withOns(final List<On> ons) {
			return this.ons == ons ? this : new Catch(this.kind, this.x, ons, this._default);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Catch with_default(final Optional<Expression> _default) {
			return this._default == _default ? this : new Catch(this.kind, this.x, this.ons, _default);
		}
	}

	final class On {
		private final List<Type> ts;
		private final Optional<Expression> _if;
		private final Expression inner;

		@java.beans.ConstructorProperties({"ts", "_if", "inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public On(final List<Type> ts, final Optional<Expression> _if, final Expression inner) {
			this.ts = ts;
			this._if = _if;
			this.inner = inner;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Type> getTs() {
			return this.ts;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Optional<Expression> get_if() {
			return this._if;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Expression getInner() {
			return this.inner;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.On)) return false;
			final On other = (On)o;
			final java.lang.Object this$ts = this.getTs();
			final java.lang.Object other$ts = other.getTs();
			if (this$ts == null ? other$ts != null : !this$ts.equals(other$ts)) return false;
			final java.lang.Object this$_if = this.get_if();
			final java.lang.Object other$_if = other.get_if();
			if (this$_if == null ? other$_if != null : !this$_if.equals(other$_if)) return false;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $ts = this.getTs();
			result = result * PRIME + ($ts == null ? 0 : $ts.hashCode());
			final java.lang.Object $_if = this.get_if();
			result = result * PRIME + ($_if == null ? 0 : $_if.hashCode());
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.On(ts=" + this.getTs() + ", _if=" + this.get_if() + ", inner=" + this.getInner() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public On withTs(final List<Type> ts) {
			return this.ts == ts ? this : new On(ts, this._if, this.inner);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public On with_if(final Optional<Expression> _if) {
			return this._if == _if ? this : new On(this.ts, _if, this.inner);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public On withInner(final Expression inner) {
			return this.inner == inner ? this : new On(this.ts, this._if, inner);
		}
	}

	interface Header {

		<T> T match(Function<ConcreteHeader, T> concreteH, Function<TraitHeader, T> traitH, Function<InterfaceHeader, T> interfH);
	}

	final class ConcreteHeader implements Header, Expression.HasPos {
		private final Mdf mdf;
		private final String name;
		private final List<FieldDec> fs;
		private final Position p;

		public <T> T match(Function<ConcreteHeader, T> concreteH, Function<TraitHeader, T> traitH, Function<InterfaceHeader, T> interfH) {
			return concreteH.apply(this);
		}

		@java.beans.ConstructorProperties({"mdf", "name", "fs", "p"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ConcreteHeader(final Mdf mdf, final String name, final List<FieldDec> fs, final Position p) {
			this.mdf = mdf;
			this.name = name;
			this.fs = fs;
			this.p = p;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Mdf getMdf() {
			return this.mdf;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getName() {
			return this.name;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<FieldDec> getFs() {
			return this.fs;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Position getP() {
			return this.p;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ConcreteHeader withMdf(final Mdf mdf) {
			return this.mdf == mdf ? this : new ConcreteHeader(mdf, this.name, this.fs, this.p);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ConcreteHeader withName(final String name) {
			return this.name == name ? this : new ConcreteHeader(this.mdf, name, this.fs, this.p);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ConcreteHeader withFs(final List<FieldDec> fs) {
			return this.fs == fs ? this : new ConcreteHeader(this.mdf, this.name, fs, this.p);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ConcreteHeader withP(final Position p) {
			return this.p == p ? this : new ConcreteHeader(this.mdf, this.name, this.fs, p);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.ConcreteHeader)) return false;
			final ConcreteHeader other = (ConcreteHeader)o;
			final java.lang.Object this$mdf = this.getMdf();
			final java.lang.Object other$mdf = other.getMdf();
			if (this$mdf == null ? other$mdf != null : !this$mdf.equals(other$mdf)) return false;
			final java.lang.Object this$name = this.getName();
			final java.lang.Object other$name = other.getName();
			if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
			final java.lang.Object this$fs = this.getFs();
			final java.lang.Object other$fs = other.getFs();
			if (this$fs == null ? other$fs != null : !this$fs.equals(other$fs)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $mdf = this.getMdf();
			result = result * PRIME + ($mdf == null ? 0 : $mdf.hashCode());
			final java.lang.Object $name = this.getName();
			result = result * PRIME + ($name == null ? 0 : $name.hashCode());
			final java.lang.Object $fs = this.getFs();
			result = result * PRIME + ($fs == null ? 0 : $fs.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.ConcreteHeader(mdf=" + this.getMdf() + ", name=" + this.getName() + ", fs=" + this.getFs() + ")";
		}
	}

	final class TraitHeader implements Header {

		public <T> T match(Function<ConcreteHeader, T> concreteH, Function<TraitHeader, T> traitH, Function<InterfaceHeader, T> interfH) {
			return traitH.apply(this);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public TraitHeader() {
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.TraitHeader)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			int result = 1;
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.TraitHeader()";
		}
	}

	final class InterfaceHeader implements Header {

		public <T> T match(Function<ConcreteHeader, T> concreteH, Function<TraitHeader, T> traitH, Function<InterfaceHeader, T> interfH) {
			return interfH.apply(this);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public InterfaceHeader() {
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.InterfaceHeader)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			int result = 1;
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.InterfaceHeader()";
		}
	}

	final class FieldDec {
		private final boolean isVar;
		private final Type t;
		private final String name;
		private final Doc doc;

		@java.beans.ConstructorProperties({"isVar", "t", "name", "doc"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public FieldDec(final boolean isVar, final Type t, final String name, final Doc doc) {
			this.isVar = isVar;
			this.t = t;
			this.name = name;
			this.doc = doc;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean isVar() {
			return this.isVar;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Type getT() {
			return this.t;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getName() {
			return this.name;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc getDoc() {
			return this.doc;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.FieldDec)) return false;
			final FieldDec other = (FieldDec)o;
			if (this.isVar() != other.isVar()) return false;
			final java.lang.Object this$t = this.getT();
			final java.lang.Object other$t = other.getT();
			if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
			final java.lang.Object this$name = this.getName();
			final java.lang.Object other$name = other.getName();
			if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
			final java.lang.Object this$doc = this.getDoc();
			final java.lang.Object other$doc = other.getDoc();
			if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			result = result * PRIME + (this.isVar() ? 79 : 97);
			final java.lang.Object $t = this.getT();
			result = result * PRIME + ($t == null ? 0 : $t.hashCode());
			final java.lang.Object $name = this.getName();
			result = result * PRIME + ($name == null ? 0 : $name.hashCode());
			final java.lang.Object $doc = this.getDoc();
			result = result * PRIME + ($doc == null ? 0 : $doc.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.FieldDec(isVar=" + this.isVar() + ", t=" + this.getT() + ", name=" + this.getName() + ", doc=" + this.getDoc() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public FieldDec withVar(final boolean isVar) {
			return this.isVar == isVar ? this : new FieldDec(isVar, this.t, this.name, this.doc);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public FieldDec withT(final Type t) {
			return this.t == t ? this : new FieldDec(this.isVar, t, this.name, this.doc);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public FieldDec withName(final String name) {
			return this.name == name ? this : new FieldDec(this.isVar, this.t, name, this.doc);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public FieldDec withDoc(final Doc doc) {
			return this.doc == doc ? this : new FieldDec(this.isVar, this.t, this.name, doc);
		}
	}

	interface Type {

		<T> T match(Function<NormType, T> normType, Function<HistoricType, T> hType);
	}

	final class NormType implements Type {
		private final Mdf mdf;
		private final Path path;
		private final Ph ph;

		public String toString() {
			return "" + mdf.name() + "" + this.path.rowData + ((ph == Ph.Ph) ? "^" : (ph == Ph.None) ? "" : "%");
		}

		public <T> T match(Function<NormType, T> normType, Function<HistoricType, T> hType) {
			return normType.apply(this);
		}

		@java.beans.ConstructorProperties({"mdf", "path", "ph"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public NormType(final Mdf mdf, final Path path, final Ph ph) {
			this.mdf = mdf;
			this.path = path;
			this.ph = ph;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Mdf getMdf() {
			return this.mdf;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Path getPath() {
			return this.path;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Ph getPh() {
			return this.ph;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.NormType)) return false;
			final NormType other = (NormType)o;
			final java.lang.Object this$mdf = this.getMdf();
			final java.lang.Object other$mdf = other.getMdf();
			if (this$mdf == null ? other$mdf != null : !this$mdf.equals(other$mdf)) return false;
			final java.lang.Object this$path = this.getPath();
			final java.lang.Object other$path = other.getPath();
			if (this$path == null ? other$path != null : !this$path.equals(other$path)) return false;
			final java.lang.Object this$ph = this.getPh();
			final java.lang.Object other$ph = other.getPh();
			if (this$ph == null ? other$ph != null : !this$ph.equals(other$ph)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $mdf = this.getMdf();
			result = result * PRIME + ($mdf == null ? 0 : $mdf.hashCode());
			final java.lang.Object $path = this.getPath();
			result = result * PRIME + ($path == null ? 0 : $path.hashCode());
			final java.lang.Object $ph = this.getPh();
			result = result * PRIME + ($ph == null ? 0 : $ph.hashCode());
			return result;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public NormType withMdf(final Mdf mdf) {
			return this.mdf == mdf ? this : new NormType(mdf, this.path, this.ph);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public NormType withPath(final Path path) {
			return this.path == path ? this : new NormType(this.mdf, path, this.ph);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public NormType withPh(final Ph ph) {
			return this.ph == ph ? this : new NormType(this.mdf, this.path, ph);
		}
	}

	final class MethodSelectorX {
		private final MethodSelector ms;
		private final String x;

		@java.beans.ConstructorProperties({"ms", "x"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelectorX(final MethodSelector ms, final String x) {
			this.ms = ms;
			this.x = x;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelector getMs() {
			return this.ms;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getX() {
			return this.x;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.MethodSelectorX)) return false;
			final MethodSelectorX other = (MethodSelectorX)o;
			final java.lang.Object this$ms = this.getMs();
			final java.lang.Object other$ms = other.getMs();
			if (this$ms == null ? other$ms != null : !this$ms.equals(other$ms)) return false;
			final java.lang.Object this$x = this.getX();
			final java.lang.Object other$x = other.getX();
			if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $ms = this.getMs();
			result = result * PRIME + ($ms == null ? 0 : $ms.hashCode());
			final java.lang.Object $x = this.getX();
			result = result * PRIME + ($x == null ? 0 : $x.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.MethodSelectorX(ms=" + this.getMs() + ", x=" + this.getX() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelectorX withMs(final MethodSelector ms) {
			return this.ms == ms ? this : new MethodSelectorX(ms, this.x);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelectorX withX(final String x) {
			return this.x == x ? this : new MethodSelectorX(this.ms, x);
		}
	}

	final class HistoricType implements Type {
		private final Path path;
		private final List<MethodSelectorX> selectors;
		private final boolean forcePlaceholder;

		public <T> T match(Function<NormType, T> normType, Function<HistoricType, T> hType) {
			return hType.apply(this);
		}

		@java.beans.ConstructorProperties({"path", "selectors", "forcePlaceholder"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public HistoricType(final Path path, final List<MethodSelectorX> selectors, final boolean forcePlaceholder) {
			this.path = path;
			this.selectors = selectors;
			this.forcePlaceholder = forcePlaceholder;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Path getPath() {
			return this.path;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<MethodSelectorX> getSelectors() {
			return this.selectors;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean isForcePlaceholder() {
			return this.forcePlaceholder;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.HistoricType)) return false;
			final HistoricType other = (HistoricType)o;
			final java.lang.Object this$path = this.getPath();
			final java.lang.Object other$path = other.getPath();
			if (this$path == null ? other$path != null : !this$path.equals(other$path)) return false;
			final java.lang.Object this$selectors = this.getSelectors();
			final java.lang.Object other$selectors = other.getSelectors();
			if (this$selectors == null ? other$selectors != null : !this$selectors.equals(other$selectors)) return false;
			if (this.isForcePlaceholder() != other.isForcePlaceholder()) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $path = this.getPath();
			result = result * PRIME + ($path == null ? 0 : $path.hashCode());
			final java.lang.Object $selectors = this.getSelectors();
			result = result * PRIME + ($selectors == null ? 0 : $selectors.hashCode());
			result = result * PRIME + (this.isForcePlaceholder() ? 79 : 97);
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.HistoricType(path=" + this.getPath() + ", selectors=" + this.getSelectors() + ", forcePlaceholder=" + this.isForcePlaceholder() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public HistoricType withPath(final Path path) {
			return this.path == path ? this : new HistoricType(path, this.selectors, this.forcePlaceholder);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public HistoricType withSelectors(final List<MethodSelectorX> selectors) {
			return this.selectors == selectors ? this : new HistoricType(this.path, selectors, this.forcePlaceholder);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public HistoricType withForcePlaceholder(final boolean forcePlaceholder) {
			return this.forcePlaceholder == forcePlaceholder ? this : new HistoricType(this.path, this.selectors, forcePlaceholder);
		}
	}

	final class FreeType implements Type {

		public <T> T match(Function<NormType, T> normType, Function<HistoricType, T> hType) {
			throw tools.Assertions.codeNotReachable();
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public FreeType() {
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.FreeType)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			int result = 1;
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.FreeType()";
		}
	}

	final class MethodSelector {
		private final String name;
		private final List<String> names;

		public MethodSelector(String name, List<String> names) {
			this.name = name;
			this.names = java.util.Collections.unmodifiableList(names);
			assert this.invariant();
		}

		public boolean isOperator() {
			return this.name.startsWith("#");//for now, to improve later
		}

		public boolean invariant() {
			// not good enought, it can also be empty or operator 
			// assert checkX(name,true);
			for (String n : names) {
				assert checkX(n, false);
			}
			return true;
		}

		public String toSrcEquivalent() {
			String result = "new ast.Ast.MethodSelector(\"" + name + "\",java.util.Arrays.asList(";
			result += String.join(",", tools.Map.of(ni -> "\"" + ni + "\"", names));
			return result + "))";
		}

		public String toString() {
			if (name.isEmpty() && names.isEmpty()) {
				return "()";
			}
			if (names.isEmpty()) {
				return name + "()";
			}
			StringBuilder result = new StringBuilder();
			result.append(name + "(");
			tools.StringBuilders.formatSequence(result, names.iterator(), ",", result::append);
			result.append(")");
			return result.toString();
		}

		public static MethodSelector parse(String s) {
			if (s.equals("()")) {
				return new MethodSelector(Desugar.desugarName(""), Collections.emptyList());
			}
			String name = s;
			List<String> xs = new ArrayList<String>();
			assert !s.isEmpty();
			char last = s.charAt(s.length() - 1);
			if (last != ')') {
				throw new Resources.Error("InvalidSelector: " + s);
			}
			int i = s.indexOf('(');
			if (i == -1) {
				throw new Resources.Error("InvalidSelector: " + s);
			}
			name = s.substring(0, i);
			String parenthesis = s.substring(i + 1, s.length() - 1).trim();
			if (!parenthesis.isEmpty()) {
				String[] names = parenthesis.split(",");// single representation
				// required
				for (String si : names) {
					if (!checkX(si, false)) {
						throw new Resources.Error("InvalidSelector: " + s);
					}
					xs.add(si);
				}
			}
			name = Desugar.desugarName(name);
			if (!checkX(name, true)) {
				throw new Resources.Error("InvalidSelector: " + s);
			}
			return new MethodSelector(name, xs);
		}

		private static boolean checkX(String s, boolean allowHash) {
			if (s.isEmpty()) {
				return false;
			}
			char c0 = s.charAt(0);
			if (allowHash && c0 == '#') {
				if (s.length() == 1) {
					return false;
				}
				char c1 = s.charAt(1);
				if (c1 == '#') {
					return false;
				}
				//return checkX(s.substring(1), allowHash);
			}
			for (char c : s.toCharArray()) {
				if (allowHash && c == '#') {
					continue;
				}
				if (ast.Ast.Path.isValidPathChar(c)) {
					continue;
				}
				return false;
			}
			return c0 == '_' || c0 == '#' || (c0 >= 'a' && c0 <= 'z');
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getName() {
			return this.name;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<String> getNames() {
			return this.names;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.MethodSelector)) return false;
			final MethodSelector other = (MethodSelector)o;
			final java.lang.Object this$name = this.getName();
			final java.lang.Object other$name = other.getName();
			if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
			final java.lang.Object this$names = this.getNames();
			final java.lang.Object other$names = other.getNames();
			if (this$names == null ? other$names != null : !this$names.equals(other$names)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $name = this.getName();
			result = result * PRIME + ($name == null ? 0 : $name.hashCode());
			final java.lang.Object $names = this.getNames();
			result = result * PRIME + ($names == null ? 0 : $names.hashCode());
			return result;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelector withName(final String name) {
			return this.name == name ? this : new MethodSelector(name, this.names);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelector withNames(final List<String> names) {
			return this.names == names ? this : new MethodSelector(this.name, names);
		}
	}

	final class MethodType {
		private final Doc docExceptions;
		private final Mdf mdf;
		private final List<Type> ts;
		private final List<Doc> tDocs;
		private final Type returnType;
		private final List<Path> exceptions;

		@java.beans.ConstructorProperties({"docExceptions", "mdf", "ts", "tDocs", "returnType", "exceptions"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodType(final Doc docExceptions, final Mdf mdf, final List<Type> ts, final List<Doc> tDocs, final Type returnType, final List<Path> exceptions) {
			this.docExceptions = docExceptions;
			this.mdf = mdf;
			this.ts = ts;
			this.tDocs = tDocs;
			this.returnType = returnType;
			this.exceptions = exceptions;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc getDocExceptions() {
			return this.docExceptions;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Mdf getMdf() {
			return this.mdf;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Type> getTs() {
			return this.ts;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Doc> getTDocs() {
			return this.tDocs;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Type getReturnType() {
			return this.returnType;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Path> getExceptions() {
			return this.exceptions;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.MethodType)) return false;
			final MethodType other = (MethodType)o;
			final java.lang.Object this$docExceptions = this.getDocExceptions();
			final java.lang.Object other$docExceptions = other.getDocExceptions();
			if (this$docExceptions == null ? other$docExceptions != null : !this$docExceptions.equals(other$docExceptions)) return false;
			final java.lang.Object this$mdf = this.getMdf();
			final java.lang.Object other$mdf = other.getMdf();
			if (this$mdf == null ? other$mdf != null : !this$mdf.equals(other$mdf)) return false;
			final java.lang.Object this$ts = this.getTs();
			final java.lang.Object other$ts = other.getTs();
			if (this$ts == null ? other$ts != null : !this$ts.equals(other$ts)) return false;
			final java.lang.Object this$tDocs = this.getTDocs();
			final java.lang.Object other$tDocs = other.getTDocs();
			if (this$tDocs == null ? other$tDocs != null : !this$tDocs.equals(other$tDocs)) return false;
			final java.lang.Object this$returnType = this.getReturnType();
			final java.lang.Object other$returnType = other.getReturnType();
			if (this$returnType == null ? other$returnType != null : !this$returnType.equals(other$returnType)) return false;
			final java.lang.Object this$exceptions = this.getExceptions();
			final java.lang.Object other$exceptions = other.getExceptions();
			if (this$exceptions == null ? other$exceptions != null : !this$exceptions.equals(other$exceptions)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $docExceptions = this.getDocExceptions();
			result = result * PRIME + ($docExceptions == null ? 0 : $docExceptions.hashCode());
			final java.lang.Object $mdf = this.getMdf();
			result = result * PRIME + ($mdf == null ? 0 : $mdf.hashCode());
			final java.lang.Object $ts = this.getTs();
			result = result * PRIME + ($ts == null ? 0 : $ts.hashCode());
			final java.lang.Object $tDocs = this.getTDocs();
			result = result * PRIME + ($tDocs == null ? 0 : $tDocs.hashCode());
			final java.lang.Object $returnType = this.getReturnType();
			result = result * PRIME + ($returnType == null ? 0 : $returnType.hashCode());
			final java.lang.Object $exceptions = this.getExceptions();
			result = result * PRIME + ($exceptions == null ? 0 : $exceptions.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "Ast.MethodType(docExceptions=" + this.getDocExceptions() + ", mdf=" + this.getMdf() + ", ts=" + this.getTs() + ", tDocs=" + this.getTDocs() + ", returnType=" + this.getReturnType() + ", exceptions=" + this.getExceptions() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodType withDocExceptions(final Doc docExceptions) {
			return this.docExceptions == docExceptions ? this : new MethodType(docExceptions, this.mdf, this.ts, this.tDocs, this.returnType, this.exceptions);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodType withMdf(final Mdf mdf) {
			return this.mdf == mdf ? this : new MethodType(this.docExceptions, mdf, this.ts, this.tDocs, this.returnType, this.exceptions);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodType withTs(final List<Type> ts) {
			return this.ts == ts ? this : new MethodType(this.docExceptions, this.mdf, ts, this.tDocs, this.returnType, this.exceptions);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodType withTDocs(final List<Doc> tDocs) {
			return this.tDocs == tDocs ? this : new MethodType(this.docExceptions, this.mdf, this.ts, tDocs, this.returnType, this.exceptions);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodType withReturnType(final Type returnType) {
			return this.returnType == returnType ? this : new MethodType(this.docExceptions, this.mdf, this.ts, this.tDocs, returnType, this.exceptions);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodType withExceptions(final List<Path> exceptions) {
			return this.exceptions == exceptions ? this : new MethodType(this.docExceptions, this.mdf, this.ts, this.tDocs, this.returnType, exceptions);
		}
	}
	/* @ToString(exclude="n") */

	final class Path implements Expression, ExpCore, Atom {
		private final int n;
		private final List<String> rowData;

		private Path(int n, List<String> rowData) {
			assert !rowData.get(0).contains("-") : rowData;// as in Outer-1 :-(
			assert !rowData.contains(null) :  // comment to force new line an put
			// break
			rowData;
			rowData = Collections.unmodifiableList(rowData);
			this.n = n;
			this.rowData = rowData;
		}

		public Path(List<String> rowData) {
			assert !rowData.get(0).contains("-") : rowData;// as in Outer-1 :-(
			rowData = Collections.unmodifiableList(rowData);
			this.rowData = rowData;
			String start = this.rowData.get(0);
			boolean isCore = isOutern(start);
			if (isCore) {
				start = start.substring("Outer".length());
				n = Integer.parseInt(start);
			} else {
				n = -1;
			}
		}

		@Override
		public <T> T accept(sugarVisitors.Visitor<T> v) {
			return v.visit(this);
		}

		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}

		public boolean isPrimitive() {
			return this.equals(Path.Void()) || this.equals(Path.Library()) || this.equals(Path.Any());
		}

		public boolean isCore() {
			return n != -1;
		}

		public String toString() {
			return sugarVisitors.ToFormattedText.of(this);
		}

		private static boolean isOutern(String start) {
			if (!start.startsWith("Outer")) {
				return false;
			}
			start = start.substring("Outer".length());
			if (start.isEmpty()) {
				return false;
			}
			for (char c : start.toCharArray()) {
				if (!Character.isDigit(c)) {
					return false;
				}
			}
			return true;
		}

		public Path popC() {
			// assert outerNumber()==0;
			List<String> s = new ArrayList<String>(this.rowData);
			// s.remove(1);
			s.remove(s.size() - 1);
			return new Path(n, s);
		}

		public Path pushC(String c) {
			// assert outerNumber()==0;
			List<String> s = new ArrayList<String>(this.rowData);
			s.add(c);
			return new Path(n, s);
		}

		public List<String> getCBar() {
			assert !this.isPrimitive();
			if (this.isCore()) {
				return rowData.subList(1, rowData.size());
			}
			return rowData;
		}

		public Path setNewOuter(int n) {
			assert isCore();
			List<String> s = new ArrayList<String>(this.rowData);
			s.set(0, "Outer" + n);
			return new Path(n, s);
		}

		public int outerNumber() {
			assert isCore() : this;
			return this.n;
		}
		private static final Path _Outer0 = new Path(0, Arrays.asList("Outer0"));
		private static final Path _Void = new Path(-1, Arrays.asList("Void"));
		private static final Path _Any = new Path(-1, Arrays.asList("Any"));
		private static final Path _Library = new Path(-1, Arrays.asList("Library"));

		public static Path outer(int n, List<String> cs) {
			List<String> arr = new ArrayList<>();
			arr.add("Outer" + n);
			arr.addAll(cs);
			return new Path(n, arr);
		}

		public static Path outer(int n) {
			assert n >= 0;
			if (n == 0) {
				return _Outer0;
			}
			return new Path(n, Arrays.asList("Outer" + n));
		}

		public static Path Void() {
			return _Void;
		}

		public static Path Any() {
			return _Any;
		}

		public static Path Library() {
			return _Library;
		}

		public static List<String> parseValidCs(String cs) {
			if (cs.equals("Outer0")) {
				return Collections.emptyList();
			}
			List<String> rowData = Collections.unmodifiableList(Arrays.asList(cs.split("::")));
			for (String s : rowData) {
				if (!isValidClassName(s)) {
					throw new Resources.Error("InvalidPath: " + cs);
				}
			}
			return rowData;
		}

		public static boolean isValidOuter(String name) {
			// thus invalid as
			// pathName
			if (name.equals("Outer")) {
				return true;
			}
			if (name.equals("Outer0")) {
				return true;
			}
			if (!name.startsWith("Outer")) {
				return false;
			}
			int firstN = "Outer".length();
			char c = name.charAt(firstN);
			// first is 1--9 and all rest is 0-9
			if ("123456789".indexOf(c) != -1) {
				return false;
			}
			for (int i = firstN + 1; i < name.length(); i++) {
				if ("0123456789".indexOf(name.charAt(i)) == -1) {
					return false;
				}
			}
			return true;
		}

		public static boolean isValidClassName(String name) {
			if (isValidOuter(name)) {
				return false;
			}
			if (!isValidPathStart(name.charAt(0))) {
				return false;
			}
			for (int i = 1; i < name.length(); i++) {
				if (!isValidPathChar(name.charAt(i))) {
					return false;
				}
			}
			return true;
		}

		public static Path parse(String path) {
			List<String> rowData = Arrays.asList(path.split("::"));
			for (String s : rowData) {
				// TODO: make it more precise, throw real
				// error?
				assert isValidOuter(s) || isValidClassName(s) : path;
			}
			return new Path(rowData);
		}

		public static boolean isValidPathStart(char c) {
			if (c == '%') {
				return true;
			}
			if (c == '$') {
				return true;
			}
			return Character.isUpperCase(c);
		}

		public static boolean isValidPathChar(char c) {
			if (c == '%') {
				return true;
			}
			if (c == '$') {
				return true;
			}
			if (c == '_') {
				return true;
			}
			return Character.isUpperCase(c) || Character.isLowerCase(c) || Character.isDigit(c);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int getN() {
			return this.n;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<String> getRowData() {
			return this.rowData;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.Path)) return false;
			final Path other = (Path)o;
			if (this.getN() != other.getN()) return false;
			final java.lang.Object this$rowData = this.getRowData();
			final java.lang.Object other$rowData = other.getRowData();
			if (this$rowData == null ? other$rowData != null : !this$rowData.equals(other$rowData)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			result = result * PRIME + this.getN();
			final java.lang.Object $rowData = this.getRowData();
			result = result * PRIME + ($rowData == null ? 0 : $rowData.hashCode());
			return result;
		}
	}

	final class Doc {
		private final String s;
		private final List<Object> annotations;

		public List<Path> getPaths() {
			List<Path> result = new ArrayList<>();
			for (Object o : annotations) {
				if (o instanceof Path) {
					result.add((Path)o);
				}
			}
			return result;
		}

		public boolean isPrivate() {
			if (this.annotations.contains("private")) {
				return true;
			}
			// if(this.toString().startsWith("@private")){return true;}
			return false;
		}

		public static Doc getPrivate() {
			return privateInstance;
		}
		private static final Doc privateInstance = Doc.factory("@private");

		public static Doc factory(Path single) {
			return new Doc("%s\n", Collections.singletonList((Object)single));
		}

		public static Doc factory(String s) {
			if (!s.endsWith("\n")) {
				s += "\n";
			}
			List<Object> annotations = new ArrayList<>();
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < s.length(); i++) {
				char ci = s.charAt(i);
				if (ci == '%') {
					sb.append('%');
					sb.append('%');
					continue;
				}
				if (ci != '@') {
					sb.append(ci);
					continue;
				} else {
					// ci=='@'
					char next = '\n';
					if (i + 1 < s.length()) {
						next = s.charAt(i + 1);
					}
					if (next == ':' || Path.isValidPathChar(next)) {
						sb.append("%s");
						i = readAnnotation(s, i + 1, annotations);
					} else {
						throw Assertions.codeNotReachable("invalid use of @ in |" + next + "| " + s);
					} // if(!Path.isValidPathStart(next)){sb.append(ci);continue;}
				}
			}
			return new Doc(sb.toString(), annotations);
		}
		private static final Doc empty = new Doc("", Collections.emptyList());

		public static Doc empty() {
			return empty;
		}

		public String toString() {
			List<Object> paths = new ArrayList<>();
			for (Object pi : this.annotations) {
				if (pi instanceof Path) {
					paths.add("@" + sugarVisitors.ToFormattedText.of((Path)pi));
				} else {
					paths.add("@" + (String)pi);
				}
			}
			return String.format(this.s, paths.toArray());
		}

		public boolean isEmpty() {
			return this.s.isEmpty();
		}

		public Doc sum(Doc that) {
			List<Object> ps = new ArrayList<>(this.annotations);
			ps.addAll(that.annotations);
			return new Doc(this.s + that.s, ps);
		}

		public Doc formatNewLinesAsList() {
			String newS = this.s.trim();
			newS = newS.replace("\n", ", ");
			newS = "[" + newS + "]\n";
			return this.withS(newS);
		}

		private static int readAnnotation(String s, int start, List<Object> paths) {
			StringBuilder sb = new StringBuilder();
			for (int i = start; i < s.length(); i++) {
				char ci = s.charAt(i);
				if (ci == ':' || Path.isValidPathChar(ci)) {
					sb.append(ci);
				} else {
					if (Path.isValidPathStart(s.charAt(start))) {
						paths.add(Path.parse(sb.toString()));
					} else {
						paths.add(sb.toString());
					}
					return i - 1;
				}
			}
			paths.add(Path.parse(sb.toString()));
			return s.length();
		}

		@java.beans.ConstructorProperties({"s", "annotations"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc(final String s, final List<Object> annotations) {
			this.s = s;
			this.annotations = annotations;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getS() {
			return this.s;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Object> getAnnotations() {
			return this.annotations;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.Doc)) return false;
			final Doc other = (Doc)o;
			final java.lang.Object this$s = this.getS();
			final java.lang.Object other$s = other.getS();
			if (this$s == null ? other$s != null : !this$s.equals(other$s)) return false;
			final java.lang.Object this$annotations = this.getAnnotations();
			final java.lang.Object other$annotations = other.getAnnotations();
			if (this$annotations == null ? other$annotations != null : !this$annotations.equals(other$annotations)) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $s = this.getS();
			result = result * PRIME + ($s == null ? 0 : $s.hashCode());
			final java.lang.Object $annotations = this.getAnnotations();
			result = result * PRIME + ($annotations == null ? 0 : $annotations.hashCode());
			return result;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc withS(final String s) {
			return this.s == s ? this : new Doc(s, this.annotations);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc withAnnotations(final List<Object> annotations) {
			return this.annotations == annotations ? this : new Doc(this.s, annotations);
		}
	}

	enum SignalKind {
		Error("error"),
		Exception("exception"),
		Return("return");
		public final String content;

		SignalKind(String content) {
			this.content = content;
		}

		public static SignalKind fromString(String s) {
			for (SignalKind sk : SignalKind.values()) {
				if (sk.content.equals(s)) return sk;
			}
			throw tools.Assertions.codeNotReachable();
		}
	}

	enum Mdf {
		Immutable(""),
		Mutable("mut"),
		Readable("read"),
		Lent("lent"),
		Capsule("capsule"),
		Type("type");
		public final String inner;

		Mdf(String inner) {
			this.inner = inner;
		}

		public static Mdf fromString(String s) {
			for (Mdf mdf : Mdf.values()) {
				if (mdf.inner.equals(s)) return mdf;
			}
			throw tools.Assertions.codeNotReachable();
		}
	}

	enum OpKind {
		Unary,
		BoolOp,
		RelationalOp,
		DataOp,
		EqOp;

	}

	enum Op {
		Tilde("~", OpKind.Unary, true, true),
		//
		Bang("!", OpKind.Unary, true, true),
		//
		And("&", OpKind.BoolOp, true, true),
		//
		Or("|", OpKind.BoolOp, true, true),
		//
		LTEqual("<=", OpKind.RelationalOp, false, true),
		//
		GTEqual(">=", OpKind.RelationalOp, true, true),
		//
		LT("<", OpKind.RelationalOp, false, true),
		//
		GT(">", OpKind.RelationalOp, true, true),
		//
		EqualEqual("==", OpKind.RelationalOp, true, false),
		//
		BangEqual("!=", OpKind.RelationalOp, true, true),
		//
		Plus("+", OpKind.DataOp, true, true),
		//
		Minus("-", OpKind.DataOp, true, true),
		//
		Times("*", OpKind.DataOp, true, true),
		//
		Divide("/", OpKind.DataOp, true, true),
		//
		LTLT("<<", OpKind.DataOp, false, false),
		//
		GTGT(">>", OpKind.DataOp, true, false),
		//
		PlusPlus("++", OpKind.DataOp, true, false),
		//
		TimesTimes("**", OpKind.DataOp, true, false),
		//
		PlusEqual("+=", OpKind.EqOp, true, true),
		//
		MinusEqual("-=", OpKind.EqOp, true, true),
		//
		TimesEqual("*=", OpKind.EqOp, true, true),
		//
		DivideEqual("/=", OpKind.EqOp, true, true),
		//
		AndEqual("&=", OpKind.EqOp, true, true),
		//
		OrEqual("|=", OpKind.EqOp, true, true),
		//
		LTLTEqual("<<=", OpKind.EqOp, true, true),
		//
		GTGTEqual(">>=", OpKind.EqOp, true, true),
		//
		PlusPlusEqual("++=", OpKind.EqOp, true, true),
		//
		TimesTimesEqual("**=", OpKind.EqOp, true, true),
		//
		ColonEqual(":=", OpKind.EqOp, true, true);
		//
		public final String inner;
		public final OpKind kind;
		public final boolean normalized;// false for <<,<, <=
		public final boolean leftAssociative;// false for ++ << >> ** ==

		Op(String inner, OpKind kind, boolean normalized, boolean leftAssociative) {
			this.inner = inner;
			this.kind = kind;
			this.normalized = normalized;
			this.leftAssociative = leftAssociative;
		}

		public static Op fromString(String s) {
			for (Op op : Op.values()) {
				if (op.inner.equals(s)) return op;
			}
			throw tools.Assertions.codeNotReachable();
		}
	}

	enum Stage {
		None(""),
		Less("##less"),
		ToIterate("##toIterateTemp"),
		// Meta("##meta"),
		Plus("##plus"),
		Star("##star");
		// Needed("##needed"),
		// Needable("##needable");
		public final String inner;

		Stage(String inner) {
			this.inner = inner;
		}

		public static Stage fromString(String s) {
			for (Stage st : Stage.values()) {
				if (st.inner.equals(s)) return st;
			}
			throw tools.Assertions.codeNotReachable();
		}
	}

	enum Ph {
		None,
		Ph,
		Partial;

	}

	final class Position {
		public static final Position noInfo = new Position(null, Integer.MAX_VALUE / 2, Integer.MAX_VALUE / 2, 0, 0);
		private final String file;
		private final int line1;
		private final int pos1;
		private final int line2;
		private final int pos2;

		public String toString() {
			int line1 = this.line1 - 1;
			int line2 = this.line2 - 1;
			String res = "";
			if (line1 == line2) {
				res = "line:" + line1 + ", pos:" + pos1 + "--" + pos2;
			} else {
				res = "from line:" + line1 + "(pos:" + pos1 + ") to line:" + line2 + "(pos:" + pos2 + ")";
			}
			if (file == null) {
				return "fileUnknown; " + res;
			}
			String fileName = null;
			// if(file!=null){fileName="..."+file.substring(file.lastIndexOf("\\"));}
			int pos = file.lastIndexOf("\\");
			if (pos != -1) {
				pos = file.substring(0, pos).lastIndexOf("\\");
			}
			fileName = "..." + ((pos == -1) ? file : file.substring(pos));
			return "file: " + fileName + "; " + res;
		}

		@java.beans.ConstructorProperties({"file", "line1", "pos1", "line2", "pos2"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Position(final String file, final int line1, final int pos1, final int line2, final int pos2) {
			this.file = file;
			this.line1 = line1;
			this.pos1 = pos1;
			this.line2 = line2;
			this.pos2 = pos2;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getFile() {
			return this.file;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int getLine1() {
			return this.line1;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int getPos1() {
			return this.pos1;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int getLine2() {
			return this.line2;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int getPos2() {
			return this.pos2;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof Ast.Position)) return false;
			final Position other = (Position)o;
			final java.lang.Object this$file = this.getFile();
			final java.lang.Object other$file = other.getFile();
			if (this$file == null ? other$file != null : !this$file.equals(other$file)) return false;
			if (this.getLine1() != other.getLine1()) return false;
			if (this.getPos1() != other.getPos1()) return false;
			if (this.getLine2() != other.getLine2()) return false;
			if (this.getPos2() != other.getPos2()) return false;
			return true;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $file = this.getFile();
			result = result * PRIME + ($file == null ? 0 : $file.hashCode());
			result = result * PRIME + this.getLine1();
			result = result * PRIME + this.getPos1();
			result = result * PRIME + this.getLine2();
			result = result * PRIME + this.getPos2();
			return result;
		}
	}

	interface HasPos {

		Position getP();
	}
}