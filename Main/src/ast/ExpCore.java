// Generated by delombok at Thu Jan 21 07:57:26 CET 2016
package ast;

import java.util.Collections;
import java.util.List;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Optional;
import java.util.function.Function;
import lombok.NonNull;
import ast.Expression;
import ast.Ast.*;

public interface ExpCore {
	
	<T> T accept(coreVisitors.Visitor<T> v);
	
	final class MCall implements ExpCore, HasPos {
		private final ExpCore receiver;
		private final MethodSelector s;
		private final Doc doc;
		private final List<ExpCore> es;
		private final Position p;
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		@java.beans.ConstructorProperties({"receiver", "s", "doc", "es", "p"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MCall(final ExpCore receiver, final MethodSelector s, final Doc doc, final List<ExpCore> es, final Position p) {
			this.receiver = receiver;
			this.s = s;
			this.doc = doc;
			this.es = es;
			this.p = p;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ExpCore getReceiver() {
			return this.receiver;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelector getS() {
			return this.s;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc getDoc() {
			return this.doc;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<ExpCore> getEs() {
			return this.es;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Position getP() {
			return this.p;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.MCall)) return false;
			final MCall other = (MCall)o;
			final java.lang.Object this$receiver = this.getReceiver();
			final java.lang.Object other$receiver = other.getReceiver();
			if (this$receiver == null ? other$receiver != null : !this$receiver.equals(other$receiver)) return false;
			final java.lang.Object this$s = this.getS();
			final java.lang.Object other$s = other.getS();
			if (this$s == null ? other$s != null : !this$s.equals(other$s)) return false;
			final java.lang.Object this$doc = this.getDoc();
			final java.lang.Object other$doc = other.getDoc();
			if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
			final java.lang.Object this$es = this.getEs();
			final java.lang.Object other$es = other.getEs();
			if (this$es == null ? other$es != null : !this$es.equals(other$es)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $receiver = this.getReceiver();
			result = result * PRIME + ($receiver == null ? 0 : $receiver.hashCode());
			final java.lang.Object $s = this.getS();
			result = result * PRIME + ($s == null ? 0 : $s.hashCode());
			final java.lang.Object $doc = this.getDoc();
			result = result * PRIME + ($doc == null ? 0 : $doc.hashCode());
			final java.lang.Object $es = this.getEs();
			result = result * PRIME + ($es == null ? 0 : $es.hashCode());
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "ExpCore.MCall(receiver=" + this.getReceiver() + ", s=" + this.getS() + ", doc=" + this.getDoc() + ", es=" + this.getEs() + ")";
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MCall withReceiver(final ExpCore receiver) {
			return this.receiver == receiver ? this : new MCall(receiver, this.s, this.doc, this.es, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MCall withS(final MethodSelector s) {
			return this.s == s ? this : new MCall(this.receiver, s, this.doc, this.es, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MCall withDoc(final Doc doc) {
			return this.doc == doc ? this : new MCall(this.receiver, this.s, doc, this.es, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MCall withEs(final List<ExpCore> es) {
			return this.es == es ? this : new MCall(this.receiver, this.s, this.doc, es, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MCall withP(final Position p) {
			return this.p == p ? this : new MCall(this.receiver, this.s, this.doc, this.es, p);
		}
	}
	
	final class X implements ExpCore, Ast.Atom {
		private final String inner;
		
		public String toString() {
			return this.inner;
		}
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		@java.beans.ConstructorProperties({"inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public X(final String inner) {
			this.inner = inner;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public String getInner() {
			return this.inner;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.X)) return false;
			final X other = (X)o;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}
	}
	
	final class Block implements ExpCore, HasPos {
		private final Doc doc;
		private final List<Dec> decs;
		private final ExpCore inner;
		private final List<On> ons;
		private final Position p;
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		public static final class Dec {
			private final Type t;
			private final String x;
			private final ExpCore e;
			
			public ast.Ast.NormType getNT() {
				assert this.t instanceof ast.Ast.NormType : t;
				return (ast.Ast.NormType)this.t;
			}
			
			@java.beans.ConstructorProperties({"t", "x", "e"})
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Dec(final Type t, final String x, final ExpCore e) {
				this.t = t;
				this.x = x;
				this.e = e;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Type getT() {
				return this.t;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public String getX() {
				return this.x;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public ExpCore getE() {
				return this.e;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public boolean equals(final java.lang.Object o) {
				if (o == this) return true;
				if (!(o instanceof ExpCore.Block.Dec)) return false;
				final Dec other = (Dec)o;
				final java.lang.Object this$t = this.getT();
				final java.lang.Object other$t = other.getT();
				if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
				final java.lang.Object this$x = this.getX();
				final java.lang.Object other$x = other.getX();
				if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
				final java.lang.Object this$e = this.getE();
				final java.lang.Object other$e = other.getE();
				if (this$e == null ? other$e != null : !this$e.equals(other$e)) return false;
				return true;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public int hashCode() {
				final int PRIME = 59;
				int result = 1;
				final java.lang.Object $t = this.getT();
				result = result * PRIME + ($t == null ? 0 : $t.hashCode());
				final java.lang.Object $x = this.getX();
				result = result * PRIME + ($x == null ? 0 : $x.hashCode());
				final java.lang.Object $e = this.getE();
				result = result * PRIME + ($e == null ? 0 : $e.hashCode());
				return result;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public java.lang.String toString() {
				return "ExpCore.Block.Dec(t=" + this.getT() + ", x=" + this.getX() + ", e=" + this.getE() + ")";
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Dec withT(final Type t) {
				return this.t == t ? this : new Dec(t, this.x, this.e);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Dec withX(final String x) {
				return this.x == x ? this : new Dec(this.t, x, this.e);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Dec withE(final ExpCore e) {
				return this.e == e ? this : new Dec(this.t, this.x, e);
			}
		}
		
		public List<String> domDecs() {
			List<String> dom = new java.util.ArrayList<String>();
			for (Dec d : this.decs) {
				dom.add(d.x);
			}
			return dom;
		}
		
		public static final class On implements HasPos {
			private final SignalKind kind;
			private final String x;
			private final Type t;
			private final ExpCore inner;
			private final Position p;
			
			@java.beans.ConstructorProperties({"kind", "x", "t", "inner", "p"})
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public On(final SignalKind kind, final String x, final Type t, final ExpCore inner, final Position p) {
				this.kind = kind;
				this.x = x;
				this.t = t;
				this.inner = inner;
				this.p = p;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public SignalKind getKind() {
				return this.kind;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public String getX() {
				return this.x;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Type getT() {
				return this.t;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public ExpCore getInner() {
				return this.inner;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Position getP() {
				return this.p;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public On withKind(final SignalKind kind) {
				return this.kind == kind ? this : new On(kind, this.x, this.t, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public On withX(final String x) {
				return this.x == x ? this : new On(this.kind, x, this.t, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public On withT(final Type t) {
				return this.t == t ? this : new On(this.kind, this.x, t, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public On withInner(final ExpCore inner) {
				return this.inner == inner ? this : new On(this.kind, this.x, this.t, inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public On withP(final Position p) {
				return this.p == p ? this : new On(this.kind, this.x, this.t, this.inner, p);
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public boolean equals(final java.lang.Object o) {
				if (o == this) return true;
				if (!(o instanceof ExpCore.Block.On)) return false;
				final On other = (On)o;
				final java.lang.Object this$kind = this.getKind();
				final java.lang.Object other$kind = other.getKind();
				if (this$kind == null ? other$kind != null : !this$kind.equals(other$kind)) return false;
				final java.lang.Object this$x = this.getX();
				final java.lang.Object other$x = other.getX();
				if (this$x == null ? other$x != null : !this$x.equals(other$x)) return false;
				final java.lang.Object this$t = this.getT();
				final java.lang.Object other$t = other.getT();
				if (this$t == null ? other$t != null : !this$t.equals(other$t)) return false;
				final java.lang.Object this$inner = this.getInner();
				final java.lang.Object other$inner = other.getInner();
				if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
				return true;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public int hashCode() {
				final int PRIME = 59;
				int result = 1;
				final java.lang.Object $kind = this.getKind();
				result = result * PRIME + ($kind == null ? 0 : $kind.hashCode());
				final java.lang.Object $x = this.getX();
				result = result * PRIME + ($x == null ? 0 : $x.hashCode());
				final java.lang.Object $t = this.getT();
				result = result * PRIME + ($t == null ? 0 : $t.hashCode());
				final java.lang.Object $inner = this.getInner();
				result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
				return result;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public java.lang.String toString() {
				return "ExpCore.Block.On(kind=" + this.getKind() + ", x=" + this.getX() + ", t=" + this.getT() + ", inner=" + this.getInner() + ")";
			}
		}
		
		@java.beans.ConstructorProperties({"doc", "decs", "inner", "ons", "p"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Block(final Doc doc, final List<Dec> decs, final ExpCore inner, final List<On> ons, final Position p) {
			this.doc = doc;
			this.decs = decs;
			this.inner = inner;
			this.ons = ons;
			this.p = p;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc getDoc() {
			return this.doc;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Dec> getDecs() {
			return this.decs;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ExpCore getInner() {
			return this.inner;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<On> getOns() {
			return this.ons;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Position getP() {
			return this.p;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.Block)) return false;
			final Block other = (Block)o;
			final java.lang.Object this$doc = this.getDoc();
			final java.lang.Object other$doc = other.getDoc();
			if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
			final java.lang.Object this$decs = this.getDecs();
			final java.lang.Object other$decs = other.getDecs();
			if (this$decs == null ? other$decs != null : !this$decs.equals(other$decs)) return false;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			final java.lang.Object this$ons = this.getOns();
			final java.lang.Object other$ons = other.getOns();
			if (this$ons == null ? other$ons != null : !this$ons.equals(other$ons)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $doc = this.getDoc();
			result = result * PRIME + ($doc == null ? 0 : $doc.hashCode());
			final java.lang.Object $decs = this.getDecs();
			result = result * PRIME + ($decs == null ? 0 : $decs.hashCode());
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			final java.lang.Object $ons = this.getOns();
			result = result * PRIME + ($ons == null ? 0 : $ons.hashCode());
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "ExpCore.Block(doc=" + this.getDoc() + ", decs=" + this.getDecs() + ", inner=" + this.getInner() + ", ons=" + this.getOns() + ")";
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Block withDoc(final Doc doc) {
			return this.doc == doc ? this : new Block(doc, this.decs, this.inner, this.ons, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Block withDecs(final List<Dec> decs) {
			return this.decs == decs ? this : new Block(this.doc, decs, this.inner, this.ons, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Block withInner(final ExpCore inner) {
			return this.inner == inner ? this : new Block(this.doc, this.decs, inner, this.ons, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Block withOns(final List<On> ons) {
			return this.ons == ons ? this : new Block(this.doc, this.decs, this.inner, ons, this.p);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Block withP(final Position p) {
			return this.p == p ? this : new Block(this.doc, this.decs, this.inner, this.ons, p);
		}
	}
	
	final class ClassB implements ExpCore, Ast.Atom {
		/*public ClassB(Doc doc1, Doc doc2, boolean isInterface, List<Path> supertypes, List<Member> ms) {
		  this(doc1,doc2,isInterface,supertypes,ms,new ast.Util.CachedStage());
		  }*/
		public ClassB(Doc doc1, Doc doc2, boolean isInterface, List<Path> supertypes, List<Member> ms, ast.Util.CachedStage stage) {
			this.doc1 = doc1;
			this.doc2 = doc2;
			this.isInterface = isInterface;
			this.supertypes = supertypes;
			this.ms = ms;
			this.stage = stage;
			assert stage != null;
			isConsistent();
		}//lombock fails me here :-(
		private final Doc doc1;
		private final Doc doc2;
		private final boolean isInterface;
		private final List<Ast.Path> supertypes;
		private final List<Member> ms;
		private final ast.Util.CachedStage stage;
		
		public String toString() {
			return sugarVisitors.ToFormattedText.of(this);
		}
		
		public boolean isConsistent() {
			int countWalkBy = 0;
			HashSet<String> keys = new HashSet<String>();
			for (Member m : this.ms) {
				if (m instanceof MethodWithType) {
					MethodWithType mwt = (MethodWithType)m;
					String key = mwt.getMs().toString();
					assert !keys.contains(key);
					keys.add(key);
					assert mwt.mt.getTDocs().size() == mwt.mt.getTs().size();
				}
				if (m instanceof NestedClass) {
					NestedClass nc = (NestedClass)m;
					String key = nc.getName();
					assert !keys.contains(key);
					keys.add(key);
					if (nc.inner instanceof WalkBy) {
						countWalkBy += 1;
					}
				}
				if (m instanceof MethodImplemented) {
					MethodImplemented mi = (MethodImplemented)m;
					String key = mi.getS().toString();
					assert !keys.contains(key);
					keys.add(key);
				}
			}
			assert countWalkBy <= 1 : this;
			return true;
		}
		
		public ClassB withMember(Member m) {
			isConsistent();
			List<Member> newMs = new java.util.ArrayList<Member>(this.getMs());
			auxiliaryGrammar.Program.replaceIfInDom(newMs, m);
			ClassB result = this.withMs(newMs);
			result.isConsistent();
			return result;
		}
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		public interface Member extends HasPos {
			
			Member withBody(ExpCore e);
			
			<T> T match(Function<NestedClass, T> nc, Function<MethodImplemented, T> mi, Function<MethodWithType, T> mt);
		}
		
		public static final class NestedClass implements Member {
			@NonNull
			private final Doc doc;
			@NonNull
			private final String name;
			@NonNull
			private final ExpCore inner;
			private final Position p;
			
			public Member withBody(ExpCore e) {
				return this.withInner(e);
			}
			
			public <T> T match(Function<NestedClass, T> nc, Function<MethodImplemented, T> mi, Function<MethodWithType, T> mt) {
				return nc.apply(this);
			}
			
			@java.beans.ConstructorProperties({"doc", "name", "inner", "p"})
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public NestedClass(@NonNull final Doc doc, @NonNull final String name, @NonNull final ExpCore inner, final Position p) {
				if (doc == null) {
					throw new java.lang.NullPointerException("doc");
				}
				if (name == null) {
					throw new java.lang.NullPointerException("name");
				}
				if (inner == null) {
					throw new java.lang.NullPointerException("inner");
				}
				this.doc = doc;
				this.name = name;
				this.inner = inner;
				this.p = p;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Doc getDoc() {
				return this.doc;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public String getName() {
				return this.name;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public ExpCore getInner() {
				return this.inner;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Position getP() {
				return this.p;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public NestedClass withDoc(@NonNull final Doc doc) {
				if (doc == null) {
					throw new java.lang.NullPointerException("doc");
				}
				return this.doc == doc ? this : new NestedClass(doc, this.name, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public NestedClass withName(@NonNull final String name) {
				if (name == null) {
					throw new java.lang.NullPointerException("name");
				}
				return this.name == name ? this : new NestedClass(this.doc, name, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public NestedClass withInner(@NonNull final ExpCore inner) {
				if (inner == null) {
					throw new java.lang.NullPointerException("inner");
				}
				return this.inner == inner ? this : new NestedClass(this.doc, this.name, inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public NestedClass withP(final Position p) {
				return this.p == p ? this : new NestedClass(this.doc, this.name, this.inner, p);
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public boolean equals(final java.lang.Object o) {
				if (o == this) return true;
				if (!(o instanceof ExpCore.ClassB.NestedClass)) return false;
				final NestedClass other = (NestedClass)o;
				final java.lang.Object this$doc = this.getDoc();
				final java.lang.Object other$doc = other.getDoc();
				if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
				final java.lang.Object this$name = this.getName();
				final java.lang.Object other$name = other.getName();
				if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
				final java.lang.Object this$inner = this.getInner();
				final java.lang.Object other$inner = other.getInner();
				if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
				return true;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public int hashCode() {
				final int PRIME = 59;
				int result = 1;
				final java.lang.Object $doc = this.getDoc();
				result = result * PRIME + ($doc == null ? 0 : $doc.hashCode());
				final java.lang.Object $name = this.getName();
				result = result * PRIME + ($name == null ? 0 : $name.hashCode());
				final java.lang.Object $inner = this.getInner();
				result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
				return result;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public java.lang.String toString() {
				return "ExpCore.ClassB.NestedClass(doc=" + this.getDoc() + ", name=" + this.getName() + ", inner=" + this.getInner() + ")";
			}
		}
		/*,"mt"*//*,"mt"*/
		public static final class MethodImplemented implements Member {
			@NonNull
			private final Doc doc;
			@NonNull
			private final MethodSelector s;
			@NonNull
			private final ExpCore inner;
			//ast.Util.CachedMt mt=new ast.Util.CachedMt();
			private final Position p;
			
			public Member withBody(ExpCore e) {
				return this.withInner(e);
			}
			
			public <T> T match(Function<NestedClass, T> nc, Function<MethodImplemented, T> mi, Function<MethodWithType, T> mt) {
				return mi.apply(this);
			}
			
			@java.beans.ConstructorProperties({"doc", "s", "inner", "p"})
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodImplemented(@NonNull final Doc doc, @NonNull final MethodSelector s, @NonNull final ExpCore inner, final Position p) {
				if (doc == null) {
					throw new java.lang.NullPointerException("doc");
				}
				if (s == null) {
					throw new java.lang.NullPointerException("s");
				}
				if (inner == null) {
					throw new java.lang.NullPointerException("inner");
				}
				this.doc = doc;
				this.s = s;
				this.inner = inner;
				this.p = p;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Doc getDoc() {
				return this.doc;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodSelector getS() {
				return this.s;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public ExpCore getInner() {
				return this.inner;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Position getP() {
				return this.p;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodImplemented withDoc(@NonNull final Doc doc) {
				if (doc == null) {
					throw new java.lang.NullPointerException("doc");
				}
				return this.doc == doc ? this : new MethodImplemented(doc, this.s, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodImplemented withS(@NonNull final MethodSelector s) {
				if (s == null) {
					throw new java.lang.NullPointerException("s");
				}
				return this.s == s ? this : new MethodImplemented(this.doc, s, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodImplemented withInner(@NonNull final ExpCore inner) {
				if (inner == null) {
					throw new java.lang.NullPointerException("inner");
				}
				return this.inner == inner ? this : new MethodImplemented(this.doc, this.s, inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodImplemented withP(final Position p) {
				return this.p == p ? this : new MethodImplemented(this.doc, this.s, this.inner, p);
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public boolean equals(final java.lang.Object o) {
				if (o == this) return true;
				if (!(o instanceof ExpCore.ClassB.MethodImplemented)) return false;
				final MethodImplemented other = (MethodImplemented)o;
				final java.lang.Object this$doc = this.getDoc();
				final java.lang.Object other$doc = other.getDoc();
				if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
				final java.lang.Object this$s = this.getS();
				final java.lang.Object other$s = other.getS();
				if (this$s == null ? other$s != null : !this$s.equals(other$s)) return false;
				final java.lang.Object this$inner = this.getInner();
				final java.lang.Object other$inner = other.getInner();
				if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
				return true;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public int hashCode() {
				final int PRIME = 59;
				int result = 1;
				final java.lang.Object $doc = this.getDoc();
				result = result * PRIME + ($doc == null ? 0 : $doc.hashCode());
				final java.lang.Object $s = this.getS();
				result = result * PRIME + ($s == null ? 0 : $s.hashCode());
				final java.lang.Object $inner = this.getInner();
				result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
				return result;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public java.lang.String toString() {
				return "ExpCore.ClassB.MethodImplemented(doc=" + this.getDoc() + ", s=" + this.getS() + ", inner=" + this.getInner() + ")";
			}
		}
		
		public static final class MethodWithType implements Member {
			@NonNull
			private final Doc doc;
			@NonNull
			private final MethodSelector ms;
			@NonNull
			private final MethodType mt;
			@NonNull
			private final Optional<ExpCore> inner;
			private final Position p;
			
			public Member withBody(ExpCore e) {
				return this.withInner(Optional.of(e));
			}
			
			public <T> T match(Function<NestedClass, T> nc, Function<MethodImplemented, T> mi, Function<MethodWithType, T> mt) {
				return mt.apply(this);
			}
			
			@java.beans.ConstructorProperties({"doc", "ms", "mt", "inner", "p"})
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodWithType(@NonNull final Doc doc, @NonNull final MethodSelector ms, @NonNull final MethodType mt, @NonNull final Optional<ExpCore> inner, final Position p) {
				if (doc == null) {
					throw new java.lang.NullPointerException("doc");
				}
				if (ms == null) {
					throw new java.lang.NullPointerException("ms");
				}
				if (mt == null) {
					throw new java.lang.NullPointerException("mt");
				}
				if (inner == null) {
					throw new java.lang.NullPointerException("inner");
				}
				this.doc = doc;
				this.ms = ms;
				this.mt = mt;
				this.inner = inner;
				this.p = p;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Doc getDoc() {
				return this.doc;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodSelector getMs() {
				return this.ms;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodType getMt() {
				return this.mt;
			}
			
			@NonNull
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Optional<ExpCore> getInner() {
				return this.inner;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public Position getP() {
				return this.p;
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodWithType withDoc(@NonNull final Doc doc) {
				if (doc == null) {
					throw new java.lang.NullPointerException("doc");
				}
				return this.doc == doc ? this : new MethodWithType(doc, this.ms, this.mt, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodWithType withMs(@NonNull final MethodSelector ms) {
				if (ms == null) {
					throw new java.lang.NullPointerException("ms");
				}
				return this.ms == ms ? this : new MethodWithType(this.doc, ms, this.mt, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodWithType withMt(@NonNull final MethodType mt) {
				if (mt == null) {
					throw new java.lang.NullPointerException("mt");
				}
				return this.mt == mt ? this : new MethodWithType(this.doc, this.ms, mt, this.inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodWithType withInner(@NonNull final Optional<ExpCore> inner) {
				if (inner == null) {
					throw new java.lang.NullPointerException("inner");
				}
				return this.inner == inner ? this : new MethodWithType(this.doc, this.ms, this.mt, inner, this.p);
			}
			
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public MethodWithType withP(final Position p) {
				return this.p == p ? this : new MethodWithType(this.doc, this.ms, this.mt, this.inner, p);
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public boolean equals(final java.lang.Object o) {
				if (o == this) return true;
				if (!(o instanceof ExpCore.ClassB.MethodWithType)) return false;
				final MethodWithType other = (MethodWithType)o;
				final java.lang.Object this$doc = this.getDoc();
				final java.lang.Object other$doc = other.getDoc();
				if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
				final java.lang.Object this$ms = this.getMs();
				final java.lang.Object other$ms = other.getMs();
				if (this$ms == null ? other$ms != null : !this$ms.equals(other$ms)) return false;
				final java.lang.Object this$mt = this.getMt();
				final java.lang.Object other$mt = other.getMt();
				if (this$mt == null ? other$mt != null : !this$mt.equals(other$mt)) return false;
				final java.lang.Object this$inner = this.getInner();
				final java.lang.Object other$inner = other.getInner();
				if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
				return true;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public int hashCode() {
				final int PRIME = 59;
				int result = 1;
				final java.lang.Object $doc = this.getDoc();
				result = result * PRIME + ($doc == null ? 0 : $doc.hashCode());
				final java.lang.Object $ms = this.getMs();
				result = result * PRIME + ($ms == null ? 0 : $ms.hashCode());
				final java.lang.Object $mt = this.getMt();
				result = result * PRIME + ($mt == null ? 0 : $mt.hashCode());
				final java.lang.Object $inner = this.getInner();
				result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
				return result;
			}
			
			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@javax.annotation.Generated("lombok")
			public java.lang.String toString() {
				return "ExpCore.ClassB.MethodWithType(doc=" + this.getDoc() + ", ms=" + this.getMs() + ", mt=" + this.getMt() + ", inner=" + this.getInner() + ")";
			}
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc getDoc1() {
			return this.doc1;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc getDoc2() {
			return this.doc2;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean isInterface() {
			return this.isInterface;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Ast.Path> getSupertypes() {
			return this.supertypes;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<Member> getMs() {
			return this.ms;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ast.Util.CachedStage getStage() {
			return this.stage;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ClassB withDoc1(final Doc doc1) {
			return this.doc1 == doc1 ? this : new ClassB(doc1, this.doc2, this.isInterface, this.supertypes, this.ms, this.stage);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ClassB withDoc2(final Doc doc2) {
			return this.doc2 == doc2 ? this : new ClassB(this.doc1, doc2, this.isInterface, this.supertypes, this.ms, this.stage);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ClassB withInterface(final boolean isInterface) {
			return this.isInterface == isInterface ? this : new ClassB(this.doc1, this.doc2, isInterface, this.supertypes, this.ms, this.stage);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ClassB withSupertypes(final List<Ast.Path> supertypes) {
			return this.supertypes == supertypes ? this : new ClassB(this.doc1, this.doc2, this.isInterface, supertypes, this.ms, this.stage);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ClassB withMs(final List<Member> ms) {
			return this.ms == ms ? this : new ClassB(this.doc1, this.doc2, this.isInterface, this.supertypes, ms, this.stage);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ClassB withStage(final ast.Util.CachedStage stage) {
			return this.stage == stage ? this : new ClassB(this.doc1, this.doc2, this.isInterface, this.supertypes, this.ms, stage);
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.ClassB)) return false;
			final ClassB other = (ClassB)o;
			final java.lang.Object this$doc1 = this.getDoc1();
			final java.lang.Object other$doc1 = other.getDoc1();
			if (this$doc1 == null ? other$doc1 != null : !this$doc1.equals(other$doc1)) return false;
			final java.lang.Object this$doc2 = this.getDoc2();
			final java.lang.Object other$doc2 = other.getDoc2();
			if (this$doc2 == null ? other$doc2 != null : !this$doc2.equals(other$doc2)) return false;
			if (this.isInterface() != other.isInterface()) return false;
			final java.lang.Object this$supertypes = this.getSupertypes();
			final java.lang.Object other$supertypes = other.getSupertypes();
			if (this$supertypes == null ? other$supertypes != null : !this$supertypes.equals(other$supertypes)) return false;
			final java.lang.Object this$ms = this.getMs();
			final java.lang.Object other$ms = other.getMs();
			if (this$ms == null ? other$ms != null : !this$ms.equals(other$ms)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $doc1 = this.getDoc1();
			result = result * PRIME + ($doc1 == null ? 0 : $doc1.hashCode());
			final java.lang.Object $doc2 = this.getDoc2();
			result = result * PRIME + ($doc2 == null ? 0 : $doc2.hashCode());
			result = result * PRIME + (this.isInterface() ? 79 : 97);
			final java.lang.Object $supertypes = this.getSupertypes();
			result = result * PRIME + ($supertypes == null ? 0 : $supertypes.hashCode());
			final java.lang.Object $ms = this.getMs();
			result = result * PRIME + ($ms == null ? 0 : $ms.hashCode());
			return result;
		}
	}
	
	final class _void implements ExpCore, Ast.Atom {
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public _void() {
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore._void)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			int result = 1;
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "ExpCore._void()";
		}
	}
	
	final class WalkBy implements ExpCore {
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public WalkBy() {
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.WalkBy)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			int result = 1;
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "ExpCore.WalkBy()";
		}
	}
	
	final class Using implements ExpCore {
		private final Path path;
		private final MethodSelector s;
		private final Doc doc;
		private final List<ExpCore> es;
		private final ExpCore inner;
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		@java.beans.ConstructorProperties({"path", "s", "doc", "es", "inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Using(final Path path, final MethodSelector s, final Doc doc, final List<ExpCore> es, final ExpCore inner) {
			this.path = path;
			this.s = s;
			this.doc = doc;
			this.es = es;
			this.inner = inner;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Path getPath() {
			return this.path;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public MethodSelector getS() {
			return this.s;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Doc getDoc() {
			return this.doc;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public List<ExpCore> getEs() {
			return this.es;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ExpCore getInner() {
			return this.inner;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.Using)) return false;
			final Using other = (Using)o;
			final java.lang.Object this$path = this.getPath();
			final java.lang.Object other$path = other.getPath();
			if (this$path == null ? other$path != null : !this$path.equals(other$path)) return false;
			final java.lang.Object this$s = this.getS();
			final java.lang.Object other$s = other.getS();
			if (this$s == null ? other$s != null : !this$s.equals(other$s)) return false;
			final java.lang.Object this$doc = this.getDoc();
			final java.lang.Object other$doc = other.getDoc();
			if (this$doc == null ? other$doc != null : !this$doc.equals(other$doc)) return false;
			final java.lang.Object this$es = this.getEs();
			final java.lang.Object other$es = other.getEs();
			if (this$es == null ? other$es != null : !this$es.equals(other$es)) return false;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $path = this.getPath();
			result = result * PRIME + ($path == null ? 0 : $path.hashCode());
			final java.lang.Object $s = this.getS();
			result = result * PRIME + ($s == null ? 0 : $s.hashCode());
			final java.lang.Object $doc = this.getDoc();
			result = result * PRIME + ($doc == null ? 0 : $doc.hashCode());
			final java.lang.Object $es = this.getEs();
			result = result * PRIME + ($es == null ? 0 : $es.hashCode());
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "ExpCore.Using(path=" + this.getPath() + ", s=" + this.getS() + ", doc=" + this.getDoc() + ", es=" + this.getEs() + ", inner=" + this.getInner() + ")";
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Using withPath(final Path path) {
			return this.path == path ? this : new Using(path, this.s, this.doc, this.es, this.inner);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Using withS(final MethodSelector s) {
			return this.s == s ? this : new Using(this.path, s, this.doc, this.es, this.inner);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Using withDoc(final Doc doc) {
			return this.doc == doc ? this : new Using(this.path, this.s, doc, this.es, this.inner);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Using withEs(final List<ExpCore> es) {
			return this.es == es ? this : new Using(this.path, this.s, this.doc, es, this.inner);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Using withInner(final ExpCore inner) {
			return this.inner == inner ? this : new Using(this.path, this.s, this.doc, this.es, inner);
		}
	}
	
	final class Signal implements ExpCore {
		private final SignalKind kind;
		private final ExpCore inner;
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		@java.beans.ConstructorProperties({"kind", "inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Signal(final SignalKind kind, final ExpCore inner) {
			this.kind = kind;
			this.inner = inner;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public SignalKind getKind() {
			return this.kind;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ExpCore getInner() {
			return this.inner;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.Signal)) return false;
			final Signal other = (Signal)o;
			final java.lang.Object this$kind = this.getKind();
			final java.lang.Object other$kind = other.getKind();
			if (this$kind == null ? other$kind != null : !this$kind.equals(other$kind)) return false;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $kind = this.getKind();
			result = result * PRIME + ($kind == null ? 0 : $kind.hashCode());
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "ExpCore.Signal(kind=" + this.getKind() + ", inner=" + this.getInner() + ")";
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Signal withKind(final SignalKind kind) {
			return this.kind == kind ? this : new Signal(kind, this.inner);
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Signal withInner(final ExpCore inner) {
			return this.inner == inner ? this : new Signal(this.kind, inner);
		}
	}
	
	final class Loop implements ExpCore {
		private final ExpCore inner;
		
		@Override
		public <T> T accept(coreVisitors.Visitor<T> v) {
			return v.visit(this);
		}
		
		@java.beans.ConstructorProperties({"inner"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Loop(final ExpCore inner) {
			this.inner = inner;
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public ExpCore getInner() {
			return this.inner;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpCore.Loop)) return false;
			final Loop other = (Loop)o;
			final java.lang.Object this$inner = this.getInner();
			final java.lang.Object other$inner = other.getInner();
			if (this$inner == null ? other$inner != null : !this$inner.equals(other$inner)) return false;
			return true;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $inner = this.getInner();
			result = result * PRIME + ($inner == null ? 0 : $inner.hashCode());
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "ExpCore.Loop(inner=" + this.getInner() + ")";
		}
		
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Loop withInner(final ExpCore inner) {
			return this.inner == inner ? this : new Loop(inner);
		}
	}
}