Separating use and reuse to improve both //(title from bruno)

Abstract

Introduction

Historically, we have seen a lot of focus on the importance
of separing subtype from subclassing[].
This is claimed to be good for code reuse, design and
reasoning.
While there is no problem is subtyping without subclassing
In most OO languages code reuse (inheritance/extends) imply subtyping.
Consider the following (Java) code:

  class A{ int ma(){return Utils.m(this);} }
  class Utils{static int m(A a){..}}

This code seam correct, and there is no subtyping/subclassing.
Now, lets add a class B

  class B extends A{ int mb(){return this.ma();} }

class B now have a method ma inherited from A.
This method passes "this" as A; we can see an invocation of ma
inside mb, where "this" is of type B.
The execution will eventually call Util.m with a B instance.
This can be correct only if B is a subtype of A.
Thus, every OO language with the minimal features 
exposed in this example (using this, extends, method call)
if forced to accept that subclassing implies subtping.
Note how this is true also in C++, where is possible to
"extends privately". Such is a limitation of the visibility of
subtyping but not over subtyping itself, and the former example
would be accepted by C++ even if B was to "privately extends" A.
//Cite some work of bruceTHisType and show how he also fails.

We will show here a simple design to completley uncouple subtyping
and subclassing in a nominally typed OO language,
by dividing code designed for USE
from code designed for REUSE.
First we show a minimal language, then we show how mutually recursive types
are supported, how state/constructors/fields are supported,
how we can extend the language with nested classes.
Finally we show 42, a full blown language build around our ideas of reuse.

Our design leverage on traits[]: a well know mechanisms for pure code reuse

Lets consider a simple language where trait names start lowercase (t)
and class names start uppercase (C).
To declare a trait or a class, we can use a code literal or a trait expression.
Traits come with various operators (restrict, hide, alias) but for now we
focus on the single operator Sum, taking a set of trait names or literals
and composing them in an associative and commutative way.
Sum is the simplest and most elegant composition operator.
Sum tL1,..tLn composes
the content of tL1 ..tLn by taking the union of the methods and the
union of the implements.
The Sum can not be applied if multiple versions of the same
 method are present in different tLi.
An exception is done for abstract methods: methods where the implementation e is missing;
In this case, if the headers are compatible the implemented version is selected.
In a sum of two abstract methods with compatible headers, the one with the more specific type
is selected. We will discuss later the formal details of Sum.



L::={interface? implements Ts Ms} //code literal
T::=C //types are class names
M::= class? method T m(Txs) e? //method declaration
tL::=t | L  //trait name or literal
TD::= t:L | t:Sum tLs  //trait declaration
CD::= C:L | C:Sum tLs
e::= x | T | e.m(es)
D::=CD | TD

A version of this language where there are no traits can be seen 
as a restriction/variation of FJ[]

As you can see literal can be marked interface.
We will call class interface, or simply interface
a class declaration of for C:{interface ...}.

While classes are typed assuming "this" is of the nominal type of
the class, 
trait declarations, do not introduce any nominal type.
"this" in a trait is typed with a special type "This" that is visible
only inside such trait.
Syntactically, a Literal can use the This type, and when the trait is
reuse to create a class, This will become just an alias for the class name. 


In a program Ds, a code literal is not well typed if it implements some C that
is not an interface; that is, implementing interface is the
only way to induce subtyping in this language
literals can implement classes.

As you can see there is no extends keyword, and SUM can not contain class names.
In a sense, all classes are final (as in Java).
That is, using a trait is the only way to induce code reuse.

Lets now try to encode the example of before in our language:

 A:{ method int ma(){return Utils.m(this);} }
 Utils:{ class method int m(A a){..}}
 
This code is fine, but there is no way to add a B reusing code of A, since
A is designe for code USE and not REUSE. Lets try again

 ta:{ method int ma(){return Utils.m(this);} }
 A:SUM ta
 Utils:{ class method int m(A a){..}}

This does not work, because Utils.m waints an A and "this" in
ta have no knowlegde of A. Lets try again

 IA:{interface method int ma()}
 ta:{implements IA
   method int ma(){return Utils.m(this);} }
 A:SUM ta
 Utils:{ class method int m(IA a){..}}

This code works: Utils is using an interface IA and the trait ta
is implementing it. It is also possible to add a B as follow
Abeit other semantic models for traits[] have been proposed,
here we use the flattening model.
This means that 
 A:SUM ta
  reduces/is equvalent to/is flatted into
 A:{implements IA method int ma(){return Utils.m(this);} }
This code seam correct, and there is no subtyping/subclassing.
Now, lets add a class B

  B:Sum ta, { int mb(){return this.ma();} }

This also works.
B reuses the code of ta, but have no knowledge of A.
Since B reuses ta, and ta implements IA, also B implements IA.
By flattening, B is reduced to
B:{implements IA
  method int ma(){return Utils.m(this);}
  int mb(){return this.ma();} } 

Now some important notes on typing:

-traits are well typed before being reused. For example in
t:{int m() 2 int n() this.m()+1}
t is well typed since m() is declared inside of t, while
t1:{int n() this.m()+1} would be ill typed.
Note how in the former example ta is well typed just by knowing itself and IA.

-in class expressions C:Sum tLs
L in tLs are not well typed (on their own) before flattening, only
the result is supposed to be well typed.
Also Java have the same behaviour:
for example in
  class B extends A{ int mb(){return this.ma();} }
we can call this.ma() even if in the curly braces there is no declaration for ma.
In our example,with the trait t of before
C: Use t {int k() this.n()+this.m()}
would be well typed, even if n,m are not defined inside
{int k() this.n()+this.m()}
This is not the case in may similar works in literature[] where the
literals have to be self complete. In this case we would have been forced to
declare abstract methods n and m.

This idea that code literals wrote
in the declaration of a class
do not have to be well typed on their own also lets us
reason about mutually recursive types. (see later) 

-if a class is declared by using C:Sum ts, that is, without literals,
If the Sum is successfull, C is well typed, no need of further checking.
-on the other side, if a class is declared by C:Sum tLs, with
L1..Ln in tLs, and after successfull flattening C:L is not well typed,
the error was originally present in one of L1..Ln.

Recursive types:
OO language leverage on recursive types most of the times.
For example in a pure OO language, String may offer a Int size()
method, and Int may offer a String toString() method.

This means that is not possible to type in (full) isolation classes
String and Int.

The most expressive compilation process may divide the classes in groups of mutually 
dependent classes.
Each group may also depend from a number of other groups.
This would form a Direct Aciclyc Graph of groups.
To type a group, we first need to type all depended groups, then
we can extract the structure/signature/structural type of all
the classes of the group.
Now, with the information of the depended groups and the one extracted
from the current group, it is possible to typecheck the implementation
 of each class in the group.

In this model, it is reasonable to assume that flattening happens group by group, before
extracting the class signatures.

Here we go for a much simpler simple top down execution/interpretation for flattening, where flattening
happen one at the time, and classes are typechecked where their type is first needed.

For example

A:{int ma(B b) b.mb()+1}
tb:{int mb() 2}
tc:{int mc(A a,B b) a.ma(b)}
B: Sum tb
C: Sum tc, {method int hello() 1}

In this scenario, since we go top down, we first need to generate B.
To generate B, we need to use tb;
In order modularly ensure well typedness,
we require tb to be well typed at this stage. If tb was not well typed
a compilation error could be generated at this stage.
In this moment, A can not be compiled/checked alone,
we need informations about B, but A is not used in tb,
thus we do not need to type A and we can type tb with
 the available informations and proceed to generate B.
Now, we need to generate C, and we need to ensure well typedness of tc.
Now B is alreay well typed (since generated by Sum tb, with no Ls),
and A can be typed;  finally tc can be typed and used.
If sum could not be performed (for example it tc had a method hello too)
a compilation error could be generated at this stage.

On the opposite side, if B and C was swapped, as in
C: Sum tc, {method int hello() 1}  
B: Sum tb
now the first task would be to generate C, but 
to type tc we need to know the type of A and B.
But they are both unavailable: B is still not computed and 
A can not be compiled/checked alone, without information about B.
A compilation error would be generated, on the line of "flattening of C
requires tc, tc requires A,B, B is still in need of flattening".

In this example, a more expressive compilation process 
could compute a dependency graph and, if possible, reorganize the list,
but for simplicity lets consider to always provide the declarations
in the right order, if one exists.

Some may find the requirement of the existence of an order restrictive;
An example of a "morally correct" program where no right order exists is the following:

t:{ int mt(A a) a.ma()}
A:Sum t {int ma() 1}

We expect two (related) criticism to our compilation model:
1
In a system without inference for method types,
if the result of composition operators depends only on the
structural shape of their input (as for Sum)
is indeed possible to optimistically compute the resulting structural shape of the classes
and use this information to type involved examples like the former.
We believe such typing discipline could be fragile,
and could make human understanding the code reuse process much harder/involved.
2
In the world of strongly typed languages we could be tempted to
first check that all can go well, and then perform the flattening.
This would however be overcompicated for no observable difference:
Indeed, in the former example there is no difference
between
  First checking B and produce B code (that also contains B structural shape),
  then use B shape to check C and produce C code
or a more involved
  First check B and discover B structural shape as result of the checking,
  then use B shape to check C.
  Finally produce both B and C code.


Managing State
The Sum operator is very elegant, but our research community is struggling to
make it work with constructor/state/fields.
The goals fo this struggle are as follow:
-keep sum associative and commutative.
-allowing a class to create instances of itself.
-actually initialize objects, not leaving no null fields
-managing fields in a way that borrows the elengance of summing methods
-make easy to add new fields

In the related work we will show some alternative ways to handle state.
However the purest solution just requires methods:
  The idea is that
  the trait code just uses getter/setters/factories, while leaving
  to classes the role to finally define the fields/constructors.
  That is, the  the class has syntax richer that the trait one,
  allowing declaration for fields and constructors.
  This approach is very powefull[see class less java]
 
  Pro: This approach is associative and commutative, even self construction
  can be allowed if the trait requires a static/class method
  returning This; the class will then implement this method by forwarding
  a call to the constructor.
  Negative: writing the class code with the constructors and
   fields and getter/setters and factories can be quite tedious.
   There is no way for a trait to specify a default value for a field,
   the class need to handle all the state, even state that is conceptually
   "private" of such trait.

  for example 

  pointSum: { method int x(); method int y();
    static method This of(int x,int y);
    method This sum(This other)
      This.of(this.x+other.x,this.y+other.y);
    }
  pointMul: { method int x(); method int y();
    static method This of(int x,int y);
    method This mul(This other)
      This.of(this.x*other.x,this.y*other.y);
    }

  a first attemp of composition

  Point:Use pointSum,pointMul
  
  would fail since methods x,y and of are still abstract.
  In this model the user is required to write something similar to
  CPoint:Use point,colored, {
    int x; int y;
    method int x()x; method int y()y;
    class method This of(int x, int y)
      new Point(x,y);
    constructor Point(int x, int y){
      this.x=x;this.y=y;this.color=color;
      }
    }
  after a while programming in this style, those "fixpoint" close the state in
  the obvious way classes becomes quite repetitive, and one wonder
  if it could be possible to automatically generate such code[]
  In our model we go one step further:
  In our model there is no need to generate code, or to explicitly
  write down constructors and fields; there is not even syntax for those
  constructor.
  The idea is that any class that "could" be completed in the obvious way
  is a complete "coherent" class.
  Others call abstract a class that have abstract methods.
  We call abstract a class that have a set of abstract methods that are not
  coherent, that is, you can not interpret those as factory,getters and setters.
  
  In the detail: a class with no abstract method is coherent, and like Java Math
  will just be usefull for calling class/static methods.
  a class with a single abstract class method returning This
  is coherent if all the other abstract methods can be seen as "abstract state
  operations" over one of its argument.
  For example,
  if there is a class method This of(int x, int y) as before,
  then
  a method int x() is an abstract state method, getter for x.
  a method Void x(int that) is abstract state method, setter for x.
  while getters and setters are fundamental operations, we can immagine
  more operations to be supported:
  method This withX(int that) may be a "wither", doing a functional field update
  method Void update(int x,int) may do two field update at a time
  method This clone() may do a shallow clone of the object.
  We are not sure what is the best set of abstract state operations yet.
  
  
  lets play with the points of before, to see what good can we do with the current
  instruments:
  
  pointSum: { method int x(); method int y();
    static method This of(int x,int y);
    method This sum(This other)
      This.of(this.x+other.x,this.y+other.y);
    }
  pointMul: { method int x(); method int y();
    static method This of(int x,int y);
    method This mul(This other)
      This.of(this.x*other.x,this.y*other.y);
    }
  PointAlgebra:Sum pointSum,pointMul
  
  As you can see, we can declare the methods independently and compose the result
  as we wish. However we have to repeat the abstract methods x,y and of.
  In addition of Sum,Mul we may want many operations over points; can we improve our reuse
  and not repeat such abstract definitions? of course!

  p: { method int x(); method int y();
    static method This of(int x,int y);
    }
  pointSum:Sum p, { method This sum(This other)
      This.of(this.x+other.x,this.y+other.y);
    }
  pointMul:Sum p, { method This mul(This other)
      This.of(this.x*other.x,this.y*other.y);
    }
  pointDiv: ...
  PointAlgebra:Sum pointSum,pointMul,pointDiv,...
      
  now our code is fully modularized, and each trait handle exactly one method.

  What happens if we want to add fields instead of just operations?
  colored:{ method Color color() }
  Point:Sum pointSum,colored
  
  This first attempt does not work: the abstract color method
  is not a getter for any of the parameters of 
  class method This of(int x,int y) 
  A solution is to provide a richer factory:
  CPoint:Sum pointSum,colored,{
    class method This of(int x,int y) This.of(x,y,Color.of(/*red*/)
    class method This of(int x, int y,Color color)
    }
  where we assume to support overloading on different parameter number.
  This is a good solution, we think is better that any alternatives in literature,
  however the method CPoint.sum reset the color to red.
  What should be the behaviour in this case?
  If instead of writing This.of() we used 
  this.withX(newX).withY(newY) we could preserve the color from this.
  Not sure if that would be better.
  If the point designer could predict this kind of extension, then we could
  use the following design:  
  p: { method int x(); method int y();
    method This withX(int that);
    method This withY(int that);
    static method This of(int x,int y);
    method This merge(This other);
    }
  pointSum:Sum p, { method This sum(This other)
      this.merge(other).withX(this.x+other.x).withY(this.y+other.y);
    }
  colored:{method Color color();
    method This withColor(Color that);
    method This merge(This other)
      this.withColor(this.color().mix(that.color());
    }
  CPoint:/*as before*/
  
  Now we can merge colors, or any other kind of state we may want to add
  following this pattern.


  Extensions to our model
  One of the main feature of our simple reuse/use model is that it can be
  easly extended.

  Nested classes and expression problem
  a nested class will be another kind o member in the Literal, so  

M::= class? method T m(Txs) e? | CD
T::= C| C.T //now types are paths

The general idea is that with sum, nested classes with the same name are recursivelly composed.
Note that while we have nested classes, we do not have nested traits: all traits are still
at top level.
Untypable/unresolved Traits are also the only "dependency"
the type system keeps track of, this means that when a nested class at an arbirary
nested level is flattend, as in
C:{ D:{ E:Sum t1,t2,L}}
t1 and t2 must be defined before C and ad top level, and they may require classes (and their
nested) defined before C. This means that the type system can still consider
the class table as a simple map from Types T to ...  

now we can easily encode the expression problem:


exp:{Exp:{interface}}
lit:Sum exp,{ Lit:{implements Exp 
    class method This of(int inner);
    method int inner();}
  }
sum:Sum exp,{ Sum:{implements Exp 
    class method This of(Exp left, Exp right);
    method Exp left(); method Exp right();}
  }  
uminus:Sum exp,{ UMinus:{implements Exp 
    class method This of(exp inner);
    method Exp inner();}
  }   
expToS:{Exp:{interface method String toString()}}
sumToS:Sum sum,expToS,{ Sum:{implements Exp
    method String toString()
      left.toString()+"+"+right.toString();
  }
uminusToS:...
then just sum all you need

MySolution:Sum sumToS,litToS

More expression problem: transformer method: lets add 1 to all literals
expAdd1:{Exp:{interface method Exp add1()}}
sumAdd1:Sum sum,expAdd1,{Sum:{implements Exp
    method Exp add1()
      Sum.of(left.add1,right.add1());
  }
litAdd1:Sum lit,expAdd1,{Lit:{implements Exp
    method Exp add1()
      Lit.of(inner()+1);
    }
  
MySolutionAdd1:Sum sumToS,litToS,sumAdd1,litAdd1

Notice how if we wished to add many similar operations we would 
have to repeat the propagation code (as in sumAdd1) many times
just changing the name of the operation. We show later how to avoid this.


------------------------------ 
More operators:

Sum is amazing, elegant and simple, but the system can be enriched with more 
operators:
The idea is that there is no need of a fixed set of operators,
every operator just have to respect the following criteria:
if starts form well typed code, it produces well typed code.
TODO: tell what happens when summing interfaces+classes
---------
Restrict make abstract method

--------
Rename, like refactoring
Rename can invoke sum inside
---------
Redirect, like generics
Redirect can be multiple.

With redirect+rename we can have the general operator propagator
 
operation:{//for sum and lit, easy to extends as before
  T:{}
  Exp:{interface method Exp op(T x)}}
  Sum:Sum sum,{ extends Exp sum,expAdd1,{
    method Exp op(T x)
      Sum.of(left.op(x),right.op(x));
    }
  Lit:Sum lit,{
    method Exp op(T x)
      this;
  }
Now, to have my addN I can
opAddn: Sum
  operation[redirect T to Int]
    [rename Exp.op(x) to addN(x)][restrict Lit.op(x)], {
  Lit:{method Exp addN(Int x) Lit.of(inner())+x}
  }
  
Full power of redirect

serviceCombinator:{ S:{implements Service
  method R report()
  }
  
  R:{method R combine(R that)
    class method R empty()}
  
  ListS:list[redirect Elem to S]
  
  class R method(ListS ss){//here we use extended java like syntax
    R r=R.empty()
    for(S s in ss){
      s.performService();
      r=r.combine(s.report())
      }
    return r;
  }
}
PaintingService:serviceCombinator[redirect S to Painting.Service]

To encode the former generic code in java you need to write
the following headeche inducing interfaces for RService and Report (and still we miss the empty method)
and require that the services you want to serve implement those.
  interface Service{ void performService();}
  interface Report<R extends Report<R>>{R combine(R that);}
  interface RService<R extends Report<R>> extends Service{ R report();}

---------------------
Road to 42:

  In the model we have presented we have iterative compilation,
  in the sense that flattening and type checking alternates.
  What if flattening could execute arbitrary computation?
  This would subsume the need for a main expression!
  
  e::=x|T|e.m(es)|L
  CD::=C:e
  T::=Cs | Library | Class
  and a trait will just be encoded as a class with a single method:
  Trait1:{class method Library code() L1 }
  Composition operators are now supported by some classes:
  Sum.of(e1,e2)
  Rename.of(...)
  and we can have a Resource(L) operator
  that just wrap the L into a method, so that
  Trait1:Resource(L1) will reduce in the trait pattern as before.
  
  Now typing is a little harder....
  
  ----------
  In addition to this, 42 have feature less related to code composition, like
  a strong type system supporting aliasing mutability and circularity control,
   checked exceptions, errors (unchecked exceptions), strong exception safety
   for errors ... 
  a compact syntax for arithmentic and list operations,
  allowing overloading and a much nicer syntax for code composition
  as ....
  
  42 is also strongly against primitive types/classes, thus there is no such
  thing as a predefined standard library or a nicer sintax for certains special 
  classes like String and numbers.
  The idea is that any program will start importing a library, called Towel,
  that contains the classes that are usually expected from a standard library.
  And the programmers are encouraged to develop their own version of towels.
  
  This would be crazy in any language not supporting the level of code reuse
  42 offers:
  From one side, developing your own standard library would be a massive amount
  of work, and from the other side, libraries developed using a certain towel 
  would not be compatible with any other towel.
  However, the level of code reuse offered by 42 solves both limitations:
  You can obtain your own Towel by staining/embrowdering another Towel.
  You can load a library deployed by other towels.
  
  Lets dig in how this mechanism can work
  
  
  After, show Use.hide/Use.extends
  
  This form of disciplined metaprogramming
  is more likly to produce semantically reasonable results w.r.t.
  full ast generation metaprogramming/ quote unquote metaprogramming.
  
  This is because the atomic steps are operations 
  designed to be understandable and meaningful for the human metaprogrammer,
  and because such operators can not introduce any new type error.
  
  This disciplined metaprogramming is not very limited, as one may expect;
  indeed is possible to generate arbitrary behaviour out of inductive reasoning:
  example: generate toS.
  -base: case one field
  -step: merge two fields
  -wrap the final result
   
   
  
  


  
  
  
  
  ListP:{inteface
    method int size()
    method Person get(int index)
    method void set(int index,Person value) 
    }
  baseList:{implements ListI...}
  map:{implements ListI
    method Bool geq(Person p1,Person p2)
    method This sort(){..use geq..}}
  
  MyList:Sum baseList,map,{ method Bool geq(Person p1,Person p2) p1.age()>p2.age() }


-----------------------------------------
examples of attempts of constructors/state in traits:
   

  No constructor: all the fields start at null/a default specified value.
  In this model fields are like another kind of member, and two fields
  with identical type can be merged by sum.
  
  In this model, you can write new C() for all classes, and
  you may be required to call and init method later, as in
  new Point().init(10,30).
  pro: commutative/associative, do not disrupt elegance of sum methods.
  negatives: objects are created "broken" and the user is trusted with fixing them
    easy to add fields, but the load of inizializing them is on the user; moreover
    all the objects are intrinsically mutable, so this model is unfriendly
    to a functional programming style.
  /*
  for example, in the usual Point/ColoredPoint example,
  a point trait could look like
  point: { int x=0; int y=0
  method This initXY(int x,int y){this.x=x;this.y=y;return this;}
  method This sum(This other){
    return new This().initXY(this.x+other.x,this.y+other.y);}
  }
  and a CPoint class just adding a color could look like
  colored:{ Color color=new Color().init(/*red*/);}
  CPoint:Use point,colored
  CPoint:{ int x=0; int y=0;Color color=new Color().init(/*red*/);
    method This initXY(int x,int y){this.x=x;this.y=y;return this;}
    method This sum(This other){
      return new This().initXY(this.x+other.x,this.y+other.y);}
    }
  Where summing points leave the color to red, without giving any warning
  to the programmer composing point and colored.
*/  
  
constructor compose fields:
In this approach the fields are declared but not initialized, and
a constructor taking a value for each field and just initializing such field
is automatically generated in the resulting class.
Pro: it is easy to add fields.
Negatives:This approach is associative but not commutative, since the order of composition
will change the order of the fields, there is no support for self construction
more that declaring a static abstract factory as before.
  
Constructor can be composed if they offers the same parameters.
In this approach traits declare field and constructors
and the constructor initialize the fields, and can do any other computation.
In order to sum two traits, we need their constructors to have the same 
parameters with the same order. Then the composed constructor will execute
both constructor bodies in order.
Pro: it is associative and "mostly" commutative: the order of composition is relevant only
in the order of execution of side effects during construction.
Self construction is easy in this model.
Negative: the requirement that the constructors need the same parameters 
hamper reuse, and if a field is added, its initial value need to be
syntetized from the old constructor parameters.

-----------------------------

Our proposed solution:
We like the extreame 