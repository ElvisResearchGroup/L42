failing tests
-----------------------
refactor.TestInvariantClose 1,2,3,4,6
repl.CachingTest 
newReduction.TestL42F 0,5,6,7,9
testAux.TestPassingPrograms //check and remove?
widgetGui.TestTests SafeMovable
--------------

mut T bar = ...
mut T foo = IMList[mutelems: bar];

read T _ = foo.getRead(0); // ok
mut T _ = foo.getMut(0);
imm T _ = foo.getImm(0); // runtime error

imm T ifoo = foo;

imm T _ = ifoo.getRead(0); // ok
//mut T _ = ifoo.getMut(0); // type error
imm T _ = ifoo.getImm(0); // runtime error

read T rfoo=ifoo.norm();
imm T _ = rfoo.getImm(0); // runtime error

ifoo.iterator()

ifor x in e ()
==>
mfor x in e.iter() ()
nfor x in ifoo() => for x in ifoo.imIter();


for x in ifoo.vals() (/* x is imm*/)
for x in foo.vals() (/* x is read*/)
for var x in foo.#vals() (/* x is read but updetable*/)
for x in foo.#vars() (/* x is mut*/)
for x in rfoo (/* x is read*/)


delimiters: {} () [] :; ''  "" ..
or even a language to define user defined delimiters



Trait X = {
  S: {}
  T: { S foo(); }
}

X<T = Bar>

CA<A extends CA<B>,B extend CB<A>>{ B m(B b); }
CB<A extends CA<B>,B extend CB<A>>{ A m(A a); }
CC<A extends CA<A,B>,B extend CB<A,B>> { ...}


trait CA { 
  type B: CB<A = Self>;
  B m(B b); 
}
trait CB {
  type A: CA<B = Self>;
  A m(A b); 
}

trait CC<A: CA<B = B>, B: CB<A = A>> {
  ...
}
trait CC {
  type A: CA<B = Self::B>
  type B: CB<A = Self::A>
}

C<A extends CA<B>,B extend CB<A>> { ...}\

CC: {
  A: { B m(B); }
  B: { A m(A); }
  ...
}<A=MyA, B=MyB>





-capsule visible as read

e1 (caps/imm/class) can always be in parallel
e2 (read)

if we can have a lent collection of read objects
or anyway update a read field, we have -capsule visible as read
  lent list=.. //lent method add(read r)
  capsule a=..
  capsule a2=(mut b=a
   list.add(b)
   b)
  a2 and list usable
  

-------------------------------

name->name
name=>name

iname arrow name
-if method left is method right

A: {
  B: {method Void bar() e}
  C: {method Void bar() e'}
  method Void foo(B)
}[B ~~> C]
[ B=>F][B->C][F->B]


A: {
  User:{method Void call(B that)}
  B: {method Void bar() User.call(this)}
  method Void foo(B b)
}

A: {
  B: {method Void bar()}
} +  {
  User:{method Void call(C that)}
  C: {method Void bar() User.call(this)}
  method Void foo(C b)
}





A: {
  B: {method Void bar()}
  User:{method Void call(C that)}
  C: {method Void bar() User.call(this)}
  method Void foo(C b)
}

A: {
  User:{method Void call(B that)}
  I: {interface method B m() }
  B: {implements I refine method This m()( User.call(this) this) }
}
=> [extract B into C]
A: {
  User:{method Void call(B that)}
  I: {interface method B m() }
  B: {implements I refine method This m()( User.call(this) this) }
  C: {implements I refine method B m() }
}
=> [moveImpl B into C]
A: {
  User:{method Void call(C that)}
  I: {interface method C m() }
  //B: {implements I refine method C m()}
  C: {implements I refine method C m()( User.call(this) this)  }
}

A: {
  I: {interface method C m() }
  B: {implements I refine method This0 m() }
  C: {implements I refine method This0 m() }
}

A: {
  D: {
    B: {}
    method Void foo(This0.B)
  }
}[D.B -> C]

==>
A: {
  D: {
    method Void foo(This1.C)
  }
    C: {}
}[D.B -> C]

A: {
  User:{method Void call(C that)}
  B: {method B bar()}
  C: {method C bar() this}
  method Void foo(B b)
}


L[B => C]
===>
L[toAbstract][only B] + L[B -> C]


L[B =+> C]
===>
L[B -> C] + L[only B]

-> move code and references
=> move code and leave abstract behind
-!> extract abstract signature in a new place
~~>old code stay, move reference and instert new abstract if needed
//marco belive ~~> not needed

A: {
  User:{method Void call(B that)}
  I: {interface method B m() }
  B: {implements I refine method This m()( User.call(this) this) }
}

iname=Cs.s | Cs | trash
class method
  Cs.s -> Cs'.s' = rename // need to rename this -> Cs, This->Cs
  Cs.s -> P'.s' = redirect? // all the signature is external Paths
  Cs.s => Cs'.s' = rename but not reference//this -> Cs, This->Cs
  Cs.s ~~> Cs'.s'= make sense and is derived 
  Cs.s ~~> P.s'= make sense, redirect can be derived from this
  Cs.s -!> Cs'.s'= what happens to class method This foo() ? This=Cs or Cs'? for consistency This=Cs for cases like This.C=Cs.C


nested class =>, ~~>, -!> not work or work strange
  iname -> iname = rename
  iname -> ename = redirect
  //iname => iname = toAbstract + code copied if no trash
  //iname => ename 
class instance method
refined method
interface instance method /class
class method

state method
private class
private method



Q1:SQL"abc #1 d #2"

C: {This1.C m()} +> { This0 m()}

(D = {};).evilPush(L)

p = (C = L, D={})

p.push(D) == D,p


p(This0) = L
p.minimize(This1.C) = This0
p(This1.C)



if the error can move, no hope for error messages

A:B:{code1} //7   { K:{}  S m(K x)= x.bla(x.foo())}

C:...A.B.code1 +{ K{ method blaa()}}



D:C.foo() // method bla in line 7: x.bla(), bla() non defined on x


Library foo(Library l) { 
  return l<X => S> }

This generalized from, handle moving of code literals:
For example { A:{method This2.B }}
{{{  Thisn.Cs  }}}

{{{  Thisn.Cs  }}}



method #$foo()= use Path ....
mut method foo()= use Path ... #$foo()


read


C=e  .#$

method Num foo()
read method Bool invariant()


method ... this.foo=0; x.bar(this) ...

invariant
  forall wi in widgets.... wi.getX()

5 widgets
4 direction
77
50mill


 $#$foo(e1,e2,e3)
e1.foo0(e2,e3)
e2.foo0(e1,e3)
e3.foo0(e1,e1)
e1.foo1(e2,e3)
e2.foo1(e1,e3)
e3.foo1(e1,e1)


a/b

{..}+foo



This(n+j).Cs.from(Thism.Cs', j) = Thisn.Cs.from(This(m+j).Cs')


C = {E:{} D:{This2.C.E m()}}[D=ED]
C = {E:{} D:{This1.E m()}}[]


C = {This0 m() thi} <+ {This1.C m()}

getRight(L1, L2) = L2


[a:A->B b:()->A]x={a: e1 b:e2 }
[a:A->B ]y=x

D::= enum T { KK }
KK::=K{(T id)s}
e ::= x | |x : T| e | K{(id:e)s} | match e { cases }
case ::= case K{(id:id')s} => e

e.id == match e { case [e]{id:r} => r } // only if e: T with a single case T
//more flexible: case ?{id:r} works if the matched type have an id


x = typeof(y! := e) in e'
  // typechecks/compiles e to et, 
  // defines in e':
  //    x to be the type of et
  //    y! compiles/expands to et

x #= typeof(y := e); e'
  ===>
      x #= T;
      T y := e;
      e'
// where it guesses T somehow...
let x y=()->e in e'

a' y := 3;
a z := y;
print(a');

x #= typeof(y := 3);
x z := y; // works!
print(x); // prints 'int'




from!(x, in: myList, where: x > 3, select: foo(x))
  
--> T y = myList.where(x -> x>3).select(x -> foo(x));


  T := typeof(y := foo(x)); e' // fails! x is not in scope
  a' _=lambda!(x,x->select)
  ret[a] 
  //myList.where(x -> x>3).select(x -> foo(x))

x #= typeof(y := 3);

returnBlock!(body: e[return! e])
-->

x #= typeof(y);
  ...
  x y := e;
...



e.x == case e 

type T= T a:A->B b: ()->A
x=T a:e1 b:e2
type I= I a:A->B
I y=I a:x.a



converter[T, I] = ....


x=e| e.f | {(f:e)s} | x->e
x.f=3 === x=x[f=3]
x[i]=3 === x=x[i=3]

(x.f).g=3
===
x.f=x.f[g=3]
===
x=x[f=x.f[g=3]]

2 questions?
  do we no the exact type of everything?
  do we have shared (mutable) memory?

e.f = e' === e = T(e.f0, ..., e', ..., e.fn)
x={f: 1};
y = &x;
x.f = 4;
y->f == 1;


x={f: 1};
// &x ==> {get: -> x, set: x' -> x = x'};
// *e ==> e.get()
// *e = e' ==> e.set(e')
// e == e' !!!
// T* ....
// foo(myVar: {get : ()->T, set: T->T})
// foo(int* b) { *b = 3; }

Get<T>{
  Get(()->T f){check(f);this.f=f;}
  final f:()->T
  }

T x=...
()->T &x === ()->x
Get<T> &x === Get<T>(f:()->x)
Set<T> &&x == y->x=y

Get<T> restriced form of ()->T
e:Ts1 -> e':Ts2
if e:Ts1 then e:Ts2
e:Ts2
NOT THE CASE that if e' : Ts2
  there exists e : Ts1 such that e -> e'


module foo(x1, ..., xn):
   e

==>
foo := QQ[|
  mody = (e; (x1, ..., xn));
  x1 := mody.0;
  ...
  xn = mody.n;
|]

// import foo; e ==>
DE-QQ(foo); e


type x[x']: e; e'

type x[x'] : e; e'
newtype x = e; e'


x' y:e0; 
e1
x' y=e0
e1

// reduces e to v
// creates a new-type with fresh key-name k,
//  returns e'[x := TYPE(k), x' := k]
//  Where TYPE(k) is the type that k unlocks
//  (there is a one to one correspondence between k and TYPE(k))
// Key<TYPE(k), v> 
//

type x[x']: int; e'
x' :: KEY<TYPE(k), int>

KEY-TYPE(TYPE(k)).lock(e) // e :: v


class Key{
  Object unlock(Box b){ b.val;}
  static class Box{ private Object val;}
  }


T,v    ::= x | TT | T -> T  | Int | n | t | box T v | DD
e      ::= x | TT | e -> e' | Int | n | t | T x : e | e(e') | newtype e | unbox T e | box T e | DD[e] | T ~ e
m      ::= x | TT | m -> m' | Int | n | t | T x : m | m(m') | newtype m | unbox T m | box T m | ...
         | x #= m; m'

// isaacss lang
sigma |- sigma(k) :: TT
----------------------
sigma |- type(k) :: TT

sigma | newtype T --> sigma, k -> T | {Type(k), DD[k]}

...
-------------------------
sigma |- Key(T, T') :: TT

----------------------------------------
sigma |- k :: Key(Type(k), sigma(k)) // 2 syntactic-forms + 2  type rules
                                     // you, + 1 more complex reduction rule, + RTE concept

// your lang

sigma |- sigma(t) :: TT
-----------------------------
sigma | t :: TT

sigma | newtype T --> sigma, t -> T | {t, DD (t x -> unbox t x),  DD (t x -> box t x)}

MagicFunction --> (T, aT)
MagicFunction --> (T, _)
-----------------------
MagicFunction :: T, aT




TT kt#=newtype*
kt k=box kt TT//somehow check box kt happens only one time?
Int->(kt->Int) hide =
  fun Int v =fun(kt ki){return v}

newtype v-> T, box: v, unbox

<TT, t-> > {t, box,unbox}=newtype Int

unbox (box t 3)->3

----------------------------------------fresh(t)
newtype Int -> {t, Int x: box t x, t x: unbox x}

3 points:
  1. optimisation (a newtype T is at least as 'good' as a T)
  2. alias-reasoning (by following the 'k', you can reason as to how the newtype is used, and optimise accordingly)
  3. Privacy (if you have a 't', you know nothing about it, except identity, and that it is a 't')

x #= newtype Int;
  x myX = box x 3; // box x e typechecks iff e is an Int
  Int my3 = unbox myX; // tychecks iff myX is a 't'

x #= TT->Int;
  x myX = TT tt : 3; // box x e typechecks iff e is an Int
  Int my3 = myX(TT); // tychecks iff myX is a 't'


// Now I have that, I can make:

makeTT #= TT t : t -> t;
II #= makeTT(Int); // tt is the same as Int -> Int
II->Int stupid := (II t : t(3)); // equivalent to: (Int -> Int t : t(3))
...



(Ref, get, object-ref!, field-ref!) := ( // library code
  type Ref[k] : () -> Int;
  get := Ref r -> k.unlock(r)();
  //object-ref := T x -> k.lock(()-> x);
  macro field-ref!(Expr e, Nat n) = (x = e; k.lock(()-> x.n));
  (Ref, get, object-ref!, field-ref!)
)
// user code CANNOT directly use 'k' (it's not in scope)
// but object-ref! and field-ref! are (and use k)


x := e; // can refer to x'
T x' =: e'; // can refer to x and x'
e'' // same here


circularList #= <Int, circularList>;
circularList x := {1, {2, x}}; x
->
p -> <Int, p> | p x := {1, {2, x}}; x : p



sigma |- e : T[p := sigma(p)]
<------------------------------->
sigma |- e : T


----------------------------------------
p -> <Int, p> , x->p|- {1, x} : p
p -> <Int, p> , x->p |- x : p
---------------------------------------------
p -> <Int, p> |- p x := {1, {2, x}}; x : p


-----------------------

T x =: v === v[x := (T x =: v)]

x = e; // x' is in scope
T x' := e'; // nothin extra in scope
e''; // x and x' are in scope

TT c =: <Int, c> ===  <Int, TT c =: <Int, c>>



p |-> <Int, p> | e[circularList := p]
               |- p x := {1, {2, x}}; x
...., x |- p   |- {1, {2, x}} : p

e :: p





// in 42, (x := e; T x' := e'; e'')

