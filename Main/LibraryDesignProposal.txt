
Units:
.multipy(byMeter)
.divide/dividing(byKg)
if we had a UnitOfMeasure interface,
declaring  Unit: {class method Library(class UnitOfMeasure that, class UnitOfMeasure per)}
will make some stuff easier?
Check if two units are the same to prevent kg/kg and to
generate only one extractor for kg*kg?




SolvingCircularDependecies
There are two different reasons dependency can affect 42:
Interface loops and Generic loops

-Interface loops://NOTE: this work with new semantic 27/7/2019
Shape:{interface method Rectangle boundingBox()}
Rectangle:Data<><{implements Shape Num x, Num y}
Can not work in the current semantic of the language.
Rectangle is needed to be compiled for Shape to be typed
and thus for {implements Shape} to be normalized.

-Generic loops:
Person:Data<><{ S name, Persons friends}
Persons:Collections.vector(of:Person)
This does not work, since data do not know if Persons would offer '=='.
Any trivial reorganization does not work either:
  Persons:Collections.vector(of:Person)
  Person:Data<><{ S name, Persons friends}
    now Persons can not be generate, since Person is not compiled yet.
  Person:Data<><{ S name, Persons friends Persons:Collections.vector(of:This)}
    This (and also This1.Person) are not compiled yet.

Both problems can be solved manually by introducing "Placeholder classes"
and then using rename to merge them:
For example, here a merged solution

All:
  Refactor.rename(path:\"$Rectangle" into:\"Rectangle")<><
  Refactor.rename(path:\"$Persons" into:\"Persons")<><{
    Shape:{interface method Rectangle boundingBox()}
    Rectangle:{}
    $Rectangle:Data<><{implements Shape Num x, Num y}
    Person:Data<><{ S name, Persons friends}
    Persons:{implements Base}
    $Persons:Collections.vector(of:Person)
    }
But may other ways was possible, like $Shape and Shape.
What is a good design/general pattern?

Refactor library and operators:
Methods operation hide/rename/abstract can be made all together in a single pass,
so it is reasonalbe to offer  Refactor.Method
class operations hide/rename/abstract can only be made in sequence.
Should we offer a simmetric Refactor.Lib[rename:path into:path; toAbstract:path] ??
also, different exceptions can rise from those operators.