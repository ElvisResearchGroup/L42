L42 source has a rich syntax (not shown here), that is desugared into a core syntax.
The library literal L is the starting point for a set of transformations.
Each transformation produces terms of a more restrictive grammar:
A core Library literal L has the least restrictive grammar:
  -transitively implemented interfaces can be omitted
  -method types for implemented methods can be omitted
  -nested classes and method declaration can be mixed together
  -nested classes can be of form "C:e", where "e" represents
   the computation needed to obtain an explicit form for "C".
In addition, a compiled Library literal LC requires all the nested classes
  *everywhere* in its subtree to be of form C:LC
In addition, in a normalized Library literal LC
  -all of the transitively implemented interfaces are mentioned
  -all methods have all of their types mentioned
  -method declarations are listed before nested classes
  -all L  *everywhere* in its subtree are normalized.
  -Normalized library literals are labeled (at least)"Norm"
In addition, in a typed Library literal,
  -some type annotations are added, to simplify the work of
   translating 42 to target languages.
  -all L  *everywhere* in its subtree are typed.
  -Typed library literals are labeled (at least)"Typed"


-----------------------------------------------------------
Part 1: Core language grammar
-----------------------------------------------------------
_______
#define non recursive terms:
throw::= exception | error | return //James suggests "ball" as a possible replacement for throw
mdf::= imm|mut|lent|read|capsule|class | fwdImm | fwdMut | fwd%Imm | fwd%Mut
Phase::=None|Norm|Typed|Coherent //TODO: add (fresh library)names that are put after norms//May be None should be renamed into "Desugared"
s::=m(xs) //method selector
mh::= mdf method T m(T1 x1..Tn xn) exception Ps //mh.s = mh.m(mh.xs)
Ldom::=s|Cs
P::= Thisn.Cs | Any | Library | Void  //is pronounced "Path"
T::= mdf P
C::= <uppercaseIdentifier>n? //uppercase includes % and $
m::=#?<lowercaseIdentifier>n? //lowercase includes _

//we denote with m__n(xs) or C__n an s or a C with unique number n,
//m(xs) or C is then the name without the number,
//m_n?(xs) or C__n? is the name with an optional number,
//and m_n?(xs)=m(xs), C__n?=C if n?=empty

_______
#define core expressions
//annotations [T1,T2], [P] and [T] are implicitly "?", as in [T]?
L::={interface? implements Ps M1..Mn Phase}
M::=refine? mh e?| s e | C:e
e::=L|void|x| P | chain.m[P,T]((x:e)s)
  | throw[T1,T2] chain|loop e|(ds ks e[T]) | use P check m((x:e)s) e | x:=e
k::=catch throw P x e
d::=var? T x=e | var? x=e
chain::=x|P|chain.m( (x:e)s )|(ds ks catch throw P x chain ks' e)|(ds ks chain)|void |L //TODO: void,L added  7/6/2018 to allow return L and return void
//TODO: update sugared language to require chain as meth receiver and thrown expressions
_______
#define Compiled terms
LC::={interface? implements Ps MC1..MCn Phase}  //library compiled
MC::= mwt | s eC |nc
mwt::= refine? mh eC?
nc::= C:LC
eC::= x|void|P|LC |throw[T1,T2] eC|loop eC|(dCs kCs eC[T])
 | eC.m[P]((x:eC)s)| use P check m((x:eC)s) eC | x:=eC
kC::=catch throw P x eC
dC::= var? T? x=eC
//notice how every LC is a special kind of L (math seems to have structural subtyping)


_______
#define Contexts
ctxC::=[]
 | ctxC.m( (x:e)s)
 | eC.m( (x:eC)s, x:ctxC, (x:e)s)
 | use P check m( (x:eC)s, x:ctxC, (x:e)s) e
 | use P check m((x:eC)s) ctxC
 | throw ctxC | loop ctxC | x:=ctxC
 | (dCs var? T? x=ctxC ds ks e[T])
 | (dCs kCs catch P x ctxC ks e[T])
 | (dCs kCs ctxC[T])
// The compilation context, e=ctxC[L] selects an L where
// all of the former Ls are LC.
// The context does not enter into libraries
ctxM::= C: ctxC |s ctxC | refine? mh ctxC
ctxL::= {interface? implements Ps MCs ctxM Ms Phase}
_______
#define functional notation for L, ctxL and LC (over the domain Ldom)

_______
#define eC' inside eC
- eC' inside eC if eC=ctxC[eC']
- P inside ( _ T x=_ _) if P=T.P
- P inside ( _ catch throw P x _ _)
- P inside M holds iff P inside M.e //called CollectPaths0.of(P)
 or M.mh= refine? T0 m(T1 x1..Tn xn) exception Ps
 and Ti= _ P or P in Ps //or P is in the method docs


The next definition allows us to see paths P and expressions e
from a different point of view. For example calling a method
This2.A.B.foo() whose body is originally This1.bar()
we would expect to execute
This1.bar()[from This2.A.B]=This2.A.bar()
in our local context. Note how we did not need to denote our
observation point, but only the path needed to reach the destination
starting from our observation point.
_______
#define P0[from P1]=P2 e[from P]=e' e[from P]n=e'
P0[from P1]=P2
Thisn.Cs[from Thism.C1..Ck]=Thism.C1..C(k-n).Cs if n<=k
Thisn.Cs[from Thism.C1..Ck]=This(m+n-k).Cs if n>k
Any[from _]=Any, Library[from _]=Library, Void[from _]=Void

e[from P] propagate on the structure, and L[from P] = L[ from P]0
{interface? implements Ps, Ms}[from P]j =
  {interface? implements Ps[from P]j+1, Ms[from P]j+1}

This(j+n).Cs0[from P]j=This(j+k).Cs1
  with Thisn.Cs0[from P]=Thisk.Cs1
Thisn.Cs[from P]j=Thisn.Cs with n<j
All cases for other expressions/terms propagate to submembers, including
comments, since they can have annotated Ps

-----------------------------------------------------------
Part 2: Well formedness
-----------------------------------------------------------

* L: if C__n in dom(L) or m__n(xs) in dom(L),
  then for any other L' in the project
  C'__n notin dom(L') and m'__n(xs') notin dom(L')

* d: var T x=e is valid only if T not capsule or fwd.

* s: 'this' notin xs and all x in xs are unique

* mh: 'Any' notin Ps //Ps is thrown exceptions //TODO: why??? should we remove this restriciton? 24/10/2018

* mdf: fwd%Imm, fwd%mut not present in any term, will be used internally by the type system

* C:e :  C not Any, Library, Void, This, Thisn

* L: unique LDom in dom(L), Any notin Ps //Library and Void are not interfaces so you will get the normal error from implementing them
    Exists 0 or 1 n such that exists m__n(xs) where L(m__n(xs))=mwt, mwt.e? is empty

* L interface:
   methods in interfaces have no body
   forall m__n(xs),  m__n(xs) notin dom(L)//TODO: in code check interfaces has no unique named methods

* (ds ks e[T]): unique x in dom(ds), FV(ks) disjoint dom(ds) and
  forall k1,k2 in ks, k1.throw=k2.throw//TODO: is this restrictions still needed?
  That is, all throw in a specific ks are the same (thus no "catch return T1 x1 e1 catch error T2 x2 e2")

* use P check m((x:e)s) e: P not Any/Void/Library

//C:e :  FV(e)=empty subsumed by next check

* C:e : //checks for capsuleWellFormed and absence of free variables
   cX(e)=empty
   //TODO: in code Note, this can be applied directly after desugaring

* mwt: Ts=parameter types, T=return type
  if exists fwdImm _ in Ts then T.mdf in {mut, fwdMut, imm, fwdImm}
  if exists fwdMut _ in Ts then T.mdf in {mut, fwdMut}
  if T.mdf in {fwdImm,fwdMut} then exists fwdImm _ in Ts or fwdMut _ in Ts

* mwt:  //checks for capsuleWellFormed// normalization can inject a capsule parameter in a "s e"
  mwt= refine? mdf method T m(T1 x1..Tn xn)e
  T0=mdf This0
  FV(e)\ this,x1..xn= empty
  for i in 0..n if Ti=capsule _, xi in cX(e) 0 or 1 times
  //Note: in the code this happens while "Program.methods" adds a methodType to a MethodImplemented.
  //TODO: still need to happen in desugaring for methods that are born as MethodWithType

_______
#define     //note: FV is trivially defined from cX
cX(e)//count occurences of xs
  cX(x)=x
  cX(void)=cX(P)=cX(L)=empty
  cX(throw[T1,T2] e)=cX(e)
  cX(loop e)=cX(e),cX(e)  //representing each variable twice is enough to make capsule tests work
  cX(e0.m[T](x1:e1..xn:en) )=cX(e0),..,cX(en)
  cX(use P check m(x1:e1..xn:en) e0)=cX(e0),..,cX(en)
  cX( (T1 x1=e1..Tn xn=en k1..km e0[T]) )=ys/x1..xn ,max( (xs0/x1..xn), xs1,..,xsm)
    where
    ys=cX(e1),..,cX(en)
    xsi=cX(ki)
    xs0=cX(e0)
    if Ti=capsule _ then
      xi 0 or 1 times in ys,xs0
_______
#define max(xs1,..,xsn)= zs // as many repetition of each x as in the most repetitive of xs1..xsn
  max(ys)=max(empty,ys)=ys
  max (x xs,ys)=x max(xs,ys) if x not in ys
  max (x xs,ys)=x max(xs,removeOne(x,ys))
  max(xs, xs0,..,xsn) = max(max(xs,xs0),xs1,..,xsn)



-----------------------------------------------------------
Part 3: program
-----------------------------------------------------------
Program-specific grammar is needed to represent the position
in the project (top level Library) that we are reducing.
For example, if our 42 project is
{ A:... B:This0.A.second({ method Library m(){C:This2.A.first({})} }) }
we first need to reduce "A.first({})"
In order to explicitly denote the meaning of "Thisn", we split the project
into the 3 part program
p={C:This2.A.first({})};{ method Library m()[]};{ A:... B:This0.A.second([]) }
Note that the first component is an L, while the others have a hole, [],
so they are of form ctxL.
Note how the first component uses This2.A in order to skip two levels
and refer to A in the outer most layer of our project.

It is possible to see the program as a stack, with a top() and a pop() operation.
Given a program is always possible to reconstruct the project
by doing a series of pop operations.
Since the top of the stack is of a different kind with respect to the other elements,
pop replaces the [] with the stack top to forge an L
push, the opposite of pop, extracts a piece of the top to forge a new top.
To do so, it takes in input the split form of the old head.
Finally, notice how in this model updating the top  can not be emulated with pop() + push()

p::=L0;ctxLs //representing This0,...,Thisn // where This0.C refers to a class bound in L0, and (This1..ThisN).C to bindings in cxtL1..cxtLn respectively

program primitive operations:

-p.top()=L
 (L,_).top()=L

-p.pop()=p'
 (L,{interface? Ps Ms C_evil:[]},ctxLs).pop()={interface? Ps Ms},ctxLs
 otherwise // we have C_evil not in dom(ctxL)
 (L,ctxL,ctxLs).pop()=ctxL[L],ctxLs

-p.push(ctxL,L)=p'
 (ctxL[L],ctxLs).push(ctxL,L)=L,ctxL,ctxLs

-p.update(L)=p' //this is the only one that can detect evilPush
 (L,ctxLs).update(L')=L',ctxLs

-p.reducePath(P)=P' //assert defined only if p.top() of form LC
 p.reducePath(This(n+1).C.Cs)=Thisn.Cs
   where p.pop().reducePath(Thisn.C.Cs) is defined
 (LC,ctxL,_).reducePath(This1.C.Cs)=This0.Cs
   where ctxL(C)=ctxC //Note:ctxL(C)=[] would be more restrictive, for example
   //preventing A:Data<><{method A (..)} to be summed with the constructor.
-p.location()=P // Where we are in the program
 (L).location()=This0
 (L, ctxL, ctxLs).location() = This(k+1).Cs.C
    ctxL(C) = ctxC // We are in C
    (ctxL[L], ctxLs).location() = Thisk.Cs

program derived operations:

-p.get(n)=L
 p.get(0)=p.top()
 p.get(n+1)=p.pop().get(n)

-p.navigate(Cs)=p'
 p.navigate(C1..Ck)=p.push(C1)...push(Ck)

-p.navigate(P)=p'
 p.navigate(Thisn.Cs)=p.pop()...pop().navigate(Cs) //with n pops

-p.equiv(P0,P1)
 p.equiv(P,P)
 p.equiv(P0,P1)=p.equiv(P1,P0)
 p.equiv(Thisn.Cs,This(n+k).Cs')=p.equiv(Thisn.Cs,p.reducePath(This(n+k).Cs'))

-p.minimize(P) = P
  where p.reducePath(P) undefined
 p.minimize(P) = p.minimize(p.reducePath(P))

-p.noUnique(P) holds if p.minimize(P) not  of form Thisk._.C__n._

-p(P)=L //functional notation
 p(P)=p.navigate(P).top()//but some implementation could be faster

-p.push(C)=p'
 p.push(C)=p.push(ctxL,L)
 where ctxL[L]=p.top() and ctxL(C)=[]

-p.evilPush(LV)=p'// TODO: in code make sure we only call on LV
 ({interface? Ps Ms},ctxLs).evilPush(LV)=LV,{interface? Ps Ms C_evil:[]},ctxLs
 with C_evil reserved C name.
 A well-formed project (top level L) can not have C_evil anywhere.

 //Note: p.push(L)=p' (ie searching p.top() for a library that matches L)
 // is not used in the code since it would be very slow and not expressive enough.
 // p.push(L)=p.push(ctxL,L) with ctxL[L]=p.top()


------------------------------------------
Recursively transforming programs.
We show here a general way to lift transformations
from transL(L1)=L2 into transformations from transP(p1)=p2.

transP(p1)=p2
transP(L,empty)=transL(L),empty
otherwise
transP(p)=p'.updateTop(transL(p'.top())
  //where p'=transP(p.pop()).push(????)//we use p to synthesize a push
  where p'=p.growFellow(transP(p.pop()))

Notice how we call growFellow() on a program that is one step
shorter than p and p', and p'.pop()=transP(p.pop())
The idea is that p.pop() is very similar to transP(p.pop()),
so we can use information to find a way to
grow transP(p.pop()) into the same depth as p and p'.

_______
#define p.growFellow(p0)=p1  //could be p0.pushLike(p)
(L,ctxL,_).growFellow(p0)=p0.push(p0.top()/ctxL)
//NOTE: it does not work on evil pushed p. Is this what we want?
//code throw assertion in this case

Following the transL/transP pattern shown above,
"L/ctxL" is used where L come from a transformation,
while ctxL comes from the program before the transformation.
We use (') to show those three phases:
 Variables with 0 ' come from the original program.
 Variables with 1 ' come from the output of a transformation.
 Variables with 2 ' are the result of mixing the two
 Variables which shared between at least two of these have the lowest relevant number of '

#define L'/ctxL=<ctxL''; e''>   intuition: if L'=ctxL''[e''], ctxL'' sim ctxL
  * {interface? implements Ps MC1'..MCn' C':e' Ms'}/{interface? implements Ps MC1..MCn C:ctxC Ms}
   = {interface? implements Ps MC1'..MCn' C':ctxC'' Ms'}, e''
   e'=ctxC''[e''] and ctxC'' sim ctxC

_______
#define ctxC1 sim ctxC2
  * [] sim []
  assuming ctxC sim ctxC', then
  * ctxC.m((x:e)s) sim ctxC'.m'((x:e)s')
  * e.m(x1:e1..xn:en x:ctxC (x:e)s) sim e'.m'(x1':e1'..xn':en' x':ctxC' (x:e)s')
  * (T1 x1=e1..Tn xn=en T x=ctxC (T x=e)s e) sim (T1' x1'=e1'..Tn' xn'=en' T' x'=ctxC' (T x=e)s' e')
  * and so on

------------------------------------------
Terminology:
Different operations and constructs can be
categorized depending on how they explore the structure:
an "e" can be explored shallow if we never enter into any L
an "LC" can be explored weakly deep if we explore method bodies
in a shallow way and nested libraries in a weakly deep way.
an "e" can be explored strongly deep if we explore all its subexpressions
strongly deep, meaning that we enter into all contained Ls
In this sense, 'ctxC' and 'inside' are shallow operations.
L(Cs) is weakly deep, since it can not select Ls inside method bodies.
On the other hand, well formedness and [from _] are strongly deep.
