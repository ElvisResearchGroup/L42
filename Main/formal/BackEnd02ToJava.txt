-----------------------------
L42F into Java
-----------------------------
CT*mdf CN=CN if CT(CN)=kind _ and kind in {class,interface}
CT*mdf CN=int if CT(CN)=nativeInt _
...
CT*mdf CN=float if CT(CN)=nativeFloat _
CT*mdf CN=T if CT(CN)=nativeOpt<T> _

//note, here we keep CN as an abstraction,
//in code CN of L42F is an int, while CN of MiniJ is a string


Java------------------
S::=//statement
   T x;
  |x=ej;
  |if(x) S1 else S2
  |if(x.inner() instanceof CN){CN x1=(CN)x.inner(); S1} else S2
  |if(!(x.inner() instanceof CN)){Object x1=x.inner(); S1} else S2
  |while(true) S
  |b
  |break label
  |return x
  |throw new 'throw'(x)
  |try b catch('throw' x)b
  |CN.m(xs)
  |useCall(doc,m,xs,S)

block b::=label:{Ss}

ej::=x|CN.m(xs)|useCall(xs)|(CN)x|null

--------

### c*ex=ej   c+ej=ej'
'c' is context for translation L42F->Java
---
c::=x?;label?

c+ej
emptyC+ej= return ej
x0;_+ej= x0=ej
empty;label+ej= ej

#######In the following * function, a global CT is assumed
emptyC*breakLoop= ??
_;label*breakLoop= break label;

c*x= c+x
c*CN= c+Resource.Of(CN)  with CT(CN).CD.kind in {interface, null, any?}
c*CN= c+CN.Instance()  with CT(CN).CD.kind in {class, nativeXX,...}
c*void= return Void.Instance()
c*null= c+null
c*unreachable=empty
c*CN.mxs(ys)= c+CT*CN.£Cmxs(ys)//keep a look for native classes
//note, be careful with optimizations, we can not break a loop here
c*use CN check mxs(ys) ex= c+use(?,ys,(?)->{'emptyC*ex'})
c*'throw'[TX1,TX2] x= throw new 'throw'(x)
c*loop ex=label:{while(true){ 'empty;label*ex' }}
c*(mdf CN)x= c+(CT*CN)x
c*x1:=x2= x1=x2
c*if x then ex1 else ex2= if x {'c*ex1'} else{'c*ex2'}
c*(dxs ex [TX])= {tx(dxs) xe(c.label,dxs) c*ex}
c*(dxs ex [TX])= label0:{tx(dxs) try{ xe(c.label,dxs)} c;label0*kxs c*ex}

//reorder them for throw kind, and then for each kind
c;label0*catch throw1 TX1 x1 ex1..catch thrown TXn xn exn =
  catch([throw] y){ifT[y x1 TX1 c*ex1] else ...
    else ifT[y xn TXn c*exn] else throw y;s?}
s?=empty if c=emptyC
s?=break label; otherwise

tx(T x e)= CT*T x;

xe(label?,T x e)= x;label?*e;

//Note: we disallow capturing a 'return class Any'
//in the type system. If we allow it,
//we need to check for coherence!

With CN!=Library
ifT[y x CN S1] else S2 =
  if(y.inner() instanceof CN){CN x=(CN)y.inner(); S1} else S2
Otherwise
ifT[y x CN S1] else S2 =
  if(!(y.inner() instanceof NotLibrary))
  ){Object x=y.inner(); S1} else S2


### CT[CD]=JClass
---
CT[kind CN implements CNs {Mxs}]=public kind' CN implements CNs{Members}
where
  kind'=interface if kind=interface, kind'=class otherwise //this includes all the optimized kinds
  G=CT.fields(Mxs)=CN1 x1,..,CNn xn 
  Members=
    CT;CN;G[Mxs]
    CT*CN1 £Xx1;
    public static BiConsumer<Object,Object> FieldAssFor£x1=(f,o)->{((CN)o).£Xx1=(CT*TX1)f;}
    ...
    CT*CNn £Xxn;
    public static BiConsumer<Object,Object> FieldAssFor£xn=(f,o)->{((CN)o).£Xxn=(CT*TXn)f;}
    
CN x__n in CT.fields(Mxs)
  {CN}={CNi | refine? method _ CNi #?x__n() getter in Mxs}
  refine? method _  m__n(_ x _) new in Mxs //or newWithFwd
CN1 x__n in CT.fields(Mxs)
  {CN1,CN2}={CNi | refine? method _ CNi #?x__n() getter in Mxs}
  CN2 in CT(CN1).CNs
  refine? method _  m__n(_ x _) new in Mxs //or newWithFwd
Object x__n in CT.fields(Mxs)
  {CN1,CN2}={CNi | refine? method _ CNi #?x__n() getter in Mxs}
  CN1!=CN2, CN2 notin CT(CN1).CNs and CN1 notin CT(CN2).CNs
  refine? method _  m__n(_ x _) new in Mxs //or newWithFwd


//a this
CT;CN;G[refine? method TX mxs(TX' this,(TX x)s) e]=
  public static CT*TX £Cmxs(CT*TX' £Xthis,CT*(TX x)s) CT;empty;empty*e[£Xx=x]//for all x
  onlyIfRefine(refine?,
    public CT*TX £Mmxs(CT*(TX x)s) {return CN.£Cmxs(this,xs);}
    )
//b no "this"
CT;CN;G[refine? method TX mxs((TX x)s) e]=
  public static CT*TX £Cmxs(CT*(TX x)s) CT;empty;empty*e
  onlyIfRefine(refine?,
    public CT*TX £Cmxs(CT*(TX x)s) {return CN.£Cmxs(xs);}
    )
//c interface this
CT;CN;G[refine? method T mxs(TX' this,(T x)s)] //no body
  public static CT*TX £Cmxs(CT*TX' £Xthis,CT*(TX x)s){return £Xthis.£Mmxs(xs);}
  default CT*TX £Mmxs(CT*(TX x)s){throw new Error("Interface method invocation");}//is going to be in an interface



//never happens CT[method T mxs((T x)s)]

CT,CN;G[refine? method T mxs((T x)s) new] //there can be many new/newFwd
  public static CT*TX £Cmxs(CT*(TX x)s){
    CN Res=new CN();
    Res.£Xx1=£Xx1;..;Res.£Xxn=£Xxn;//for xi in dom(G)
    return Res;
    }
  public CT*TX £Mmxs(CT*(TX x)s) CN.£Cmxs(xs) //only if refine?=refine

CT,CN;G[refine? method T mxs((T x)s) newWithFwd]=
  public static CT*TX £Cmxs(CT*(TX x)s){
    CN Res=new CN();
    //for xi in dom(G)
    Res.£Xx1=£Xx1;Fwd.£CAddIfFwd(x1,Res,CN.FieldAssFor_x1);
    ..;
    Res.£Xxn=£Xxn;Fwd.£CAddIfFwd(xn,Res,CN.FieldAssFor_xn);
    return Res;
    }
  public CT*TX £Mmxs(CT*(TX x)s) {return CN.£Cmxs(xs);} //only if refine?=refine


CT,CN;G[refine? method TX #?x(TX' this) getter]=
  public static CT*TXn £C#?x(CT*CN £Xthis){return CAST £Xthis.£Xx;}// if x in dom(G)
  public static CT*TXn £C#?x(CT*CN £Xthis){throw new Error();}// otherwise
  public CT*TX £M#?x() {return CN.£C#?x(this);} //only if refine?=refine
  where
  CAST=empty if TXn.CN in {G(x),CT(G(x)).CNs}
  otherwise CAST=(CT*TX)
  //Note: if there is no field for this getter, getter is never called, can throw error
  
CT,CN;G[refine? method Void #?x(TX this, TX' that) setter]=
  public static Void £C#?x(CT*TX £Xthis, CT*TX' £Xthat){
    £Xthis.£Xx=£Xthat;//if G(x) is defined   
    return Void.Instance();}
  public CT*TX £M#?x(CT*TX' £Xthat) {return CN.£C#?x(this,£Xthat);} //only if refine?=refine

//TODO: need to handle _Fwd and Instance for interfaces
CT,CN;G[ _ NewFwd() newFwd]=
  public static CN NewFwd(){return new _Fwd();}
  public static class _Fwd extends CN implements Fwd{//implements CN if CN interface
    public ast.ExpCore revert(){return Resource.£CPathOf(CN);}
    private List<Object> os=new ArrayList<>();
    private List<BiConsumer<Object,Object>> fs=new ArrayList<>();
    public List<Object> os(){return os;}
    public List<BiConsumer<Object,Object>> fs(){return fs;}
    }
  public static final CN Instance=new _Fwd();//so it work also if CN is interface
  public static CN Instance(){return Instance; }


Note:if CN is interface, is ok to just implement it
since all its methods has defaults

###Assumed
---
interface Fwd{/*as in newReduction.Fix*/}
interface NotLibrary{}//marker interface, implemented by all 42class, Any and Void
-----------------------------
4 General execution
-----------------------------
A- run fileName.L42 or dirName
B- if no cache in fileName.C42 or dirName/This.C42 create empty cache
C- load cache, parse/desugar L, emptyCT
D- apply 1 step of
  L,CT,cache  --enter* +top-->  L',CT',cache'
  where CT/cache just got propagated over enter/top
E- update L, CT, cache, and either save on disk new cache or give error
F- goto D

###Instrumentation of top execution:
Now (top) will refer to a Loader:
a mutable object containing CT,cache and a java MapClassLoader

### Loader.execute(p,paths,e)=LC
---

Loader.execute(p,paths,e)=LC
  Loader.load(p,paths) //Loader change state here
  LC=Loader.run(p,e)//Loader change state here but should be irrelevant

### Loader.run(p,e)
---

Loader.run(p,e)=LC
  sJ=Loader.CT;empty;empty*(p;empty[e]) //e->ex->sj
  p1..pn={p.evilPush(L)| L inside e}
  Loader.CT=Loader.CT+ p1, nullKind p1.CN implements empty{}
  ...
  + pn, nullKind pn.CN implements empty{}

  CD=class CN{ public static Object execute(){sJ}}//CN fresh
  javac(Loader.CT,Loader.clMap,CD)
  return Loader.clMap.usualReflectionToCall("CN.execute()")


### Loader.load(p,paths)
---
Loader.load(p,paths)
  CT'=Loader.CT.growWith(p,paths).computeDeps()
  cache=Loader.cache
  clMap=Loader.clMap
  chunks=CT'.listOfDeps() // ordered over superSet relation
  for dep in chunks://take smaller dep in chunks
    //1cache is not there
    if cache(dep) undefined
      cache=javac(CT,clMap,dep,cache)//enriches clMap
      continue;
    cache(dep)=CDs1,clMap1
    //2cache is there but wrong
    if CT'(dep).CDs != CDs1 //set comparison
      cache=javac(CT',clMap,dep,cache)//enriches clMap
    //3cache is there and is already loaded
    //4cache is there and need loading
    else forall byteName -> byteCode in clMap1:
      assert clMap(byteName) undefined or clMap(byteName)=byteCode
      clMap.put(byteName -> byteCode)
  Loader.cache=cache
  Loader.CT=CT'

### javac(_) imperative operation
---
javac(CT,clMap,dep,cache)=cache1
  oldDom=dom(clMap)
  javac(CT, clMap, dep)//this enrich clMap
  cache1= cache, dep->(CT(dep).cds,clMap\oldDom)
  //note: javac will not recompile what is already in clMap

javac(CT,clMap, dep)=
  javac(CT,clMap,[CT(CNi)|forall CNi in dep where CN notin dom(clMap)])
  //each CN can correspond to more then one element in clMap,
  //but if there is CN, then all is in clMap already.

javac(CT,clMap,CD)=javac(clMap,optimize(CT[CD]))//non formalized, uses javatools.
