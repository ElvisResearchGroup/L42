The execution of a 42 project can be seen as a state machine
that proceeds through the following phases:
0 parsing
1 desugaring
2 from the top, find the left-most inner-most C:eC with eC!=LC
3 collect all the transitive dependencies of the eC.
4 type these dependencies.
5 type as "coherent" (aka not abstract) all dependencies needed to execute the eC.
6 type eC as Library, in the program composed by those dependencies.
7 execute the eC until you get an LC, and replace the eC with the LC in the program
8 jump back to 2.

The rules presented here cover 2-8, and depend on other notations defined in files up to here,
and on reduction (in progress) and typing defined in further files.
Paths (introduced later in the file) represent organized/restricted collections of P.

-----------------------------------------------------------
Part 1: 42 top level reduction rules
-----------------------------------------------------------
### reduction rules
ReductionTop:
precondition: at top level we have an L not of form LC.
Rule (top) performs a step of execution, while rule (enter)
propagates the execution inside nested classes and libraries in method bodies.


r::=LC| exception v | error v

(top)
p ==> p'.update(p'.top()[C=L])
  where
  p.top()={_ implements Ps0, MCs  C:eC Ms}//MCs are already compiled
  eC not of form L//thus eC is the first point to execute
  paths=tryTypedPaths(p,eC)
  paths'=tryCoherentPaths(p,eC)
  //paths and paths' represents the Ps recursively used by eC,
  //paths' needs to be coherent, while paths needs only to be typed
  p0=multiNorm(p; paths)//norm the part of p required by eC
  paths;paths' ||-p0 ~> p' //type all the paths
  e=typeAndAdapt(eC,p',paths')
  e -->p'+ r //execute the expression under the program and obtain a result
  L=refreshUniqueNames(r) //may fail if r not of form L, and that would be lifted as compilation error.

(enter)
p ==> p'.pop()
  where
  p.push(ctxL, L)==>+ p'
  p.top()={interface? implements Ps, MCs  M Ms}
  M not of form MC
  M.e=ctxC[L], L not of form LC
  ctxL={interface? implements Ps, MCs  M[with e=ctxC] Ms}
  p'.top() of form LC //Note: p' is one level deeper than p,
  // and p'.top() is the LC result of metaprogramming L



-----------------------------------------------------------
Part 2: paths //James suggest name "stset,subtrees,pathtrees" for Paths
-----------------------------------------------------------
"paths" is a datastructure to store P1..Pn in a organized way:
The idea is to store them as a stack, where the first level
stores subtrees rooted in This0, the second level store the ones rooted
in This1 and so on.
Moreover, if Thisn.Cs is present, then we do not store
any of its sub paths Thisn.Cs.Cs'.
We model this idea with
- minimize(Css)={Csi in Css | forall Csj in Css\Csi,  Csj.C._!=Csi}//note: in code we check '.C._' need to be non empty by 'csShort.size()>=csLong.size()'i

- paths::= Csss //list of set of list of C

We construct paths from P1..Pn as follow:
 -reorganize(empty)=empty
 -reorganize(Ps)=Css0',...,Cssn'
  Cs in Cssi iff Thisi.Cs in Ps //this filters out Any, Void, and Library since they have no Thisi
  Cssn!=empty //this guarantees paths is not larger than is needed by the set of Ps
  Cssi'=minimize(Cssi)

Simple operations:
 -(Css paths).top()=Css
 -empty.top()=empty

 -(Css paths).pop()=paths
 -empty.pop()=empty

 -paths.push(Css)=minimize(Css) paths

 -(Css paths) U (Css' paths')=(paths U paths').push(Css U Css')
 -paths U empty=empty U paths = paths


The prefix operation adds Cs in front of all the P in paths.
It is unobvious since we need to consider the n in Thisn.
for example: reorganize(This0.A,This1.B,This2.C,This3.D)=((A)  (B)  (C)  (D));
((A)  (B)  (C)  (D)).prefix(W.E) = ((W.E.A  W.B  C) (D)),
representing Ps This0.W.E.A  This0.W.B  This0.C This1.D
//Note: prefix() and [from _] are related: reorganize(Ps[from This0.Cs])=reorganize(Ps).prefix(Cs)

 -empty.prefix(_)=empty
 -paths.prefix(empty)= paths
 -(Cs1..Csn).prefix(Cs)=Cs.Cs1 .. Cs.Csn
 -(Css paths).prefix(Cs.C)= Css.prefix(Cs.C) U paths.prefix(Cs)
//the formalization relies on Cs1..Csn being a set, so duplicates are removed. In the code it happens by minimize

-----------------------------------------------------------
Part 3: methods(p,P)=Ms,  collect(p,Ps)=Ps'
-----------------------------------------------------------
methods(), applied to a non normalized L, will return a mixture of
the methods retrieved directly from the L and methods declared in its
implemented interfaces.

methods() collects such methods and their types. It may have to choose a type
in case of methods refined in different ways from interface diamond implements.

_______
#define collect(p,Ps)=Ps' //collects transitively implemented interfaces
-collect(p,empty)=empty
  //an implementation could keep a list of visited P instead of diverging; mathematically it is the same.

-collect(p,P0 Ps)=((P0 Ps') \p collect(p,Ps)) collect(p,Ps) //that is, crucially: depth first but we avoid duplicates by keeping the rightmost occurrence.
  p(P0)={interface implements Ps0 _}
  Ps'=collect(p,Ps0[from P0])
  where "\p" is set minus on lists using p.equiv(P1,P2) //this checks absence of circularity by diverging (i.e. looping until stack overflow)
-Ps \p Pz'=Ps''
 empty \p Ps=empty
 P,Ps\p P',Ps1=Ps\p P',Pz
   where p.equiv(P,P')
 (P,Ps\p Ps1)=P,(Ps\p Ps1)
   otherwise

_______
#define methods(p,P0)=M1'..Mk' //methods returns a set: the order of the methods is not relevant
  p(P0)={interface? implements Ps Ms Phase}
  //Note we do not do the following: "if Phase!=None, M1'..Mk' are extracted from Ms[from P0]"
  / because in the code we already "memoize" methods computation
  P1..Pn=collect(p,Ps[from P0])
  ms1..msk={s|exists i in 0..n : p(Pi)(s) is defined}//Note, in the code it is(properly implemented but) done in 2 steps, first cb0, then p1n
  forall s in ms1..msk, there is exactly 1 j in 0..n
    such that p(Pj)(s)=mh e? //no refine
  forall i in 1..k //i comes from k in ms1..msk
    Mi= p(P0)(msi)[from P0],  with p(P0)(msi) of form refine? mh e?,
    otherwise //note: 's e' and missing methods both get mh from implemented interfaces
    Mi=addRefine(methods(p,Pj)(msi)) //ok if it stay the same since already refine
      for the smallest j in 1..n such that methods(p,Pj)(msi) of form refine? mh
      //this ordering of j leverages the smart ordering of collect()
    Mi'=Mi[with e=p(P0)(msi).e[from P0]] if defined,
    otherwise
    Mi'=Mi
//Note, in this model cases like
//"A:  {interface refine method A m()}
// B: { implements A method A m()}"
// are ok wrt B but fail for A


-----------------------------------------------------------
Part 4: alive(p,P),  norm(p)=L,  multiNorm(p; paths)
-----------------------------------------------------------
_______
#define alive(p,P) //check if P is defined or has some hope of being defined in the future
alive(p,Any),alive(p,Void),alive(p,Library) holds
alive(p,Thisn.Cs)=alive(p(Thisn),Cs) //TODO: we assume the sugar
// will check for all paths to be alive after desugaring
alive(L,empty) holds
alive(L,C.Cs) if L(C)=L' and alive(L',Cs)
  or  L(C)=e, e not of form L // or L doc
_______
#define norm(p,L)=norm(p.evilPush(L))

_______
#define norm(p)=L  //Note: norm do not guarantee the order of implemented interfaces as well as the order of methods.
-norm(p)=p.top()
  if p.top().phase!=None
  otherwise
-norm(p)={interface? implements Ps,(Ps'\p Ps) norm(p,Ms') Norm} //Note: Ps'\p Ps, Ps correctly trashes the documentation of P in Ps' already in Ps.
 p.top()={interface? implements Ps Ms None}
 Ps'=collect(p,Ps)
 forall P in Ps'\p Ps, p.noUnique(P)
 Ms'=methods(p,This0)\Ms.mss, [methods(p,This0)(M.s)| M in Ms],[C:e| C:e in Ms]

-norm(p,refine? mh e?)= refine? mh e'?
  where e'?=empty if e?=empty
  otherwise e'?= e where we replace all Li inside e?
    with norm(p,Li)
  forall P inside mh e?, alive(p,P)

-norm(p, C:L) =C:norm(p.push(C))


_______
#define multiNorm(p; paths)=p' //multinorm assumes that p does not have evil pushes

- multiNorm(p; empty) = p //Note: for populated paths, the end point of recursion is the next clause

- multiNorm(p; Cs1..Csn)= p.update(L)//case of paths= a single Css, equivalent to a (Css,empty)
  pi = p.navigate(Csi)
  Li = norm(pi)//norming the top
  L = p.top()[Cs1=L1..Csk=Lk] //replace the nested classes in paths Csi with libraries Li.

- multiNorm(p; Css,paths) =multiNorm(p'; Css)
  p'=p.growFellow(multiNorm(p.pop(); paths))



-----------------------------------------------------------
Part 5: reachability
-----------------------------------------------------------
In order to decide how to treat them later,
we divide the Ps in the eC in (top) (along with the parts of the
p from (top) that they purport to refer to) into various categories.

Consider this part of a project:
  C:{interface method E k()}
  eC= A.foo(B,{implements C,G method D m(F x) F.foo() G:{interface}})
  D:{}
  F:(...)
In the current design we divide A,B,C,D,E,F,G into 3 1/2 categories:
  coherent: A
  typed:    B,C,D,E
  alive:    F        (while normalising eC, since F is not metaprogrammed yet)
  alive:    G        (while normalising the libraries in eC)
Note that G is not visible from outside eC.
Note that E is typed since C is typed; C is typed since C is outside eC and implemented in eC.
This design allows that using introspection on a Library value,
if you succeeded navigating out, everything reachable is typed.
Another, more expressive option would be to have
  coherent: A       //NOT WHAT WE ARE DOING
  typed:    B       //NOT WHAT WE ARE DOING
  norm:     C       //NOT WHAT WE ARE DOING
  alive:    D,E,F,G //NOT WHAT WE ARE DOING
But this introduces more cases, and makes it harder to reason about
introspecting a library value: it is harder to guarantee that any
extracted class Any will be a valid typed 'class Any', suitable as input for redirect.
-----------------------------------

//Note that we could have redundant paths, like This1.C and This2.B.C, which is ok,
//and this is also ok for the result of tryCoherentPaths() and
//tryTypedPaths() and the input of toAny().

-tryCoherentPaths(p,eC)=reachablePaths(p,reorganize(Ps'), empty,empty)
  Ps,Ps'={P|P inside eC}//arbitrary split of the set; a heuristic which is modeled later will apply in the implementation

-tryTypedPaths(p,eC)=reachablePaths(p,paths0, empty,Typed) U paths1
  paths0=reorganize({P|P inside eC}) U (stronglyDeepImplements(L1)U..U stronglyDeepImplements(Ln)).pop()
  L1..Ln={L| L inside eC}
  //in path not prime// not repeat check stage
  //Marco and James are confused by those comments
  mhs={Li(Cs)(s)[from This0.Cs].mh|forall Cs, Ms, Li in L1..Ln}
  //mhs is a collections of method headers from many libraries,
  //and the paths are relative to the multiple insides of those libraries
  Ps0={Thisn.Cs |This(n+1).Cs inside mhs}
  paths1=reachablePaths(p,reorganize(p,Ps1), empty,Typed)
    where Ps1 =maximal subset of Ps0 such that reachablePaths(..) is defined
  //Ps0=collect all the types inside the mh weakly deep in libraries inside eC referring outside of eC
  //maximal subset Ps1 can be computed by collecting the paths of individual Pi in Ps0

- stronglyDeepImplements(L0)=reorganize(L0.Ps)
  U (stronglyDeepImplements(L1) U..stronglyDeepImplements(Ln)).pop()
  where
  L1..Ln={L|L inside M.e, M in L0.Ms}

- reachablePaths(p,paths,Css,Typed?)= reachablePaths(p, paths U paths0,Css',Typed?) // U on paths does minimize() internally
  where
  //logically sort of paths.top()\Css!=empty
  Css'=minimize(paths.top() U Css)
  Css'!=Css
  Cs1..Csn=Css'
  paths0=reachableFromL(p.top()(Cs1),Typed?).prefix(Cs1) U ... U reachableFromL(p.top()(Csn),Typed?).prefix(Csn)
  forall i in 1..n error if Csi= C._ and p.top()(C) not of form LC //this allows for clearer error messages and less fragile code

- reachablePaths(p,paths,Css,Typed?)=paths0
  where
  //logically sort of paths.top()\Css==empty
  Css==minimize(paths.top() U Css)
  if paths.pop() not empty
    paths0=reachablePaths(p.pop(),paths.pop(),empty,Typed?).push(Css)
  otherwise //this if is to avoid p.pop() undefined
    paths0=reorganize(Css)

- reachablePaths(p,empty,empty,Typed?) =empty

- reachableFromL(LC,Typed?)=paths
  where
  LC={_ implements Ps, M1..Mn Phase}//in implementation, error if not compiled
  paths=reorganize(Ps) U reachableFromM(M1,Typed?) U... U reachableFromM(Mn,Typed?))
  //Note: it may be possible (but not obvious) to return empty if Phase not in{None,Norm}; it is complex because:
  // -tryCoherent may need to collect already typed things since we need to check for coherence too.
  // -during compilation to Java/intermediate we rely on Paths (from tryTyped) to do the generation.

- reachableFromM(C:L,Typed?)= reachableFromL(L,Typed?).pop()
- reachableFromM(mwt,empty)=reorganize({P| P inside mwt})
- reachableFromM(s e,empty)=reorganize({P| P inside e})
otherwise //M can be mwt or s e
- reachableFromM(M,Typed)=reachableFromM(M,empty)
    U (reachableFromL(L1,Typed) U...U reachableFromL(Ln,Typed)).pop()
    L1..Ln={L| L inside M.e?}

  non determinism heuristic used in tryCoherentPaths(p,eC):
  **if P.m(_) inside e, P in Ps'
  **if p(Pi).Phase=Coherent, Pi  in Ps' // note, if p(P) is not defined,
  //the path will not be queued for coherence, and an error will be raised during the typing of eC in (top).
  **if ( _ T? x=P _ _) inside e and T? != class Any, P in Ps'.
  **if ( _ T x=_  _ _) inside e, T.P  in Ps'
  **if catch throw P x _ inside e, P  in Ps'
  **if using P _ _ inside e, P  in Ps'
  otherwise, P is in Ps instead of Ps'.
  // note that user can always force a Ps' by writing (x=P x)


-----------------------------------------------------------
Part 6: paths;paths' ||-p ~> p, typeAndAdapt(eC,p,paths)=e, toAny(paths, eC) //assumes that p does not have evil pushes
-----------------------------------------------------------
(pPop)
paths;paths' ||- p  ~>  p1.update(L)
  where
  p1=p.growFellow(p0)
  paths.pop();paths'.pop() ||- p.pop() ~> p0
  paths.top(); paths'.top() ||-p1 ~> L

(pNoPop)
Css;Css'  ||- p  ~>  L,empty // 'L,empty' is a program with only 1 level
    where
    p.pop() undefined
    Css;Css' ||-p ~> L

(pEmpty)
empty;empty ||- p ~> p

(pL)
Css;Cs1'..Csk' ||-p ~> p'.top()[Cs1'=L1'..Csk'=Lk']    //Li will have Phase=Typed also inside all somehow contained Ls
  where
  Cs1..Csn=Css\Cs1'..Csk'
  forall Csi in 1..n : Typed |-p.navigate(Csi) ~> Li
  p'=p.update(p.top()[Cs1=L1,.. Csn=Ln])//Note: in code, updated p to avoid both p and p' in scope
  forall Csj' in 1..k: Coherent |-p'.navigate(Csj') ~> Lj'
  // the type system can be optimized to just assert  tests for libraries that are
  // annotated as already checked
  // However, this is  the responsibility of the TS and not of  ||-
_______
#define toAny(paths', eC)
- toAny(Css1..Cssn,eC)=eC iff forall Thisi.Cs0 inside eC, Cs0=Cs1.Cs2 and Cs1 in Cssi
  otherwise
  toAny(Css1..Cssn, ctxC[Thisj.Cs1.Cs2])=toAny(Css1..Cssn,ctxC[Any])
  where Cs1 notin Cssj
  
_______
#define typeAndAdapt(eC,p,paths)=e
//Here we check that even replacing all Ps but paths with Any,
//eC is still well typed. We adapt the result to always return Library
- typeAndAdapt(eC,p,paths)=e
  Norm | p| empty |-toAny(paths,eC) ~> _ :_<= imm Any | empty;_ 
  either
  Norm | p| empty |-eC.#toLibrary() ~> e : _<= imm Library | empty;_
  or
  Norm | p| empty |-(imm Void unused=eC {}) ~> e : _<= imm Library | empty;_
  or
  Norm | p| empty |-eC ~> e : _<= imm Library | empty;_
  //in case all 3 fails, the last error is forwarded
