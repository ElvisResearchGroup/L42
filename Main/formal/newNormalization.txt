Normalization
  add method types to ms  for implemented methods
  add abstract method types for non mentioned implemented methods
  add transitive list of implemented interfaces


- local var inference
[- catch type inference?]
[- receiver type inference]
- operator to method inference
- slash inference

Key::=Cs,ms,CtxC
Map::= Key -> Dep

Dep::= T |  Key , lambda t:T. e:Dep

init(p)=Map
x=e in p.top() there will be an entry in the map
with key x=[]
ctxC[a `m b] in p.top()
key= Cs,ms,CtxC
key=Cs,ms,[]

Map-> Map
if Map(Key0)->Key1,lambda
and Map(Key1)=T
then Map(Key0)=lambda(T)

updated(p,Map)=p'



L(Cs)(ms)=CtxC[e]

//interface I1 { I3 baz() }
//interface I2 {implements I1}

{method m()=(
  I1 z = this.bar()
  I2 x = ( w1 this.bar() w1).baz()
  y = ( w2 this.bar() w2).baz()
  void)}

init
Map1:
  m, ".. y=[] .." -> ??,baz,[] -> lambda t->t
  m, ".. w1=[] .." -> bar,[] -> lambda t->t
  m, ".. w2=[] .." -> bar,[] -> lambda t->t
  bar,[] -> I1
  ??,baz,[] -> m, ".. w2=[] .."-> lambda t-> p(t).bar().T

  
  
Map2:
  m, ".. y=[] .." -> Num
  bar,[] -> Num
project
  for all key in map, p.top().key()+=T


T1 y=(T2 x=this.bar() x).beer()
this.bar()??

this_bar <= T2
this_bar_beer <= T1
this_bar <= Num
// And so what?
// this_bar <= T2 & Num // ?

/*{
  T2 =    { T1 beer() }
  This$ = { T2 bar() }
}[]{
  T2 = { T1 beer() }
}
*/




T x=if cond a else b
 x=(cond catch exception T v b a)

 x=T{...return a ..}
foo.bar(x)

foo.bar({...return a ..})


Void x={e catch (...) return a, void}
      ={
foo({return a})

e::= w | w.m(xes) | (ds ks e) | loop e | throw w | x:=e
w::=x | L | (ds w) | void | P

A:Foo+{ 
  method Num decls(){
    Num x=this.x()
    Num y=this.y()
    }
  method b()= this.x()+this.y()
  }
=============
interface C { C bar() }
class Y { implemenets C Y bar() }
A:Foo+{
  method Num decls(){
    C x=this.x(a) // this.x.R <= C
    C y=this.y(b)
    //GiveMeNum.num(this.x())
    }
  method b() = 
    z = this.x() // infers type C z
    m = z.bar() // infers type C
}


a 'm b ==> a.m(x:b) or b.m(x:a) for any x
  error if there is more then one way it have hope to typecheck

A: Foo <>< { B f1  method g1() = this.f1().g2().f2() }

B: Foo <>< { A f2  method g2()=this.f2().g1() }

void foo(String|int x) {
  if (x instanceof String) { 
    ...
  }
}

type system will no do any annotations any more

metaprogramming always work on normalized code
not necessarely well typed


{
  A: { method Any +(B b) }
  B: { /*method Any +(A a)*/ method Any foo()=this.+(xx) }
  Foo: {
    method Any plus(A a, B b) 
      a + b // a.+(b)
  }
}[rename A.+ -> A.hi()] + {
  B: { method Any +() }
}
