This document can be open together with 3ExpressionTypeSystem
to reference the secondary notations used there
--------------------------------------------
1 Type manipulation
--------------------------------------------

onlyMutOrImm(G)={x:G(x) | G(x).mdf in {mut,imm}}//note: we correctly remove all fwd variables

fwd T
  fwd imm P=fwd fwd%imm P=fwdImm P
  fwd mut P=fwd fwd%mut P=fwdMut P
  otherwise fwd T=T

fwd% T
  fwd% imm P=fwd%Imm P
  fwd% mut P=fwd%Mut P
  otherwise fwd% T=T

fwd_or_fwd%_in Ts
  exists T in Ts such that
  T in {fwdImm _,fwdMut_,fwd%Imm _,fwd%Mut _}

noFwd T
  noFwd fwdImm P=noFwd fwd%Imm P=imm P
  noFwd fwdMut P=noFwd fwd%Mut P=mut P
  otherwise noFwd T=T

noFwd T1..Tn= noFwd T1 .. noFwd Tn

//toImm(T) //unused?
//toImm(class P)=class P
//otherwise, toImm(mdf P)=imm P

toImmOrCapsule(T) //used for parameters
  toImmOrCapsule(mdf P)=capsule P with mdf in {lent,mut,fwdMut,fwd%Mut}
  toImmOrCapsule(read P)=imm P
  otherwise toImmOrCapsule(T)=T//mdf in {class,imm,fwdImm,fwd%Imm,capsule}

toLent(T)//used for return types and gamma
  toLent(mut P)=lent P,
  toLent(fwdMut P) and toLent(fwd%Mut P) undefined;
  otherwise toLent(T)=T

mutOnlyToLent(T) //used for parameters in deterministic strategy
  mutOnlyToLent(mut P)=lent P,
  otherwise mutOnlyToLent(T)=T

capsuleToLent(T)  //used for return type in get/exposer
  capsuleToLent(capsule P)=lent P
  otherwise capsuleToLent(mdf P)=mdf P

capsuleToMut(T)  //used for return type in get/exposer
  capsuleToMut(capsule P)=mut P
  otherwise capsuleToMut(mdf P)=mdf P


toRead(T) //used in gamma and in return type getter
  toRead(fwdMut P)=toRead(fwd%Mut P)=undefined
  toRead(fwdImm P)=toRead(fwd%Imm P)=undefined
  toRead(lent P)=toRead(mut P)=toRead(capsule P)=read P
  otherwise toRead(T)=T//mdf in imm,read,class

toRead(G)
  toRead(G)(x)=toRead(G(x))[with var?=empty] //thus undefined where toRead undefined

toLent(G)
  toLent(G)(x)=G(x) if G(x).T.mdf=immutable
  otherwise
  toLent(G)(x)=toLent(G(x))[with var?=empty] //thus undefined where toLent undefined

//lentToMut(T) //unused
//  lentToMut(lent P)=mut P
//  otherwise lentToMut(T)=T

mutToCapsule(T) //used for parameters
  mutToCapsule(fwdMut P) and mutToCapsule(fwd%Mut P) undefined//NO? no reason to restrict?
  mutToCapsule(mut P)=capsule P
  otherwise mutToCapsule(T)=T
//used for parameters
mutToCapsuleAndFwdMutToFwdImm(T) //used for parameters//called f in the implementation
  f(fwd%Mut P) undefined
  f(mut P)=capsule P
  f(fwdMut P)= fwdImm P
  otherwise f(T)=T

mutToCapsuleAndFwdRead(T) //used for parameters//called f in the implementation
  f(fwd%Mut P) undefined
  f(mut P)=capsule P
  f(fwdMut P)= read P
  f(fwdImm P)= imm P //Note: read here would be unsound
  otherwise f(T)=T


G[G']
  G[G'](x)=G'(x) if x in dom(G'); otherwise G[G'](x)=G(x)

G[ks]
  G[]=G
  G[k ks]=toRead(G) with k.throw=error and not catchRethrow(k)
  otherwise G[k ks] = G[ks]

mostGeneralMdf(throw,Tr)
  mostGeneralMdf(error,Tr)=imm
  mostGeneralMdf(return,empty;Ps) undefined
  mostGeneralMdf(return,T1..Tn;Ps)=mostGeneralMdf({T1.mdf .. Tn.mdf})
  otherwise
  mostGeneralMdf(exception,_;Ps)=imm

mostGeneralMdf(mdfs)
  mostGeneralMdf(mdfs)=mdf
  case by exclusion:
    if mdfs=mdf', then mdf=mdf' //that is the only way mdf=class
    if class in mdfs, then undefined //and size>1
    if mdfs\capsule=mdf', then mdf=mdf'
    if fwd_or_fwd%_in(mdfs) {
      if read or lent in mdfs, then undefined
      if imm and mut both in noFwd(mdfs) then undefined
      //we know: more then one, no read/lent, either all imm side or mut side
      if fwdImm in mdfs mdf=fwdImm
      if fwd%Imm in mdfs mdf=fwd%Imm
      if fwdMut in mdfs mdf=fwdMut
      assert fwd%Mut in mdfs
      mdf=fwd%Mut
      }
    if read in mdfs, mdf=read
    if imm in mdfs, mdf=read
    mdf=lent
  //set oriented definition from james:
  //generalEnough(mdfs)
  //  mdf | forall mdf1 in mdfs, mdf1 <= mdf
  //mostGeneralMdf(mdfs)
  //mdf = generalEnough(mdfs) such that
  //  forall mdf1 = generalEnough(mdfs) mdf <= mdf1
  // that is, the most speficic generalEnough.


//liberal use of desugaring in the line under
catchRethrow(k) iff k=catch throw Any x ((e catch error Any z void void) throw x)

Tr1 U Tr2
  Ts1;Ps1 U Ts2;Ps2 =  Ts1,Ts2; Ps1,Ps2

Tr.capture(p,k1..kn)= Tr.capture(p,k1)...capture(p,kn)

Tr.capture(p,catch error P x e)=Tr
  (Ts;Ps).capture(p,catch exception P x e)=Ts;{P'| P' in Ps, not p|-P'<=P}
  (Ts;Ps).capture(p,catch return P x e)={T| T in Ts, not p|-T.P<=P};Ps

guessType(p, G, x=e, e', T?) = T
  guessType(p, G, x=e, e', T?) = capsuleToMut(guessType(p, G, e))
  guessType(p, G, x=e, (ds var? x = _ ds' ks e'), T?) = T  //e'
    where {T} = guessTypes(p, G, x, (ds var? x = e ds' ks e'), capsuleToMut(T?)?)  //e'[x=e] //defined only if e' is a block

guessType(p,G,e) = T://TODO: change in code about ds
  guessType(p,G,L)=imm Library
  guessType(p,G,x)=G(x)
  guessType(p,G,void)=guessType(p,G,x:=e)=imm Void
  guessType(p,G,P)=class P //here will be wrong over interfaces
  chain.m(x1:e1..xn:en)=p(P)(m(x1..xn)).T//guaranteed to be a normalized method
    where guessType(p,G,chain)=mdf P // TODO: Use the types of the arguments to refine the return-type
  guessType(p,G,throw _) and guessType(p,G,loop _) undefined
  guessType(p,G,use P check m(x1:e1..xn:en) e) undefined // TODO: Define this

  guessType(p,G,(ds ks e)) = T
    where {T}=guessType(p, G, k1) U .. U guessType(p, G, kn)
    and guessType(p,G[ds], e) undefined

  guessType(p,G,(ds ks e)) = T
    where T=guessType(p,G[ds], e)
    and {T?}=guessType(p, G, k1) U .. U guessType(p, G, kn)

  guessType(p,G,catch throw P x e ) = {T}
    where guessType(p,G[x:P],e) = T
  otherwise guessType(p,G,catch throw P x e ) = {}

guessTypes(p,G,x,e,T?) = Tz
    guessTypes(p,G,x,x,T) = {T}

    guessTypes(p,G,x,(d1..dn k1..km e), T?) =
        guessTypes(p,G[ds],x,d1, T?) U .. U guessTypes(p,G[ds],x,dn, T?) U
        guessTypes(p,G[ds],x,k1, T?) U .. U guessTypes(p,G[ds],x,km, T?) U
        guessTypes(p,G[ds],x,e, T?)

    guessTypes(p,G,x,var? T? x' = e, T?) = guessTypes(p,G, x, e, T?)

    guessTypes(p,G,x,catch throw P x' e, T?) = guessTypes(p,G[x':P], x', e, T?)

    guessTypes(p,G, x, e0.m(x1:e1..xn:en), T?) =
      guessTypes(p, G, x, e0, empty) U..U guessTypes(p, G, x, en, empty)
        where guessType(p, G, e0) is undefined

    guessTypes(p,G, x, e0.m(x1:e1..xn:en), T?) = Tz
        guessTypes(p,G, x, e0,  T) U
        guessTypes(p,G, x, e1, T1?) U... U guessTypes(p,G, x, en, Tn?)
            where guessType(p, G, e) = T
            and Ti?=guessParamType(p, m(x1...xn), T, xi, T?)

    guessTypes(p,G, x, throw e, T?) = guessTypes(p,G, x, e, empty)
    guessTypes(p,G, x, loop e, T?) = guessTypes(p,g,x,e, imm Void)

    guessTypes(p,G,x,use P check m(x1:e1..xn:en) e,T?) = {} // TODO: Define this
    guessTypes(p,G,x,x,T?) = {}
        otherwise

// guess what type the value of paramater 'x' should have
// in a call to 's' on a reciever of type T,
// whose return type is expected to conform to T?
guessParamType(p, s, T, x, T?)? = T?':
    // TODO: define

//TODO: in code remove suggest(T?,T)

staticDispatch(p,G,#?m(x1:y1,..,xn:yn), T?)=e
  Ti=G(yi)
  Tsi=T1..Tn \i//a sequence minus the element in position i
  xysi=x1:y1,..,xn:yn\i
  xsi=x1..xn\i
  chose the smallest j so that is possible to
    chose the smallest i so that
      MethT in methTypes(p,Ti.P,#m#jxi(xsi)), p|-Ti,Tsi<=MethT.Ts
  e=yi.#m#jxi(xysi)
staticDispatch(p,G,e.m(xes), T?)= staticDispatch(p,G,e,empty).m(xes)
staticDispatch(p,G,(ds ks e), T?)= (ds' ks e')
  ds'=staticDispatch(p,G,ds, (ds ks e), T?)
  e'= staticDispatch(p,G[ds'],e, T?)

staticDispatch(p,G,e, T?)=e if e not of form #?m(xys), e.m(es), (ds ks e)

staticDispatch(p,G,ds,e,T?)=ds'
  ds',0=staticDispatch(0,p,G[ds],ds,e,T?)
staticDispatch(p,G,ds)=staticDispatch(p,G,ds',e,T?)
  ds',n+1=staticDispatch(0,p,G[ds],ds,e,T?)
  ds!=ds'//else fail, we can not guess/dispatch //in code is more efficient to count errors in the whole subtree
  //dom(G[ds']) superset dom(G[ds]) //Note: not sure if the correct formalism is this line or the former

staticDispatch(n,p,G,empty, e', T?)=n   //recursion end
staticDispatch(n,p,G,var? T x=e ds, e', T?)=
	var? T x=staticDispatch(p,G,e,T)
	staticDispatch(n,p,G,ds, e', T?)//good case

staticDispatch(n,p,G,var? x=e ds, e', T?)=
	var? T x=staticDispatch(p,G,e,empty)
	staticDispatch(n,p,G,ds, e', T?)//good case
  where T=guessType(p, G, x=staticDispatch(p,G,e, empty), e', T?)

staticDispatch(n,p,G,var? T x=e ds, e', T?)=
	var? T x=e
	staticDispatch(n+1,p,G,ds, e', T?) //remember failure
  where staticDispatch(p,G,e, T) undefined

staticDispatch(n,p,G,var? x=e ds, e', T?)=
	var? x=e
	staticDispatch(n+1,p,G,ds,e', T?) //remember failure
  where guessType(p, G, x=staticDispatch(p,G,e,empty), e', T?) undefined

untrustedClass({/*_ @untrusted _*/ _})
plgUntrusted({/* _ @plugin url*/ _}) // TODO
  with not trusted(url)
plgUntrusted({/* _ @plugin url @pluginPart url._*/ _})
  with not trusted(url)

--------------------------------------------
2 Coherent literal
--------------------------------------------
coherent(p) //interfaces are always coherent
  p.top()={interface implements _ mwts ncs}

coherent(p)
  p.top()={implements _ mwts ncs} //no interface
  either for no M in mwts M.mdf=class and M.e=empty //there is no abstract class method
  or exists xz  and n? such that
    forall M in mwts, coherent(p;M;xz;n?)

coherent(p;M;xz;n?)
  M=refine? class method mdf P m__n?(mdf1 P1 x1, ..., mdfn Pn xn) exception _
  p|-This<=P
  mdf not in {class, fwd mut, fwd imm}
  lent not in mdf1..mdfn
  if mdf in {imm, capsule} then {mdf1..mdfn} disjoint {mut, fwd mut}
  if read in {mdf1..mdfn) then mdf in {read, lent}
  {x1, ..., xn} = xz
  if untrustedClass(p.top()) then m is of form #$m

coherent(p;M;_;_)
  M.e!=empty //implemented methods are coherent

coherent(p;M;_;_)
  M=refine? mdf method _
  mdf in {lent, mut, capsule}
  forall refine? class method mdf' _ in p.top(), mdf' not in {lent, mut, capsule}

coherent(p;M;_,x;n?)
  M=refine? mdf method T #?x__n?(mdf' P' that) exception _
  p |- imm Void <= T
  mdf' in {imm, mut, capsule, class}//that is not in {read, lent, fwd mut, fwd imm}
  mdf in {lent, mut, capsule}
  if mdf = lent then mdf' != mut

coherent(p;M;_,x;n?)
  M=refine? mdf method mdf' P' #?x__n?() exception _
  mdf != class
  forall P in FieldPath(p.top(), x, mdf), p |- P <= P'
  coherentGetMdf(mdf',mdf,FieldMdf(p.top(),x, mdf),FieldAccessMdf(p.top(),x, mdf))

coherentGetMdf(imm,imm, mdfs0,_)
  class not in mdfs0

coherentGetMdf(imm,mdf,mdfs0,mdfs1)
  mdf!=imm
  mdfs0 subseteq {imm, fwd imm,capsule}
  {mut, lent} disjoint mdfs1


coherentGetMdf(read, _, mdfs0,_)
  class not in mdfs0

coherentGetMdf(class,_,{class},_)

coherentGetMdf(capsule,capsule,mdfs0,mdfs1)
  mdfs0 subseteq {mut, fwd mut, capsule}
  imm not in mdfs1

coherentGetMdf(lent,mdf,mdfs0,_)
  mdfs0 subseteq {mut, fwd mut, capsule}
  mdf in {lent, mut, capsule}

coherentGetMdf(mut,mdf,mdfs0,_)
  mdfs0 subseteq {mut, fwd mut, capsule}
  mdf in {mut, capsule}

mdf' in FieldsMdf(L, x, mdf) and P in FieldsPaths(L, x, mdf) iff:
  class method mdf" _(_ mdf' P x _) in L
    or mdf" method _ #?f(mdf' P that) in L
  if mdf in {lent, mut, capsule} then mdf" in {lent, mut, capsule}

mdf' in FieldsAccessMdf(l, x, mdf) iff:
  mdf" method mdf' P #?f() is in L
  mdf" != capsule
  if mdf in {lent, mut, capsule} then mdf" in {read, lent, mut, capsule}

--------------------------------------------
3 Multiple method types   T0..Tn-> T';Ps in methTypes(p,P,s)
--------------------------------------------
The main idea giving flexibility to the 42 type system is that
methods have many types, where only the modifiers change.
It can be seen as a form of polymorphism of the method types.
We here express the methodTypes set with metarules,
but a finite/predictable sequence of applications is always sufficient,
as shown later

//first managing placeholders

(mBase)
mdf0 P T1..Tn-> T';Ps in methTypes(p,P,s)
  where
  p(P)(s).mh[from P]=refine? mdf0 method T m(T1 x1,..Tn xn) exception Ps
  T'=fwd% T if fwd_or_fwd%_in(Ts)
  otherwise T'=T

(mNoFwd)
noFwd Ts-> noFwd T;Ps in methTypes(p,P,s)
  where
  Ts->T;Ps in methTypes(p,P,s)

//then capsule and imm promotion
(mC)
mutToCapsule(Ts)->capsule P0;Ps in methTypes(p,P,s)
  where
  Ts->mut P0;Ps in methTypes(p,P,s)

(mI)
toImmOrCapsule(Ts)->imm P0;Ps in methTypes(p,P,s)
//the behaviour of immorcapsule on fwd is not relevant since the method
// returns a read and will be not well formed if it had fwd parameters
  where
  Ts->mdf P0;Ps in methTypes(p,P,s), mdf in {read,lent}
  //by well formedness if return type is read, not fwd_or_fwd%_in Ts

//then lent viewpoint adaptation

(mVp)
Ts'->toLent(T);Ps in methTypes(p,P,s)
  where
  Ts0 mut P Ts2->T;Ps in methTypes(p,P,s)
  Ts'=mutToCapsule(Ts0) lent P mutToCapsule(Ts2) //this implies not fwd_or_fwd%_in Ts0,Ts2


//and then rules about fwd and fwd%
(mImmFwd)
mutToCapsuleAndFwdMutToFwdImm(Ts)->fwd%Imm P0;Ps in methTypes(p,P,s)
  where
  Ts->fwd%Mut P0;Ps in methTypes(p,P,s)//could be generalized to make fwdMut in fwdImm
  fwd_or_fwd%_in(Ts)

(mRead)
mutToCapsuleAndFwdRead(Ts)->read P0;Ps in methTypes(p,P,s)
  where
  Ts->fwd%Mut P0;Ps in methTypes(p,P,s)//could be generalized to make fwdMut in read
  fwd_or_fwd%_in(Ts)

It is possible to obtain all the variations with the following table:
  mBase
  mNoFwd(mBase)
  mImmFwd(mBase)
  mRead(mBase)
  mC(mBase)
  mC(mNoFwd(mBase))
  mI(mBase)
  mI(mRead(mBase))
  mNoFwd(mImmFwd(mBase))
  mVp(mBase) //1 mType for each mut parameter
  mVp(mNoFwd(base))//1 mType for each mut parameter


------------------------------------------------------
4 Subtyping p |- T<=T'
------------------------------------------------------

(subtype)
p |- mdf0 P0<=mdf1 P1
  where
  mdf0<=mdf1
  P in P0 U (p(P0).Ps[from P0])
  p.equiv(P,P1)

mdf<=mdf
mdf1<=mdf3 if mdf1<=mdf2 and mdf2<=mdf3
capsule<=mut,imm  //,lent,read,fwd%Mut,fwdMut,fwd%Imm, fwdImm
imm<=read,fwd%Imm //,fwdImm
mut<=lent,fwd%Mut //,read,fwdMut
lent<=read
fwd%Mut<=fwdMut
fwd%Imm<=fwdImm
_______
#define p.equiv(P1,P2) //check if 2 paths are equivalent
- p.equiv(P,P) holds
- p.equiv(P,P')=p.equiv(P',P)
- p.equiv(P,P') if p.equiv(p.reducePath(P),P')
_______
#define p.reducePath(P1)=P2 //reducePath reduce only 1 level at the time
- p.reducePath(This1.C.Cs)=This0.Cs
    if p=L,ctxL,_ and ctxL(C)=[] //ok also this one can be messed up by evilPush
- p.reducePath(This(n+2).Cs)=This(n+1).Cs' //it is correct to have n both before and after the = sign
    p.pop().reducePath(This(n+1).Cs)=This(n).Cs'
