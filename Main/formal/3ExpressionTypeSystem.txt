TODO: e::= ...| #?m(x1:y1,..,xn:yn)
TODO: In the full language,
desugar[e1 #m e2]:
desugar[e1 #m e2]=(x1=e1 x1 #m e2) where e1 not of form x
desugar[x1 #m e2]=(x2=e2 x1 #m x2) where e2 not of form x
TODO: all operator precedence need to become right associative

We are having problems with inference overriding promotions.
variable name may force inferred mdf:
mdf$x is a valid var name. The type will be always inferred as mdf.
left,right makes imm$x
map makes mut$x
class will stay class
== is problematic, since takes reads

that, val will NOT be extracted as variable.
They need to be the only one in the ms, so the order do not matter.


Steps:
//do staticDispatch with NIY for operator dispatch.
//Test
//simplifiy ds typing
//Test
//add operator dispatch
//use operator dispatch in ts tests
//-operator dispatch desugar
//-operationdispatch desugar
//-desugaring +(ps)==> #plus#0left(ps)
replace/search for "(This that)"
//defer make all operators right associative
//defer make all operators not right dispatching

Test
change operator desugar
Test
//cleanup:
remove suggest

-----------------------------------------------------------------------------
Since the type system is quite extensive, we first present the
expression type system, that depends on notation for
-subtyping " p |- T<=T' "
-(multiple) method typing "Ts->T;Ps in methTypes(p,P,ms)"
-and plugin behaviour  "plugin(D.p,P,m(x1..xn))=plg, T1..Tn->T0;empty"
that are modeled later.
Many secondary notations are defined in the end of the file.
Note, in this file, all the L are LC   //LC == in all C:e, e of form L
-----------------------------
1 Grammar
-----------------------------
MethT::=Ts->T;Ps
D::= Phase `|` p `|` G  //D reads Delta
Tr::=Ts; Ps //Tr reads Throws
G::=x1: var?1 T1..xn: var?n Tn  //G reads Gamma
//assert var x capsule _ or var x fwd _ or var x fwd% _ never happens
--------------------------------------------
2 ExpressionTypeJudgement
--------------------------------------------
General judgment shape:
D |- e ~> e':T <=T'| Tr
  where e' is an annotated version of expression e and is of type T
  D.p points to where the e is located, //D.p.top()=ctxL[e]
  so if P inside e, D.p(P) is a reasonable operation
  Tr is the computed set of thrown returns and exceptions.
----
(void)
D |- void~> void:imm Void <= T | emptyTr
  where
  D.p|-imm Void <= T

(Path)
D |- P~>P:class P' <= T | emptyTr
  assert p(P) well defined
  D.p|-class P' <= T
  where
  if p(P).interface?=empty and class in p(P).mhs.mdfs then P'=P
  else P'=Any //Thus is any also for Any/Library/Void
//Note: we need p(P) not interface and with some class methods to prevent a bug in sum/redirect
//when a class 'A' may become an interface, and annotations 'class A' would be invalid.
//since classes without class methods may become interfaces, we accept the type class A only
//when class methods are present.

(library propagation)
D |- L ~> L' : imm Library <= T | emptyTr
  where
  D.p|-imm Library <= T
  D.Phase  |- D.p.evilPush(L) ~> L'

(x)
D |-x ~> x :D.G(x).T <= T | emptyTr
  where
  D.p|- D.G(x).T <= T

(loop)
D |- loop e ~> loop e' : imm Void <= T | Tr
  where
  D.p|-imm Void <= T
  D|- e ~> e' : _ <= imm Void | Tr

(throw)   // expression of type T0 throws the result of an expression where:
          // T1 is the guess type of the expression
          // T2 is the modified type, taking into account kind of thrown
          // T3 is the type of the expression, including promotions
          // and T3 is the type of the value thrown, this allows to use alternative method typing
D |- throw e~> throw[T0,T3] e' : T0 <= T0 | Tr
  where
  e0=staticDispatch(D.p,D.G,e)
  T1 = guessType(D.p,D.G,e0)// Note guessTypes can go in error, and need to become a type error here
  if throw=exception, T2= imm T1.P and Tr=Ts;Ps,T1.P
  if throw=error,     T2= imm T1.P and Tr=Ts;Ps
  if throw=return,    T2= (fwd T1) and Tr=(Ts,T3);Ps
  if T3=class P then exists ms in dom(p(P))
  //this forbids return (x:class Any): class Any is forbidden in order to prevent casting it to "class Foo" even if Foo was still not coherent
  //we also forbid return (x:class P) for any P without methods: a P with methods can not be redirected to Any.
  D|- e0~>  e' :  T3 <=T2|Ts;Ps


(mcall)
D |-  e.m(x1:e1..xn:en) ~> e'0.m[P0](x1:e'1..xn:e'n)  : T <= T'| Tr0 U..U Trn U (empty;Ps)
  //e0 will be of form chain
  where
  e0=staticDispatch(D.p,D.G,e)
  guessType(D.p,D.G,e0)= _ P0 //assert T'0.P=P0 //again, can go in error guess
  T0..Tn->T;Ps in methTypes(p,P0,m(x1..xn)) //can be not available, error similar to before for guess?
  D.p|-T <= T'
  forall i 0..n D|- ei ~> e'i : T'i <=Ti | Tri //T'0 is correctly a free variable


(xUpdate)
D |-x:=e ~> x:=e' :imm Void <= T | Tr
  where
  D.G(x).var?=var
  D.p|- imm Void <= T
  D|- e ~> e':_<=D.G(x).T|Tr
  assert not fwd_or_fwd%_in(D.G(x).T)

(using)
 D |- use P check m(x1:e1.. xn:en) e0 ~>use P check m(x1:e'1.. xn:e'n) e'0 :T0 <= T | Tr0 U..U Trn
 where
   plugin(D.p,P,m(x1..xn))=plg, T1..Tn->T0;empty //plg is a free variable, in the small step reduction would be the function representing the behaviour
   //plugin/meth not found error //assert T0..Tn exists in p
   D.p|-T0 <= T
   forall i 0..n D|- ei ~> e'i : T'i <=Ti |Tri
//Note: what happen if a parameter take mut and the plugin throw error w.r.t. strong error safety? can we catch it soon?
//The idea is that I can still use the normal pattern to throw error if the plugin fail, but to catch that error we will have to go up the stack a lot.
//Now plugings are assumed to always ask for imm/class parameters

(capsule promotion)//we are discussing if some blocks may not be promotable:
//for example blocks with empty ds and ks.
Phase |p |G |- (ds ks e)~>(ds' ks' e'):capsule P <=mdf P | Tr
  where
  mdf in {capsule, imm, fwdImm, fwd%Imm}
  Phase |p |toLent(G) |-(ds ks e)~>(ds' ks' e'):mut P <=mut P   | Tr
//this rule is now "deterministic" in the sense that if typing the block give us a capsule directly,
//this rule can not be applied, since we require mut P <=mut P in the premise.
//this is another point where a variable 'x' can become undefined thanks to toLent(G)



(block)
Phase| p| G |- e ~>(ds' ks' e'0 [T]) : T <= T' | Tr'.capture(p,ks') U Tr U Tr0
  where
  (ds  ks  e0)=staticDispatch(p,G,e)
  G'=G/dom(ds)
  Phase| p| G'[ks] |- ds ~> ds' |Tr' | G0
  //[ks] removes fwdMut, but we wonder if they could stay and all would be sound?
  //here we have the info to capture a failure about ds and discover if
  //extant name (fwd[%]* x) was hidden by error safety or  modifiable name (capsule/mut/lent x)
  //was locked by error safety[cite the line number of the catch]
  Phase| p| G'| Tr' |- ks~> ks' : Ts <= T' | Tr
  Phase| p| G'[G0\dom(G')] |- e0~>e'0:T0 <=T' | Tr0
  T= mostGeneralMdf({T0.mdf,Ts.mdfs}) T'.P //set of Mdfs admits no single most general mdf
  // assert D.p|-T <= T'


------------------------------------------------------
2 Secondary Judgements
------------------------------------------------------
Phase| p| G |- ds ~> ds'| Tr | G0
  where ds' is an annotated version of ds.
  The resulting G0 is the enriched G containing info about ds too.

//note: Ts are all there since guessed before. //TODO: code need to change about this rule thanks to staticDispatch
(ds)  // G is clipped for error safety; G' is clipped and complete
Phase| p| G |- var?0 T0 x0=e0 ..var?n Tn xn=en,  ds ~>
               var?0 T0 x0=e'0..var?n Tn xn=e'n, ds'|Tr U Tr' | G3
  where
  dom(ds) disjoint FV(e0..en)
  G'= G[ fwd( onlyMutOrImm(x0:T0..xn:Tn)) ]
  for i in 0..n: Phase| p| G'|-ei~>e'i: T'i <= fwd% Ti | Tri
  Tr=Tr0 U .. U Trn
  if fwd_or_fwd%_in Tr.Ts
    then x0..xn disjoint FV(e0..en)//returning unresolved items from cycles is prohibited
  if fwd_or_fwd%_in { G(x) | x in FV(e0..en) } // x0..xn already excluded
    then G0=G[fwd%(x0:T0..xn:Tn)]
    otherwise G0=G[x0:var?0 T0 ..xn:var?n Tn]
  Phase| p| G0|- ds ~> ds'|Tr' | G3


(dsEmpty)
Phase| p| G |- empty ~> empty| empty;empty | G


-----------------------
D |Tr |- k ~> k':T <=T' |Tr'
  where k' is an annotated version of catch k and k.e is of type T
  we need the Tr of the ds to extract the mdf for caught returns
  Tr' contains only the throws from the catch k itself.

(catch)
   // P is the declared caught path
   // T0 is the actual caught type, based on the types which can be thrown in context
   // T is the type of the expression, based on x being bound T0
Phase| p| G| Tr |- catch throw P x e ~> catch throw P x e' :T <= T' | Tr'
  where
  mdf = mostGeneralMdf(throw,Tr) //set of Mdfs admits no single most general mdf, or mdfs is empty
  //inconsistent set of thrown things, which do not share a most
  //general modifier [list of line numbers of the throws]
  T0 = mdf P
  not catchRethrow(catch throw P x e)
  Phase| p| G[x:T0]|- e ~> e' : T <= T' | Tr'
  if mdf=class then P in {Any,Library,Void} or class in p(P).mhs.mdfs
//Note about former line: having A<=IA,
//class IA ia=A
//is ok only if IA has class methods, otherwise if A become interface by sum, it would broke.
//for consistency,
//class IA ia=(return A catch class IA x x error void)
//should also be allowed only if IA has class methods


(catch precise any)//notice, needs to be Any, it can't be
//(exception A() exception B() catch exception C x useXAsB(x) )
//because even if A unrelated B, C; B <C    may be somewhere far away:: D extends A, C
Phase |p |G |Tr|-catch return Any x x ~> catch return T'.P x x:T<=T' | Tr'
  where
  not catchRethrow(catch return Any x e)
  forall T0 in Tr.Ts p |-T0.P<=T'.P//this line is not redundant: otherwise we may change the semantic and not capture something
  Phase| p| G| Tr |- catch return T'.P x x ~> catch return T'.P x x :T <= T' | Tr'
//Note: we limit e=x to avoid mess in rename catch return Any x x.foo()

(catch and rethrow any)// could be sugared as "on throw doAndPropagate e"
Phase |p |G |Tr|-catch throw Any x (e0 throw x) ~> catch throw Any x (e0' throw x): T<=T | Tr
  where //Note: e0, e, e0',e' are using the sugar imm Void x=e == e
  e0=(e catch error Any z void void)
  e0'=(e' catch error Any z void void)
  Phase |p |G\x |- e ~> e':_ <=imm Void | emptyTr
  catchRethrow(catch throw Any x(e0 throw x))

------------
D| Tr |- ks ~> k's:Ts <= T | Tr'
  just types a set of catches.

//TODO: check that this kind of things work {Bar:{}   method m (foo catch exception Bar x e1 e0)  } redirect Bar->Any
//Note: the new idea is that catch throw Any will catch all that can be thrown,
// if not of form catchRethrow(k); in that case *only* the catchRethrow rule will apply
(catchMany)
D| Tr |-k1..kn ~> k'1..k'n:T1..Tn <= T | Tr1 U .. U Trn
  where
  forall i in 1..n D| Tr |-ki ~> k'i:Ti <= T |Tri
  //we used to have Tr.capture(D.p,k1..ki-1) instead of D|Tr|-ki, but it was wrong in case of redirect; for example
  //Elem e=(return that catch return Elem x x catch return Any y error void)[redirect Elem in Any]
  //in this setting the second catch return Any would fail for "no return in scope"


-----------------------------------------------
 Phase |- p ~> L   and   p | Ps |- M ~> M'
 L is the typed/annotated version of p.top()
 M' is the annotated version of M
 and p.top() is the literal containing M


(library shallow norm)
Norm  |- p ~> p.top()
//assert forall P in norm(p).Ps p(P).Phase>=Norm
//assert p.top().Phase!=None

(library well typed)
Phase |- p ~> L'      //In implementation, if p.top().Phase>=Phase, L'=p.Top()
   where
   Phase in {Typed,Coherent}
   L0={interface? implements Ps M1..Mn Phase'}=norm(p)
   L'={interface? implements Ps M1'..Mn' max(Phase',Phase)}
   //no:assert forall P in Ps p(P).Phase>=Norm
   //for inner interfaces is false when typing Norm a class within an e in top
   forall i in 1..n
     Phase| p.updateTop(L0)| Ps |- Mi ~> Mi'
   if Phase=Coherent then coherent(p.udatateTop(L'))
   //or error not coherent set of abstr. methods list

(member nested)
Phase| p| Ps |-C:L ~>  C:L'
   where
   Phase |-p.push(C) ~> L'

(member method)
Phase| p| Ps |-M ~> M'
  where
  M =refine? mdf method T m(T1 x1 .. Tn xn)exceptions Ps0 e?
  M'=refine? mdf method T m(T1 x1 .. Tn xn)exceptions Ps0 e?'
  G=this:mdf This0,x1:T1,..,xn:Tn
  if e?=e then
    Typed| p| G |- e ~>  e?':_ <=fwd% T | empty;Ps1
    forall P1 in Ps1 exists P0 in Ps0 such that p|-P1<=P0
  else
    e?=e?'
  if ?refine=empty, then not exists P in Ps such that M.ms in dom(p(P))
  if ?refine=refine then
    forall P in Ps such that p(P)(m(x1..xn))[from P]=M0 //that is, is defined
      all of the following hold:
      M0=refine?' mdf method T' m(T'1 x1..T'n xn)exceptions Ps'
      p|-T<= T' //method returns a type which is not a sybtype of its ancestor "name"
      p.equiv(T1,T'1)..p.equiv(Tn,T'n) //invalid type w.r.t. ancestor paramerer xi
      forall Pi in Ps0 exists Pj in Ps' such that p |- Pi<=Pj
      //or error: leaked exception P is not the subtype of a declared exception//description of error messages in the comments
      //or  method declares an exception (P) which is not a subtype of ancestor exceptions
